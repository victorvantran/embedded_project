
hello_uart_dma_idle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000822c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008530  08008530  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bac  20000074  080085ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c20  080085ac  00021c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001feaa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d08  00000000  00000000  0003ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00043c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00045488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005375  00000000  00000000  00046b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019314  00000000  00000000  0004bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff2a  00000000  00000000  000651d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d78  00000000  00000000  00165158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083a4 	.word	0x080083a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080083a4 	.word	0x080083a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <USER_UART_IRQHandler>:
char tx2Buffer[TX_BFR_SIZE];



void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <USER_UART_IRQHandler+0x3c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d110      	bne.n	800059c <USER_UART_IRQHandler+0x34>
	{
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	2b10      	cmp	r3, #16
 8000586:	d109      	bne.n	800059c <USER_UART_IRQHandler+0x34>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2210      	movs	r2, #16
 800058e:	621a      	str	r2, [r3, #32]
			printf("UART1 Idle IRQ Detected\r\n");
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <USER_UART_IRQHandler+0x40>)
 8000592:	f006 ffc1 	bl	8007518 <puts>
			USER_UART_IDLECallback(huart);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f808 	bl	80005ac <USER_UART_IDLECallback>
		}
	}
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40004400 	.word	0x40004400
 80005a8:	080083c8 	.word	0x080083c8

080005ac <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(huart);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f003 f92b 	bl	8003810 <HAL_UART_DMAStop>

	uint8_t data_length = RX_BFR_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <USER_UART_IDLECallback+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005c6:	73fb      	strb	r3, [r7, #15]

	printf("Received Data(length = %d)\r\n", data_length);
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4619      	mov	r1, r3
 80005cc:	480e      	ldr	r0, [pc, #56]	; (8000608 <USER_UART_IDLECallback+0x5c>)
 80005ce:	f006 ff1d 	bl	800740c <iprintf>

	HAL_UART_Transmit(huart, rx2Buffer, data_length, HAL_MAX_DELAY);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	490c      	ldr	r1, [pc, #48]	; (800060c <USER_UART_IDLECallback+0x60>)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 f83f 	bl	8003660 <HAL_UART_Transmit>

	memset(rx2Buffer, 0, data_length);
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	461a      	mov	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <USER_UART_IDLECallback+0x60>)
 80005ea:	f006 ff07 	bl	80073fc <memset>
	data_length = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]


	HAL_UART_Receive_DMA(huart, rx2Buffer, sizeof(rx2Buffer));
 80005f2:	2240      	movs	r2, #64	; 0x40
 80005f4:	4905      	ldr	r1, [pc, #20]	; (800060c <USER_UART_IDLECallback+0x60>)
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f003 f8c6 	bl	8003788 <HAL_UART_Receive_DMA>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200019a4 	.word	0x200019a4
 8000608:	080083e4 	.word	0x080083e4
 800060c:	20001964 	.word	0x20001964

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fc60 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f82c 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f928 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000620:	f000 f900 	bl	8000824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000624:	f000 f8ce 	bl	80007c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000628:	f000 f89c 	bl	8000764 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Fixed-sized command of three bytes <C> */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <main+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <main+0x50>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f042 0210 	orr.w	r2, r2, #16
 800063a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart2, rx2Buffer, sizeof(rx2Buffer));
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <main+0x54>)
 8000640:	4807      	ldr	r0, [pc, #28]	; (8000660 <main+0x50>)
 8000642:	f003 f8a1 	bl	8003788 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart2, rx2Buffer, sizeof(rx2Buffer));

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000646:	f004 f94d 	bl	80048e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <main+0x58>)
 800064c:	2100      	movs	r1, #0
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <main+0x5c>)
 8000650:	f004 f992 	bl	8004978 <osThreadNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <main+0x60>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f004 f967 	bl	800492c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x4e>
 8000660:	20001afc 	.word	0x20001afc
 8000664:	20001964 	.word	0x20001964
 8000668:	08008424 	.word	0x08008424
 800066c:	08000941 	.word	0x08000941
 8000670:	200019ec 	.word	0x200019ec

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b8      	sub	sp, #224	; 0xe0
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 feba 	bl	80073fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2288      	movs	r2, #136	; 0x88
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 feac 	bl	80073fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f9c0 	bl	8001a6c <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006f2:	f000 f945 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000714:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000718:	2104      	movs	r1, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fd8c 	bl	8002238 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000726:	f000 f92b 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800072a:	2303      	movs	r3, #3
 800072c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f001 ffb5 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000744:	f000 f91c 	bl	8000980 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074c:	f001 f938 	bl	80019c0 <HAL_PWREx_ControlVoltageScaling>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000756:	f000 f913 	bl	8000980 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	37e0      	adds	r7, #224	; 0xe0
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART1_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART1_UART_Init+0x58>)
 80007a8:	f002 ff0c 	bl	80035c4 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f8e5 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20001a38 	.word	0x20001a38
 80007c0:	40013800 	.word	0x40013800

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f002 fedc 	bl	80035c4 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8b5 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20001afc 	.word	0x20001afc
 8000820:	40004400 	.word	0x40004400

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DMA_Init+0x48>)
 800082c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_DMA_Init+0x48>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6493      	str	r3, [r2, #72]	; 0x48
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x48>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2105      	movs	r1, #5
 8000846:	2010      	movs	r0, #16
 8000848:	f000 fc3e 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800084c:	2010      	movs	r0, #16
 800084e:	f000 fc57 	bl	8001100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	2011      	movs	r0, #17
 8000858:	f000 fc36 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800085c:	2011      	movs	r0, #17
 800085e:	f000 fc4f 	bl	8001100 <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_GPIO_Init+0xa4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xa8>)
 80008ec:	f001 f842 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0xa8>)
 8000908:	f000 fe8a 	bl	8001620 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400

0800091c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000924:	1d39      	adds	r1, r7, #4
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092a:	2201      	movs	r2, #1
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <__io_putchar+0x20>)
 800092e:	f002 fe97 	bl	8003660 <HAL_UART_Transmit>
	return ch;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20001afc 	.word	0x20001afc

08000940 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
  	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

  	printf("Task\r\n");
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <StartUARTTask+0x18>)
 800094a:	f006 fde5 	bl	8007518 <puts>
  	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
    osDelay(200);
 800094e:	20c8      	movs	r0, #200	; 0xc8
 8000950:	f004 f8a4 	bl	8004a9c <osDelay>
  	printf("Task\r\n");
 8000954:	e7f8      	b.n	8000948 <StartUARTTask+0x8>
 8000956:	bf00      	nop
 8000958:	08008404 	.word	0x08008404

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 fad3 	bl	8000f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_MspInit+0x4c>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_MspInit+0x4c>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 fb7d 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a61      	ldr	r2, [pc, #388]	; (8000b80 <HAL_UART_MspInit+0x1a4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d132      	bne.n	8000a64 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fe:	4b61      	ldr	r3, [pc, #388]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	4a60      	ldr	r2, [pc, #384]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a5a      	ldr	r2, [pc, #360]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a40:	2307      	movs	r3, #7
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fde7 	bl	8001620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2025      	movs	r0, #37	; 0x25
 8000a58:	f000 fb36 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5c:	2025      	movs	r0, #37	; 0x25
 8000a5e:	f000 fb4f 	bl	8001100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	e088      	b.n	8000b76 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <HAL_UART_MspInit+0x1ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	f040 8083 	bne.w	8000b76 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a70:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a74:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7c:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	4a3d      	ldr	r2, [pc, #244]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <HAL_UART_MspInit+0x1a8>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fdaf 	bl	8001620 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000ac4:	4a32      	ldr	r2, [pc, #200]	; (8000b90 <HAL_UART_MspInit+0x1b4>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000aee:	2220      	movs	r2, #32
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000af8:	4824      	ldr	r0, [pc, #144]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000afa:	f000 fb0f 	bl	800111c <HAL_DMA_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000b04:	f7ff ff3c 	bl	8000980 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000b0c:	671a      	str	r2, [r3, #112]	; 0x70
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <HAL_UART_MspInit+0x1b0>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b16:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_UART_MspInit+0x1bc>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b4c:	f000 fae6 	bl	800111c <HAL_DMA_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000b56:	f7ff ff13 	bl	8000980 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <HAL_UART_MspInit+0x1b8>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2105      	movs	r1, #5
 8000b6a:	2026      	movs	r0, #38	; 0x26
 8000b6c:	f000 faac 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	2026      	movs	r0, #38	; 0x26
 8000b72:	f000 fac5 	bl	8001100 <HAL_NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	200019a4 	.word	0x200019a4
 8000b90:	4002006c 	.word	0x4002006c
 8000b94:	200019f0 	.word	0x200019f0
 8000b98:	40020080 	.word	0x40020080

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2036      	movs	r0, #54	; 0x36
 8000bb2:	f000 fa89 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb6:	2036      	movs	r0, #54	; 0x36
 8000bb8:	f000 faa2 	bl	8001100 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_InitTick+0x9c>)
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_InitTick+0x9c>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_InitTick+0x9c>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 0210 	add.w	r2, r7, #16
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fcd0 	bl	8002584 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be4:	f001 fca2 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8000be8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_InitTick+0xa0>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <HAL_InitTick+0xa8>)
 8000bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c1a:	f002 fa01 	bl	8003020 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_InitTick+0xa4>)
 8000c26:	f002 fa5d 	bl	80030e4 <HAL_TIM_Base_Start_IT>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	20001b80 	.word	0x20001b80
 8000c44:	40001000 	.word	0x40001000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <DMA1_Channel6_IRQHandler+0x10>)
 8000c7a:	f000 fbe6 	bl	800144a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200019a4 	.word	0x200019a4

08000c88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA1_Channel7_IRQHandler+0x10>)
 8000c8e:	f000 fbdc 	bl	800144a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200019f0 	.word	0x200019f0

08000c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART1_IRQHandler+0x10>)
 8000ca2:	f002 fe23 	bl	80038ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20001a38 	.word	0x20001a38

08000cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <USART2_IRQHandler+0x10>)
 8000cb6:	f7ff fc57 	bl	8000568 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20001afc 	.word	0x20001afc

08000cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM6_DAC_IRQHandler+0x10>)
 8000cca:	f002 fa7b 	bl	80031c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001b80 	.word	0x20001b80

08000cd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
	}

return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fdf5 	bl	800091c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f006 fad2 	bl	800738c <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20018000 	.word	0x20018000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	20001c20 	.word	0x20001c20

08000e20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <SystemInit+0x5c>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <SystemInit+0x5c>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <SystemInit+0x60>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x60>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <SystemInit+0x60>)
 8000e4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <SystemInit+0x60>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SystemInit+0x60>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <SystemInit+0x60>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SystemInit+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40021000 	.word	0x40021000

08000e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff ffca 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e8e:	e003      	b.n	8000e98 <LoopCopyDataInit>

08000e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e96:	3104      	adds	r1, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ea0:	d3f6      	bcc.n	8000e90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ea4:	e002      	b.n	8000eac <LoopFillZerobss>

08000ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea8:	f842 3b04 	str.w	r3, [r2], #4

08000eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <LoopForever+0x16>)
	cmp	r2, r3
 8000eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eb0:	d3f9      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f006 fa71 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fbab 	bl	8000610 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ec0:	08008538 	.word	0x08008538
	ldr	r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000ecc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ed0:	20001c20 	.word	0x20001c20

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_Init+0x3c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x3c>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 f8df 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fe51 	bl	8000b9c <HAL_InitTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	e001      	b.n	8000f0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f06:	f7ff fd41 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20001bcc 	.word	0x20001bcc

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20001bcc 	.word	0x20001bcc

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e098      	b.n	8001260 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <HAL_DMA_Init+0x150>)
 8001136:	429a      	cmp	r2, r3
 8001138:	d80f      	bhi.n	800115a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_DMA_Init+0x154>)
 8001142:	4413      	add	r3, r2
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <HAL_DMA_Init+0x158>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_DMA_Init+0x15c>)
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
 8001158:	e00e      	b.n	8001178 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <HAL_DMA_Init+0x160>)
 8001162:	4413      	add	r3, r2
 8001164:	4a43      	ldr	r2, [pc, #268]	; (8001274 <HAL_DMA_Init+0x158>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	009a      	lsls	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a42      	ldr	r2, [pc, #264]	; (8001280 <HAL_DMA_Init+0x164>)
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800118e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011d2:	d039      	beq.n	8001248 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <HAL_DMA_Init+0x15c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11a      	bne.n	8001214 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_DMA_Init+0x168>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 031c 	and.w	r3, r3, #28
 80011ea:	210f      	movs	r1, #15
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4924      	ldr	r1, [pc, #144]	; (8001284 <HAL_DMA_Init+0x168>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_DMA_Init+0x168>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f003 031c 	and.w	r3, r3, #28
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	491d      	ldr	r1, [pc, #116]	; (8001284 <HAL_DMA_Init+0x168>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
 8001212:	e019      	b.n	8001248 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_DMA_Init+0x16c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	f003 031c 	and.w	r3, r3, #28
 8001220:	210f      	movs	r1, #15
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	4917      	ldr	r1, [pc, #92]	; (8001288 <HAL_DMA_Init+0x16c>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_DMA_Init+0x16c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 031c 	and.w	r3, r3, #28
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	4911      	ldr	r1, [pc, #68]	; (8001288 <HAL_DMA_Init+0x16c>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40020407 	.word	0x40020407
 8001270:	bffdfff8 	.word	0xbffdfff8
 8001274:	cccccccd 	.word	0xcccccccd
 8001278:	40020000 	.word	0x40020000
 800127c:	bffdfbf8 	.word	0xbffdfbf8
 8001280:	40020400 	.word	0x40020400
 8001284:	400200a8 	.word	0x400200a8
 8001288:	400204a8 	.word	0x400204a8

0800128c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Start_IT+0x20>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e04b      	b.n	8001344 <HAL_DMA_Start_IT+0xb8>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d13a      	bne.n	8001336 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f96b 	bl	80015c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 020e 	orr.w	r2, r2, #14
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e00f      	b.n	8001324 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 020a 	orr.w	r2, r2, #10
 8001322:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e005      	b.n	8001342 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800133e:	2302      	movs	r3, #2
 8001340:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e022      	b.n	80013bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 020e 	bic.w	r2, r2, #14
 8001384:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 021c 	and.w	r2, r3, #28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d005      	beq.n	80013ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e029      	b.n	8001440 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020e 	bic.w	r2, r2, #14
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f003 021c 	and.w	r2, r3, #28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
    }
  }
  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f003 031c 	and.w	r3, r3, #28
 800146a:	2204      	movs	r2, #4
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x7a>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 021c 	and.w	r2, r3, #28
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2104      	movs	r1, #4
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d071      	beq.n	800159e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014c2:	e06c      	b.n	800159e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	2202      	movs	r2, #2
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02e      	beq.n	8001536 <HAL_DMA_IRQHandler+0xec>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d029      	beq.n	8001536 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10b      	bne.n	8001508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020a 	bic.w	r2, r2, #10
 80014fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f003 021c 	and.w	r2, r3, #28
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2102      	movs	r1, #2
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d038      	beq.n	800159e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001534:	e033      	b.n	800159e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 031c 	and.w	r3, r3, #28
 800153e:	2208      	movs	r2, #8
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d025      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f003 021c 	and.w	r2, r3, #28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
}
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 021c 	and.w	r2, r3, #28
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d108      	bne.n	8001604 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001602:	e007      	b.n	8001614 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e17f      	b.n	8001930 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8171 	beq.w	800192a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d00b      	beq.n	8001668 <HAL_GPIO_Init+0x48>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165c:	2b11      	cmp	r3, #17
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d118      	bne.n	8001708 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x128>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	6939      	ldr	r1, [r7, #16]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80ac 	beq.w	800192a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_GPIO_Init+0x330>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a5e      	ldr	r2, [pc, #376]	; (8001950 <HAL_GPIO_Init+0x330>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_GPIO_Init+0x330>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ea:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <HAL_GPIO_Init+0x334>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x242>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <HAL_GPIO_Init+0x338>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x23e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <HAL_GPIO_Init+0x33c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x23a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x340>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x236>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_GPIO_Init+0x344>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x232>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_GPIO_Init+0x348>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x22e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4a      	ldr	r2, [pc, #296]	; (800196c <HAL_GPIO_Init+0x34c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x22a>
 8001846:	2306      	movs	r3, #6
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800184a:	2307      	movs	r3, #7
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x244>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x244>
 8001862:	2300      	movs	r3, #0
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001874:	4937      	ldr	r1, [pc, #220]	; (8001954 <HAL_GPIO_Init+0x334>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_GPIO_Init+0x350>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_GPIO_Init+0x350>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_GPIO_Init+0x350>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_GPIO_Init+0x350>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x350>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x350>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_GPIO_Init+0x350>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_GPIO_Init+0x350>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	f47f ae78 	bne.w	8001630 <HAL_GPIO_Init+0x10>
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	48001400 	.word	0x48001400
 800196c:	48001800 	.word	0x48001800
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_PWREx_GetVoltageRange+0x18>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ce:	d130      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019dc:	d038      	beq.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e6:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2232      	movs	r2, #50	; 0x32
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a04:	e002      	b.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a18:	d102      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f2      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2c:	d110      	bne.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e00f      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3e:	d007      	beq.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000
 8001a64:	20000000 	.word	0x20000000
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e3d4      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	4ba1      	ldr	r3, [pc, #644]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a88:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80e4 	beq.w	8001c68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4a>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	f040 808b 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	f040 8087 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab6:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x62>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e3ac      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1a      	ldr	r2, [r3, #32]
 8001ad2:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x7c>
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_OscConfig+0x88>
 8001ae8:	4b86      	ldr	r3, [pc, #536]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d223      	bcs.n	8001b40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fd73 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e38d      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0c:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a7c      	ldr	r2, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4977      	ldr	r1, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	4972      	ldr	r1, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e025      	b.n	8001b8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6f      	ldr	r2, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	496a      	ldr	r1, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5e:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	4965      	ldr	r1, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fd33 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e34d      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8c:	f000 fc36 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	495a      	ldr	r1, [pc, #360]	; (8001d08 <HAL_RCC_OscConfig+0x29c>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_OscConfig+0x2a0>)
 8001baa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_RCC_OscConfig+0x2a4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fff3 	bl	8000b9c <HAL_InitTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d052      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	e331      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d032      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bcc:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f9b2 	bl	8000f40 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be0:	f7ff f9ae 	bl	8000f40 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e31a      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	493b      	ldr	r1, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e01a      	b.n	8001c68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a33      	ldr	r2, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f97f 	bl	8000f40 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c46:	f7ff f97b 	bl	8000f40 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e2e7      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1da>
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d074      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x21a>
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d064      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d160      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e2c4      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e01d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x286>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x26e>
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x286>
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x298>)
 8001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f921 	bl	8000f40 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d00:	e011      	b.n	8001d26 <HAL_RCC_OscConfig+0x2ba>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08008448 	.word	0x08008448
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f914 	bl	8000f40 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e280      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d26:	4baf      	ldr	r3, [pc, #700]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2a8>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f904 	bl	8000f40 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f900 	bl	8000f40 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e26c      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4e:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2d0>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d060      	beq.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x310>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d116      	bne.n	8001daa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7c:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_OscConfig+0x328>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e249      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	4990      	ldr	r1, [pc, #576]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	e040      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d023      	beq.n	8001dfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a8b      	ldr	r2, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f8bf 	bl	8000f40 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f8bb 	bl	8000f40 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e227      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd8:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	497c      	ldr	r1, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e018      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f89b 	bl	8000f40 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f897 	bl	8000f40 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e203      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e20:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e46:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f876 	bl	8000f40 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff f872 	bl	8000f40 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1de      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ef      	beq.n	8001e58 <HAL_RCC_OscConfig+0x3ec>
 8001e78:	e01b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e80:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f859 	bl	8000f40 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f855 	bl	8000f40 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1c1      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80a6 	beq.w	800200c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eec:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d118      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f04:	f7ff f81c 	bl	8000f40 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7ff f818 	bl	8000f40 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e184      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_RCC_OscConfig+0x57c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4d8>
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f42:	e024      	b.n	8001f8e <HAL_RCC_OscConfig+0x522>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d110      	bne.n	8001f6e <HAL_RCC_OscConfig+0x502>
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6c:	e00f      	b.n	8001f8e <HAL_RCC_OscConfig+0x522>
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe ffd3 	bl	8000f40 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe ffcf 	bl	8000f40 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e139      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ed      	beq.n	8001f9e <HAL_RCC_OscConfig+0x532>
 8001fc2:	e01a      	b.n	8001ffa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ffbc 	bl	8000f40 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fca:	e00f      	b.n	8001fec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe ffb8 	bl	8000f40 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d906      	bls.n	8001fec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e122      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fec:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e8      	bne.n	8001fcc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8108 	beq.w	8002226 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	2b02      	cmp	r3, #2
 800201c:	f040 80d0 	bne.w	80021c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	429a      	cmp	r2, r3
 8002032:	d130      	bne.n	8002096 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	3b01      	subs	r3, #1
 8002040:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d127      	bne.n	8002096 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d11f      	bne.n	8002096 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002060:	2a07      	cmp	r2, #7
 8002062:	bf14      	ite	ne
 8002064:	2201      	movne	r2, #1
 8002066:	2200      	moveq	r2, #0
 8002068:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206a:	4293      	cmp	r3, r2
 800206c:	d113      	bne.n	8002096 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d109      	bne.n	8002096 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	3b01      	subs	r3, #1
 8002090:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d06e      	beq.n	8002174 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d069      	beq.n	8002170 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800209c:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020a8:	4b61      	ldr	r3, [pc, #388]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b7      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c4:	f7fe ff3c 	bl	8000f40 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe ff38 	bl	8000f40 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0a4      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCC_OscConfig+0x7c8>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020fa:	3a01      	subs	r2, #1
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002104:	0212      	lsls	r2, r2, #8
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800210c:	0852      	lsrs	r2, r2, #1
 800210e:	3a01      	subs	r2, #1
 8002110:	0552      	lsls	r2, r2, #21
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002118:	0852      	lsrs	r2, r2, #1
 800211a:	3a01      	subs	r2, #1
 800211c:	0652      	lsls	r2, r2, #25
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002124:	0912      	lsrs	r2, r2, #4
 8002126:	0452      	lsls	r2, r2, #17
 8002128:	430a      	orrs	r2, r1
 800212a:	4941      	ldr	r1, [pc, #260]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002146:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002148:	f7fe fefa 	bl	8000f40 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fef6 	bl	8000f40 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e062      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216e:	e05a      	b.n	8002226 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e059      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d152      	bne.n	8002226 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800218c:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002198:	f7fe fed2 	bl	8000f40 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fece 	bl	8000f40 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e03a      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x734>
 80021be:	e032      	b.n	8002226 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d02d      	beq.n	8002222 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021e4:	f023 0303 	bic.w	r3, r3, #3
 80021e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 80021f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fea1 	bl	8000f40 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fe9d 	bl	8000f40 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_OscConfig+0x7c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x796>
 8002220:	e001      	b.n	8002226 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	f99d808c 	.word	0xf99d808c

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0c8      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4961      	ldr	r1, [pc, #388]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b0      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d04c      	beq.n	8002322 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b56      	ldr	r3, [pc, #344]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d121      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e09e      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d115      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e092      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c0:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e086      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e07e      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	493f      	ldr	r1, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f2:	f7fe fe25 	bl	8000f40 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7fe fe21 	bl	8000f40 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e066      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 020c 	and.w	r2, r3, #12
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	429a      	cmp	r2, r3
 8002320:	d1eb      	bne.n	80022fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	492c      	ldr	r1, [pc, #176]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4924      	ldr	r1, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e036      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4918      	ldr	r1, [pc, #96]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4910      	ldr	r1, [pc, #64]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 f825 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fbe2 	bl	8000b9c <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	72fb      	strb	r3, [r7, #11]

  return status;
 80023dc:	7afb      	ldrb	r3, [r7, #11]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08008448 	.word	0x08008448
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d121      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11e      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e005      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d102      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_GetSysClockFreq+0x110>)
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e004      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d101      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_RCC_GetSysClockFreq+0x114>)
 8002482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d134      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xac>
 80024a0:	e005      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a4:	617b      	str	r3, [r7, #20]
      break;
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_GetSysClockFreq+0x114>)
 80024aa:	617b      	str	r3, [r7, #20]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	617b      	str	r3, [r7, #20]
      break;
 80024b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	3301      	adds	r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	fb02 f203 	mul.w	r2, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	0e5b      	lsrs	r3, r3, #25
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	3301      	adds	r3, #1
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f4:	69bb      	ldr	r3, [r7, #24]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	08008460 	.word	0x08008460
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	08008458 	.word	0x08008458

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800255c:	f7ff ffda 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0adb      	lsrs	r3, r3, #11
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4904      	ldr	r1, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08008458 	.word	0x08008458

08002584 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	220f      	movs	r2, #15
 8002592:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_RCC_GetClockConfig+0x60>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40022000 	.word	0x40022000

080025e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9d0 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
 8002606:	e014      	b.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002620:	f7ff f9c0 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 8002624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002638:	d10b      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d919      	bls.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2ba0      	cmp	r3, #160	; 0xa0
 8002644:	d902      	bls.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002646:	2302      	movs	r3, #2
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e013      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800264c:	2301      	movs	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e010      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d902      	bls.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002658:	2303      	movs	r3, #3
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e00a      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d102      	bne.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e004      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d101      	bne.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 0207 	bic.w	r2, r3, #7
 800267c:	4909      	ldr	r1, [pc, #36]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d041      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026cc:	d02a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d2:	d824      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026de:	d81e      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e8:	d010      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ea:	e018      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026ec:	4b86      	ldr	r3, [pc, #536]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a85      	ldr	r2, [pc, #532]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f8:	e015      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fabb 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800270a:	e00c      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3320      	adds	r3, #32
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fba6 	bl	8002e64 <RCCEx_PLLSAI2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800271c:	e003      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	74fb      	strb	r3, [r7, #19]
      break;
 8002722:	e000      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800272c:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273a:	4973      	ldr	r1, [pc, #460]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002742:	e001      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d041      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002758:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800275c:	d02a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800275e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002762:	d824      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800276a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800276e:	d81e      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d010      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800277a:	e018      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002788:	e015      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fa73 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800279a:	e00c      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3320      	adds	r3, #32
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fb5e 	bl	8002e64 <RCCEx_PLLSAI2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ac:	e003      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	74fb      	strb	r3, [r7, #19]
      break;
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027bc:	4b52      	ldr	r3, [pc, #328]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ca:	494f      	ldr	r1, [pc, #316]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027d2:	e001      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a0 	beq.w	8002926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a40      	ldr	r2, [pc, #256]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
 800280c:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002818:	2301      	movs	r3, #1
 800281a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002828:	f7fe fb8a 	bl	8000f40 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282e:	e009      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe fb86 	bl	8000f40 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	74fb      	strb	r3, [r7, #19]
        break;
 8002842:	e005      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d15c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002860:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01f      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	d019      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fb45 	bl	8000f40 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	e00b      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fb41 	bl	8000f40 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d902      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	74fb      	strb	r3, [r7, #19]
            break;
 80028d0:	e006      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ec      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f6:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028fe:	e009      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
 8002904:	e006      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002914:	7c7b      	ldrb	r3, [r7, #17]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	4a9d      	ldr	r2, [pc, #628]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002932:	4b98      	ldr	r3, [pc, #608]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f023 0203 	bic.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	4994      	ldr	r1, [pc, #592]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 020c 	bic.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	498c      	ldr	r1, [pc, #560]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002976:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4983      	ldr	r1, [pc, #524]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002998:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	497b      	ldr	r1, [pc, #492]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	4972      	ldr	r1, [pc, #456]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029dc:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	496a      	ldr	r1, [pc, #424]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	4961      	ldr	r1, [pc, #388]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a20:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	4959      	ldr	r1, [pc, #356]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a42:	4b54      	ldr	r3, [pc, #336]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	4950      	ldr	r1, [pc, #320]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	4948      	ldr	r1, [pc, #288]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	493f      	ldr	r1, [pc, #252]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d028      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	4937      	ldr	r1, [pc, #220]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad2:	60d3      	str	r3, [r2, #12]
 8002ad4:	e011      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ade:	d10c      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f8c8 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d028      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	491f      	ldr	r1, [pc, #124]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b30:	60d3      	str	r3, [r2, #12]
 8002b32:	e011      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f899 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d109      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a02      	ldr	r2, [pc, #8]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
 8002b90:	e014      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f867 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02f      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd6:	4928      	ldr	r1, [pc, #160]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f844 	bl	8002c7c <RCCEx_PLLSAI1_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	74bb      	strb	r3, [r7, #18]
 8002c02:	e011      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3320      	adds	r3, #32
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f925 	bl	8002e64 <RCCEx_PLLSAI2_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c42:	490d      	ldr	r1, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c66:	4904      	ldr	r1, [pc, #16]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c8a:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c96:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d10d      	bne.n	8002cc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d047      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e044      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d018      	beq.n	8002d02 <RCCEx_PLLSAI1_Config+0x86>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d825      	bhi.n	8002d20 <RCCEx_PLLSAI1_Config+0xa4>
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d002      	beq.n	8002cde <RCCEx_PLLSAI1_Config+0x62>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d009      	beq.n	8002cf0 <RCCEx_PLLSAI1_Config+0x74>
 8002cdc:	e020      	b.n	8002d20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cde:	4b60      	ldr	r3, [pc, #384]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11d      	bne.n	8002d26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cee:	e01a      	b.n	8002d26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf0:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e013      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d02:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d1e:	e006      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e004      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	4944      	ldr	r1, [pc, #272]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d17d      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a40      	ldr	r2, [pc, #256]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe f8ec 	bl	8000f40 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d6a:	e009      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d6c:	f7fe f8e8 	bl	8000f40 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d7e:	e005      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d80:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ef      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d160      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	0912      	lsrs	r2, r2, #4
 8002db0:	0452      	lsls	r2, r2, #17
 8002db2:	430a      	orrs	r2, r1
 8002db4:	492a      	ldr	r1, [pc, #168]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	610b      	str	r3, [r1, #16]
 8002dba:	e027      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d112      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6892      	ldr	r2, [r2, #8]
 8002dd2:	0211      	lsls	r1, r2, #8
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6912      	ldr	r2, [r2, #16]
 8002dd8:	0852      	lsrs	r2, r2, #1
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	0552      	lsls	r2, r2, #21
 8002dde:	430a      	orrs	r2, r1
 8002de0:	491f      	ldr	r1, [pc, #124]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	610b      	str	r3, [r1, #16]
 8002de6:	e011      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	0211      	lsls	r1, r2, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6952      	ldr	r2, [r2, #20]
 8002dfe:	0852      	lsrs	r2, r2, #1
 8002e00:	3a01      	subs	r2, #1
 8002e02:	0652      	lsls	r2, r2, #25
 8002e04:	430a      	orrs	r2, r1
 8002e06:	4916      	ldr	r1, [pc, #88]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe f892 	bl	8000f40 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e1e:	e009      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e20:	f7fe f88e 	bl	8000f40 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	73fb      	strb	r3, [r7, #15]
          break;
 8002e32:	e005      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ef      	beq.n	8002e20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	4904      	ldr	r1, [pc, #16]	; (8002e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e72:	4b6a      	ldr	r3, [pc, #424]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d018      	beq.n	8002eb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10d      	bne.n	8002eaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
       ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e96:	4b61      	ldr	r3, [pc, #388]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d047      	beq.n	8002f3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e044      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d018      	beq.n	8002eea <RCCEx_PLLSAI2_Config+0x86>
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d825      	bhi.n	8002f08 <RCCEx_PLLSAI2_Config+0xa4>
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <RCCEx_PLLSAI2_Config+0x62>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d009      	beq.n	8002ed8 <RCCEx_PLLSAI2_Config+0x74>
 8002ec4:	e020      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ec6:	4b55      	ldr	r3, [pc, #340]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11d      	bne.n	8002f0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed6:	e01a      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d116      	bne.n	8002f12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee8:	e013      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eea:	4b4c      	ldr	r3, [pc, #304]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f06:	e006      	b.n	8002f16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e004      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	430b      	orrs	r3, r1
 8002f34:	4939      	ldr	r1, [pc, #228]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d167      	bne.n	8003010 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a35      	ldr	r2, [pc, #212]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fd fff8 	bl	8000f40 <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f54:	f7fd fff4 	bl	8000f40 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
        break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ef      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d14a      	bne.n	8003010 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d111      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	0211      	lsls	r1, r2, #8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	0912      	lsrs	r2, r2, #4
 8002f98:	0452      	lsls	r2, r2, #17
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	491f      	ldr	r1, [pc, #124]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	614b      	str	r3, [r1, #20]
 8002fa2:	e011      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	0211      	lsls	r1, r2, #8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6912      	ldr	r2, [r2, #16]
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	0652      	lsls	r2, r2, #25
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	4916      	ldr	r1, [pc, #88]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a13      	ldr	r2, [pc, #76]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fd ffb4 	bl	8000f40 <HAL_GetTick>
 8002fd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fda:	e009      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fdc:	f7fd ffb0 	bl	8000f40 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d902      	bls.n	8002ff0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	73fb      	strb	r3, [r7, #15]
          break;
 8002fee:	e005      	b.n	8002ffc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4904      	ldr	r1, [pc, #16]	; (800301c <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000

08003020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e049      	b.n	80030c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f841 	bl	80030ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 f9f8 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e04f      	b.n	800319c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003126:	d018      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_TIM_Base_Start_IT+0xc8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_TIM_Base_Start_IT+0x76>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d115      	bne.n	8003186 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003162:	4013      	ands	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d015      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0xb4>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d011      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	e008      	b.n	8003198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e000      	b.n	800319a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003198:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40013400 	.word	0x40013400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	00010007 	.word	0x00010007

080031c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0202 	mvn.w	r2, #2
 80031f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f905 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8f7 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f908 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0204 	mvn.w	r2, #4
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8db 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8cd 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8de 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0208 	mvn.w	r2, #8
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2204      	movs	r2, #4
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8b1 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8a3 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8b4 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0210 	mvn.w	r2, #16
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2208      	movs	r2, #8
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f887 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f879 	bl	8003402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f88a 	bl	800342a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0201 	mvn.w	r2, #1
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fb0a 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f914 	bl	800359c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d10e      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d107      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f907 	bl	80035b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d10e      	bne.n	80033ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d107      	bne.n	80033ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f838 	bl	800343e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d10e      	bne.n	80033fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0220 	mvn.w	r2, #32
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8c7 	bl	8003588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3d      	ldr	r2, [pc, #244]	; (800356c <TIM_Base_SetConfig+0x118>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <TIM_Base_SetConfig+0x120>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <TIM_Base_SetConfig+0x114>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2c      	ldr	r2, [pc, #176]	; (800356c <TIM_Base_SetConfig+0x118>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <TIM_Base_SetConfig+0x11c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <TIM_Base_SetConfig+0x120>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a29      	ldr	r2, [pc, #164]	; (8003578 <TIM_Base_SetConfig+0x124>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a28      	ldr	r2, [pc, #160]	; (800357c <TIM_Base_SetConfig+0x128>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x9a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <TIM_Base_SetConfig+0x130>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <TIM_Base_SetConfig+0x128>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a10      	ldr	r2, [pc, #64]	; (8003580 <TIM_Base_SetConfig+0x12c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0xf8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <TIM_Base_SetConfig+0x130>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e040      	b.n	8003658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f9f8 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fba8 	bl	8003d58 <UART_SetConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fe26 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fead 	bl	80043b0 <UART_CheckIdleState>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003674:	2b20      	cmp	r3, #32
 8003676:	f040 8082 	bne.w	800377e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_UART_Transmit+0x26>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07a      	b.n	8003780 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_UART_Transmit+0x38>
 8003694:	2302      	movs	r3, #2
 8003696:	e073      	b.n	8003780 <HAL_UART_Transmit+0x120>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2221      	movs	r2, #33	; 0x21
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ae:	f7fd fc47 	bl	8000f40 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036cc:	d108      	bne.n	80036e0 <HAL_UART_Transmit+0x80>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	e003      	b.n	80036e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036f0:	e02d      	b.n	800374e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fea0 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e039      	b.n	8003780 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371e:	b292      	uxth	r2, r2
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	3302      	adds	r3, #2
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	e008      	b.n	800373c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b292      	uxth	r2, r2
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cb      	bne.n	80036f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fe6c 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e005      	b.n	8003780 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379a:	2b20      	cmp	r3, #32
 800379c:	d131      	bne.n	8003802 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_UART_Receive_DMA+0x22>
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02a      	b.n	8003804 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Receive_DMA+0x34>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e023      	b.n	8003804 <HAL_UART_Receive_DMA+0x7c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_UART_Receive_DMA+0x84>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037f0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fe9f 	bl	800453c <UART_Start_Receive_DMA>
 80037fe:	4603      	mov	r3, r0
 8003800:	e000      	b.n	8003804 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40008000 	.word	0x40008000

08003810 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d127      	bne.n	8003882 <HAL_UART_DMAStop+0x72>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b21      	cmp	r3, #33	; 0x21
 8003836:	d124      	bne.n	8003882 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003846:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fd79 	bl	800134c <HAL_DMA_Abort>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00d      	beq.n	800387c <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd fe9f 	bl	80015a8 <HAL_DMA_GetError>
 800386a:	4603      	mov	r3, r0
 800386c:	2b20      	cmp	r3, #32
 800386e:	d105      	bne.n	800387c <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2210      	movs	r2, #16
 8003874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e032      	b.n	80038e2 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fec9 	bl	8004614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d127      	bne.n	80038e0 <HAL_UART_DMAStop+0xd0>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b22      	cmp	r3, #34	; 0x22
 8003894:	d124      	bne.n	80038e0 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fd4a 	bl	800134c <HAL_DMA_Abort>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fe70 	bl	80015a8 <HAL_DMA_GetError>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d105      	bne.n	80038da <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2210      	movs	r2, #16
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e003      	b.n	80038e2 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 feaf 	bl	800463e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d113      	bne.n	8003944 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 81ce 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      }
      return;
 8003942:	e1c8      	b.n	8003cd6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80e3 	beq.w	8003b12 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4ba6      	ldr	r3, [pc, #664]	; (8003bf4 <HAL_UART_IRQHandler+0x308>)
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80d8 	beq.w	8003b12 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_UART_IRQHandler+0xa2>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2201      	movs	r2, #1
 800397c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_UART_IRQHandler+0xce>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2202      	movs	r2, #2
 80039a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b0:	f043 0204 	orr.w	r2, r3, #4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2204      	movs	r2, #4
 80039d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039dc:	f043 0202 	orr.w	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_UART_IRQHandler+0x15e>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8142 	beq.w	8003cda <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d004      	beq.n	8003a9a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d031      	beq.n	8003afe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fdcf 	bl	800463e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d123      	bne.n	8003af6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a4b      	ldr	r2, [pc, #300]	; (8003bf8 <HAL_UART_IRQHandler+0x30c>)
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fc78 	bl	80013c8 <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00f      	b.n	8003b0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f91c 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00b      	b.n	8003b0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f918 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e007      	b.n	8003b0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f914 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b0c:	e0e5      	b.n	8003cda <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	bf00      	nop
    return;
 8003b10:	e0e3      	b.n	8003cda <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 80a9 	bne.w	8003c6e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a3 	beq.w	8003c6e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 809d 	beq.w	8003c6e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d158      	bne.n	8003bfc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003b54:	893b      	ldrh	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80c1 	beq.w	8003cde <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b62:	893a      	ldrh	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f080 80ba 	bcs.w	8003cde <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	893a      	ldrh	r2, [r7, #8]
 8003b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12a      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0210 	bic.w	r2, r2, #16
 8003bcc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fbba 	bl	800134c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8a7 	bl	8003d40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bf2:	e074      	b.n	8003cde <HAL_UART_IRQHandler+0x3f2>
 8003bf4:	04000120 	.word	0x04000120
 8003bf8:	080047e9 	.word	0x080047e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d063      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d060      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f86a 	bl	8003d40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c6c:	e039      	b.n	8003ce2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <HAL_UART_IRQHandler+0x3a8>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fdda 	bl	8004846 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c92:	e029      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01a      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
    }
    return;
 8003cb8:	e015      	b.n	8003ce6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d011      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fda0 	bl	8004814 <UART_EndTransmit_IT>
    return;
 8003cd4:	e008      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e006      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003cda:	bf00      	nop
 8003cdc:	e004      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003ce6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop

08003cf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4bad      	ldr	r3, [pc, #692]	; (8004038 <UART_SetConfig+0x2e0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	69f9      	ldr	r1, [r7, #28]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4aa2      	ldr	r2, [pc, #648]	; (800403c <UART_SetConfig+0x2e4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a99      	ldr	r2, [pc, #612]	; (8004040 <UART_SetConfig+0x2e8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d121      	bne.n	8003e22 <UART_SetConfig+0xca>
 8003dde:	4b99      	ldr	r3, [pc, #612]	; (8004044 <UART_SetConfig+0x2ec>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d817      	bhi.n	8003e1c <UART_SetConfig+0xc4>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x9c>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e11 	.word	0x08003e11
 8003dfc:	08003e0b 	.word	0x08003e0b
 8003e00:	08003e17 	.word	0x08003e17
 8003e04:	2301      	movs	r3, #1
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e0e7      	b.n	8003fda <UART_SetConfig+0x282>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	76fb      	strb	r3, [r7, #27]
 8003e0e:	e0e4      	b.n	8003fda <UART_SetConfig+0x282>
 8003e10:	2304      	movs	r3, #4
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e0e1      	b.n	8003fda <UART_SetConfig+0x282>
 8003e16:	2308      	movs	r3, #8
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e0de      	b.n	8003fda <UART_SetConfig+0x282>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e0db      	b.n	8003fda <UART_SetConfig+0x282>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a88      	ldr	r2, [pc, #544]	; (8004048 <UART_SetConfig+0x2f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d132      	bne.n	8003e92 <UART_SetConfig+0x13a>
 8003e2c:	4b85      	ldr	r3, [pc, #532]	; (8004044 <UART_SetConfig+0x2ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d828      	bhi.n	8003e8c <UART_SetConfig+0x134>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0xe8>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e8d 	.word	0x08003e8d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e81 	.word	0x08003e81
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e8d 	.word	0x08003e8d
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e7b 	.word	0x08003e7b
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003e8d 	.word	0x08003e8d
 8003e70:	08003e87 	.word	0x08003e87
 8003e74:	2300      	movs	r3, #0
 8003e76:	76fb      	strb	r3, [r7, #27]
 8003e78:	e0af      	b.n	8003fda <UART_SetConfig+0x282>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	76fb      	strb	r3, [r7, #27]
 8003e7e:	e0ac      	b.n	8003fda <UART_SetConfig+0x282>
 8003e80:	2304      	movs	r3, #4
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e0a9      	b.n	8003fda <UART_SetConfig+0x282>
 8003e86:	2308      	movs	r3, #8
 8003e88:	76fb      	strb	r3, [r7, #27]
 8003e8a:	e0a6      	b.n	8003fda <UART_SetConfig+0x282>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	76fb      	strb	r3, [r7, #27]
 8003e90:	e0a3      	b.n	8003fda <UART_SetConfig+0x282>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6d      	ldr	r2, [pc, #436]	; (800404c <UART_SetConfig+0x2f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d120      	bne.n	8003ede <UART_SetConfig+0x186>
 8003e9c:	4b69      	ldr	r3, [pc, #420]	; (8004044 <UART_SetConfig+0x2ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	d013      	beq.n	8003ed2 <UART_SetConfig+0x17a>
 8003eaa:	2b30      	cmp	r3, #48	; 0x30
 8003eac:	d814      	bhi.n	8003ed8 <UART_SetConfig+0x180>
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d009      	beq.n	8003ec6 <UART_SetConfig+0x16e>
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d810      	bhi.n	8003ed8 <UART_SetConfig+0x180>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <UART_SetConfig+0x168>
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d006      	beq.n	8003ecc <UART_SetConfig+0x174>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x180>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	76fb      	strb	r3, [r7, #27]
 8003ec4:	e089      	b.n	8003fda <UART_SetConfig+0x282>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	76fb      	strb	r3, [r7, #27]
 8003eca:	e086      	b.n	8003fda <UART_SetConfig+0x282>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e083      	b.n	8003fda <UART_SetConfig+0x282>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e080      	b.n	8003fda <UART_SetConfig+0x282>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e07d      	b.n	8003fda <UART_SetConfig+0x282>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <UART_SetConfig+0x2f8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d120      	bne.n	8003f2a <UART_SetConfig+0x1d2>
 8003ee8:	4b56      	ldr	r3, [pc, #344]	; (8004044 <UART_SetConfig+0x2ec>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef4:	d013      	beq.n	8003f1e <UART_SetConfig+0x1c6>
 8003ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef8:	d814      	bhi.n	8003f24 <UART_SetConfig+0x1cc>
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d009      	beq.n	8003f12 <UART_SetConfig+0x1ba>
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d810      	bhi.n	8003f24 <UART_SetConfig+0x1cc>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0x1b4>
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d006      	beq.n	8003f18 <UART_SetConfig+0x1c0>
 8003f0a:	e00b      	b.n	8003f24 <UART_SetConfig+0x1cc>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	e063      	b.n	8003fda <UART_SetConfig+0x282>
 8003f12:	2302      	movs	r3, #2
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e060      	b.n	8003fda <UART_SetConfig+0x282>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e05d      	b.n	8003fda <UART_SetConfig+0x282>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e05a      	b.n	8003fda <UART_SetConfig+0x282>
 8003f24:	2310      	movs	r3, #16
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e057      	b.n	8003fda <UART_SetConfig+0x282>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a49      	ldr	r2, [pc, #292]	; (8004054 <UART_SetConfig+0x2fc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d125      	bne.n	8003f80 <UART_SetConfig+0x228>
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <UART_SetConfig+0x2ec>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d017      	beq.n	8003f74 <UART_SetConfig+0x21c>
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f48:	d817      	bhi.n	8003f7a <UART_SetConfig+0x222>
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d00b      	beq.n	8003f68 <UART_SetConfig+0x210>
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d811      	bhi.n	8003f7a <UART_SetConfig+0x222>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <UART_SetConfig+0x20a>
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d006      	beq.n	8003f6e <UART_SetConfig+0x216>
 8003f60:	e00b      	b.n	8003f7a <UART_SetConfig+0x222>
 8003f62:	2300      	movs	r3, #0
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e038      	b.n	8003fda <UART_SetConfig+0x282>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e035      	b.n	8003fda <UART_SetConfig+0x282>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e032      	b.n	8003fda <UART_SetConfig+0x282>
 8003f74:	2308      	movs	r3, #8
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e02f      	b.n	8003fda <UART_SetConfig+0x282>
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e02c      	b.n	8003fda <UART_SetConfig+0x282>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <UART_SetConfig+0x2e4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d125      	bne.n	8003fd6 <UART_SetConfig+0x27e>
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <UART_SetConfig+0x2ec>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f98:	d017      	beq.n	8003fca <UART_SetConfig+0x272>
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9e:	d817      	bhi.n	8003fd0 <UART_SetConfig+0x278>
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d00b      	beq.n	8003fbe <UART_SetConfig+0x266>
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003faa:	d811      	bhi.n	8003fd0 <UART_SetConfig+0x278>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <UART_SetConfig+0x260>
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d006      	beq.n	8003fc4 <UART_SetConfig+0x26c>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x278>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e00d      	b.n	8003fda <UART_SetConfig+0x282>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e00a      	b.n	8003fda <UART_SetConfig+0x282>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e007      	b.n	8003fda <UART_SetConfig+0x282>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e004      	b.n	8003fda <UART_SetConfig+0x282>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e001      	b.n	8003fda <UART_SetConfig+0x282>
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <UART_SetConfig+0x2e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f040 8087 	bne.w	80040f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe6:	7efb      	ldrb	r3, [r7, #27]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d837      	bhi.n	800405c <UART_SetConfig+0x304>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x29c>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	08004021 	.word	0x08004021
 8004000:	0800405d 	.word	0x0800405d
 8004004:	08004027 	.word	0x08004027
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800405d 	.word	0x0800405d
 8004014:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fa88 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 800401c:	6178      	str	r0, [r7, #20]
        break;
 800401e:	e022      	b.n	8004066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <UART_SetConfig+0x300>)
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e01f      	b.n	8004066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7fe f9e9 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 800402a:	6178      	str	r0, [r7, #20]
        break;
 800402c:	e01b      	b.n	8004066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e017      	b.n	8004066 <UART_SetConfig+0x30e>
 8004036:	bf00      	nop
 8004038:	efff69f3 	.word	0xefff69f3
 800403c:	40008000 	.word	0x40008000
 8004040:	40013800 	.word	0x40013800
 8004044:	40021000 	.word	0x40021000
 8004048:	40004400 	.word	0x40004400
 800404c:	40004800 	.word	0x40004800
 8004050:	40004c00 	.word	0x40004c00
 8004054:	40005000 	.word	0x40005000
 8004058:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	76bb      	strb	r3, [r7, #26]
        break;
 8004064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80f1 	beq.w	8004250 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	429a      	cmp	r2, r3
 800407c:	d305      	bcc.n	800408a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	d902      	bls.n	8004090 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	76bb      	strb	r3, [r7, #26]
 800408e:	e0df      	b.n	8004250 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4618      	mov	r0, r3
 8004094:	f04f 0100 	mov.w	r1, #0
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	020b      	lsls	r3, r1, #8
 80040a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040a6:	0202      	lsls	r2, r0, #8
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6849      	ldr	r1, [r1, #4]
 80040ac:	0849      	lsrs	r1, r1, #1
 80040ae:	4608      	mov	r0, r1
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	1814      	adds	r4, r2, r0
 80040b6:	eb43 0501 	adc.w	r5, r3, r1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	f7fc f8d2 	bl	8000270 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040da:	d308      	bcc.n	80040ee <UART_SetConfig+0x396>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d204      	bcs.n	80040ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	e0b0      	b.n	8004250 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	76bb      	strb	r3, [r7, #26]
 80040f2:	e0ad      	b.n	8004250 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d15c      	bne.n	80041b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040fe:	7efb      	ldrb	r3, [r7, #27]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x3fe>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x3b4>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe f9fc 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8004134:	6178      	str	r0, [r7, #20]
        break;
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe fa0e 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 800413c:	6178      	str	r0, [r7, #20]
        break;
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <UART_SetConfig+0x510>)
 8004142:	617b      	str	r3, [r7, #20]
        break;
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7fe f959 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 800414a:	6178      	str	r0, [r7, #20]
        break;
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	617b      	str	r3, [r7, #20]
        break;
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	76bb      	strb	r3, [r7, #26]
        break;
 800415e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d074      	beq.n	8004250 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005a      	lsls	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	b29b      	uxth	r3, r3
 800417c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d916      	bls.n	80041b2 <UART_SetConfig+0x45a>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d212      	bcs.n	80041b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f023 030f 	bic.w	r3, r3, #15
 8004194:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	89fa      	ldrh	r2, [r7, #14]
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	e04e      	b.n	8004250 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	76bb      	strb	r3, [r7, #26]
 80041b6:	e04b      	b.n	8004250 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041b8:	7efb      	ldrb	r3, [r7, #27]
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d827      	bhi.n	800420e <UART_SetConfig+0x4b6>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x46c>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004207 	.word	0x08004207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7fe f9a0 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 80041ec:	6178      	str	r0, [r7, #20]
        break;
 80041ee:	e013      	b.n	8004218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7fe f9b2 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 80041f4:	6178      	str	r0, [r7, #20]
        break;
 80041f6:	e00f      	b.n	8004218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <UART_SetConfig+0x510>)
 80041fa:	617b      	str	r3, [r7, #20]
        break;
 80041fc:	e00c      	b.n	8004218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe f8fd 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8004202:	6178      	str	r0, [r7, #20]
        break;
 8004204:	e008      	b.n	8004218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	617b      	str	r3, [r7, #20]
        break;
 800420c:	e004      	b.n	8004218 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	76bb      	strb	r3, [r7, #26]
        break;
 8004216:	bf00      	nop
    }

    if (pclk != 0U)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	085a      	lsrs	r2, r3, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	b29b      	uxth	r3, r3
 8004232:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d908      	bls.n	800424c <UART_SetConfig+0x4f4>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d204      	bcs.n	800424c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e001      	b.n	8004250 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800425c:	7ebb      	ldrb	r3, [r7, #26]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bdb0      	pop	{r4, r5, r7, pc}
 8004266:	bf00      	nop
 8004268:	00f42400 	.word	0x00f42400

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c0:	f7fc fdbe 	bl	8000f40 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d10e      	bne.n	80043f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f82d 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e023      	b.n	800443a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d10e      	bne.n	800441e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f817 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e00d      	b.n	800443a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e05e      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445a:	d05a      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fc fd70 	bl	8000f40 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11b      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004480:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e043      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02c      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	d124      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d091      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2222      	movs	r2, #34	; 0x22
 8004564:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	2b00      	cmp	r3, #0
 800456c:	d02b      	beq.n	80045c6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a25      	ldr	r2, [pc, #148]	; (8004608 <UART_Start_Receive_DMA+0xcc>)
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a24      	ldr	r2, [pc, #144]	; (800460c <UART_Start_Receive_DMA+0xd0>)
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a23      	ldr	r2, [pc, #140]	; (8004610 <UART_Start_Receive_DMA+0xd4>)
 8004584:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	2200      	movs	r2, #0
 800458c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3324      	adds	r3, #36	; 0x24
 8004598:	4619      	mov	r1, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	461a      	mov	r2, r3
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	f7fc fe73 	bl	800128c <HAL_DMA_Start_IT>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2210      	movs	r2, #16
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e01c      	b.n	8004600 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800469d 	.word	0x0800469d
 800460c:	08004735 	.word	0x08004735
 8004610:	0800476d 	.word	0x0800476d

08004614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800462a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004654:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0210 	bic.w	r2, r2, #16
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d12a      	bne.n	800470e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d107      	bne.n	800470e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0210 	bic.w	r2, r2, #16
 800470c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800471c:	4619      	mov	r1, r3
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fb0e 	bl	8003d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004724:	e002      	b.n	800472c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff faec 	bl	8003d04 <HAL_UART_RxCpltCallback>
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	2b01      	cmp	r3, #1
 8004748:	d109      	bne.n	800475e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff faf2 	bl	8003d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475c:	e002      	b.n	8004764 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fada 	bl	8003d18 <HAL_UART_RxHalfCpltCallback>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004784:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d109      	bne.n	80047a8 <UART_DMAError+0x3c>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	d106      	bne.n	80047a8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff ff36 	bl	8004614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d109      	bne.n	80047ca <UART_DMAError+0x5e>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d106      	bne.n	80047ca <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	f7ff ff3a 	bl	800463e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d0:	f043 0210 	orr.w	r2, r3, #16
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff faa6 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fa90 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff fa59 	bl	8003cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <__NVIC_SetPriority>:
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db0a      	blt.n	8004886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	490c      	ldr	r1, [pc, #48]	; (80048a8 <__NVIC_SetPriority+0x4c>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	440b      	add	r3, r1
 8004880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004884:	e00a      	b.n	800489c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4908      	ldr	r1, [pc, #32]	; (80048ac <__NVIC_SetPriority+0x50>)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3b04      	subs	r3, #4
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	440b      	add	r3, r1
 800489a:	761a      	strb	r2, [r3, #24]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000e100 	.word	0xe000e100
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <SysTick_Handler+0x1c>)
 80048b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048b8:	f001 fcfe 	bl	80062b8 <xTaskGetSchedulerState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048c2:	f002 fae9 	bl	8006e98 <xPortSysTickHandler>
  }
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048d4:	2100      	movs	r1, #0
 80048d6:	f06f 0004 	mvn.w	r0, #4
 80048da:	f7ff ffbf 	bl	800485c <__NVIC_SetPriority>
#endif
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ea:	f3ef 8305 	mrs	r3, IPSR
 80048ee:	603b      	str	r3, [r7, #0]
  return(result);
 80048f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e00c      	b.n	8004918 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <osKernelInitialize+0x44>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <osKernelInitialize+0x44>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800490c:	2300      	movs	r3, #0
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e002      	b.n	8004918 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004918:	687b      	ldr	r3, [r7, #4]
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000094 	.word	0x20000094

0800492c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
 8004936:	603b      	str	r3, [r7, #0]
  return(result);
 8004938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <osKernelStart+0x1a>
    stat = osErrorISR;
 800493e:	f06f 0305 	mvn.w	r3, #5
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	e010      	b.n	8004968 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <osKernelStart+0x48>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d109      	bne.n	8004962 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800494e:	f7ff ffbf 	bl	80048d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <osKernelStart+0x48>)
 8004954:	2202      	movs	r2, #2
 8004956:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004958:	f001 f866 	bl	8005a28 <vTaskStartScheduler>
      stat = osOK;
 800495c:	2300      	movs	r3, #0
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	e002      	b.n	8004968 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004968:	687b      	ldr	r3, [r7, #4]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000094 	.word	0x20000094

08004978 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af04      	add	r7, sp, #16
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004988:	f3ef 8305 	mrs	r3, IPSR
 800498c:	617b      	str	r3, [r7, #20]
  return(result);
 800498e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004990:	2b00      	cmp	r3, #0
 8004992:	d17e      	bne.n	8004a92 <osThreadNew+0x11a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d07b      	beq.n	8004a92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800499e:	2318      	movs	r3, #24
 80049a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d045      	beq.n	8004a3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <osThreadNew+0x48>
        name = attr->name;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <osThreadNew+0x6e>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b38      	cmp	r3, #56	; 0x38
 80049d8:	d805      	bhi.n	80049e6 <osThreadNew+0x6e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <osThreadNew+0x72>
        return (NULL);
 80049e6:	2300      	movs	r3, #0
 80049e8:	e054      	b.n	8004a94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <osThreadNew+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b5b      	cmp	r3, #91	; 0x5b
 8004a08:	d90a      	bls.n	8004a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <osThreadNew+0xa8>
        mem = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e010      	b.n	8004a42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <osThreadNew+0xca>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d108      	bne.n	8004a42 <osThreadNew+0xca>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <osThreadNew+0xca>
          mem = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e001      	b.n	8004a42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d110      	bne.n	8004a6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a50:	9202      	str	r2, [sp, #8]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fe0c 	bl	800567c <xTaskCreateStatic>
 8004a64:	4603      	mov	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e013      	b.n	8004a92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f107 0310 	add.w	r3, r7, #16
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fe57 	bl	8005736 <xTaskCreate>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <osThreadNew+0x11a>
            hTask = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a92:	693b      	ldr	r3, [r7, #16]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa4:	f3ef 8305 	mrs	r3, IPSR
 8004aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <osDelay+0x1c>
    stat = osErrorISR;
 8004ab0:	f06f 0305 	mvn.w	r3, #5
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e007      	b.n	8004ac8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 ff7c 	bl	80059c0 <vTaskDelay>
    }
  }

  return (stat);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <vApplicationGetIdleTaskMemory+0x30>)
 8004aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000098 	.word	0x20000098
 8004b04:	200000f4 	.word	0x200000f4

08004b08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a07      	ldr	r2, [pc, #28]	; (8004b34 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a06      	ldr	r2, [pc, #24]	; (8004b38 <vApplicationGetTimerTaskMemory+0x30>)
 8004b1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b26:	601a      	str	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	200002f4 	.word	0x200002f4
 8004b38:	20000350 	.word	0x20000350

08004b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f103 0208 	add.w	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f103 0208 	add.w	r2, r3, #8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f103 0208 	add.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d103      	bne.n	8004bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e00c      	b.n	8004c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3308      	adds	r3, #8
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e002      	b.n	8004c0c <vListInsert+0x2e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d2f6      	bcs.n	8004c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6892      	ldr	r2, [r2, #8]
 8004c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6852      	ldr	r2, [r2, #4]
 8004c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d103      	bne.n	8004c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cce:	f002 f851 	bl	8006d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	441a      	add	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d114      	bne.n	8004d4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3310      	adds	r3, #16
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f903 	bl	8005f3c <xTaskRemoveFromEventList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d012      	beq.n	8004d62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <xQueueGenericReset+0xcc>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	e009      	b.n	8004d62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3310      	adds	r3, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fef2 	bl	8004b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3324      	adds	r3, #36	; 0x24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff feed 	bl	8004b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d62:	f002 f837 	bl	8006dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d66:	2301      	movs	r3, #1
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	; 0x38
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <xQueueGenericCreateStatic+0x52>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <xQueueGenericCreateStatic+0x56>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueGenericCreateStatic+0x58>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <xQueueGenericCreateStatic+0x7e>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericCreateStatic+0x82>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericCreateStatic+0x84>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61fb      	str	r3, [r7, #28]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e12:	2350      	movs	r3, #80	; 0x50
 8004e14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d00a      	beq.n	8004e32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	61bb      	str	r3, [r7, #24]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f805 	bl	8004e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e002      	b.n	8004e86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e92:	2101      	movs	r1, #1
 8004e94:	69b8      	ldr	r0, [r7, #24]
 8004e96:	f7ff ff05 	bl	8004ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	; 0x38
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xQueueGenericSend+0x32>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <xQueueGenericSend+0x40>
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <xQueueGenericSend+0x44>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <xQueueGenericSend+0x46>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <xQueueGenericSend+0x60>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSend+0x6e>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <xQueueGenericSend+0x72>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <xQueueGenericSend+0x74>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f3a:	f001 f9bd 	bl	80062b8 <xTaskGetSchedulerState>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <xQueueGenericSend+0x9e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <xQueueGenericSend+0xa2>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <xQueueGenericSend+0xa4>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xQueueGenericSend+0xbe>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61fb      	str	r3, [r7, #28]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f6a:	f001 ff03 	bl	8006d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <xQueueGenericSend+0xd4>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d129      	bne.n	8004fd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f86:	f000 fa0b 	bl	80053a0 <prvCopyDataToQueue>
 8004f8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 ffcf 	bl	8005f3c <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <xQueueGenericSend+0x1f8>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	e00a      	b.n	8004fcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fbc:	4b39      	ldr	r3, [pc, #228]	; (80050a4 <xQueueGenericSend+0x1f8>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fcc:	f001 ff02 	bl	8006dd4 <vPortExitCritical>
				return pdPASS;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e063      	b.n	800509c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fda:	f001 fefb 	bl	8006dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e05c      	b.n	800509c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 f809 	bl	8006004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ff6:	f001 feed 	bl	8006dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ffa:	f000 fd7b 	bl	8005af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ffe:	f001 feb9 	bl	8006d74 <vPortEnterCritical>
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005008:	b25b      	sxtb	r3, r3
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500e:	d103      	bne.n	8005018 <xQueueGenericSend+0x16c>
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800501e:	b25b      	sxtb	r3, r3
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005024:	d103      	bne.n	800502e <xQueueGenericSend+0x182>
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502e:	f001 fed1 	bl	8006dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005032:	1d3a      	adds	r2, r7, #4
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fff8 	bl	8006030 <xTaskCheckForTimeOut>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d124      	bne.n	8005090 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005048:	f000 faa2 	bl	8005590 <prvIsQueueFull>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	3310      	adds	r3, #16
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ff1e 	bl	8005e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005062:	f000 fa2d 	bl	80054c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005066:	f000 fd53 	bl	8005b10 <xTaskResumeAll>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	f47f af7c 	bne.w	8004f6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <xQueueGenericSend+0x1f8>)
 8005074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	e772      	b.n	8004f6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005086:	f000 fa1b 	bl	80054c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800508a:	f000 fd41 	bl	8005b10 <xTaskResumeAll>
 800508e:	e76c      	b.n	8004f6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005092:	f000 fa15 	bl	80054c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005096:	f000 fd3b 	bl	8005b10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800509a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800509c:	4618      	mov	r0, r3
 800509e:	3738      	adds	r7, #56	; 0x38
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b090      	sub	sp, #64	; 0x40
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <xQueueGenericSendFromISR+0x3c>
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <xQueueGenericSendFromISR+0x40>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <xQueueGenericSendFromISR+0x42>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d103      	bne.n	8005112 <xQueueGenericSendFromISR+0x6a>
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <xQueueGenericSendFromISR+0x6e>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <xQueueGenericSendFromISR+0x70>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	623b      	str	r3, [r7, #32]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005132:	f001 ff01 	bl	8006f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005136:	f3ef 8211 	mrs	r2, BASEPRI
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	61fa      	str	r2, [r7, #28]
 800514c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800514e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <xQueueGenericSendFromISR+0xbc>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d12f      	bne.n	80051c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800517a:	f000 f911 	bl	80053a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800517e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005186:	d112      	bne.n	80051ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d016      	beq.n	80051be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fed1 	bl	8005f3c <xTaskRemoveFromEventList>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e007      	b.n	80051be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051b2:	3301      	adds	r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	b25a      	sxtb	r2, r3
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051c2:	e001      	b.n	80051c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3740      	adds	r7, #64	; 0x40
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <xQueueReceive+0x30>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	623b      	str	r3, [r7, #32]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <xQueueReceive+0x3e>
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <xQueueReceive+0x42>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueReceive+0x44>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueReceive+0x5e>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61fb      	str	r3, [r7, #28]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523e:	f001 f83b 	bl	80062b8 <xTaskGetSchedulerState>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <xQueueReceive+0x6e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <xQueueReceive+0x72>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <xQueueReceive+0x74>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xQueueReceive+0x8e>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61bb      	str	r3, [r7, #24]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526e:	f001 fd81 	bl	8006d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01f      	beq.n	80052be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005282:	f000 f8f7 	bl	8005474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1e5a      	subs	r2, r3, #1
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00f      	beq.n	80052b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	3310      	adds	r3, #16
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fe4e 	bl	8005f3c <xTaskRemoveFromEventList>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <xQueueReceive+0x1bc>)
 80052a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052b6:	f001 fd8d 	bl	8006dd4 <vPortExitCritical>
				return pdPASS;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e069      	b.n	8005392 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052c4:	f001 fd86 	bl	8006dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e062      	b.n	8005392 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052d2:	f107 0310 	add.w	r3, r7, #16
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fe94 	bl	8006004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052e0:	f001 fd78 	bl	8006dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e4:	f000 fc06 	bl	8005af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e8:	f001 fd44 	bl	8006d74 <vPortEnterCritical>
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f8:	d103      	bne.n	8005302 <xQueueReceive+0x122>
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005308:	b25b      	sxtb	r3, r3
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530e:	d103      	bne.n	8005318 <xQueueReceive+0x138>
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005318:	f001 fd5c 	bl	8006dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800531c:	1d3a      	adds	r2, r7, #4
 800531e:	f107 0310 	add.w	r3, r7, #16
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fe83 	bl	8006030 <xTaskCheckForTimeOut>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d123      	bne.n	8005378 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 f917 	bl	8005564 <prvIsQueueEmpty>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d017      	beq.n	800536c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	3324      	adds	r3, #36	; 0x24
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fda9 	bl	8005e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800534a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534c:	f000 f8b8 	bl	80054c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005350:	f000 fbde 	bl	8005b10 <xTaskResumeAll>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d189      	bne.n	800526e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <xQueueReceive+0x1bc>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	e780      	b.n	800526e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f000 f8a7 	bl	80054c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005372:	f000 fbcd 	bl	8005b10 <xTaskResumeAll>
 8005376:	e77a      	b.n	800526e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537a:	f000 f8a1 	bl	80054c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800537e:	f000 fbc7 	bl	8005b10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005384:	f000 f8ee 	bl	8005564 <prvIsQueueEmpty>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	f43f af6f 	beq.w	800526e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005392:	4618      	mov	r0, r3
 8005394:	3730      	adds	r7, #48	; 0x30
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10d      	bne.n	80053da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d14d      	bne.n	8005462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 ff92 	bl	80062f4 <xTaskPriorityDisinherit>
 80053d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	e043      	b.n	8005462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d119      	bne.n	8005414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6858      	ldr	r0, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	461a      	mov	r2, r3
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	f001 fff8 	bl	80073e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	441a      	add	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	d32b      	bcc.n	8005462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	e026      	b.n	8005462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68d8      	ldr	r0, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	461a      	mov	r2, r3
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	f001 ffde 	bl	80073e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	425b      	negs	r3, r3
 800542e:	441a      	add	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d207      	bcs.n	8005450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	425b      	negs	r3, r3
 800544a:	441a      	add	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d105      	bne.n	8005462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3b01      	subs	r3, #1
 8005460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800546a:	697b      	ldr	r3, [r7, #20]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d018      	beq.n	80054b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	441a      	add	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d303      	bcc.n	80054a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68d9      	ldr	r1, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	461a      	mov	r2, r3
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	f001 ff94 	bl	80073e0 <memcpy>
	}
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c8:	f001 fc54 	bl	8006d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d4:	e011      	b.n	80054fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d012      	beq.n	8005504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3324      	adds	r3, #36	; 0x24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fd2a 	bl	8005f3c <xTaskRemoveFromEventList>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ee:	f000 fe01 	bl	80060f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dce9      	bgt.n	80054d6 <prvUnlockQueue+0x16>
 8005502:	e000      	b.n	8005506 <prvUnlockQueue+0x46>
					break;
 8005504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800550e:	f001 fc61 	bl	8006dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005512:	f001 fc2f 	bl	8006d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800551c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551e:	e011      	b.n	8005544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d012      	beq.n	800554e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3310      	adds	r3, #16
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fd05 	bl	8005f3c <xTaskRemoveFromEventList>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005538:	f000 fddc 	bl	80060f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	3b01      	subs	r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005548:	2b00      	cmp	r3, #0
 800554a:	dce9      	bgt.n	8005520 <prvUnlockQueue+0x60>
 800554c:	e000      	b.n	8005550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800554e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	22ff      	movs	r2, #255	; 0xff
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005558:	f001 fc3c 	bl	8006dd4 <vPortExitCritical>
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800556c:	f001 fc02 	bl	8006d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005578:	2301      	movs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e001      	b.n	8005582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005582:	f001 fc27 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005598:	f001 fbec 	bl	8006d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d102      	bne.n	80055ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e001      	b.n	80055b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055b2:	f001 fc0f 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e014      	b.n	80055fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055d0:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <vQueueAddToRegistry+0x50>)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055dc:	490c      	ldr	r1, [pc, #48]	; (8005610 <vQueueAddToRegistry+0x50>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <vQueueAddToRegistry+0x50>)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055f2:	e006      	b.n	8005602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b07      	cmp	r3, #7
 80055fe:	d9e7      	bls.n	80055d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20001bd0 	.word	0x20001bd0

08005614 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005624:	f001 fba6 	bl	8006d74 <vPortEnterCritical>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562e:	b25b      	sxtb	r3, r3
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d103      	bne.n	800563e <vQueueWaitForMessageRestricted+0x2a>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005644:	b25b      	sxtb	r3, r3
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564a:	d103      	bne.n	8005654 <vQueueWaitForMessageRestricted+0x40>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005654:	f001 fbbe 	bl	8006dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3324      	adds	r3, #36	; 0x24
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fc3b 	bl	8005ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566e:	6978      	ldr	r0, [r7, #20]
 8005670:	f7ff ff26 	bl	80054c0 <prvUnlockQueue>
	}
 8005674:	bf00      	nop
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af04      	add	r7, sp, #16
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61fb      	str	r3, [r7, #28]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056c2:	235c      	movs	r3, #92	; 0x5c
 80056c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b5c      	cmp	r3, #92	; 0x5c
 80056ca:	d00a      	beq.n	80056e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	61bb      	str	r3, [r7, #24]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01e      	beq.n	8005728 <xTaskCreateStatic+0xac>
 80056ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005702:	2300      	movs	r3, #0
 8005704:	9303      	str	r3, [sp, #12]
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f850 	bl	80057c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005722:	f000 f8dd 	bl	80058e0 <prvAddNewTaskToReadyList>
 8005726:	e001      	b.n	800572c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800572c:	697b      	ldr	r3, [r7, #20]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3728      	adds	r7, #40	; 0x28
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08c      	sub	sp, #48	; 0x30
 800573a:	af04      	add	r7, sp, #16
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fc34 	bl	8006fb8 <pvPortMalloc>
 8005750:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005758:	205c      	movs	r0, #92	; 0x5c
 800575a:	f001 fc2d 	bl	8006fb8 <pvPortMalloc>
 800575e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
 800576c:	e005      	b.n	800577a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f001 fcee 	bl	8007150 <vPortFree>
 8005774:	e001      	b.n	800577a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	2300      	movs	r3, #0
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	9302      	str	r3, [sp, #8]
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f80e 	bl	80057c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a4:	69f8      	ldr	r0, [r7, #28]
 80057a6:	f000 f89b 	bl	80058e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e002      	b.n	80057b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b6:	69bb      	ldr	r3, [r7, #24]
	}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	21a5      	movs	r1, #165	; 0xa5
 80057da:	f001 fe0f 	bl	80073fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e8:	3b01      	subs	r3, #1
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	617b      	str	r3, [r7, #20]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01f      	beq.n	800585e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e012      	b.n	800584a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	7819      	ldrb	r1, [r3, #0]
 800582c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	3334      	adds	r3, #52	; 0x34
 8005834:	460a      	mov	r2, r1
 8005836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b0f      	cmp	r3, #15
 800584e:	d9e9      	bls.n	8005824 <prvInitialiseNewTask+0x64>
 8005850:	e000      	b.n	8005854 <prvInitialiseNewTask+0x94>
			{
				break;
 8005852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800585c:	e003      	b.n	8005866 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	2b37      	cmp	r3, #55	; 0x37
 800586a:	d901      	bls.n	8005870 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800586c:	2337      	movs	r3, #55	; 0x37
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2200      	movs	r2, #0
 8005880:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	3304      	adds	r3, #4
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff f978 	bl	8004b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	3318      	adds	r3, #24
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f973 	bl	8004b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2200      	movs	r2, #0
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	69b8      	ldr	r0, [r7, #24]
 80058c0:	f001 f928 	bl	8006b14 <pxPortInitialiseStack>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d6:	bf00      	nop
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058e8:	f001 fa44 	bl	8006d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058ec:	4b2d      	ldr	r3, [pc, #180]	; (80059a4 <prvAddNewTaskToReadyList+0xc4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <prvAddNewTaskToReadyList+0xc4>)
 80058f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058f6:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <prvAddNewTaskToReadyList+0xc8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058fe:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <prvAddNewTaskToReadyList+0xc8>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005904:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <prvAddNewTaskToReadyList+0xc4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d110      	bne.n	800592e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800590c:	f000 fc16 	bl	800613c <prvInitialiseTaskLists>
 8005910:	e00d      	b.n	800592e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <prvAddNewTaskToReadyList+0xcc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <prvAddNewTaskToReadyList+0xc8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	429a      	cmp	r2, r3
 8005926:	d802      	bhi.n	800592e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <prvAddNewTaskToReadyList+0xc8>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800592e:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <prvAddNewTaskToReadyList+0xd0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <prvAddNewTaskToReadyList+0xd0>)
 8005936:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <prvAddNewTaskToReadyList+0xd0>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <prvAddNewTaskToReadyList+0xd4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d903      	bls.n	8005954 <prvAddNewTaskToReadyList+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <prvAddNewTaskToReadyList+0xd4>)
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <prvAddNewTaskToReadyList+0xd8>)
 8005962:	441a      	add	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7ff f913 	bl	8004b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005970:	f001 fa30 	bl	8006dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <prvAddNewTaskToReadyList+0xcc>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800597c:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <prvAddNewTaskToReadyList+0xc8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d207      	bcs.n	800599a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <prvAddNewTaskToReadyList+0xdc>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000c24 	.word	0x20000c24
 80059a8:	20000750 	.word	0x20000750
 80059ac:	20000c30 	.word	0x20000c30
 80059b0:	20000c40 	.word	0x20000c40
 80059b4:	20000c2c 	.word	0x20000c2c
 80059b8:	20000754 	.word	0x20000754
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <vTaskDelay+0x60>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <vTaskDelay+0x30>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059f0:	f000 f880 	bl	8005af4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fcea 	bl	80063d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059fc:	f000 f888 	bl	8005b10 <xTaskResumeAll>
 8005a00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <vTaskDelay+0x64>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000c4c 	.word	0x20000c4c
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a36:	463a      	mov	r2, r7
 8005a38:	1d39      	adds	r1, r7, #4
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff f848 	bl	8004ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	9202      	str	r2, [sp, #8]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	460a      	mov	r2, r1
 8005a56:	4921      	ldr	r1, [pc, #132]	; (8005adc <vTaskStartScheduler+0xb4>)
 8005a58:	4821      	ldr	r0, [pc, #132]	; (8005ae0 <vTaskStartScheduler+0xb8>)
 8005a5a:	f7ff fe0f 	bl	800567c <xTaskCreateStatic>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <vTaskStartScheduler+0xbc>)
 8005a62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a64:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <vTaskStartScheduler+0xbc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e001      	b.n	8005a76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d102      	bne.n	8005a82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a7c:	f000 fcfc 	bl	8006478 <xTimerCreateTimerTask>
 8005a80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d116      	bne.n	8005ab6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	613b      	str	r3, [r7, #16]
}
 8005a9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <vTaskStartScheduler+0xc0>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aa4:	4b11      	ldr	r3, [pc, #68]	; (8005aec <vTaskStartScheduler+0xc4>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <vTaskStartScheduler+0xc8>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ab0:	f001 f8be 	bl	8006c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ab4:	e00e      	b.n	8005ad4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005abc:	d10a      	bne.n	8005ad4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	60fb      	str	r3, [r7, #12]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vTaskStartScheduler+0xaa>
}
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	0800840c 	.word	0x0800840c
 8005ae0:	0800610d 	.word	0x0800610d
 8005ae4:	20000c48 	.word	0x20000c48
 8005ae8:	20000c44 	.word	0x20000c44
 8005aec:	20000c30 	.word	0x20000c30
 8005af0:	20000c28 	.word	0x20000c28

08005af4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <vTaskSuspendAll+0x18>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <vTaskSuspendAll+0x18>)
 8005b00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	20000c4c 	.word	0x20000c4c

08005b10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b1e:	4b42      	ldr	r3, [pc, #264]	; (8005c28 <xTaskResumeAll+0x118>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xTaskResumeAll+0x2c>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	603b      	str	r3, [r7, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b3c:	f001 f91a 	bl	8006d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b40:	4b39      	ldr	r3, [pc, #228]	; (8005c28 <xTaskResumeAll+0x118>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	4a38      	ldr	r2, [pc, #224]	; (8005c28 <xTaskResumeAll+0x118>)
 8005b48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b4a:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <xTaskResumeAll+0x118>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d162      	bne.n	8005c18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b52:	4b36      	ldr	r3, [pc, #216]	; (8005c2c <xTaskResumeAll+0x11c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d05e      	beq.n	8005c18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b5a:	e02f      	b.n	8005bbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b5c:	4b34      	ldr	r3, [pc, #208]	; (8005c30 <xTaskResumeAll+0x120>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3318      	adds	r3, #24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff f871 	bl	8004c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff f86c 	bl	8004c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <xTaskResumeAll+0x124>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d903      	bls.n	8005b8c <xTaskResumeAll+0x7c>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <xTaskResumeAll+0x124>)
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4a27      	ldr	r2, [pc, #156]	; (8005c38 <xTaskResumeAll+0x128>)
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	f7fe fff7 	bl	8004b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4b23      	ldr	r3, [pc, #140]	; (8005c3c <xTaskResumeAll+0x12c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <xTaskResumeAll+0x130>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <xTaskResumeAll+0x120>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1cb      	bne.n	8005b5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bca:	f000 fb55 	bl	8006278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <xTaskResumeAll+0x134>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bda:	f000 f847 	bl	8005c6c <xTaskIncrementTick>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005be4:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <xTaskResumeAll+0x130>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f1      	bne.n	8005bda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bf6:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <xTaskResumeAll+0x134>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <xTaskResumeAll+0x130>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <xTaskResumeAll+0x138>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c18:	f001 f8dc 	bl	8006dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000c4c 	.word	0x20000c4c
 8005c2c:	20000c24 	.word	0x20000c24
 8005c30:	20000be4 	.word	0x20000be4
 8005c34:	20000c2c 	.word	0x20000c2c
 8005c38:	20000754 	.word	0x20000754
 8005c3c:	20000750 	.word	0x20000750
 8005c40:	20000c38 	.word	0x20000c38
 8005c44:	20000c34 	.word	0x20000c34
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <xTaskGetTickCount+0x1c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c58:	687b      	ldr	r3, [r7, #4]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000c28 	.word	0x20000c28

08005c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c76:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <xTaskIncrementTick+0x148>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 808f 	bne.w	8005d9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c80:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <xTaskIncrementTick+0x14c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c88:	4a4b      	ldr	r2, [pc, #300]	; (8005db8 <xTaskIncrementTick+0x14c>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d120      	bne.n	8005cd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c94:	4b49      	ldr	r3, [pc, #292]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	603b      	str	r3, [r7, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <xTaskIncrementTick+0x46>
 8005cb4:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <xTaskIncrementTick+0x154>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4a3f      	ldr	r2, [pc, #252]	; (8005dc0 <xTaskIncrementTick+0x154>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <xTaskIncrementTick+0x158>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <xTaskIncrementTick+0x158>)
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	f000 fad1 	bl	8006278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd6:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d349      	bcc.n	8005d74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cea:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf0:	601a      	str	r2, [r3, #0]
					break;
 8005cf2:	e03f      	b.n	8005d74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d203      	bcs.n	8005d14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d12:	e02f      	b.n	8005d74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe ff99 	bl	8004c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe ff90 	bl	8004c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <xTaskIncrementTick+0x160>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <xTaskIncrementTick+0xd8>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <xTaskIncrementTick+0x160>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <xTaskIncrementTick+0x164>)
 8005d52:	441a      	add	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe ff1b 	bl	8004b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <xTaskIncrementTick+0x168>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d3b8      	bcc.n	8005ce0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	e7b5      	b.n	8005ce0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d74:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <xTaskIncrementTick+0x168>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4915      	ldr	r1, [pc, #84]	; (8005dd0 <xTaskIncrementTick+0x164>)
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d901      	bls.n	8005d90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <xTaskIncrementTick+0x16c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e004      	b.n	8005da8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <xTaskIncrementTick+0x170>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <xTaskIncrementTick+0x170>)
 8005da6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da8:	697b      	ldr	r3, [r7, #20]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000c4c 	.word	0x20000c4c
 8005db8:	20000c28 	.word	0x20000c28
 8005dbc:	20000bdc 	.word	0x20000bdc
 8005dc0:	20000be0 	.word	0x20000be0
 8005dc4:	20000c3c 	.word	0x20000c3c
 8005dc8:	20000c44 	.word	0x20000c44
 8005dcc:	20000c2c 	.word	0x20000c2c
 8005dd0:	20000754 	.word	0x20000754
 8005dd4:	20000750 	.word	0x20000750
 8005dd8:	20000c38 	.word	0x20000c38
 8005ddc:	20000c34 	.word	0x20000c34

08005de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <vTaskSwitchContext+0xa8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dee:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <vTaskSwitchContext+0xac>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005df4:	e041      	b.n	8005e7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <vTaskSwitchContext+0xac>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e010      	b.n	8005e26 <vTaskSwitchContext+0x46>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	607b      	str	r3, [r7, #4]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <vTaskSwitchContext+0x3e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	491b      	ldr	r1, [pc, #108]	; (8005e94 <vTaskSwitchContext+0xb4>)
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0e4      	beq.n	8005e04 <vTaskSwitchContext+0x24>
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <vTaskSwitchContext+0xb4>)
 8005e46:	4413      	add	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	605a      	str	r2, [r3, #4]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d104      	bne.n	8005e6a <vTaskSwitchContext+0x8a>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <vTaskSwitchContext+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000c4c 	.word	0x20000c4c
 8005e8c:	20000c38 	.word	0x20000c38
 8005e90:	20000c2c 	.word	0x20000c2c
 8005e94:	20000754 	.word	0x20000754
 8005e98:	20000750 	.word	0x20000750

08005e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <vTaskPlaceOnEventList+0x44>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe fe87 	bl	8004bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	6838      	ldr	r0, [r7, #0]
 8005ed4:	f000 fa7c 	bl	80063d0 <prvAddCurrentTaskToDelayedList>
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000750 	.word	0x20000750

08005ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	617b      	str	r3, [r7, #20]
}
 8005f08:	bf00      	nop
 8005f0a:	e7fe      	b.n	8005f0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3318      	adds	r3, #24
 8005f12:	4619      	mov	r1, r3
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7fe fe3e 	bl	8004b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	68b8      	ldr	r0, [r7, #8]
 8005f2a:	f000 fa51 	bl	80063d0 <prvAddCurrentTaskToDelayedList>
	}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000750 	.word	0x20000750

08005f3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe fe6f 	bl	8004c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f72:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <xTaskRemoveFromEventList+0xb0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11d      	bne.n	8005fb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fe66 	bl	8004c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <xTaskRemoveFromEventList+0xb4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d903      	bls.n	8005f98 <xTaskRemoveFromEventList+0x5c>
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <xTaskRemoveFromEventList+0xb4>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <xTaskRemoveFromEventList+0xb8>)
 8005fa6:	441a      	add	r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7fe fdf1 	bl	8004b96 <vListInsertEnd>
 8005fb4:	e005      	b.n	8005fc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	3318      	adds	r3, #24
 8005fba:	4619      	mov	r1, r3
 8005fbc:	480e      	ldr	r0, [pc, #56]	; (8005ff8 <xTaskRemoveFromEventList+0xbc>)
 8005fbe:	f7fe fdea 	bl	8004b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <xTaskRemoveFromEventList+0xc0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d905      	bls.n	8005fdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <xTaskRemoveFromEventList+0xc4>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e001      	b.n	8005fe0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000c4c 	.word	0x20000c4c
 8005ff0:	20000c2c 	.word	0x20000c2c
 8005ff4:	20000754 	.word	0x20000754
 8005ff8:	20000be4 	.word	0x20000be4
 8005ffc:	20000750 	.word	0x20000750
 8006000:	20000c38 	.word	0x20000c38

08006004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <vTaskInternalSetTimeOutState+0x24>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <vTaskInternalSetTimeOutState+0x28>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	605a      	str	r2, [r3, #4]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	20000c3c 	.word	0x20000c3c
 800602c:	20000c28 	.word	0x20000c28

08006030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006072:	f000 fe7f 	bl	8006d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <xTaskCheckForTimeOut+0xbc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608e:	d102      	bne.n	8006096 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e023      	b.n	80060de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <xTaskCheckForTimeOut+0xc0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d007      	beq.n	80060b2 <xTaskCheckForTimeOut+0x82>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e015      	b.n	80060de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d20b      	bcs.n	80060d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff9b 	bl	8006004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e004      	b.n	80060de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060de:	f000 fe79 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 80060e2:	69fb      	ldr	r3, [r7, #28]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000c28 	.word	0x20000c28
 80060f0:	20000c3c 	.word	0x20000c3c

080060f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <vTaskMissedYield+0x14>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
}
 80060fe:	bf00      	nop
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	20000c38 	.word	0x20000c38

0800610c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006114:	f000 f852 	bl	80061bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <prvIdleTask+0x28>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d9f9      	bls.n	8006114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <prvIdleTask+0x2c>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006130:	e7f0      	b.n	8006114 <prvIdleTask+0x8>
 8006132:	bf00      	nop
 8006134:	20000754 	.word	0x20000754
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	e00c      	b.n	8006162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4a12      	ldr	r2, [pc, #72]	; (800619c <prvInitialiseTaskLists+0x60>)
 8006154:	4413      	add	r3, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fcf0 	bl	8004b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3301      	adds	r3, #1
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b37      	cmp	r3, #55	; 0x37
 8006166:	d9ef      	bls.n	8006148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006168:	480d      	ldr	r0, [pc, #52]	; (80061a0 <prvInitialiseTaskLists+0x64>)
 800616a:	f7fe fce7 	bl	8004b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800616e:	480d      	ldr	r0, [pc, #52]	; (80061a4 <prvInitialiseTaskLists+0x68>)
 8006170:	f7fe fce4 	bl	8004b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006174:	480c      	ldr	r0, [pc, #48]	; (80061a8 <prvInitialiseTaskLists+0x6c>)
 8006176:	f7fe fce1 	bl	8004b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800617a:	480c      	ldr	r0, [pc, #48]	; (80061ac <prvInitialiseTaskLists+0x70>)
 800617c:	f7fe fcde 	bl	8004b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006180:	480b      	ldr	r0, [pc, #44]	; (80061b0 <prvInitialiseTaskLists+0x74>)
 8006182:	f7fe fcdb 	bl	8004b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <prvInitialiseTaskLists+0x78>)
 8006188:	4a05      	ldr	r2, [pc, #20]	; (80061a0 <prvInitialiseTaskLists+0x64>)
 800618a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <prvInitialiseTaskLists+0x7c>)
 800618e:	4a05      	ldr	r2, [pc, #20]	; (80061a4 <prvInitialiseTaskLists+0x68>)
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000754 	.word	0x20000754
 80061a0:	20000bb4 	.word	0x20000bb4
 80061a4:	20000bc8 	.word	0x20000bc8
 80061a8:	20000be4 	.word	0x20000be4
 80061ac:	20000bf8 	.word	0x20000bf8
 80061b0:	20000c10 	.word	0x20000c10
 80061b4:	20000bdc 	.word	0x20000bdc
 80061b8:	20000be0 	.word	0x20000be0

080061bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c2:	e019      	b.n	80061f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061c4:	f000 fdd6 	bl	8006d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <prvCheckTasksWaitingTermination+0x50>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fd3b 	bl	8004c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <prvCheckTasksWaitingTermination+0x54>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4a0b      	ldr	r2, [pc, #44]	; (8006210 <prvCheckTasksWaitingTermination+0x54>)
 80061e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ee:	f000 fdf1 	bl	8006dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f810 	bl	8006218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e1      	bne.n	80061c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000bf8 	.word	0x20000bf8
 8006210:	20000c24 	.word	0x20000c24
 8006214:	20000c0c 	.word	0x20000c0c

08006218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006226:	2b00      	cmp	r3, #0
 8006228:	d108      	bne.n	800623c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	4618      	mov	r0, r3
 8006230:	f000 ff8e 	bl	8007150 <vPortFree>
				vPortFree( pxTCB );
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 ff8b 	bl	8007150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800623a:	e018      	b.n	800626e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006242:	2b01      	cmp	r3, #1
 8006244:	d103      	bne.n	800624e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 ff82 	bl	8007150 <vPortFree>
	}
 800624c:	e00f      	b.n	800626e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006254:	2b02      	cmp	r3, #2
 8006256:	d00a      	beq.n	800626e <prvDeleteTCB+0x56>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <prvDeleteTCB+0x54>
	}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 800628a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006290:	e008      	b.n	80062a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000bdc 	.word	0x20000bdc
 80062b4:	20000c44 	.word	0x20000c44

080062b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062be:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <xTaskGetSchedulerState+0x34>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c6:	2301      	movs	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e008      	b.n	80062de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <xTaskGetSchedulerState+0x38>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d4:	2302      	movs	r3, #2
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e001      	b.n	80062de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062de:	687b      	ldr	r3, [r7, #4]
	}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	20000c30 	.word	0x20000c30
 80062f0:	20000c4c 	.word	0x20000c4c

080062f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d056      	beq.n	80063b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800630a:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <xTaskPriorityDisinherit+0xd0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d00a      	beq.n	800632a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60bb      	str	r3, [r7, #8]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	1e5a      	subs	r2, r3, #1
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	429a      	cmp	r2, r3
 800635c:	d02c      	beq.n	80063b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	2b00      	cmp	r3, #0
 8006364:	d128      	bne.n	80063b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fc70 	bl	8004c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTaskPriorityDisinherit+0xd4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d903      	bls.n	8006398 <xTaskPriorityDisinherit+0xa4>
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <xTaskPriorityDisinherit+0xd4>)
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <xTaskPriorityDisinherit+0xd8>)
 80063a6:	441a      	add	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7fe fbf1 	bl	8004b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b8:	697b      	ldr	r3, [r7, #20]
	}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000750 	.word	0x20000750
 80063c8:	20000c2c 	.word	0x20000c2c
 80063cc:	20000754 	.word	0x20000754

080063d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063da:	4b21      	ldr	r3, [pc, #132]	; (8006460 <prvAddCurrentTaskToDelayedList+0x90>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e0:	4b20      	ldr	r3, [pc, #128]	; (8006464 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fc32 	bl	8004c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f2:	d10a      	bne.n	800640a <prvAddCurrentTaskToDelayedList+0x3a>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <prvAddCurrentTaskToDelayedList+0x94>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4819      	ldr	r0, [pc, #100]	; (8006468 <prvAddCurrentTaskToDelayedList+0x98>)
 8006404:	f7fe fbc7 	bl	8004b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006408:	e026      	b.n	8006458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <prvAddCurrentTaskToDelayedList+0x94>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d209      	bcs.n	8006436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <prvAddCurrentTaskToDelayedList+0x94>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f7fe fbd5 	bl	8004bde <vListInsert>
}
 8006434:	e010      	b.n	8006458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <prvAddCurrentTaskToDelayedList+0x94>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe fbcb 	bl	8004bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d202      	bcs.n	8006458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000c28 	.word	0x20000c28
 8006464:	20000750 	.word	0x20000750
 8006468:	20000c10 	.word	0x20000c10
 800646c:	20000be0 	.word	0x20000be0
 8006470:	20000bdc 	.word	0x20000bdc
 8006474:	20000c44 	.word	0x20000c44

08006478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006482:	f000 fb07 	bl	8006a94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006486:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <xTimerCreateTimerTask+0x80>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d021      	beq.n	80064d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006496:	1d3a      	adds	r2, r7, #4
 8006498:	f107 0108 	add.w	r1, r7, #8
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fb31 	bl	8004b08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	9202      	str	r2, [sp, #8]
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2302      	movs	r3, #2
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	460a      	mov	r2, r1
 80064b8:	4910      	ldr	r1, [pc, #64]	; (80064fc <xTimerCreateTimerTask+0x84>)
 80064ba:	4811      	ldr	r0, [pc, #68]	; (8006500 <xTimerCreateTimerTask+0x88>)
 80064bc:	f7ff f8de 	bl	800567c <xTaskCreateStatic>
 80064c0:	4603      	mov	r3, r0
 80064c2:	4a10      	ldr	r2, [pc, #64]	; (8006504 <xTimerCreateTimerTask+0x8c>)
 80064c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064c6:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <xTimerCreateTimerTask+0x8c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064ce:	2301      	movs	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064ee:	697b      	ldr	r3, [r7, #20]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000c80 	.word	0x20000c80
 80064fc:	08008414 	.word	0x08008414
 8006500:	0800663d 	.word	0x0800663d
 8006504:	20000c84 	.word	0x20000c84

08006508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	623b      	str	r3, [r7, #32]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <xTimerGenericCommand+0x98>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02a      	beq.n	8006594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b05      	cmp	r3, #5
 800654e:	dc18      	bgt.n	8006582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006550:	f7ff feb2 	bl	80062b8 <xTaskGetSchedulerState>
 8006554:	4603      	mov	r3, r0
 8006556:	2b02      	cmp	r3, #2
 8006558:	d109      	bne.n	800656e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <xTimerGenericCommand+0x98>)
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f107 0110 	add.w	r1, r7, #16
 8006562:	2300      	movs	r3, #0
 8006564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006566:	f7fe fca1 	bl	8004eac <xQueueGenericSend>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24
 800656c:	e012      	b.n	8006594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <xTimerGenericCommand+0x98>)
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	f107 0110 	add.w	r1, r7, #16
 8006576:	2300      	movs	r3, #0
 8006578:	2200      	movs	r2, #0
 800657a:	f7fe fc97 	bl	8004eac <xQueueGenericSend>
 800657e:	6278      	str	r0, [r7, #36]	; 0x24
 8006580:	e008      	b.n	8006594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006582:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <xTimerGenericCommand+0x98>)
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f107 0110 	add.w	r1, r7, #16
 800658a:	2300      	movs	r3, #0
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	f7fe fd8b 	bl	80050a8 <xQueueGenericSendFromISR>
 8006592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006596:	4618      	mov	r0, r3
 8006598:	3728      	adds	r7, #40	; 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000c80 	.word	0x20000c80

080065a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ae:	4b22      	ldr	r3, [pc, #136]	; (8006638 <prvProcessExpiredTimer+0x94>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe fb47 	bl	8004c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d022      	beq.n	8006616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	18d1      	adds	r1, r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	6978      	ldr	r0, [r7, #20]
 80065de:	f000 f8d1 	bl	8006784 <prvInsertTimerInActiveList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01f      	beq.n	8006628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	2100      	movs	r1, #0
 80065f2:	6978      	ldr	r0, [r7, #20]
 80065f4:	f7ff ff88 	bl	8006508 <xTimerGenericCommand>
 80065f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	4798      	blx	r3
}
 8006630:	bf00      	nop
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000c78 	.word	0x20000c78

0800663c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006644:	f107 0308 	add.w	r3, r7, #8
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f857 	bl	80066fc <prvGetNextExpireTime>
 800664e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4619      	mov	r1, r3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f803 	bl	8006660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800665a:	f000 f8d5 	bl	8006808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800665e:	e7f1      	b.n	8006644 <prvTimerTask+0x8>

08006660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800666a:	f7ff fa43 	bl	8005af4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800666e:	f107 0308 	add.w	r3, r7, #8
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f866 	bl	8006744 <prvSampleTimeNow>
 8006678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d130      	bne.n	80066e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <prvProcessTimerOrBlockTask+0x3c>
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	429a      	cmp	r2, r3
 800668c:	d806      	bhi.n	800669c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800668e:	f7ff fa3f 	bl	8005b10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff ff85 	bl	80065a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800669a:	e024      	b.n	80066e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066a2:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <prvProcessTimerOrBlockTask+0x90>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <prvProcessTimerOrBlockTask+0x50>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <prvProcessTimerOrBlockTask+0x52>
 80066b0:	2300      	movs	r3, #0
 80066b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <prvProcessTimerOrBlockTask+0x94>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f7fe ffa7 	bl	8005614 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066c6:	f7ff fa23 	bl	8005b10 <xTaskResumeAll>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066d0:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <prvProcessTimerOrBlockTask+0x98>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
}
 80066e0:	e001      	b.n	80066e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066e2:	f7ff fa15 	bl	8005b10 <xTaskResumeAll>
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000c7c 	.word	0x20000c7c
 80066f4:	20000c80 	.word	0x20000c80
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <prvGetNextExpireTime+0x44>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <prvGetNextExpireTime+0x16>
 800670e:	2201      	movs	r2, #1
 8006710:	e000      	b.n	8006714 <prvGetNextExpireTime+0x18>
 8006712:	2200      	movs	r2, #0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <prvGetNextExpireTime+0x44>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e001      	b.n	8006730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000c78 	.word	0x20000c78

08006744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800674c:	f7ff fa7e 	bl	8005c4c <xTaskGetTickCount>
 8006750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <prvSampleTimeNow+0x3c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	429a      	cmp	r2, r3
 800675a:	d205      	bcs.n	8006768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800675c:	f000 f936 	bl	80069cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e002      	b.n	800676e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800676e:	4a04      	ldr	r2, [pc, #16]	; (8006780 <prvSampleTimeNow+0x3c>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006774:	68fb      	ldr	r3, [r7, #12]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000c88 	.word	0x20000c88

08006784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d812      	bhi.n	80067d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d302      	bcc.n	80067be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e01b      	b.n	80067f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <prvInsertTimerInActiveList+0x7c>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe fa08 	bl	8004bde <vListInsert>
 80067ce:	e012      	b.n	80067f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d206      	bcs.n	80067e6 <prvInsertTimerInActiveList+0x62>
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d302      	bcc.n	80067e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e007      	b.n	80067f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <prvInsertTimerInActiveList+0x80>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fe f9f4 	bl	8004bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067f6:	697b      	ldr	r3, [r7, #20]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000c7c 	.word	0x20000c7c
 8006804:	20000c78 	.word	0x20000c78

08006808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800680e:	e0ca      	b.n	80069a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	da18      	bge.n	8006848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	3304      	adds	r3, #4
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61fb      	str	r3, [r7, #28]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683e:	6850      	ldr	r0, [r2, #4]
 8006840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	4611      	mov	r1, r2
 8006846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f2c0 80aa 	blt.w	80069a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	3304      	adds	r3, #4
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe f9f5 	bl	8004c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006866:	463b      	mov	r3, r7
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff ff6b 	bl	8006744 <prvSampleTimeNow>
 800686e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b09      	cmp	r3, #9
 8006874:	f200 8097 	bhi.w	80069a6 <prvProcessReceivedCommands+0x19e>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <prvProcessReceivedCommands+0x78>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068a9 	.word	0x080068a9
 800688c:	0800691d 	.word	0x0800691d
 8006890:	08006931 	.word	0x08006931
 8006894:	0800697b 	.word	0x0800697b
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068a9 	.word	0x080068a9
 80068a0:	0800691d 	.word	0x0800691d
 80068a4:	08006931 	.word	0x08006931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	18d1      	adds	r1, r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c8:	f7ff ff5c 	bl	8006784 <prvInsertTimerInActiveList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d069      	beq.n	80069a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05e      	beq.n	80069a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	441a      	add	r2, r3
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fa:	f7ff fe05 	bl	8006508 <xTimerGenericCommand>
 80068fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d14f      	bne.n	80069a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	61bb      	str	r3, [r7, #24]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800692e:	e03a      	b.n	80069a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	617b      	str	r3, [r7, #20]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	18d1      	adds	r1, r2, r3
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006974:	f7ff ff06 	bl	8006784 <prvInsertTimerInActiveList>
					break;
 8006978:	e015      	b.n	80069a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698a:	f000 fbe1 	bl	8007150 <vPortFree>
 800698e:	e00a      	b.n	80069a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a2:	e000      	b.n	80069a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <prvProcessReceivedCommands+0x1c0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1d39      	adds	r1, r7, #4
 80069ac:	2200      	movs	r2, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fc16 	bl	80051e0 <xQueueReceive>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af2a 	bne.w	8006810 <prvProcessReceivedCommands+0x8>
	}
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000c80 	.word	0x20000c80

080069cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069d2:	e048      	b.n	8006a66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d4:	4b2d      	ldr	r3, [pc, #180]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe f92f 	bl	8004c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02e      	beq.n	8006a66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d90e      	bls.n	8006a38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe f8d4 	bl	8004bde <vListInsert>
 8006a36:	e016      	b.n	8006a66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fd60 	bl	8006508 <xTimerGenericCommand>
 8006a48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	603b      	str	r3, [r7, #0]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1b1      	bne.n	80069d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <prvSwitchTimerLists+0xc0>)
 8006a7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a7e:	4a04      	ldr	r2, [pc, #16]	; (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000c78 	.word	0x20000c78
 8006a90:	20000c7c 	.word	0x20000c7c

08006a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a9a:	f000 f96b 	bl	8006d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a9e:	4b15      	ldr	r3, [pc, #84]	; (8006af4 <prvCheckForValidListAndQueue+0x60>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d120      	bne.n	8006ae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aa6:	4814      	ldr	r0, [pc, #80]	; (8006af8 <prvCheckForValidListAndQueue+0x64>)
 8006aa8:	f7fe f848 	bl	8004b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aac:	4813      	ldr	r0, [pc, #76]	; (8006afc <prvCheckForValidListAndQueue+0x68>)
 8006aae:	f7fe f845 	bl	8004b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <prvCheckForValidListAndQueue+0x6c>)
 8006ab4:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <prvCheckForValidListAndQueue+0x64>)
 8006ab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab8:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <prvCheckForValidListAndQueue+0x70>)
 8006aba:	4a10      	ldr	r2, [pc, #64]	; (8006afc <prvCheckForValidListAndQueue+0x68>)
 8006abc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <prvCheckForValidListAndQueue+0x74>)
 8006ac4:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <prvCheckForValidListAndQueue+0x78>)
 8006ac6:	2110      	movs	r1, #16
 8006ac8:	200a      	movs	r0, #10
 8006aca:	f7fe f953 	bl	8004d74 <xQueueGenericCreateStatic>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <prvCheckForValidListAndQueue+0x60>)
 8006ad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <prvCheckForValidListAndQueue+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <prvCheckForValidListAndQueue+0x60>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	490b      	ldr	r1, [pc, #44]	; (8006b10 <prvCheckForValidListAndQueue+0x7c>)
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fd6c 	bl	80055c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae8:	f000 f974 	bl	8006dd4 <vPortExitCritical>
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000c80 	.word	0x20000c80
 8006af8:	20000c50 	.word	0x20000c50
 8006afc:	20000c64 	.word	0x20000c64
 8006b00:	20000c78 	.word	0x20000c78
 8006b04:	20000c7c 	.word	0x20000c7c
 8006b08:	20000d2c 	.word	0x20000d2c
 8006b0c:	20000c8c 	.word	0x20000c8c
 8006b10:	0800841c 	.word	0x0800841c

08006b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3b04      	subs	r3, #4
 8006b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0201 	bic.w	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3b04      	subs	r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b44:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <pxPortInitialiseStack+0x64>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b14      	subs	r3, #20
 8006b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b04      	subs	r3, #4
 8006b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f06f 0202 	mvn.w	r2, #2
 8006b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3b20      	subs	r3, #32
 8006b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	08006b7d 	.word	0x08006b7d

08006b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <prvTaskExitError+0x54>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8e:	d00a      	beq.n	8006ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <prvTaskExitError+0x28>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bba:	bf00      	nop
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0fc      	beq.n	8006bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000000c 	.word	0x2000000c
	...

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	4770      	bx	lr
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c08:	4808      	ldr	r0, [pc, #32]	; (8006c2c <prvPortStartFirstTask+0x24>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8814 	msr	CONTROL, r0
 8006c1a:	b662      	cpsie	i
 8006c1c:	b661      	cpsie	f
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	df00      	svc	0
 8006c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed08 	.word	0xe000ed08

08006c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c36:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <xPortStartScheduler+0x120>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a46      	ldr	r2, [pc, #280]	; (8006d54 <xPortStartScheduler+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10a      	bne.n	8006c56 <xPortStartScheduler+0x26>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <xPortStartScheduler+0x120>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <xPortStartScheduler+0x128>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10a      	bne.n	8006c76 <xPortStartScheduler+0x46>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c76:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <xPortStartScheduler+0x12c>)
 8006c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <xPortStartScheduler+0x130>)
 8006c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c9e:	4b31      	ldr	r3, [pc, #196]	; (8006d64 <xPortStartScheduler+0x134>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca4:	e009      	b.n	8006cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <xPortStartScheduler+0x134>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d0ef      	beq.n	8006ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cc6:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d00a      	beq.n	8006ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60bb      	str	r3, [r7, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d1e:	f000 f8dd 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d22:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <xPortStartScheduler+0x13c>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d28:	f000 f8fc 	bl	8006f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d2c:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <xPortStartScheduler+0x140>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0f      	ldr	r2, [pc, #60]	; (8006d70 <xPortStartScheduler+0x140>)
 8006d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d38:	f7ff ff66 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d3c:	f7ff f850 	bl	8005de0 <vTaskSwitchContext>
	prvTaskExitError();
 8006d40:	f7ff ff1c 	bl	8006b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	e000ed00 	.word	0xe000ed00
 8006d54:	410fc271 	.word	0x410fc271
 8006d58:	410fc270 	.word	0x410fc270
 8006d5c:	e000e400 	.word	0xe000e400
 8006d60:	20000d7c 	.word	0x20000d7c
 8006d64:	20000d80 	.word	0x20000d80
 8006d68:	e000ed20 	.word	0xe000ed20
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	e000ef34 	.word	0xe000ef34

08006d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4a0d      	ldr	r2, [pc, #52]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10f      	bne.n	8006dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <vPortEnterCritical+0x5c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	603b      	str	r3, [r7, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <vPortEnterCritical+0x4a>
	}
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000000c 	.word	0x2000000c
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <vPortExitCritical+0x50>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <vPortExitCritical+0x24>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	607b      	str	r3, [r7, #4]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <vPortExitCritical+0x50>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <vPortExitCritical+0x50>)
 8006e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <vPortExitCritical+0x42>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f383 8811 	msr	BASEPRI, r3
}
 8006e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
	...

08006e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f01e 0f10 	tst.w	lr, #16
 8006e40:	bf08      	it	eq
 8006e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e54:	f380 8811 	msr	BASEPRI, r0
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f7fe ffbe 	bl	8005de0 <vTaskSwitchContext>
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f380 8811 	msr	BASEPRI, r0
 8006e6c:	bc09      	pop	{r0, r3}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	f01e 0f10 	tst.w	lr, #16
 8006e7a:	bf08      	it	eq
 8006e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e80:	f380 8809 	msr	PSP, r0
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe fedb 	bl	8005c6c <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <xPortSysTickHandler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <vPortSetupTimerInterrupt+0x44>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	e000e010 	.word	0xe000e010
 8006f14:	e000e018 	.word	0xe000e018
 8006f18:	20000000 	.word	0x20000000
 8006f1c:	10624dd3 	.word	0x10624dd3
 8006f20:	e000e014 	.word	0xe000e014

08006f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f34 <vPortEnableVFP+0x10>
 8006f28:	6801      	ldr	r1, [r0, #0]
 8006f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f2e:	6001      	str	r1, [r0, #0]
 8006f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed88 	.word	0xe000ed88

08006f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d914      	bls.n	8006f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f4a:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <vPortValidateInterruptPriority+0x70>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <vPortValidateInterruptPriority+0x74>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	7afa      	ldrb	r2, [r7, #11]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d20a      	bcs.n	8006f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <vPortValidateInterruptPriority+0x78>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <vPortValidateInterruptPriority+0x7c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d90a      	bls.n	8006f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	603b      	str	r3, [r7, #0]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <vPortValidateInterruptPriority+0x60>
	}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	e000e3f0 	.word	0xe000e3f0
 8006fac:	20000d7c 	.word	0x20000d7c
 8006fb0:	e000ed0c 	.word	0xe000ed0c
 8006fb4:	20000d80 	.word	0x20000d80

08006fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	; 0x28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fc4:	f7fe fd96 	bl	8005af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fc8:	4b5b      	ldr	r3, [pc, #364]	; (8007138 <pvPortMalloc+0x180>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fd0:	f000 f920 	bl	8007214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fd4:	4b59      	ldr	r3, [pc, #356]	; (800713c <pvPortMalloc+0x184>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 8093 	bne.w	8007108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01d      	beq.n	8007024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fe8:	2208      	movs	r2, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d014      	beq.n	8007024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f023 0307 	bic.w	r3, r3, #7
 8007000:	3308      	adds	r3, #8
 8007002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <pvPortMalloc+0x6c>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	617b      	str	r3, [r7, #20]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d06e      	beq.n	8007108 <pvPortMalloc+0x150>
 800702a:	4b45      	ldr	r3, [pc, #276]	; (8007140 <pvPortMalloc+0x188>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d869      	bhi.n	8007108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007034:	4b43      	ldr	r3, [pc, #268]	; (8007144 <pvPortMalloc+0x18c>)
 8007036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007038:	4b42      	ldr	r3, [pc, #264]	; (8007144 <pvPortMalloc+0x18c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800703e:	e004      	b.n	800704a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d903      	bls.n	800705c <pvPortMalloc+0xa4>
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1f1      	bne.n	8007040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800705c:	4b36      	ldr	r3, [pc, #216]	; (8007138 <pvPortMalloc+0x180>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007062:	429a      	cmp	r2, r3
 8007064:	d050      	beq.n	8007108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2208      	movs	r2, #8
 800706c:	4413      	add	r3, r2
 800706e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	2308      	movs	r3, #8
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	429a      	cmp	r2, r3
 8007086:	d91f      	bls.n	80070c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <pvPortMalloc+0xf8>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	613b      	str	r3, [r7, #16]
}
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1ad2      	subs	r2, r2, r3
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070c2:	69b8      	ldr	r0, [r7, #24]
 80070c4:	f000 f908 	bl	80072d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070c8:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <pvPortMalloc+0x188>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <pvPortMalloc+0x188>)
 80070d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070d6:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <pvPortMalloc+0x188>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <pvPortMalloc+0x190>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d203      	bcs.n	80070ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070e2:	4b17      	ldr	r3, [pc, #92]	; (8007140 <pvPortMalloc+0x188>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <pvPortMalloc+0x190>)
 80070e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <pvPortMalloc+0x184>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070fe:	4b13      	ldr	r3, [pc, #76]	; (800714c <pvPortMalloc+0x194>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <pvPortMalloc+0x194>)
 8007106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007108:	f7fe fd02 	bl	8005b10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <pvPortMalloc+0x174>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60fb      	str	r3, [r7, #12]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <pvPortMalloc+0x172>
	return pvReturn;
 800712c:	69fb      	ldr	r3, [r7, #28]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3728      	adds	r7, #40	; 0x28
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20001944 	.word	0x20001944
 800713c:	20001958 	.word	0x20001958
 8007140:	20001948 	.word	0x20001948
 8007144:	2000193c 	.word	0x2000193c
 8007148:	2000194c 	.word	0x2000194c
 800714c:	20001950 	.word	0x20001950

08007150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d04d      	beq.n	80071fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007162:	2308      	movs	r3, #8
 8007164:	425b      	negs	r3, r3
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	4b24      	ldr	r3, [pc, #144]	; (8007208 <vPortFree+0xb8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4013      	ands	r3, r2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <vPortFree+0x44>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	60fb      	str	r3, [r7, #12]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <vPortFree+0x62>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	60bb      	str	r3, [r7, #8]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <vPortFree+0xb8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01e      	beq.n	80071fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11a      	bne.n	80071fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <vPortFree+0xb8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	401a      	ands	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071d8:	f7fe fc8c 	bl	8005af4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <vPortFree+0xbc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4413      	add	r3, r2
 80071e6:	4a09      	ldr	r2, [pc, #36]	; (800720c <vPortFree+0xbc>)
 80071e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ea:	6938      	ldr	r0, [r7, #16]
 80071ec:	f000 f874 	bl	80072d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <vPortFree+0xc0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	4a06      	ldr	r2, [pc, #24]	; (8007210 <vPortFree+0xc0>)
 80071f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071fa:	f7fe fc89 	bl	8005b10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071fe:	bf00      	nop
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20001958 	.word	0x20001958
 800720c:	20001948 	.word	0x20001948
 8007210:	20001954 	.word	0x20001954

08007214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800721a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800721e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007220:	4b27      	ldr	r3, [pc, #156]	; (80072c0 <prvHeapInit+0xac>)
 8007222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00c      	beq.n	8007248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3307      	adds	r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <prvHeapInit+0xac>)
 8007244:	4413      	add	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800724c:	4a1d      	ldr	r2, [pc, #116]	; (80072c4 <prvHeapInit+0xb0>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007252:	4b1c      	ldr	r3, [pc, #112]	; (80072c4 <prvHeapInit+0xb0>)
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007260:	2208      	movs	r2, #8
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1a9b      	subs	r3, r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0307 	bic.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <prvHeapInit+0xb4>)
 8007274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007276:	4b14      	ldr	r3, [pc, #80]	; (80072c8 <prvHeapInit+0xb4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2200      	movs	r2, #0
 800727c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <prvHeapInit+0xb4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvHeapInit+0xb4>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <prvHeapInit+0xb8>)
 80072a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <prvHeapInit+0xbc>)
 80072aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <prvHeapInit+0xc0>)
 80072ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	20000d84 	.word	0x20000d84
 80072c4:	2000193c 	.word	0x2000193c
 80072c8:	20001944 	.word	0x20001944
 80072cc:	2000194c 	.word	0x2000194c
 80072d0:	20001948 	.word	0x20001948
 80072d4:	20001958 	.word	0x20001958

080072d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072e0:	4b28      	ldr	r3, [pc, #160]	; (8007384 <prvInsertBlockIntoFreeList+0xac>)
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e002      	b.n	80072ec <prvInsertBlockIntoFreeList+0x14>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d8f7      	bhi.n	80072e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4413      	add	r3, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d108      	bne.n	800731a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	441a      	add	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	441a      	add	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d118      	bne.n	8007360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <prvInsertBlockIntoFreeList+0xb0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d00d      	beq.n	8007356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	441a      	add	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e008      	b.n	8007368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <prvInsertBlockIntoFreeList+0xb0>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e003      	b.n	8007368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	429a      	cmp	r2, r3
 800736e:	d002      	beq.n	8007376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2000193c 	.word	0x2000193c
 8007388:	20001944 	.word	0x20001944

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000010 	.word	0x20000010

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4d0d      	ldr	r5, [pc, #52]	; (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2600      	movs	r6, #0
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4d0b      	ldr	r5, [pc, #44]	; (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	; (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 fffa 	bl	80083a4 <_init>
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2600      	movs	r6, #0
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08008530 	.word	0x08008530
 80073d4:	08008530 	.word	0x08008530
 80073d8:	08008530 	.word	0x08008530
 80073dc:	08008534 	.word	0x08008534

080073e0 <memcpy>:
 80073e0:	440a      	add	r2, r1
 80073e2:	4291      	cmp	r1, r2
 80073e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073e8:	d100      	bne.n	80073ec <memcpy+0xc>
 80073ea:	4770      	bx	lr
 80073ec:	b510      	push	{r4, lr}
 80073ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f6:	4291      	cmp	r1, r2
 80073f8:	d1f9      	bne.n	80073ee <memcpy+0xe>
 80073fa:	bd10      	pop	{r4, pc}

080073fc <memset>:
 80073fc:	4402      	add	r2, r0
 80073fe:	4603      	mov	r3, r0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <iprintf>:
 800740c:	b40f      	push	{r0, r1, r2, r3}
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <iprintf+0x2c>)
 8007410:	b513      	push	{r0, r1, r4, lr}
 8007412:	681c      	ldr	r4, [r3, #0]
 8007414:	b124      	cbz	r4, 8007420 <iprintf+0x14>
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	b913      	cbnz	r3, 8007420 <iprintf+0x14>
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fa5e 	bl	80078dc <__sinit>
 8007420:	ab05      	add	r3, sp, #20
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	68a1      	ldr	r1, [r4, #8]
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc2f 	bl	8007c8c <_vfiprintf_r>
 800742e:	b002      	add	sp, #8
 8007430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007434:	b004      	add	sp, #16
 8007436:	4770      	bx	lr
 8007438:	20000010 	.word	0x20000010

0800743c <_puts_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	460e      	mov	r6, r1
 8007440:	4605      	mov	r5, r0
 8007442:	b118      	cbz	r0, 800744c <_puts_r+0x10>
 8007444:	6983      	ldr	r3, [r0, #24]
 8007446:	b90b      	cbnz	r3, 800744c <_puts_r+0x10>
 8007448:	f000 fa48 	bl	80078dc <__sinit>
 800744c:	69ab      	ldr	r3, [r5, #24]
 800744e:	68ac      	ldr	r4, [r5, #8]
 8007450:	b913      	cbnz	r3, 8007458 <_puts_r+0x1c>
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fa42 	bl	80078dc <__sinit>
 8007458:	4b2c      	ldr	r3, [pc, #176]	; (800750c <_puts_r+0xd0>)
 800745a:	429c      	cmp	r4, r3
 800745c:	d120      	bne.n	80074a0 <_puts_r+0x64>
 800745e:	686c      	ldr	r4, [r5, #4]
 8007460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d405      	bmi.n	8007472 <_puts_r+0x36>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	0598      	lsls	r0, r3, #22
 800746a:	d402      	bmi.n	8007472 <_puts_r+0x36>
 800746c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800746e:	f000 fad3 	bl	8007a18 <__retarget_lock_acquire_recursive>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	0719      	lsls	r1, r3, #28
 8007476:	d51d      	bpl.n	80074b4 <_puts_r+0x78>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	b1db      	cbz	r3, 80074b4 <_puts_r+0x78>
 800747c:	3e01      	subs	r6, #1
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	bb39      	cbnz	r1, 80074da <_puts_r+0x9e>
 800748a:	2b00      	cmp	r3, #0
 800748c:	da38      	bge.n	8007500 <_puts_r+0xc4>
 800748e:	4622      	mov	r2, r4
 8007490:	210a      	movs	r1, #10
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f848 	bl	8007528 <__swbuf_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d011      	beq.n	80074c0 <_puts_r+0x84>
 800749c:	250a      	movs	r5, #10
 800749e:	e011      	b.n	80074c4 <_puts_r+0x88>
 80074a0:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <_puts_r+0xd4>)
 80074a2:	429c      	cmp	r4, r3
 80074a4:	d101      	bne.n	80074aa <_puts_r+0x6e>
 80074a6:	68ac      	ldr	r4, [r5, #8]
 80074a8:	e7da      	b.n	8007460 <_puts_r+0x24>
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <_puts_r+0xd8>)
 80074ac:	429c      	cmp	r4, r3
 80074ae:	bf08      	it	eq
 80074b0:	68ec      	ldreq	r4, [r5, #12]
 80074b2:	e7d5      	b.n	8007460 <_puts_r+0x24>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f888 	bl	80075cc <__swsetup_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0dd      	beq.n	800747c <_puts_r+0x40>
 80074c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80074c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	d405      	bmi.n	80074d6 <_puts_r+0x9a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	059b      	lsls	r3, r3, #22
 80074ce:	d402      	bmi.n	80074d6 <_puts_r+0x9a>
 80074d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074d2:	f000 faa2 	bl	8007a1a <__retarget_lock_release_recursive>
 80074d6:	4628      	mov	r0, r5
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da04      	bge.n	80074e8 <_puts_r+0xac>
 80074de:	69a2      	ldr	r2, [r4, #24]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	dc06      	bgt.n	80074f2 <_puts_r+0xb6>
 80074e4:	290a      	cmp	r1, #10
 80074e6:	d004      	beq.n	80074f2 <_puts_r+0xb6>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	7019      	strb	r1, [r3, #0]
 80074f0:	e7c5      	b.n	800747e <_puts_r+0x42>
 80074f2:	4622      	mov	r2, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f817 	bl	8007528 <__swbuf_r>
 80074fa:	3001      	adds	r0, #1
 80074fc:	d1bf      	bne.n	800747e <_puts_r+0x42>
 80074fe:	e7df      	b.n	80074c0 <_puts_r+0x84>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	250a      	movs	r5, #10
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	701d      	strb	r5, [r3, #0]
 800750a:	e7db      	b.n	80074c4 <_puts_r+0x88>
 800750c:	080084b4 	.word	0x080084b4
 8007510:	080084d4 	.word	0x080084d4
 8007514:	08008494 	.word	0x08008494

08007518 <puts>:
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <puts+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f7ff bf8d 	b.w	800743c <_puts_r>
 8007522:	bf00      	nop
 8007524:	20000010 	.word	0x20000010

08007528 <__swbuf_r>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	460e      	mov	r6, r1
 800752c:	4614      	mov	r4, r2
 800752e:	4605      	mov	r5, r0
 8007530:	b118      	cbz	r0, 800753a <__swbuf_r+0x12>
 8007532:	6983      	ldr	r3, [r0, #24]
 8007534:	b90b      	cbnz	r3, 800753a <__swbuf_r+0x12>
 8007536:	f000 f9d1 	bl	80078dc <__sinit>
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <__swbuf_r+0x98>)
 800753c:	429c      	cmp	r4, r3
 800753e:	d12b      	bne.n	8007598 <__swbuf_r+0x70>
 8007540:	686c      	ldr	r4, [r5, #4]
 8007542:	69a3      	ldr	r3, [r4, #24]
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	071a      	lsls	r2, r3, #28
 800754a:	d52f      	bpl.n	80075ac <__swbuf_r+0x84>
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b36b      	cbz	r3, 80075ac <__swbuf_r+0x84>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	1ac0      	subs	r0, r0, r3
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	b2f6      	uxtb	r6, r6
 800755a:	4283      	cmp	r3, r0
 800755c:	4637      	mov	r7, r6
 800755e:	dc04      	bgt.n	800756a <__swbuf_r+0x42>
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f926 	bl	80077b4 <_fflush_r>
 8007568:	bb30      	cbnz	r0, 80075b8 <__swbuf_r+0x90>
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	3b01      	subs	r3, #1
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	701e      	strb	r6, [r3, #0]
 8007578:	6963      	ldr	r3, [r4, #20]
 800757a:	3001      	adds	r0, #1
 800757c:	4283      	cmp	r3, r0
 800757e:	d004      	beq.n	800758a <__swbuf_r+0x62>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d506      	bpl.n	8007594 <__swbuf_r+0x6c>
 8007586:	2e0a      	cmp	r6, #10
 8007588:	d104      	bne.n	8007594 <__swbuf_r+0x6c>
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f000 f911 	bl	80077b4 <_fflush_r>
 8007592:	b988      	cbnz	r0, 80075b8 <__swbuf_r+0x90>
 8007594:	4638      	mov	r0, r7
 8007596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <__swbuf_r+0x9c>)
 800759a:	429c      	cmp	r4, r3
 800759c:	d101      	bne.n	80075a2 <__swbuf_r+0x7a>
 800759e:	68ac      	ldr	r4, [r5, #8]
 80075a0:	e7cf      	b.n	8007542 <__swbuf_r+0x1a>
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <__swbuf_r+0xa0>)
 80075a4:	429c      	cmp	r4, r3
 80075a6:	bf08      	it	eq
 80075a8:	68ec      	ldreq	r4, [r5, #12]
 80075aa:	e7ca      	b.n	8007542 <__swbuf_r+0x1a>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f80c 	bl	80075cc <__swsetup_r>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d0cb      	beq.n	8007550 <__swbuf_r+0x28>
 80075b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075bc:	e7ea      	b.n	8007594 <__swbuf_r+0x6c>
 80075be:	bf00      	nop
 80075c0:	080084b4 	.word	0x080084b4
 80075c4:	080084d4 	.word	0x080084d4
 80075c8:	08008494 	.word	0x08008494

080075cc <__swsetup_r>:
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <__swsetup_r+0xcc>)
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	b125      	cbz	r5, 80075e2 <__swsetup_r+0x16>
 80075d8:	69ab      	ldr	r3, [r5, #24]
 80075da:	b913      	cbnz	r3, 80075e2 <__swsetup_r+0x16>
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f97d 	bl	80078dc <__sinit>
 80075e2:	4b2e      	ldr	r3, [pc, #184]	; (800769c <__swsetup_r+0xd0>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d10f      	bne.n	8007608 <__swsetup_r+0x3c>
 80075e8:	686c      	ldr	r4, [r5, #4]
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	d42c      	bmi.n	800764e <__swsetup_r+0x82>
 80075f4:	06dd      	lsls	r5, r3, #27
 80075f6:	d411      	bmi.n	800761c <__swsetup_r+0x50>
 80075f8:	2309      	movs	r3, #9
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007606:	e03e      	b.n	8007686 <__swsetup_r+0xba>
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <__swsetup_r+0xd4>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <__swsetup_r+0x46>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7eb      	b.n	80075ea <__swsetup_r+0x1e>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <__swsetup_r+0xd8>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7e6      	b.n	80075ea <__swsetup_r+0x1e>
 800761c:	0758      	lsls	r0, r3, #29
 800761e:	d512      	bpl.n	8007646 <__swsetup_r+0x7a>
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	b141      	cbz	r1, 8007636 <__swsetup_r+0x6a>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__swsetup_r+0x66>
 800762c:	4630      	mov	r0, r6
 800762e:	f000 fa59 	bl	8007ae4 <_free_r>
 8007632:	2300      	movs	r3, #0
 8007634:	6363      	str	r3, [r4, #52]	; 0x34
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	2300      	movs	r3, #0
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	b94b      	cbnz	r3, 8007666 <__swsetup_r+0x9a>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d003      	beq.n	8007666 <__swsetup_r+0x9a>
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f000 f9ff 	bl	8007a64 <__smakebuf_r>
 8007666:	89a0      	ldrh	r0, [r4, #12]
 8007668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800766c:	f010 0301 	ands.w	r3, r0, #1
 8007670:	d00a      	beq.n	8007688 <__swsetup_r+0xbc>
 8007672:	2300      	movs	r3, #0
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	425b      	negs	r3, r3
 800767a:	61a3      	str	r3, [r4, #24]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b943      	cbnz	r3, 8007692 <__swsetup_r+0xc6>
 8007680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007684:	d1ba      	bne.n	80075fc <__swsetup_r+0x30>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	0781      	lsls	r1, r0, #30
 800768a:	bf58      	it	pl
 800768c:	6963      	ldrpl	r3, [r4, #20]
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	e7f4      	b.n	800767c <__swsetup_r+0xb0>
 8007692:	2000      	movs	r0, #0
 8007694:	e7f7      	b.n	8007686 <__swsetup_r+0xba>
 8007696:	bf00      	nop
 8007698:	20000010 	.word	0x20000010
 800769c:	080084b4 	.word	0x080084b4
 80076a0:	080084d4 	.word	0x080084d4
 80076a4:	08008494 	.word	0x08008494

080076a8 <__sflush_r>:
 80076a8:	898a      	ldrh	r2, [r1, #12]
 80076aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ae:	4605      	mov	r5, r0
 80076b0:	0710      	lsls	r0, r2, #28
 80076b2:	460c      	mov	r4, r1
 80076b4:	d458      	bmi.n	8007768 <__sflush_r+0xc0>
 80076b6:	684b      	ldr	r3, [r1, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc05      	bgt.n	80076c8 <__sflush_r+0x20>
 80076bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc02      	bgt.n	80076c8 <__sflush_r+0x20>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d0f9      	beq.n	80076c2 <__sflush_r+0x1a>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d4:	682f      	ldr	r7, [r5, #0]
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	d032      	beq.n	8007740 <__sflush_r+0x98>
 80076da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	075a      	lsls	r2, r3, #29
 80076e0:	d505      	bpl.n	80076ee <__sflush_r+0x46>
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	1ac0      	subs	r0, r0, r3
 80076e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e8:	b10b      	cbz	r3, 80076ee <__sflush_r+0x46>
 80076ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ec:	1ac0      	subs	r0, r0, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	4602      	mov	r2, r0
 80076f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f4:	6a21      	ldr	r1, [r4, #32]
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	d106      	bne.n	800770e <__sflush_r+0x66>
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	291d      	cmp	r1, #29
 8007704:	d82c      	bhi.n	8007760 <__sflush_r+0xb8>
 8007706:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <__sflush_r+0x108>)
 8007708:	40ca      	lsrs	r2, r1
 800770a:	07d6      	lsls	r6, r2, #31
 800770c:	d528      	bpl.n	8007760 <__sflush_r+0xb8>
 800770e:	2200      	movs	r2, #0
 8007710:	6062      	str	r2, [r4, #4]
 8007712:	04d9      	lsls	r1, r3, #19
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	d504      	bpl.n	8007724 <__sflush_r+0x7c>
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	d101      	bne.n	8007722 <__sflush_r+0x7a>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b903      	cbnz	r3, 8007724 <__sflush_r+0x7c>
 8007722:	6560      	str	r0, [r4, #84]	; 0x54
 8007724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	2900      	cmp	r1, #0
 800772a:	d0ca      	beq.n	80076c2 <__sflush_r+0x1a>
 800772c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007730:	4299      	cmp	r1, r3
 8007732:	d002      	beq.n	800773a <__sflush_r+0x92>
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f9d5 	bl	8007ae4 <_free_r>
 800773a:	2000      	movs	r0, #0
 800773c:	6360      	str	r0, [r4, #52]	; 0x34
 800773e:	e7c1      	b.n	80076c4 <__sflush_r+0x1c>
 8007740:	6a21      	ldr	r1, [r4, #32]
 8007742:	2301      	movs	r3, #1
 8007744:	4628      	mov	r0, r5
 8007746:	47b0      	blx	r6
 8007748:	1c41      	adds	r1, r0, #1
 800774a:	d1c7      	bne.n	80076dc <__sflush_r+0x34>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0c4      	beq.n	80076dc <__sflush_r+0x34>
 8007752:	2b1d      	cmp	r3, #29
 8007754:	d001      	beq.n	800775a <__sflush_r+0xb2>
 8007756:	2b16      	cmp	r3, #22
 8007758:	d101      	bne.n	800775e <__sflush_r+0xb6>
 800775a:	602f      	str	r7, [r5, #0]
 800775c:	e7b1      	b.n	80076c2 <__sflush_r+0x1a>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7ad      	b.n	80076c4 <__sflush_r+0x1c>
 8007768:	690f      	ldr	r7, [r1, #16]
 800776a:	2f00      	cmp	r7, #0
 800776c:	d0a9      	beq.n	80076c2 <__sflush_r+0x1a>
 800776e:	0793      	lsls	r3, r2, #30
 8007770:	680e      	ldr	r6, [r1, #0]
 8007772:	bf08      	it	eq
 8007774:	694b      	ldreq	r3, [r1, #20]
 8007776:	600f      	str	r7, [r1, #0]
 8007778:	bf18      	it	ne
 800777a:	2300      	movne	r3, #0
 800777c:	eba6 0807 	sub.w	r8, r6, r7
 8007780:	608b      	str	r3, [r1, #8]
 8007782:	f1b8 0f00 	cmp.w	r8, #0
 8007786:	dd9c      	ble.n	80076c2 <__sflush_r+0x1a>
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800778c:	4643      	mov	r3, r8
 800778e:	463a      	mov	r2, r7
 8007790:	4628      	mov	r0, r5
 8007792:	47b0      	blx	r6
 8007794:	2800      	cmp	r0, #0
 8007796:	dc06      	bgt.n	80077a6 <__sflush_r+0xfe>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a4:	e78e      	b.n	80076c4 <__sflush_r+0x1c>
 80077a6:	4407      	add	r7, r0
 80077a8:	eba8 0800 	sub.w	r8, r8, r0
 80077ac:	e7e9      	b.n	8007782 <__sflush_r+0xda>
 80077ae:	bf00      	nop
 80077b0:	20400001 	.word	0x20400001

080077b4 <_fflush_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b913      	cbnz	r3, 80077c4 <_fflush_r+0x10>
 80077be:	2500      	movs	r5, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	b118      	cbz	r0, 80077ce <_fflush_r+0x1a>
 80077c6:	6983      	ldr	r3, [r0, #24]
 80077c8:	b90b      	cbnz	r3, 80077ce <_fflush_r+0x1a>
 80077ca:	f000 f887 	bl	80078dc <__sinit>
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <_fflush_r+0x6c>)
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d11b      	bne.n	800780c <_fflush_r+0x58>
 80077d4:	686c      	ldr	r4, [r5, #4]
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ef      	beq.n	80077be <_fflush_r+0xa>
 80077de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077e0:	07d0      	lsls	r0, r2, #31
 80077e2:	d404      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e4:	0599      	lsls	r1, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ea:	f000 f915 	bl	8007a18 <__retarget_lock_acquire_recursive>
 80077ee:	4628      	mov	r0, r5
 80077f0:	4621      	mov	r1, r4
 80077f2:	f7ff ff59 	bl	80076a8 <__sflush_r>
 80077f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f8:	07da      	lsls	r2, r3, #31
 80077fa:	4605      	mov	r5, r0
 80077fc:	d4e0      	bmi.n	80077c0 <_fflush_r+0xc>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d4dd      	bmi.n	80077c0 <_fflush_r+0xc>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f000 f908 	bl	8007a1a <__retarget_lock_release_recursive>
 800780a:	e7d9      	b.n	80077c0 <_fflush_r+0xc>
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <_fflush_r+0x70>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <_fflush_r+0x62>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7df      	b.n	80077d6 <_fflush_r+0x22>
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <_fflush_r+0x74>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7da      	b.n	80077d6 <_fflush_r+0x22>
 8007820:	080084b4 	.word	0x080084b4
 8007824:	080084d4 	.word	0x080084d4
 8007828:	08008494 	.word	0x08008494

0800782c <std>:
 800782c:	2300      	movs	r3, #0
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	e9c0 3300 	strd	r3, r3, [r0]
 8007836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783a:	6083      	str	r3, [r0, #8]
 800783c:	8181      	strh	r1, [r0, #12]
 800783e:	6643      	str	r3, [r0, #100]	; 0x64
 8007840:	81c2      	strh	r2, [r0, #14]
 8007842:	6183      	str	r3, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	2208      	movs	r2, #8
 8007848:	305c      	adds	r0, #92	; 0x5c
 800784a:	f7ff fdd7 	bl	80073fc <memset>
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <std+0x38>)
 8007850:	6263      	str	r3, [r4, #36]	; 0x24
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x3c>)
 8007854:	62a3      	str	r3, [r4, #40]	; 0x28
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x40>)
 8007858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <std+0x44>)
 800785c:	6224      	str	r4, [r4, #32]
 800785e:	6323      	str	r3, [r4, #48]	; 0x30
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	08008235 	.word	0x08008235
 8007868:	08008257 	.word	0x08008257
 800786c:	0800828f 	.word	0x0800828f
 8007870:	080082b3 	.word	0x080082b3

08007874 <_cleanup_r>:
 8007874:	4901      	ldr	r1, [pc, #4]	; (800787c <_cleanup_r+0x8>)
 8007876:	f000 b8af 	b.w	80079d8 <_fwalk_reent>
 800787a:	bf00      	nop
 800787c:	080077b5 	.word	0x080077b5

08007880 <__sfmoreglue>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	1e4a      	subs	r2, r1, #1
 8007884:	2568      	movs	r5, #104	; 0x68
 8007886:	4355      	muls	r5, r2
 8007888:	460e      	mov	r6, r1
 800788a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800788e:	f000 f979 	bl	8007b84 <_malloc_r>
 8007892:	4604      	mov	r4, r0
 8007894:	b140      	cbz	r0, 80078a8 <__sfmoreglue+0x28>
 8007896:	2100      	movs	r1, #0
 8007898:	e9c0 1600 	strd	r1, r6, [r0]
 800789c:	300c      	adds	r0, #12
 800789e:	60a0      	str	r0, [r4, #8]
 80078a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a4:	f7ff fdaa 	bl	80073fc <memset>
 80078a8:	4620      	mov	r0, r4
 80078aa:	bd70      	pop	{r4, r5, r6, pc}

080078ac <__sfp_lock_acquire>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__sfp_lock_acquire+0x8>)
 80078ae:	f000 b8b3 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078b2:	bf00      	nop
 80078b4:	20001c18 	.word	0x20001c18

080078b8 <__sfp_lock_release>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__sfp_lock_release+0x8>)
 80078ba:	f000 b8ae 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078be:	bf00      	nop
 80078c0:	20001c18 	.word	0x20001c18

080078c4 <__sinit_lock_acquire>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sinit_lock_acquire+0x8>)
 80078c6:	f000 b8a7 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	20001c13 	.word	0x20001c13

080078d0 <__sinit_lock_release>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sinit_lock_release+0x8>)
 80078d2:	f000 b8a2 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	20001c13 	.word	0x20001c13

080078dc <__sinit>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4604      	mov	r4, r0
 80078e0:	f7ff fff0 	bl	80078c4 <__sinit_lock_acquire>
 80078e4:	69a3      	ldr	r3, [r4, #24]
 80078e6:	b11b      	cbz	r3, 80078f0 <__sinit+0x14>
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	f7ff bff0 	b.w	80078d0 <__sinit_lock_release>
 80078f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f4:	6523      	str	r3, [r4, #80]	; 0x50
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <__sinit+0x68>)
 80078f8:	4a13      	ldr	r2, [pc, #76]	; (8007948 <__sinit+0x6c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80078fe:	42a3      	cmp	r3, r4
 8007900:	bf04      	itt	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	61a3      	streq	r3, [r4, #24]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f820 	bl	800794c <__sfp>
 800790c:	6060      	str	r0, [r4, #4]
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f81c 	bl	800794c <__sfp>
 8007914:	60a0      	str	r0, [r4, #8]
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f818 	bl	800794c <__sfp>
 800791c:	2200      	movs	r2, #0
 800791e:	60e0      	str	r0, [r4, #12]
 8007920:	2104      	movs	r1, #4
 8007922:	6860      	ldr	r0, [r4, #4]
 8007924:	f7ff ff82 	bl	800782c <std>
 8007928:	68a0      	ldr	r0, [r4, #8]
 800792a:	2201      	movs	r2, #1
 800792c:	2109      	movs	r1, #9
 800792e:	f7ff ff7d 	bl	800782c <std>
 8007932:	68e0      	ldr	r0, [r4, #12]
 8007934:	2202      	movs	r2, #2
 8007936:	2112      	movs	r1, #18
 8007938:	f7ff ff78 	bl	800782c <std>
 800793c:	2301      	movs	r3, #1
 800793e:	61a3      	str	r3, [r4, #24]
 8007940:	e7d2      	b.n	80078e8 <__sinit+0xc>
 8007942:	bf00      	nop
 8007944:	08008490 	.word	0x08008490
 8007948:	08007875 	.word	0x08007875

0800794c <__sfp>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	4607      	mov	r7, r0
 8007950:	f7ff ffac 	bl	80078ac <__sfp_lock_acquire>
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <__sfp+0x84>)
 8007956:	681e      	ldr	r6, [r3, #0]
 8007958:	69b3      	ldr	r3, [r6, #24]
 800795a:	b913      	cbnz	r3, 8007962 <__sfp+0x16>
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ffbd 	bl	80078dc <__sinit>
 8007962:	3648      	adds	r6, #72	; 0x48
 8007964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007968:	3b01      	subs	r3, #1
 800796a:	d503      	bpl.n	8007974 <__sfp+0x28>
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	b30b      	cbz	r3, 80079b4 <__sfp+0x68>
 8007970:	6836      	ldr	r6, [r6, #0]
 8007972:	e7f7      	b.n	8007964 <__sfp+0x18>
 8007974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007978:	b9d5      	cbnz	r5, 80079b0 <__sfp+0x64>
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <__sfp+0x88>)
 800797c:	60e3      	str	r3, [r4, #12]
 800797e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007982:	6665      	str	r5, [r4, #100]	; 0x64
 8007984:	f000 f847 	bl	8007a16 <__retarget_lock_init_recursive>
 8007988:	f7ff ff96 	bl	80078b8 <__sfp_lock_release>
 800798c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007994:	6025      	str	r5, [r4, #0]
 8007996:	61a5      	str	r5, [r4, #24]
 8007998:	2208      	movs	r2, #8
 800799a:	4629      	mov	r1, r5
 800799c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a0:	f7ff fd2c 	bl	80073fc <memset>
 80079a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079ac:	4620      	mov	r0, r4
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	3468      	adds	r4, #104	; 0x68
 80079b2:	e7d9      	b.n	8007968 <__sfp+0x1c>
 80079b4:	2104      	movs	r1, #4
 80079b6:	4638      	mov	r0, r7
 80079b8:	f7ff ff62 	bl	8007880 <__sfmoreglue>
 80079bc:	4604      	mov	r4, r0
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1d5      	bne.n	8007970 <__sfp+0x24>
 80079c4:	f7ff ff78 	bl	80078b8 <__sfp_lock_release>
 80079c8:	230c      	movs	r3, #12
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	e7ee      	b.n	80079ac <__sfp+0x60>
 80079ce:	bf00      	nop
 80079d0:	08008490 	.word	0x08008490
 80079d4:	ffff0001 	.word	0xffff0001

080079d8 <_fwalk_reent>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4606      	mov	r6, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e4:	2700      	movs	r7, #0
 80079e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ea:	f1b9 0901 	subs.w	r9, r9, #1
 80079ee:	d505      	bpl.n	80079fc <_fwalk_reent+0x24>
 80079f0:	6824      	ldr	r4, [r4, #0]
 80079f2:	2c00      	cmp	r4, #0
 80079f4:	d1f7      	bne.n	80079e6 <_fwalk_reent+0xe>
 80079f6:	4638      	mov	r0, r7
 80079f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d907      	bls.n	8007a12 <_fwalk_reent+0x3a>
 8007a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a06:	3301      	adds	r3, #1
 8007a08:	d003      	beq.n	8007a12 <_fwalk_reent+0x3a>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	47c0      	blx	r8
 8007a10:	4307      	orrs	r7, r0
 8007a12:	3568      	adds	r5, #104	; 0x68
 8007a14:	e7e9      	b.n	80079ea <_fwalk_reent+0x12>

08007a16 <__retarget_lock_init_recursive>:
 8007a16:	4770      	bx	lr

08007a18 <__retarget_lock_acquire_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_release_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <__swhatbuf_r>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	460e      	mov	r6, r1
 8007a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a24:	2900      	cmp	r1, #0
 8007a26:	b096      	sub	sp, #88	; 0x58
 8007a28:	4614      	mov	r4, r2
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	da07      	bge.n	8007a3e <__swhatbuf_r+0x22>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	602b      	str	r3, [r5, #0]
 8007a32:	89b3      	ldrh	r3, [r6, #12]
 8007a34:	061a      	lsls	r2, r3, #24
 8007a36:	d410      	bmi.n	8007a5a <__swhatbuf_r+0x3e>
 8007a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3c:	e00e      	b.n	8007a5c <__swhatbuf_r+0x40>
 8007a3e:	466a      	mov	r2, sp
 8007a40:	f000 fc5e 	bl	8008300 <_fstat_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	dbf2      	blt.n	8007a2e <__swhatbuf_r+0x12>
 8007a48:	9a01      	ldr	r2, [sp, #4]
 8007a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a52:	425a      	negs	r2, r3
 8007a54:	415a      	adcs	r2, r3
 8007a56:	602a      	str	r2, [r5, #0]
 8007a58:	e7ee      	b.n	8007a38 <__swhatbuf_r+0x1c>
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	b016      	add	sp, #88	; 0x58
 8007a62:	bd70      	pop	{r4, r5, r6, pc}

08007a64 <__smakebuf_r>:
 8007a64:	898b      	ldrh	r3, [r1, #12]
 8007a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a68:	079d      	lsls	r5, r3, #30
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	d507      	bpl.n	8007a80 <__smakebuf_r+0x1c>
 8007a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	6163      	str	r3, [r4, #20]
 8007a7c:	b002      	add	sp, #8
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	ab01      	add	r3, sp, #4
 8007a82:	466a      	mov	r2, sp
 8007a84:	f7ff ffca 	bl	8007a1c <__swhatbuf_r>
 8007a88:	9900      	ldr	r1, [sp, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f000 f879 	bl	8007b84 <_malloc_r>
 8007a92:	b948      	cbnz	r0, 8007aa8 <__smakebuf_r+0x44>
 8007a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a98:	059a      	lsls	r2, r3, #22
 8007a9a:	d4ef      	bmi.n	8007a7c <__smakebuf_r+0x18>
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	e7e3      	b.n	8007a70 <__smakebuf_r+0xc>
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <__smakebuf_r+0x7c>)
 8007aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	6163      	str	r3, [r4, #20]
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	6120      	str	r0, [r4, #16]
 8007abe:	b15b      	cbz	r3, 8007ad8 <__smakebuf_r+0x74>
 8007ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f000 fc2d 	bl	8008324 <_isatty_r>
 8007aca:	b128      	cbz	r0, 8007ad8 <__smakebuf_r+0x74>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	89a0      	ldrh	r0, [r4, #12]
 8007ada:	4305      	orrs	r5, r0
 8007adc:	81a5      	strh	r5, [r4, #12]
 8007ade:	e7cd      	b.n	8007a7c <__smakebuf_r+0x18>
 8007ae0:	08007875 	.word	0x08007875

08007ae4 <_free_r>:
 8007ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d048      	beq.n	8007b7c <_free_r+0x98>
 8007aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aee:	9001      	str	r0, [sp, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f1a1 0404 	sub.w	r4, r1, #4
 8007af6:	bfb8      	it	lt
 8007af8:	18e4      	addlt	r4, r4, r3
 8007afa:	f000 fc35 	bl	8008368 <__malloc_lock>
 8007afe:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <_free_r+0x9c>)
 8007b00:	9801      	ldr	r0, [sp, #4]
 8007b02:	6813      	ldr	r3, [r2, #0]
 8007b04:	4615      	mov	r5, r2
 8007b06:	b933      	cbnz	r3, 8007b16 <_free_r+0x32>
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	6014      	str	r4, [r2, #0]
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b12:	f000 bc2f 	b.w	8008374 <__malloc_unlock>
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	d90b      	bls.n	8007b32 <_free_r+0x4e>
 8007b1a:	6821      	ldr	r1, [r4, #0]
 8007b1c:	1862      	adds	r2, r4, r1
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bf04      	itt	eq
 8007b22:	681a      	ldreq	r2, [r3, #0]
 8007b24:	685b      	ldreq	r3, [r3, #4]
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	bf04      	itt	eq
 8007b2a:	1852      	addeq	r2, r2, r1
 8007b2c:	6022      	streq	r2, [r4, #0]
 8007b2e:	602c      	str	r4, [r5, #0]
 8007b30:	e7ec      	b.n	8007b0c <_free_r+0x28>
 8007b32:	461a      	mov	r2, r3
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b10b      	cbz	r3, 8007b3c <_free_r+0x58>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d9fa      	bls.n	8007b32 <_free_r+0x4e>
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	1855      	adds	r5, r2, r1
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d10b      	bne.n	8007b5c <_free_r+0x78>
 8007b44:	6824      	ldr	r4, [r4, #0]
 8007b46:	4421      	add	r1, r4
 8007b48:	1854      	adds	r4, r2, r1
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	d1dd      	bne.n	8007b0c <_free_r+0x28>
 8007b50:	681c      	ldr	r4, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	6053      	str	r3, [r2, #4]
 8007b56:	4421      	add	r1, r4
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	e7d7      	b.n	8007b0c <_free_r+0x28>
 8007b5c:	d902      	bls.n	8007b64 <_free_r+0x80>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	e7d3      	b.n	8007b0c <_free_r+0x28>
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf04      	itt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	bf04      	itt	eq
 8007b74:	1949      	addeq	r1, r1, r5
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	6054      	str	r4, [r2, #4]
 8007b7a:	e7c7      	b.n	8007b0c <_free_r+0x28>
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	2000195c 	.word	0x2000195c

08007b84 <_malloc_r>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	1ccd      	adds	r5, r1, #3
 8007b88:	f025 0503 	bic.w	r5, r5, #3
 8007b8c:	3508      	adds	r5, #8
 8007b8e:	2d0c      	cmp	r5, #12
 8007b90:	bf38      	it	cc
 8007b92:	250c      	movcc	r5, #12
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	4606      	mov	r6, r0
 8007b98:	db01      	blt.n	8007b9e <_malloc_r+0x1a>
 8007b9a:	42a9      	cmp	r1, r5
 8007b9c:	d903      	bls.n	8007ba6 <_malloc_r+0x22>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	f000 fbdf 	bl	8008368 <__malloc_lock>
 8007baa:	4921      	ldr	r1, [pc, #132]	; (8007c30 <_malloc_r+0xac>)
 8007bac:	680a      	ldr	r2, [r1, #0]
 8007bae:	4614      	mov	r4, r2
 8007bb0:	b99c      	cbnz	r4, 8007bda <_malloc_r+0x56>
 8007bb2:	4f20      	ldr	r7, [pc, #128]	; (8007c34 <_malloc_r+0xb0>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	b923      	cbnz	r3, 8007bc2 <_malloc_r+0x3e>
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f000 fb2a 	bl	8008214 <_sbrk_r>
 8007bc0:	6038      	str	r0, [r7, #0]
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 fb25 	bl	8008214 <_sbrk_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d123      	bne.n	8007c16 <_malloc_r+0x92>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 fbce 	bl	8008374 <__malloc_unlock>
 8007bd8:	e7e3      	b.n	8007ba2 <_malloc_r+0x1e>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	1b5b      	subs	r3, r3, r5
 8007bde:	d417      	bmi.n	8007c10 <_malloc_r+0x8c>
 8007be0:	2b0b      	cmp	r3, #11
 8007be2:	d903      	bls.n	8007bec <_malloc_r+0x68>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	441c      	add	r4, r3
 8007be8:	6025      	str	r5, [r4, #0]
 8007bea:	e004      	b.n	8007bf6 <_malloc_r+0x72>
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	42a2      	cmp	r2, r4
 8007bf0:	bf0c      	ite	eq
 8007bf2:	600b      	streq	r3, [r1, #0]
 8007bf4:	6053      	strne	r3, [r2, #4]
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 fbbc 	bl	8008374 <__malloc_unlock>
 8007bfc:	f104 000b 	add.w	r0, r4, #11
 8007c00:	1d23      	adds	r3, r4, #4
 8007c02:	f020 0007 	bic.w	r0, r0, #7
 8007c06:	1ac2      	subs	r2, r0, r3
 8007c08:	d0cc      	beq.n	8007ba4 <_malloc_r+0x20>
 8007c0a:	1a1b      	subs	r3, r3, r0
 8007c0c:	50a3      	str	r3, [r4, r2]
 8007c0e:	e7c9      	b.n	8007ba4 <_malloc_r+0x20>
 8007c10:	4622      	mov	r2, r4
 8007c12:	6864      	ldr	r4, [r4, #4]
 8007c14:	e7cc      	b.n	8007bb0 <_malloc_r+0x2c>
 8007c16:	1cc4      	adds	r4, r0, #3
 8007c18:	f024 0403 	bic.w	r4, r4, #3
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d0e3      	beq.n	8007be8 <_malloc_r+0x64>
 8007c20:	1a21      	subs	r1, r4, r0
 8007c22:	4630      	mov	r0, r6
 8007c24:	f000 faf6 	bl	8008214 <_sbrk_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d1dd      	bne.n	8007be8 <_malloc_r+0x64>
 8007c2c:	e7cf      	b.n	8007bce <_malloc_r+0x4a>
 8007c2e:	bf00      	nop
 8007c30:	2000195c 	.word	0x2000195c
 8007c34:	20001960 	.word	0x20001960

08007c38 <__sfputc_r>:
 8007c38:	6893      	ldr	r3, [r2, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	b410      	push	{r4}
 8007c40:	6093      	str	r3, [r2, #8]
 8007c42:	da08      	bge.n	8007c56 <__sfputc_r+0x1e>
 8007c44:	6994      	ldr	r4, [r2, #24]
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	db01      	blt.n	8007c4e <__sfputc_r+0x16>
 8007c4a:	290a      	cmp	r1, #10
 8007c4c:	d103      	bne.n	8007c56 <__sfputc_r+0x1e>
 8007c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c52:	f7ff bc69 	b.w	8007528 <__swbuf_r>
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	1c58      	adds	r0, r3, #1
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	7019      	strb	r1, [r3, #0]
 8007c5e:	4608      	mov	r0, r1
 8007c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <__sfputs_r>:
 8007c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c68:	4606      	mov	r6, r0
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	18d5      	adds	r5, r2, r3
 8007c70:	42ac      	cmp	r4, r5
 8007c72:	d101      	bne.n	8007c78 <__sfputs_r+0x12>
 8007c74:	2000      	movs	r0, #0
 8007c76:	e007      	b.n	8007c88 <__sfputs_r+0x22>
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ffda 	bl	8007c38 <__sfputc_r>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d1f3      	bne.n	8007c70 <__sfputs_r+0xa>
 8007c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c8c <_vfiprintf_r>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	460d      	mov	r5, r1
 8007c92:	b09d      	sub	sp, #116	; 0x74
 8007c94:	4614      	mov	r4, r2
 8007c96:	4698      	mov	r8, r3
 8007c98:	4606      	mov	r6, r0
 8007c9a:	b118      	cbz	r0, 8007ca4 <_vfiprintf_r+0x18>
 8007c9c:	6983      	ldr	r3, [r0, #24]
 8007c9e:	b90b      	cbnz	r3, 8007ca4 <_vfiprintf_r+0x18>
 8007ca0:	f7ff fe1c 	bl	80078dc <__sinit>
 8007ca4:	4b89      	ldr	r3, [pc, #548]	; (8007ecc <_vfiprintf_r+0x240>)
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	d11b      	bne.n	8007ce2 <_vfiprintf_r+0x56>
 8007caa:	6875      	ldr	r5, [r6, #4]
 8007cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	d405      	bmi.n	8007cbe <_vfiprintf_r+0x32>
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	059a      	lsls	r2, r3, #22
 8007cb6:	d402      	bmi.n	8007cbe <_vfiprintf_r+0x32>
 8007cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cba:	f7ff fead 	bl	8007a18 <__retarget_lock_acquire_recursive>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	071b      	lsls	r3, r3, #28
 8007cc2:	d501      	bpl.n	8007cc8 <_vfiprintf_r+0x3c>
 8007cc4:	692b      	ldr	r3, [r5, #16]
 8007cc6:	b9eb      	cbnz	r3, 8007d04 <_vfiprintf_r+0x78>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff fc7e 	bl	80075cc <__swsetup_r>
 8007cd0:	b1c0      	cbz	r0, 8007d04 <_vfiprintf_r+0x78>
 8007cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cd4:	07dc      	lsls	r4, r3, #31
 8007cd6:	d50e      	bpl.n	8007cf6 <_vfiprintf_r+0x6a>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cdc:	b01d      	add	sp, #116	; 0x74
 8007cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce2:	4b7b      	ldr	r3, [pc, #492]	; (8007ed0 <_vfiprintf_r+0x244>)
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	d101      	bne.n	8007cec <_vfiprintf_r+0x60>
 8007ce8:	68b5      	ldr	r5, [r6, #8]
 8007cea:	e7df      	b.n	8007cac <_vfiprintf_r+0x20>
 8007cec:	4b79      	ldr	r3, [pc, #484]	; (8007ed4 <_vfiprintf_r+0x248>)
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	bf08      	it	eq
 8007cf2:	68f5      	ldreq	r5, [r6, #12]
 8007cf4:	e7da      	b.n	8007cac <_vfiprintf_r+0x20>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	0598      	lsls	r0, r3, #22
 8007cfa:	d4ed      	bmi.n	8007cd8 <_vfiprintf_r+0x4c>
 8007cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfe:	f7ff fe8c 	bl	8007a1a <__retarget_lock_release_recursive>
 8007d02:	e7e9      	b.n	8007cd8 <_vfiprintf_r+0x4c>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	2320      	movs	r3, #32
 8007d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d12:	2330      	movs	r3, #48	; 0x30
 8007d14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ed8 <_vfiprintf_r+0x24c>
 8007d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d1c:	f04f 0901 	mov.w	r9, #1
 8007d20:	4623      	mov	r3, r4
 8007d22:	469a      	mov	sl, r3
 8007d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d28:	b10a      	cbz	r2, 8007d2e <_vfiprintf_r+0xa2>
 8007d2a:	2a25      	cmp	r2, #37	; 0x25
 8007d2c:	d1f9      	bne.n	8007d22 <_vfiprintf_r+0x96>
 8007d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d32:	d00b      	beq.n	8007d4c <_vfiprintf_r+0xc0>
 8007d34:	465b      	mov	r3, fp
 8007d36:	4622      	mov	r2, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff93 	bl	8007c66 <__sfputs_r>
 8007d40:	3001      	adds	r0, #1
 8007d42:	f000 80aa 	beq.w	8007e9a <_vfiprintf_r+0x20e>
 8007d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d48:	445a      	add	r2, fp
 8007d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80a2 	beq.w	8007e9a <_vfiprintf_r+0x20e>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d60:	f10a 0a01 	add.w	sl, sl, #1
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d6e:	4654      	mov	r4, sl
 8007d70:	2205      	movs	r2, #5
 8007d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d76:	4858      	ldr	r0, [pc, #352]	; (8007ed8 <_vfiprintf_r+0x24c>)
 8007d78:	f7f8 fa2a 	bl	80001d0 <memchr>
 8007d7c:	9a04      	ldr	r2, [sp, #16]
 8007d7e:	b9d8      	cbnz	r0, 8007db8 <_vfiprintf_r+0x12c>
 8007d80:	06d1      	lsls	r1, r2, #27
 8007d82:	bf44      	itt	mi
 8007d84:	2320      	movmi	r3, #32
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8a:	0713      	lsls	r3, r2, #28
 8007d8c:	bf44      	itt	mi
 8007d8e:	232b      	movmi	r3, #43	; 0x2b
 8007d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d94:	f89a 3000 	ldrb.w	r3, [sl]
 8007d98:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9a:	d015      	beq.n	8007dc8 <_vfiprintf_r+0x13c>
 8007d9c:	9a07      	ldr	r2, [sp, #28]
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2000      	movs	r0, #0
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	4621      	mov	r1, r4
 8007da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dac:	3b30      	subs	r3, #48	; 0x30
 8007dae:	2b09      	cmp	r3, #9
 8007db0:	d94e      	bls.n	8007e50 <_vfiprintf_r+0x1c4>
 8007db2:	b1b0      	cbz	r0, 8007de2 <_vfiprintf_r+0x156>
 8007db4:	9207      	str	r2, [sp, #28]
 8007db6:	e014      	b.n	8007de2 <_vfiprintf_r+0x156>
 8007db8:	eba0 0308 	sub.w	r3, r0, r8
 8007dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	46a2      	mov	sl, r4
 8007dc6:	e7d2      	b.n	8007d6e <_vfiprintf_r+0xe2>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	1d19      	adds	r1, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	9103      	str	r1, [sp, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfbb      	ittet	lt
 8007dd4:	425b      	neglt	r3, r3
 8007dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dda:	9307      	strge	r3, [sp, #28]
 8007ddc:	9307      	strlt	r3, [sp, #28]
 8007dde:	bfb8      	it	lt
 8007de0:	9204      	strlt	r2, [sp, #16]
 8007de2:	7823      	ldrb	r3, [r4, #0]
 8007de4:	2b2e      	cmp	r3, #46	; 0x2e
 8007de6:	d10c      	bne.n	8007e02 <_vfiprintf_r+0x176>
 8007de8:	7863      	ldrb	r3, [r4, #1]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d135      	bne.n	8007e5a <_vfiprintf_r+0x1ce>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	1d1a      	adds	r2, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9203      	str	r2, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dfe:	3402      	adds	r4, #2
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ee8 <_vfiprintf_r+0x25c>
 8007e06:	7821      	ldrb	r1, [r4, #0]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	f7f8 f9e0 	bl	80001d0 <memchr>
 8007e10:	b140      	cbz	r0, 8007e24 <_vfiprintf_r+0x198>
 8007e12:	2340      	movs	r3, #64	; 0x40
 8007e14:	eba0 000a 	sub.w	r0, r0, sl
 8007e18:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1c:	9b04      	ldr	r3, [sp, #16]
 8007e1e:	4303      	orrs	r3, r0
 8007e20:	3401      	adds	r4, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e28:	482c      	ldr	r0, [pc, #176]	; (8007edc <_vfiprintf_r+0x250>)
 8007e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e2e:	2206      	movs	r2, #6
 8007e30:	f7f8 f9ce 	bl	80001d0 <memchr>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d03f      	beq.n	8007eb8 <_vfiprintf_r+0x22c>
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <_vfiprintf_r+0x254>)
 8007e3a:	bb1b      	cbnz	r3, 8007e84 <_vfiprintf_r+0x1f8>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	3307      	adds	r3, #7
 8007e40:	f023 0307 	bic.w	r3, r3, #7
 8007e44:	3308      	adds	r3, #8
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	443b      	add	r3, r7
 8007e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4e:	e767      	b.n	8007d20 <_vfiprintf_r+0x94>
 8007e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e54:	460c      	mov	r4, r1
 8007e56:	2001      	movs	r0, #1
 8007e58:	e7a5      	b.n	8007da6 <_vfiprintf_r+0x11a>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	9305      	str	r3, [sp, #20]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f04f 0c0a 	mov.w	ip, #10
 8007e66:	4620      	mov	r0, r4
 8007e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6c:	3a30      	subs	r2, #48	; 0x30
 8007e6e:	2a09      	cmp	r2, #9
 8007e70:	d903      	bls.n	8007e7a <_vfiprintf_r+0x1ee>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c5      	beq.n	8007e02 <_vfiprintf_r+0x176>
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	e7c3      	b.n	8007e02 <_vfiprintf_r+0x176>
 8007e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e7e:	4604      	mov	r4, r0
 8007e80:	2301      	movs	r3, #1
 8007e82:	e7f0      	b.n	8007e66 <_vfiprintf_r+0x1da>
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <_vfiprintf_r+0x258>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f3af 8000 	nop.w
 8007e94:	4607      	mov	r7, r0
 8007e96:	1c78      	adds	r0, r7, #1
 8007e98:	d1d6      	bne.n	8007e48 <_vfiprintf_r+0x1bc>
 8007e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e9c:	07d9      	lsls	r1, r3, #31
 8007e9e:	d405      	bmi.n	8007eac <_vfiprintf_r+0x220>
 8007ea0:	89ab      	ldrh	r3, [r5, #12]
 8007ea2:	059a      	lsls	r2, r3, #22
 8007ea4:	d402      	bmi.n	8007eac <_vfiprintf_r+0x220>
 8007ea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ea8:	f7ff fdb7 	bl	8007a1a <__retarget_lock_release_recursive>
 8007eac:	89ab      	ldrh	r3, [r5, #12]
 8007eae:	065b      	lsls	r3, r3, #25
 8007eb0:	f53f af12 	bmi.w	8007cd8 <_vfiprintf_r+0x4c>
 8007eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eb6:	e711      	b.n	8007cdc <_vfiprintf_r+0x50>
 8007eb8:	ab03      	add	r3, sp, #12
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <_vfiprintf_r+0x258>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 f880 	bl	8007fc8 <_printf_i>
 8007ec8:	e7e4      	b.n	8007e94 <_vfiprintf_r+0x208>
 8007eca:	bf00      	nop
 8007ecc:	080084b4 	.word	0x080084b4
 8007ed0:	080084d4 	.word	0x080084d4
 8007ed4:	08008494 	.word	0x08008494
 8007ed8:	080084f4 	.word	0x080084f4
 8007edc:	080084fe 	.word	0x080084fe
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	08007c67 	.word	0x08007c67
 8007ee8:	080084fa 	.word	0x080084fa

08007eec <_printf_common>:
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	4699      	mov	r9, r3
 8007ef4:	688a      	ldr	r2, [r1, #8]
 8007ef6:	690b      	ldr	r3, [r1, #16]
 8007ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	bfb8      	it	lt
 8007f00:	4613      	movlt	r3, r2
 8007f02:	6033      	str	r3, [r6, #0]
 8007f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f08:	4607      	mov	r7, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b10a      	cbz	r2, 8007f12 <_printf_common+0x26>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	6033      	str	r3, [r6, #0]
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	0699      	lsls	r1, r3, #26
 8007f16:	bf42      	ittt	mi
 8007f18:	6833      	ldrmi	r3, [r6, #0]
 8007f1a:	3302      	addmi	r3, #2
 8007f1c:	6033      	strmi	r3, [r6, #0]
 8007f1e:	6825      	ldr	r5, [r4, #0]
 8007f20:	f015 0506 	ands.w	r5, r5, #6
 8007f24:	d106      	bne.n	8007f34 <_printf_common+0x48>
 8007f26:	f104 0a19 	add.w	sl, r4, #25
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	6832      	ldr	r2, [r6, #0]
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	dc26      	bgt.n	8007f82 <_printf_common+0x96>
 8007f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f38:	1e13      	subs	r3, r2, #0
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	bf18      	it	ne
 8007f3e:	2301      	movne	r3, #1
 8007f40:	0692      	lsls	r2, r2, #26
 8007f42:	d42b      	bmi.n	8007f9c <_printf_common+0xb0>
 8007f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	47c0      	blx	r8
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d01e      	beq.n	8007f90 <_printf_common+0xa4>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	68e5      	ldr	r5, [r4, #12]
 8007f56:	6832      	ldr	r2, [r6, #0]
 8007f58:	f003 0306 	and.w	r3, r3, #6
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	bf08      	it	eq
 8007f60:	1aad      	subeq	r5, r5, r2
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	6922      	ldr	r2, [r4, #16]
 8007f66:	bf0c      	ite	eq
 8007f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f6c:	2500      	movne	r5, #0
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	bfc4      	itt	gt
 8007f72:	1a9b      	subgt	r3, r3, r2
 8007f74:	18ed      	addgt	r5, r5, r3
 8007f76:	2600      	movs	r6, #0
 8007f78:	341a      	adds	r4, #26
 8007f7a:	42b5      	cmp	r5, r6
 8007f7c:	d11a      	bne.n	8007fb4 <_printf_common+0xc8>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e008      	b.n	8007f94 <_printf_common+0xa8>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4652      	mov	r2, sl
 8007f86:	4649      	mov	r1, r9
 8007f88:	4638      	mov	r0, r7
 8007f8a:	47c0      	blx	r8
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d103      	bne.n	8007f98 <_printf_common+0xac>
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f98:	3501      	adds	r5, #1
 8007f9a:	e7c6      	b.n	8007f2a <_printf_common+0x3e>
 8007f9c:	18e1      	adds	r1, r4, r3
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	2030      	movs	r0, #48	; 0x30
 8007fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fa6:	4422      	add	r2, r4
 8007fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	e7c7      	b.n	8007f44 <_printf_common+0x58>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4638      	mov	r0, r7
 8007fbc:	47c0      	blx	r8
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d0e6      	beq.n	8007f90 <_printf_common+0xa4>
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	e7d9      	b.n	8007f7a <_printf_common+0x8e>
	...

08007fc8 <_printf_i>:
 8007fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	460c      	mov	r4, r1
 8007fce:	4691      	mov	r9, r2
 8007fd0:	7e27      	ldrb	r7, [r4, #24]
 8007fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fd4:	2f78      	cmp	r7, #120	; 0x78
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	469a      	mov	sl, r3
 8007fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fde:	d807      	bhi.n	8007ff0 <_printf_i+0x28>
 8007fe0:	2f62      	cmp	r7, #98	; 0x62
 8007fe2:	d80a      	bhi.n	8007ffa <_printf_i+0x32>
 8007fe4:	2f00      	cmp	r7, #0
 8007fe6:	f000 80d8 	beq.w	800819a <_printf_i+0x1d2>
 8007fea:	2f58      	cmp	r7, #88	; 0x58
 8007fec:	f000 80a3 	beq.w	8008136 <_printf_i+0x16e>
 8007ff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ff8:	e03a      	b.n	8008070 <_printf_i+0xa8>
 8007ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ffe:	2b15      	cmp	r3, #21
 8008000:	d8f6      	bhi.n	8007ff0 <_printf_i+0x28>
 8008002:	a001      	add	r0, pc, #4	; (adr r0, 8008008 <_printf_i+0x40>)
 8008004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008008:	08008061 	.word	0x08008061
 800800c:	08008075 	.word	0x08008075
 8008010:	08007ff1 	.word	0x08007ff1
 8008014:	08007ff1 	.word	0x08007ff1
 8008018:	08007ff1 	.word	0x08007ff1
 800801c:	08007ff1 	.word	0x08007ff1
 8008020:	08008075 	.word	0x08008075
 8008024:	08007ff1 	.word	0x08007ff1
 8008028:	08007ff1 	.word	0x08007ff1
 800802c:	08007ff1 	.word	0x08007ff1
 8008030:	08007ff1 	.word	0x08007ff1
 8008034:	08008181 	.word	0x08008181
 8008038:	080080a5 	.word	0x080080a5
 800803c:	08008163 	.word	0x08008163
 8008040:	08007ff1 	.word	0x08007ff1
 8008044:	08007ff1 	.word	0x08007ff1
 8008048:	080081a3 	.word	0x080081a3
 800804c:	08007ff1 	.word	0x08007ff1
 8008050:	080080a5 	.word	0x080080a5
 8008054:	08007ff1 	.word	0x08007ff1
 8008058:	08007ff1 	.word	0x08007ff1
 800805c:	0800816b 	.word	0x0800816b
 8008060:	680b      	ldr	r3, [r1, #0]
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	600a      	str	r2, [r1, #0]
 8008068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800806c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008070:	2301      	movs	r3, #1
 8008072:	e0a3      	b.n	80081bc <_printf_i+0x1f4>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	6808      	ldr	r0, [r1, #0]
 8008078:	062e      	lsls	r6, r5, #24
 800807a:	f100 0304 	add.w	r3, r0, #4
 800807e:	d50a      	bpl.n	8008096 <_printf_i+0xce>
 8008080:	6805      	ldr	r5, [r0, #0]
 8008082:	600b      	str	r3, [r1, #0]
 8008084:	2d00      	cmp	r5, #0
 8008086:	da03      	bge.n	8008090 <_printf_i+0xc8>
 8008088:	232d      	movs	r3, #45	; 0x2d
 800808a:	426d      	negs	r5, r5
 800808c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008090:	485e      	ldr	r0, [pc, #376]	; (800820c <_printf_i+0x244>)
 8008092:	230a      	movs	r3, #10
 8008094:	e019      	b.n	80080ca <_printf_i+0x102>
 8008096:	f015 0f40 	tst.w	r5, #64	; 0x40
 800809a:	6805      	ldr	r5, [r0, #0]
 800809c:	600b      	str	r3, [r1, #0]
 800809e:	bf18      	it	ne
 80080a0:	b22d      	sxthne	r5, r5
 80080a2:	e7ef      	b.n	8008084 <_printf_i+0xbc>
 80080a4:	680b      	ldr	r3, [r1, #0]
 80080a6:	6825      	ldr	r5, [r4, #0]
 80080a8:	1d18      	adds	r0, r3, #4
 80080aa:	6008      	str	r0, [r1, #0]
 80080ac:	0628      	lsls	r0, r5, #24
 80080ae:	d501      	bpl.n	80080b4 <_printf_i+0xec>
 80080b0:	681d      	ldr	r5, [r3, #0]
 80080b2:	e002      	b.n	80080ba <_printf_i+0xf2>
 80080b4:	0669      	lsls	r1, r5, #25
 80080b6:	d5fb      	bpl.n	80080b0 <_printf_i+0xe8>
 80080b8:	881d      	ldrh	r5, [r3, #0]
 80080ba:	4854      	ldr	r0, [pc, #336]	; (800820c <_printf_i+0x244>)
 80080bc:	2f6f      	cmp	r7, #111	; 0x6f
 80080be:	bf0c      	ite	eq
 80080c0:	2308      	moveq	r3, #8
 80080c2:	230a      	movne	r3, #10
 80080c4:	2100      	movs	r1, #0
 80080c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ca:	6866      	ldr	r6, [r4, #4]
 80080cc:	60a6      	str	r6, [r4, #8]
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	bfa2      	ittt	ge
 80080d2:	6821      	ldrge	r1, [r4, #0]
 80080d4:	f021 0104 	bicge.w	r1, r1, #4
 80080d8:	6021      	strge	r1, [r4, #0]
 80080da:	b90d      	cbnz	r5, 80080e0 <_printf_i+0x118>
 80080dc:	2e00      	cmp	r6, #0
 80080de:	d04d      	beq.n	800817c <_printf_i+0x1b4>
 80080e0:	4616      	mov	r6, r2
 80080e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80080e6:	fb03 5711 	mls	r7, r3, r1, r5
 80080ea:	5dc7      	ldrb	r7, [r0, r7]
 80080ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080f0:	462f      	mov	r7, r5
 80080f2:	42bb      	cmp	r3, r7
 80080f4:	460d      	mov	r5, r1
 80080f6:	d9f4      	bls.n	80080e2 <_printf_i+0x11a>
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d10b      	bne.n	8008114 <_printf_i+0x14c>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	07df      	lsls	r7, r3, #31
 8008100:	d508      	bpl.n	8008114 <_printf_i+0x14c>
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	6861      	ldr	r1, [r4, #4]
 8008106:	4299      	cmp	r1, r3
 8008108:	bfde      	ittt	le
 800810a:	2330      	movle	r3, #48	; 0x30
 800810c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008110:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008114:	1b92      	subs	r2, r2, r6
 8008116:	6122      	str	r2, [r4, #16]
 8008118:	f8cd a000 	str.w	sl, [sp]
 800811c:	464b      	mov	r3, r9
 800811e:	aa03      	add	r2, sp, #12
 8008120:	4621      	mov	r1, r4
 8008122:	4640      	mov	r0, r8
 8008124:	f7ff fee2 	bl	8007eec <_printf_common>
 8008128:	3001      	adds	r0, #1
 800812a:	d14c      	bne.n	80081c6 <_printf_i+0x1fe>
 800812c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008130:	b004      	add	sp, #16
 8008132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008136:	4835      	ldr	r0, [pc, #212]	; (800820c <_printf_i+0x244>)
 8008138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	680e      	ldr	r6, [r1, #0]
 8008140:	061f      	lsls	r7, r3, #24
 8008142:	f856 5b04 	ldr.w	r5, [r6], #4
 8008146:	600e      	str	r6, [r1, #0]
 8008148:	d514      	bpl.n	8008174 <_printf_i+0x1ac>
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	bf44      	itt	mi
 800814e:	f043 0320 	orrmi.w	r3, r3, #32
 8008152:	6023      	strmi	r3, [r4, #0]
 8008154:	b91d      	cbnz	r5, 800815e <_printf_i+0x196>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	f023 0320 	bic.w	r3, r3, #32
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	2310      	movs	r3, #16
 8008160:	e7b0      	b.n	80080c4 <_printf_i+0xfc>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	f043 0320 	orr.w	r3, r3, #32
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	2378      	movs	r3, #120	; 0x78
 800816c:	4828      	ldr	r0, [pc, #160]	; (8008210 <_printf_i+0x248>)
 800816e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008172:	e7e3      	b.n	800813c <_printf_i+0x174>
 8008174:	065e      	lsls	r6, r3, #25
 8008176:	bf48      	it	mi
 8008178:	b2ad      	uxthmi	r5, r5
 800817a:	e7e6      	b.n	800814a <_printf_i+0x182>
 800817c:	4616      	mov	r6, r2
 800817e:	e7bb      	b.n	80080f8 <_printf_i+0x130>
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	6826      	ldr	r6, [r4, #0]
 8008184:	6960      	ldr	r0, [r4, #20]
 8008186:	1d1d      	adds	r5, r3, #4
 8008188:	600d      	str	r5, [r1, #0]
 800818a:	0635      	lsls	r5, r6, #24
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	d501      	bpl.n	8008194 <_printf_i+0x1cc>
 8008190:	6018      	str	r0, [r3, #0]
 8008192:	e002      	b.n	800819a <_printf_i+0x1d2>
 8008194:	0671      	lsls	r1, r6, #25
 8008196:	d5fb      	bpl.n	8008190 <_printf_i+0x1c8>
 8008198:	8018      	strh	r0, [r3, #0]
 800819a:	2300      	movs	r3, #0
 800819c:	6123      	str	r3, [r4, #16]
 800819e:	4616      	mov	r6, r2
 80081a0:	e7ba      	b.n	8008118 <_printf_i+0x150>
 80081a2:	680b      	ldr	r3, [r1, #0]
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	600a      	str	r2, [r1, #0]
 80081a8:	681e      	ldr	r6, [r3, #0]
 80081aa:	6862      	ldr	r2, [r4, #4]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7f8 f80e 	bl	80001d0 <memchr>
 80081b4:	b108      	cbz	r0, 80081ba <_printf_i+0x1f2>
 80081b6:	1b80      	subs	r0, r0, r6
 80081b8:	6060      	str	r0, [r4, #4]
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	2300      	movs	r3, #0
 80081c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c4:	e7a8      	b.n	8008118 <_printf_i+0x150>
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	4632      	mov	r2, r6
 80081ca:	4649      	mov	r1, r9
 80081cc:	4640      	mov	r0, r8
 80081ce:	47d0      	blx	sl
 80081d0:	3001      	adds	r0, #1
 80081d2:	d0ab      	beq.n	800812c <_printf_i+0x164>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	079b      	lsls	r3, r3, #30
 80081d8:	d413      	bmi.n	8008202 <_printf_i+0x23a>
 80081da:	68e0      	ldr	r0, [r4, #12]
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	4298      	cmp	r0, r3
 80081e0:	bfb8      	it	lt
 80081e2:	4618      	movlt	r0, r3
 80081e4:	e7a4      	b.n	8008130 <_printf_i+0x168>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4632      	mov	r2, r6
 80081ea:	4649      	mov	r1, r9
 80081ec:	4640      	mov	r0, r8
 80081ee:	47d0      	blx	sl
 80081f0:	3001      	adds	r0, #1
 80081f2:	d09b      	beq.n	800812c <_printf_i+0x164>
 80081f4:	3501      	adds	r5, #1
 80081f6:	68e3      	ldr	r3, [r4, #12]
 80081f8:	9903      	ldr	r1, [sp, #12]
 80081fa:	1a5b      	subs	r3, r3, r1
 80081fc:	42ab      	cmp	r3, r5
 80081fe:	dcf2      	bgt.n	80081e6 <_printf_i+0x21e>
 8008200:	e7eb      	b.n	80081da <_printf_i+0x212>
 8008202:	2500      	movs	r5, #0
 8008204:	f104 0619 	add.w	r6, r4, #25
 8008208:	e7f5      	b.n	80081f6 <_printf_i+0x22e>
 800820a:	bf00      	nop
 800820c:	08008505 	.word	0x08008505
 8008210:	08008516 	.word	0x08008516

08008214 <_sbrk_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d06      	ldr	r5, [pc, #24]	; (8008230 <_sbrk_r+0x1c>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7f8 fdc8 	bl	8000db4 <_sbrk>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_sbrk_r+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_sbrk_r+0x1a>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20001c1c 	.word	0x20001c1c

08008234 <__sread>:
 8008234:	b510      	push	{r4, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	f000 f8a0 	bl	8008380 <_read_r>
 8008240:	2800      	cmp	r0, #0
 8008242:	bfab      	itete	ge
 8008244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008246:	89a3      	ldrhlt	r3, [r4, #12]
 8008248:	181b      	addge	r3, r3, r0
 800824a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800824e:	bfac      	ite	ge
 8008250:	6563      	strge	r3, [r4, #84]	; 0x54
 8008252:	81a3      	strhlt	r3, [r4, #12]
 8008254:	bd10      	pop	{r4, pc}

08008256 <__swrite>:
 8008256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	461f      	mov	r7, r3
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	05db      	lsls	r3, r3, #23
 8008260:	4605      	mov	r5, r0
 8008262:	460c      	mov	r4, r1
 8008264:	4616      	mov	r6, r2
 8008266:	d505      	bpl.n	8008274 <__swrite+0x1e>
 8008268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826c:	2302      	movs	r3, #2
 800826e:	2200      	movs	r2, #0
 8008270:	f000 f868 	bl	8008344 <_lseek_r>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800827a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	4628      	mov	r0, r5
 8008286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	f000 b817 	b.w	80082bc <_write_r>

0800828e <__sseek>:
 800828e:	b510      	push	{r4, lr}
 8008290:	460c      	mov	r4, r1
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 f855 	bl	8008344 <_lseek_r>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	bf15      	itete	ne
 80082a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80082a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082aa:	81a3      	strheq	r3, [r4, #12]
 80082ac:	bf18      	it	ne
 80082ae:	81a3      	strhne	r3, [r4, #12]
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <__sclose>:
 80082b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b6:	f000 b813 	b.w	80082e0 <_close_r>
	...

080082bc <_write_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_write_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f8 fd21 	bl	8000d12 <_write>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_write_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_write_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20001c1c 	.word	0x20001c1c

080082e0 <_close_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_close_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	f7f8 fd2d 	bl	8000d4a <_close>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_close_r+0x1a>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_close_r+0x1a>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20001c1c 	.word	0x20001c1c

08008300 <_fstat_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d07      	ldr	r5, [pc, #28]	; (8008320 <_fstat_r+0x20>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	f7f8 fd28 	bl	8000d62 <_fstat>
 8008312:	1c43      	adds	r3, r0, #1
 8008314:	d102      	bne.n	800831c <_fstat_r+0x1c>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	b103      	cbz	r3, 800831c <_fstat_r+0x1c>
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	bf00      	nop
 8008320:	20001c1c 	.word	0x20001c1c

08008324 <_isatty_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d06      	ldr	r5, [pc, #24]	; (8008340 <_isatty_r+0x1c>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	602b      	str	r3, [r5, #0]
 8008330:	f7f8 fd27 	bl	8000d82 <_isatty>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_isatty_r+0x1a>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_isatty_r+0x1a>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20001c1c 	.word	0x20001c1c

08008344 <_lseek_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_lseek_r+0x20>)
 8008348:	4604      	mov	r4, r0
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	2200      	movs	r2, #0
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7f8 fd20 	bl	8000d98 <_lseek>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_lseek_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_lseek_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20001c1c 	.word	0x20001c1c

08008368 <__malloc_lock>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__malloc_lock+0x8>)
 800836a:	f7ff bb55 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	20001c14 	.word	0x20001c14

08008374 <__malloc_unlock>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__malloc_unlock+0x8>)
 8008376:	f7ff bb50 	b.w	8007a1a <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	20001c14 	.word	0x20001c14

08008380 <_read_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_read_r+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	602a      	str	r2, [r5, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7f8 fca2 	bl	8000cd8 <_read>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_read_r+0x1e>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_read_r+0x1e>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20001c1c 	.word	0x20001c1c

080083a4 <_init>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr

080083b0 <_fini>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr
