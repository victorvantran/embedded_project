
hello_uart_dma_idle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aec  08008aec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af4  08008af4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  20000074  08008b70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  08008b70  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c5e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fdd  00000000  00000000  00041d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00045ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00047560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d94  00000000  00000000  00048c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a099  00000000  00000000  000729fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100105  00000000  00000000  0008ca95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018cb9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb4  00000000  00000000  0018cbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087e8 	.word	0x080087e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080087e8 	.word	0x080087e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <USER_UART2_IRQHandler>:

// UART2
UARTRingBufferHandle_t xUART2RingBuffer;

void USER_UART2_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <USER_UART2_IRQHandler+0x24>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0310 	and.w	r3, r3, #16
 8000586:	2b10      	cmp	r3, #16
 8000588:	d105      	bne.n	8000596 <USER_UART2_IRQHandler+0x1e>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <USER_UART2_IRQHandler+0x24>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2210      	movs	r2, #16
 8000590:	621a      	str	r2, [r3, #32]

		//printf("UART2 Idle IRQ Detected\r\n");
		USER_UART2_IDLECallback();
 8000592:	f000 f845 	bl	8000620 <USER_UART2_IDLECallback>
	}
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20001b90 	.word	0x20001b90

080005a0 <vInitUARTRingBuffer>:
/* IMPLEMENTATION */
void vInitUARTRingBuffer(UARTRingBufferHandle_t *pxUARTRingBuffer,
		UART_HandleTypeDef *huart,
		uint8_t *dmaRX, uint32_t dmaRXSize,
		uint8_t *dmaTX, uint32_t dmaTXSize)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
	// Structure
	pxUARTRingBuffer->huart = huart;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	601a      	str	r2, [r3, #0]
	pxUARTRingBuffer->xRXBuffer.puDMABuffer = dmaRX;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
	pxUARTRingBuffer->xRXBuffer.uDMABufferSize = dmaRXSize;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	721a      	strb	r2, [r3, #8]
	pxUARTRingBuffer->xRXBuffer.uHeadIndex = 0;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2200      	movs	r2, #0
 80005c6:	725a      	strb	r2, [r3, #9]
	pxUARTRingBuffer->xRXBuffer.uTailIndex = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	729a      	strb	r2, [r3, #10]
	pxUARTRingBuffer->xRXBuffer.uRollOver = 0;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	72da      	strb	r2, [r3, #11]
	pxUARTRingBuffer->xTXBuffer.puDMABuffer = dmaTX;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	69ba      	ldr	r2, [r7, #24]
 80005d8:	60da      	str	r2, [r3, #12]
	pxUARTRingBuffer->xTXBuffer.uDMABufferSize = dmaTXSize;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	741a      	strb	r2, [r3, #16]
	pxUARTRingBuffer->xTXBuffer.uHeadIndex = 0;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	745a      	strb	r2, [r3, #17]
	pxUARTRingBuffer->xTXBuffer.uTailIndex = 0;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2200      	movs	r2, #0
 80005ec:	749a      	strb	r2, [r3, #18]
	pxUARTRingBuffer->xTXBuffer.uRollOver = 0;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2200      	movs	r2, #0
 80005f2:	74da      	strb	r2, [r3, #19]

	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f042 0210 	orr.w	r2, r2, #16
 8000602:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxUARTRingBuffer->xRXBuffer.puDMABuffer, pxUARTRingBuffer->xRXBuffer.uDMABufferSize);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6859      	ldr	r1, [r3, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	7a1b      	ldrb	r3, [r3, #8]
 800060c:	b29b      	uxth	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	f003 fae3 	bl	8003bdc <HAL_UART_Receive_DMA>

  // Transfer DMA Buffer

}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <USER_UART2_IDLECallback>:


void USER_UART2_IDLECallback(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08f      	sub	sp, #60	; 0x3c
 8000624:	af02      	add	r7, sp, #8
	// Tail catch up to head
	xUART2RingBuffer.xRXBuffer.uHeadIndex = xUART2RingBuffer.xRXBuffer.uDMABufferSize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8000626:	4b99      	ldr	r3, [pc, #612]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000628:	7a1a      	ldrb	r2, [r3, #8]
 800062a:	4b99      	ldr	r3, [pc, #612]	; (8000890 <USER_UART2_IDLECallback+0x270>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b95      	ldr	r3, [pc, #596]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000638:	725a      	strb	r2, [r3, #9]

	// Task notification...
	uint16_t uTailIndex = xUART2RingBuffer.xRXBuffer.uTailIndex;
 800063a:	4b94      	ldr	r3, [pc, #592]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800063c:	7a9b      	ldrb	r3, [r3, #10]
 800063e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t uHeadIndex = xUART2RingBuffer.xRXBuffer.uHeadIndex;
 8000640:	4b92      	ldr	r3, [pc, #584]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000642:	7a5b      	ldrb	r3, [r3, #9]
 8000644:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t uRollOver = xUART2RingBuffer.xRXBuffer.uRollOver;
 8000646:	4b91      	ldr	r3, [pc, #580]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000648:	7adb      	ldrb	r3, [r3, #11]
 800064a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	uint16_t uParseIndex = uTailIndex;
 800064e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000650:	85bb      	strh	r3, [r7, #44]	; 0x2c

	//if (uRollOver == 0)

	printf("roll: %d,  tail: %d,  head: %d\r\n", uRollOver, uTailIndex, uHeadIndex);
 8000652:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8000656:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800065a:	488e      	ldr	r0, [pc, #568]	; (8000894 <USER_UART2_IDLECallback+0x274>)
 800065c:	f007 f8e6 	bl	800782c <iprintf>
	if (uRollOver == 0)
 8000660:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000664:	2b00      	cmp	r3, #0
 8000666:	d136      	bne.n	80006d6 <USER_UART2_IDLECallback+0xb6>
	{
		while (uParseIndex != uHeadIndex)
 8000668:	e030      	b.n	80006cc <USER_UART2_IDLECallback+0xac>
		{
			if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 800066a:	4b88      	ldr	r3, [pc, #544]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b0d      	cmp	r3, #13
 8000676:	d126      	bne.n	80006c6 <USER_UART2_IDLECallback+0xa6>
			{
				if (uParseIndex - uTailIndex > 0)
 8000678:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800067a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	dd10      	ble.n	80006a4 <USER_UART2_IDLECallback+0x84>
				{
					char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 8000682:	4b82      	ldr	r3, [pc, #520]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000688:	4413      	add	r3, r2
 800068a:	607b      	str	r3, [r7, #4]
					size_t candidateLength = uParseIndex - uTailIndex;
 800068c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800068e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	603b      	str	r3, [r7, #0]

					vHandleCandidateCommand(candidate, candidateLength);
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f956 	bl	8000948 <vHandleCandidateCommand>
					printf("bad\r\n");
 800069c:	487e      	ldr	r0, [pc, #504]	; (8000898 <USER_UART2_IDLECallback+0x278>)
 800069e:	f007 f94b 	bl	8007938 <puts>
 80006a2:	e002      	b.n	80006aa <USER_UART2_IDLECallback+0x8a>

				}
				else
				{
					printf("NO COMMAND RECEIVED (JUST CR)z\r\n");
 80006a4:	487d      	ldr	r0, [pc, #500]	; (800089c <USER_UART2_IDLECallback+0x27c>)
 80006a6:	f007 f947 	bl	8007938 <puts>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 80006aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a77      	ldr	r2, [pc, #476]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80006b0:	7a12      	ldrb	r2, [r2, #8]
 80006b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80006b6:	fb02 f201 	mul.w	r2, r2, r1
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
				xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 80006be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b72      	ldr	r3, [pc, #456]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80006c4:	729a      	strb	r2, [r3, #10]
			}
			uParseIndex++;
 80006c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006c8:	3301      	adds	r3, #1
 80006ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
		while (uParseIndex != uHeadIndex)
 80006cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d1ca      	bne.n	800066a <USER_UART2_IDLECallback+0x4a>
 80006d4:	e0cd      	b.n	8000872 <USER_UART2_IDLECallback+0x252>
		}
	}
	else if (uRollOver == 1)
 80006d6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80006da:	2b01      	cmp	r3, #1
 80006dc:	f040 80b0 	bne.w	8000840 <USER_UART2_IDLECallback+0x220>
	{
		if (uParseIndex > uHeadIndex)
 80006e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006e4:	429a      	cmp	r2, r3
 80006e6:	f240 8091 	bls.w	800080c <USER_UART2_IDLECallback+0x1ec>
		{
			while (uParseIndex < xUART2RingBuffer.xRXBuffer.uDMABufferSize)
 80006ea:	e02d      	b.n	8000748 <USER_UART2_IDLECallback+0x128>
			{
				if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 80006ec:	4b67      	ldr	r3, [pc, #412]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b0d      	cmp	r3, #13
 80006f8:	d123      	bne.n	8000742 <USER_UART2_IDLECallback+0x122>
				{
					if (uParseIndex - uTailIndex > 0)
 80006fa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	dd0d      	ble.n	8000720 <USER_UART2_IDLECallback+0x100>
					{
						char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 8000704:	4b61      	ldr	r3, [pc, #388]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800070a:	4413      	add	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
						size_t candidateLength = uParseIndex - uTailIndex;
 800070e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	60bb      	str	r3, [r7, #8]

						vHandleCandidateCommand(candidate, candidateLength);
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f915 	bl	8000948 <vHandleCandidateCommand>
 800071e:	e002      	b.n	8000726 <USER_UART2_IDLECallback+0x106>
					}
					else
					{
						printf("NO COMMAND RECEIVED (JUST CR)pr\r\n");
 8000720:	485f      	ldr	r0, [pc, #380]	; (80008a0 <USER_UART2_IDLECallback+0x280>)
 8000722:	f007 f909 	bl	8007938 <puts>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 8000726:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000728:	3301      	adds	r3, #1
 800072a:	4a58      	ldr	r2, [pc, #352]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800072c:	7a12      	ldrb	r2, [r2, #8]
 800072e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000732:	fb02 f201 	mul.w	r2, r2, r1
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	85fb      	strh	r3, [r7, #46]	; 0x2e
					xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 800073a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b53      	ldr	r3, [pc, #332]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000740:	729a      	strb	r2, [r3, #10]
				}
				uParseIndex++;
 8000742:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000744:	3301      	adds	r3, #1
 8000746:	85bb      	strh	r3, [r7, #44]	; 0x2c
			while (uParseIndex < xUART2RingBuffer.xRXBuffer.uDMABufferSize)
 8000748:	4b50      	ldr	r3, [pc, #320]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800074a:	7a1b      	ldrb	r3, [r3, #8]
 800074c:	b29b      	uxth	r3, r3
 800074e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000750:	429a      	cmp	r2, r3
 8000752:	d3cb      	bcc.n	80006ec <USER_UART2_IDLECallback+0xcc>
			}

			uParseIndex = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	85bb      	strh	r3, [r7, #44]	; 0x2c

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 8000758:	e053      	b.n	8000802 <USER_UART2_IDLECallback+0x1e2>
			{
				if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b0d      	cmp	r3, #13
 8000766:	d149      	bne.n	80007fc <USER_UART2_IDLECallback+0x1dc>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 8000768:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800076a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800076c:	429a      	cmp	r2, r3
 800076e:	d921      	bls.n	80007b4 <USER_UART2_IDLECallback+0x194>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 8000770:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000774:	429a      	cmp	r2, r3
 8000776:	d019      	beq.n	80007ac <USER_UART2_IDLECallback+0x18c>
						{
							char *candidateFirst = (char *)(xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex);
 8000778:	4b44      	ldr	r3, [pc, #272]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]
							size_t candidateFirstLength = xUART2RingBuffer.xRXBuffer.uDMABufferSize - uTailIndex;
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	461a      	mov	r2, r3
 8000788:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	61bb      	str	r3, [r7, #24]
							char *candidateSecond = (char *)(xUART2RingBuffer.xRXBuffer.puDMABuffer);
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	617b      	str	r3, [r7, #20]
							size_t candidateSecondLength = uParseIndex;
 8000794:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000796:	613b      	str	r3, [r7, #16]

							vHandleCandidateCommandSplit(candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	69b9      	ldr	r1, [r7, #24]
 800079e:	69f8      	ldr	r0, [r7, #28]
 80007a0:	f000 f900 	bl	80009a4 <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							xUART2RingBuffer.xRXBuffer.uRollOver = 0;
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	72da      	strb	r2, [r3, #11]
 80007aa:	e019      	b.n	80007e0 <USER_UART2_IDLECallback+0x1c0>
						}
						else
						{
							printf("NO COMMAND RECEIVED (JUST CR)in\r\n");
 80007ac:	483d      	ldr	r0, [pc, #244]	; (80008a4 <USER_UART2_IDLECallback+0x284>)
 80007ae:	f007 f8c3 	bl	8007938 <puts>
 80007b2:	e015      	b.n	80007e0 <USER_UART2_IDLECallback+0x1c0>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 80007b4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	dd0d      	ble.n	80007da <USER_UART2_IDLECallback+0x1ba>
						{
							char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007c4:	4413      	add	r3, r2
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateLength = uParseIndex - uTailIndex;
 80007c8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	623b      	str	r3, [r7, #32]

							vHandleCandidateCommand(candidate, candidateLength);
 80007d0:	6a39      	ldr	r1, [r7, #32]
 80007d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007d4:	f000 f8b8 	bl	8000948 <vHandleCandidateCommand>
 80007d8:	e002      	b.n	80007e0 <USER_UART2_IDLECallback+0x1c0>
						}
						else
						{
							printf("NO COMMAND RECEIVED (JUST CR)rf\r\n");
 80007da:	4833      	ldr	r0, [pc, #204]	; (80008a8 <USER_UART2_IDLECallback+0x288>)
 80007dc:	f007 f8ac 	bl	8007938 <puts>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 80007e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80007e6:	7a12      	ldrb	r2, [r2, #8]
 80007e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80007ec:	fb02 f201 	mul.w	r2, r2, r1
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
					xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 80007f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 80007fa:	729a      	strb	r2, [r3, #10]
				}

				uParseIndex++;
 80007fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007fe:	3301      	adds	r3, #1
 8000800:	85bb      	strh	r3, [r7, #44]	; 0x2c
			while (uParseIndex != uHeadIndex)
 8000802:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000804:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000806:	429a      	cmp	r2, r3
 8000808:	d1a7      	bne.n	800075a <USER_UART2_IDLECallback+0x13a>
 800080a:	e032      	b.n	8000872 <USER_UART2_IDLECallback+0x252>
			}
		}
		else
		{
			// Reset due to too much data sent
			printf("TOO MUCH DATA SENT AT ONCE BEFORE IT CAN BE PROCESSED. TRY INCREASING BUFFER SIZE >1\r\n");
 800080c:	4827      	ldr	r0, [pc, #156]	; (80008ac <USER_UART2_IDLECallback+0x28c>)
 800080e:	f007 f893 	bl	8007938 <puts>
			HAL_UART_DMAStop(xUART2RingBuffer.huart);
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fa24 	bl	8003c64 <HAL_UART_DMAStop>
			vInitUARTRingBuffer(&xUART2RingBuffer, xUART2RingBuffer.huart, xUART2RingBuffer.xRXBuffer.puDMABuffer, xUART2RingBuffer.xRXBuffer.uDMABufferSize,
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000826:	7a1b      	ldrb	r3, [r3, #8]
 8000828:	461c      	mov	r4, r3
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800082c:	68db      	ldr	r3, [r3, #12]
					xUART2RingBuffer.xTXBuffer.puDMABuffer, xUART2RingBuffer.xTXBuffer.uDMABufferSize);
 800082e:	4817      	ldr	r0, [pc, #92]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000830:	7c00      	ldrb	r0, [r0, #16]
			vInitUARTRingBuffer(&xUART2RingBuffer, xUART2RingBuffer.huart, xUART2RingBuffer.xRXBuffer.puDMABuffer, xUART2RingBuffer.xRXBuffer.uDMABufferSize,
 8000832:	9001      	str	r0, [sp, #4]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	4623      	mov	r3, r4
 8000838:	4814      	ldr	r0, [pc, #80]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800083a:	f7ff feb1 	bl	80005a0 <vInitUARTRingBuffer>
 800083e:	e018      	b.n	8000872 <USER_UART2_IDLECallback+0x252>
		}
	}
	else
	{
		printf("TOO MUCH DATA SENT AT ONCE BEFORE IT CAN BE PROCESSED. TRY INCREASING BUFFER SIZE >2\r\n");
 8000840:	481b      	ldr	r0, [pc, #108]	; (80008b0 <USER_UART2_IDLECallback+0x290>)
 8000842:	f007 f879 	bl	8007938 <puts>
		HAL_UART_DMAStop(xUART2RingBuffer.huart);
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fa0a 	bl	8003c64 <HAL_UART_DMAStop>
		vInitUARTRingBuffer(&xUART2RingBuffer, xUART2RingBuffer.huart, xUART2RingBuffer.xRXBuffer.puDMABuffer, xUART2RingBuffer.xRXBuffer.uDMABufferSize,
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800085a:	7a1b      	ldrb	r3, [r3, #8]
 800085c:	461c      	mov	r4, r3
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000860:	68db      	ldr	r3, [r3, #12]
				xUART2RingBuffer.xTXBuffer.puDMABuffer, xUART2RingBuffer.xTXBuffer.uDMABufferSize);
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000864:	7c00      	ldrb	r0, [r0, #16]
		vInitUARTRingBuffer(&xUART2RingBuffer, xUART2RingBuffer.huart, xUART2RingBuffer.xRXBuffer.puDMABuffer, xUART2RingBuffer.xRXBuffer.uDMABufferSize,
 8000866:	9001      	str	r0, [sp, #4]
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	4623      	mov	r3, r4
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800086e:	f7ff fe97 	bl	80005a0 <vInitUARTRingBuffer>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", xUART2RingBuffer.xRXBuffer.uTailIndex, xUART2RingBuffer.xRXBuffer.uHeadIndex);
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 8000874:	7a9b      	ldrb	r3, [r3, #10]
 8000876:	4619      	mov	r1, r3
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <USER_UART2_IDLECallback+0x26c>)
 800087a:	7a5b      	ldrb	r3, [r3, #9]
 800087c:	461a      	mov	r2, r3
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <USER_UART2_IDLECallback+0x294>)
 8000880:	f006 ffd4 	bl	800782c <iprintf>

}
 8000884:	bf00      	nop
 8000886:	3734      	adds	r7, #52	; 0x34
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	20001964 	.word	0x20001964
 8000890:	200019f8 	.word	0x200019f8
 8000894:	08008800 	.word	0x08008800
 8000898:	08008824 	.word	0x08008824
 800089c:	0800882c 	.word	0x0800882c
 80008a0:	0800884c 	.word	0x0800884c
 80008a4:	08008870 	.word	0x08008870
 80008a8:	08008894 	.word	0x08008894
 80008ac:	080088b8 	.word	0x080088b8
 80008b0:	08008910 	.word	0x08008910
 80008b4:	08008968 	.word	0x08008968

080008b8 <bCommandMatch>:



uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fc83 	bl	80001d0 <strlen>
 80008ca:	4602      	mov	r2, r0
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d109      	bne.n	80008e6 <bCommandMatch+0x2e>
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f007 f836 	bl	8007948 <strncmp>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <bCommandMatch+0x2e>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <bCommandMatch+0x30>
 80008e6:	2300      	movs	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff fc65 	bl	80001d0 <strlen>
 8000906:	4601      	mov	r1, r0
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 800090e:	4299      	cmp	r1, r3
 8000910:	d114      	bne.n	800093c <bCommandSplitMatch+0x4a>
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f007 f816 	bl	8007948 <strncmp>
 800091c:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10c      	bne.n	800093c <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f007 f80b 	bl	8007948 <strncmp>
 8000932:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <bCommandSplitMatch+0x4a>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <bCommandSplitMatch+0x4c>
 800093c:	2300      	movs	r3, #0
 800093e:	b2db      	uxtb	r3, r3
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <vHandleCandidateCommand>:


void vHandleCandidateCommand(const char *candidate, size_t candidateLength)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	if (bCommandMatch("ON", candidate, candidateLength))
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <vHandleCandidateCommand+0x48>)
 8000958:	f7ff ffae 	bl	80008b8 <bCommandMatch>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <vHandleCandidateCommand+0x22>
	{
		printf("SET LIGHT\r\n");
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <vHandleCandidateCommand+0x4c>)
 8000964:	f006 ffe8 	bl	8007938 <puts>
	}
	else
	{
		printf("INVLD\r\n");
	}
}
 8000968:	e00e      	b.n	8000988 <vHandleCandidateCommand+0x40>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <vHandleCandidateCommand+0x50>)
 8000970:	f7ff ffa2 	bl	80008b8 <bCommandMatch>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <vHandleCandidateCommand+0x3a>
		printf("UNSET LIGHT\r\n");
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <vHandleCandidateCommand+0x54>)
 800097c:	f006 ffdc 	bl	8007938 <puts>
}
 8000980:	e002      	b.n	8000988 <vHandleCandidateCommand+0x40>
		printf("INVLD\r\n");
 8000982:	4807      	ldr	r0, [pc, #28]	; (80009a0 <vHandleCandidateCommand+0x58>)
 8000984:	f006 ffd8 	bl	8007938 <puts>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08008988 	.word	0x08008988
 8000994:	0800898c 	.word	0x0800898c
 8000998:	08008998 	.word	0x08008998
 800099c:	0800899c 	.word	0x0800899c
 80009a0:	080089ac 	.word	0x080089ac

080009a4 <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <vHandleCandidateCommandSplit+0x58>)
 80009be:	f7ff ff98 	bl	80008f2 <bCommandSplitMatch>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <vHandleCandidateCommandSplit+0x5c>)
 80009ca:	f006 ffb5 	bl	8007938 <puts>
	}
	else
	{
		printf("INVLDsplit\r\n");
	}
}
 80009ce:	e011      	b.n	80009f4 <vHandleCandidateCommandSplit+0x50>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <vHandleCandidateCommandSplit+0x60>)
 80009dc:	f7ff ff89 	bl	80008f2 <bCommandSplitMatch>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <vHandleCandidateCommandSplit+0x64>)
 80009e8:	f006 ffa6 	bl	8007938 <puts>
}
 80009ec:	e002      	b.n	80009f4 <vHandleCandidateCommandSplit+0x50>
		printf("INVLDsplit\r\n");
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <vHandleCandidateCommandSplit+0x68>)
 80009f0:	f006 ffa2 	bl	8007938 <puts>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08008988 	.word	0x08008988
 8000a00:	0800898c 	.word	0x0800898c
 8000a04:	08008998 	.word	0x08008998
 8000a08:	0800899c 	.word	0x0800899c
 8000a0c:	080089b4 	.word	0x080089b4

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 fc89 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f82d 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f929 	bl	8000c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a22:	f000 f901 	bl	8000c28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 f8cf 	bl	8000bc8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a2a:	f000 f89d 	bl	8000b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vInitUARTRingBuffer(&xUART2RingBuffer,
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <main+0x4c>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <main+0x50>)
 8000a3a:	490a      	ldr	r1, [pc, #40]	; (8000a64 <main+0x54>)
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <main+0x58>)
 8000a3e:	f7ff fdaf 	bl	80005a0 <vInitUARTRingBuffer>
  		(uint8_t *)tx2Buffer, TX2_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a42:	f004 f965 	bl	8004d10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <main+0x5c>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <main+0x60>)
 8000a4c:	f004 f9aa 	bl	8004da4 <osThreadNew>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <main+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a56:	f004 f97f 	bl	8004d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x4a>
 8000a5c:	20001b10 	.word	0x20001b10
 8000a60:	20001978 	.word	0x20001978
 8000a64:	20001b90 	.word	0x20001b90
 8000a68:	20001964 	.word	0x20001964
 8000a6c:	080089e8 	.word	0x080089e8
 8000a70:	08000d91 	.word	0x08000d91
 8000a74:	20001a40 	.word	0x20001a40

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0b8      	sub	sp, #224	; 0xe0
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a82:	2244      	movs	r2, #68	; 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 fec8 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2288      	movs	r2, #136	; 0x88
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 feba 	bl	800781c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ace:	230a      	movs	r3, #10
 8000ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f9e8 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000af6:	f000 f96b 	bl	8000dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fdb4 	bl	800268c <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b2a:	f000 f951 	bl	8000dd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 ffdd 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b48:	f000 f942 	bl	8000dd0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b50:	f001 f960 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b5a:	f000 f939 	bl	8000dd0 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	37e0      	adds	r7, #224	; 0xe0
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_USART1_UART_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000bac:	f002 ff34 	bl	8003a18 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f90b 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20001a8c 	.word	0x20001a8c
 8000bc4:	40013800 	.word	0x40013800

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <MX_USART2_UART_Init+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART2_UART_Init+0x58>)
 8000c0c:	f002 ff04 	bl	8003a18 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f8db 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20001b90 	.word	0x20001b90
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6493      	str	r3, [r2, #72]	; 0x48
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2010      	movs	r0, #16
 8000c4c:	f000 fc66 	bl	800151c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c50:	2010      	movs	r0, #16
 8000c52:	f000 fc7f 	bl	8001554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2011      	movs	r0, #17
 8000c5c:	f000 fc5e 	bl	800151c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c60:	2011      	movs	r0, #17
 8000c62:	f000 fc77 	bl	8001554 <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_GPIO_Init+0xa4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2101      	movs	r1, #1
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_GPIO_Init+0xa8>)
 8000cf0:	f001 f86a 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_GPIO_Init+0xa8>)
 8000d0c:	f000 feb2 	bl	8001a74 <HAL_GPIO_Init>

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400

08000d20 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d28:	1d39      	adds	r1, r7, #4
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <__io_putchar+0x20>)
 8000d32:	f002 febf 	bl	8003ab4 <HAL_UART_Transmit>
	return ch;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20001b90 	.word	0x20001b90

08000d44 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_UART_RxCpltCallback+0x2c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d106      	bne.n	8000d62 <HAL_UART_RxCpltCallback+0x1e>
	{
		xUART2RingBuffer.xRXBuffer.uRollOver++;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_UART_RxCpltCallback+0x30>)
 8000d56:	7adb      	ldrb	r3, [r3, #11]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_UART_RxCpltCallback+0x30>)
 8000d60:	72da      	strb	r2, [r3, #11]
	}
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20001b90 	.word	0x20001b90
 8000d74:	20001964 	.word	0x20001964

08000d78 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000d80:	bf00      	nop
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  for(;;)
  {
  	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
  	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

  	char *a = "hi";
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <StartUARTTask+0x18>)
 8000d9a:	60fb      	str	r3, [r7, #12]
  	//HAL_UART_Transmit_DMA(&huart2, (uint8_t *)a, sizeof(a));
    osDelay(500);
 8000d9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da0:	f004 f892 	bl	8004ec8 <osDelay>
  {
 8000da4:	e7f8      	b.n	8000d98 <StartUARTTask+0x8>
 8000da6:	bf00      	nop
 8000da8:	080089cc 	.word	0x080089cc

08000dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dbe:	f000 fad5 	bl	800136c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_MspInit+0x4c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_MspInit+0x4c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_MspInit+0x4c>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_MspInit+0x4c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	210f      	movs	r1, #15
 8000e16:	f06f 0001 	mvn.w	r0, #1
 8000e1a:	f000 fb7f 	bl	800151c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a61      	ldr	r2, [pc, #388]	; (8000fd0 <HAL_UART_MspInit+0x1a4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d132      	bne.n	8000eb4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4e:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	4a60      	ldr	r2, [pc, #384]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5a:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a5a      	ldr	r2, [pc, #360]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e90:	2307      	movs	r3, #7
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f000 fde9 	bl	8001a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	2025      	movs	r0, #37	; 0x25
 8000ea8:	f000 fb38 	bl	800151c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eac:	2025      	movs	r0, #37	; 0x25
 8000eae:	f000 fb51 	bl	8001554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb2:	e088      	b.n	8000fc6 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_UART_MspInit+0x1ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f040 8083 	bne.w	8000fc6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_UART_MspInit+0x1a8>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f00:	2307      	movs	r3, #7
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f000 fdb1 	bl	8001a74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_UART_MspInit+0x1b4>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f48:	4824      	ldr	r0, [pc, #144]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f4a:	f000 fb11 	bl	8001570 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000f54:	f7ff ff3c 	bl	8000dd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_UART_MspInit+0x1b0>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_UART_MspInit+0x1bc>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f72:	2210      	movs	r2, #16
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000f9c:	f000 fae8 	bl	8001570 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000fa6:	f7ff ff13 	bl	8000dd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000fae:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <HAL_UART_MspInit+0x1b8>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2105      	movs	r1, #5
 8000fba:	2026      	movs	r0, #38	; 0x26
 8000fbc:	f000 faae 	bl	800151c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f000 fac7 	bl	8001554 <HAL_NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	200019f8 	.word	0x200019f8
 8000fe0:	4002006c 	.word	0x4002006c
 8000fe4:	20001a44 	.word	0x20001a44
 8000fe8:	40020080 	.word	0x40020080

08000fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	2036      	movs	r0, #54	; 0x36
 8001002:	f000 fa8b 	bl	800151c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001006:	2036      	movs	r0, #54	; 0x36
 8001008:	f000 faa4 	bl	8001554 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_InitTick+0x9c>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_InitTick+0x9c>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6593      	str	r3, [r2, #88]	; 0x58
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_InitTick+0x9c>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001024:	f107 0210 	add.w	r2, r7, #16
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fcd2 	bl	80029d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001034:	f001 fca4 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8001038:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_InitTick+0xa0>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	3b01      	subs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_InitTick+0xa4>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_InitTick+0xa8>)
 800104c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_InitTick+0xa4>)
 8001050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001054:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_InitTick+0xa4>)
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_InitTick+0xa4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_InitTick+0xa4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_InitTick+0xa4>)
 800106a:	f002 fa03 	bl	8003474 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <HAL_InitTick+0xa4>)
 8001076:	f002 fa5f 	bl	8003538 <HAL_TIM_Base_Start_IT>
 800107a:	4603      	mov	r3, r0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3730      	adds	r7, #48	; 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	431bde83 	.word	0x431bde83
 8001090:	20001c14 	.word	0x20001c14
 8001094:	40001000 	.word	0x40001000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Channel6_IRQHandler+0x10>)
 80010ca:	f000 fbe8 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200019f8 	.word	0x200019f8

080010d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Channel7_IRQHandler+0x10>)
 80010de:	f000 fbde 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20001a44 	.word	0x20001a44

080010ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <USART1_IRQHandler+0x10>)
 80010f2:	f002 fe25 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001a8c 	.word	0x20001a8c

08001100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <USART2_IRQHandler+0x14>)
 8001106:	f002 fe1b 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART2_IRQHandler();
 800110a:	f7ff fa35 	bl	8000578 <USER_UART2_IRQHandler>
	/* USER CODE END USART2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20001b90 	.word	0x20001b90

08001118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM6_DAC_IRQHandler+0x10>)
 800111e:	f002 fa7b 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20001c14 	.word	0x20001c14

0800112c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdcd 	bl	8000d20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f006 fab8 	bl	80077ac <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20018000 	.word	0x20018000
 8001268:	00000400 	.word	0x00000400
 800126c:	20000090 	.word	0x20000090
 8001270:	20001cb8 	.word	0x20001cb8

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <SystemInit+0x5c>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <SystemInit+0x5c>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <SystemInit+0x60>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <SystemInit+0x60>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <SystemInit+0x60>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <SystemInit+0x60>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <SystemInit+0x60>)
 80012a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <SystemInit+0x60>)
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <SystemInit+0x60>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <SystemInit+0x60>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SystemInit+0x60>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	40021000 	.word	0x40021000

080012d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff ffca 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012e2:	e003      	b.n	80012ec <LoopCopyDataInit>

080012e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ea:	3104      	adds	r1, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <LoopForever+0xe>)
	adds	r2, r0, r1
 80012f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012f4:	d3f6      	bcc.n	80012e4 <CopyDataInit>
	ldr	r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012f8:	e002      	b.n	8001300 <LoopFillZerobss>

080012fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012fc:	f842 3b04 	str.w	r3, [r2], #4

08001300 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <LoopForever+0x16>)
	cmp	r2, r3
 8001302:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001304:	d3f9      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f006 fa57 	bl	80077b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130a:	f7ff fb81 	bl	8000a10 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001310:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001314:	08008afc 	.word	0x08008afc
	ldr	r0, =_sdata
 8001318:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800131c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001320:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001324:	20001cb4 	.word	0x20001cb4

08001328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>
	...

0800132c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_Init+0x3c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x3c>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 f8df 	bl	8001506 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fe4f 	bl	8000fec <HAL_InitTick>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e001      	b.n	800135e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800135a:	f7ff fd3f 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135e:	79fb      	ldrb	r3, [r7, #7]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	20001c60 	.word	0x20001c60

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20001c60 	.word	0x20001c60

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff4c 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800152e:	f7ff ff61 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001532:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	6978      	ldr	r0, [r7, #20]
 800153a:	f7ff ffb1 	bl	80014a0 <NVIC_EncodePriority>
 800153e:	4602      	mov	r2, r0
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff80 	bl	800144c <__NVIC_SetPriority>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff54 	bl	8001410 <__NVIC_EnableIRQ>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e098      	b.n	80016b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <HAL_DMA_Init+0x150>)
 800158a:	429a      	cmp	r2, r3
 800158c:	d80f      	bhi.n	80015ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_DMA_Init+0x154>)
 8001596:	4413      	add	r3, r2
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_DMA_Init+0x158>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	009a      	lsls	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_DMA_Init+0x15c>)
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
 80015ac:	e00e      	b.n	80015cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_DMA_Init+0x160>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a43      	ldr	r2, [pc, #268]	; (80016c8 <HAL_DMA_Init+0x158>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_DMA_Init+0x164>)
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001626:	d039      	beq.n	800169c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_DMA_Init+0x15c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11a      	bne.n	8001668 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_DMA_Init+0x168>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 031c 	and.w	r3, r3, #28
 800163e:	210f      	movs	r1, #15
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	4924      	ldr	r1, [pc, #144]	; (80016d8 <HAL_DMA_Init+0x168>)
 8001648:	4013      	ands	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_DMA_Init+0x168>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	491d      	ldr	r1, [pc, #116]	; (80016d8 <HAL_DMA_Init+0x168>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
 8001666:	e019      	b.n	800169c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_DMA_Init+0x16c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	210f      	movs	r1, #15
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	4917      	ldr	r1, [pc, #92]	; (80016dc <HAL_DMA_Init+0x16c>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_DMA_Init+0x16c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 031c 	and.w	r3, r3, #28
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	4911      	ldr	r1, [pc, #68]	; (80016dc <HAL_DMA_Init+0x16c>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40020407 	.word	0x40020407
 80016c4:	bffdfff8 	.word	0xbffdfff8
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	40020000 	.word	0x40020000
 80016d0:	bffdfbf8 	.word	0xbffdfbf8
 80016d4:	40020400 	.word	0x40020400
 80016d8:	400200a8 	.word	0x400200a8
 80016dc:	400204a8 	.word	0x400204a8

080016e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_DMA_Start_IT+0x20>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e04b      	b.n	8001798 <HAL_DMA_Start_IT+0xb8>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d13a      	bne.n	800178a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f96b 	bl	8001a14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 020e 	orr.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e00f      	b.n	8001778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 020a 	orr.w	r2, r2, #10
 8001776:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e005      	b.n	8001796 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001792:	2302      	movs	r3, #2
 8001794:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e022      	b.n	8001810 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020e 	bic.w	r2, r2, #14
 80017d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 021c 	and.w	r2, r3, #28
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d005      	beq.n	8001840 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2204      	movs	r2, #4
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e029      	b.n	8001894 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 020e 	bic.w	r2, r2, #14
 800184e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f003 021c 	and.w	r2, r3, #28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    }
  }
  return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 031c 	and.w	r3, r3, #28
 80018be:	2204      	movs	r2, #4
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d026      	beq.n	8001918 <HAL_DMA_IRQHandler+0x7a>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d021      	beq.n	8001918 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0204 	bic.w	r2, r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f003 021c 	and.w	r2, r3, #28
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2104      	movs	r1, #4
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d071      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001916:	e06c      	b.n	80019f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f003 031c 	and.w	r3, r3, #28
 8001920:	2202      	movs	r2, #2
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02e      	beq.n	800198a <HAL_DMA_IRQHandler+0xec>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d029      	beq.n	800198a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020a 	bic.w	r2, r2, #10
 8001952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f003 021c 	and.w	r2, r3, #28
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2102      	movs	r1, #2
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d038      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001988:	e033      	b.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f003 031c 	and.w	r3, r3, #28
 8001992:	2208      	movs	r2, #8
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02a      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d025      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f003 021c 	and.w	r2, r3, #28
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
}
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f003 021c 	and.w	r2, r3, #28
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d108      	bne.n	8001a58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a56:	e007      	b.n	8001a68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e17f      	b.n	8001d84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8171 	beq.w	8001d7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00b      	beq.n	8001abc <HAL_GPIO_Init+0x48>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d007      	beq.n	8001abc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab0:	2b11      	cmp	r3, #17
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d130      	bne.n	8001b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af2:	2201      	movs	r2, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 0201 	and.w	r2, r3, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d118      	bne.n	8001b5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x128>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b12      	cmp	r3, #18
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	6939      	ldr	r1, [r7, #16]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80ac 	beq.w	8001d7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3e:	4a5a      	ldr	r2, [pc, #360]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x242>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x338>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x23e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	; (8001db0 <HAL_GPIO_Init+0x33c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x23a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x340>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x236>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x344>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x232>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_GPIO_Init+0x348>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x22e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <HAL_GPIO_Init+0x34c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x22a>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x244>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc8:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cfa:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f47f ae78 	bne.w	8001a84 <HAL_GPIO_Init+0x10>
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000c00 	.word	0x48000c00
 8001db8:	48001000 	.word	0x48001000
 8001dbc:	48001400 	.word	0x48001400
 8001dc0:	48001800 	.word	0x48001800
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e22:	d130      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e30:	d038      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2232      	movs	r2, #50	; 0x32
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	e002      	b.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d102      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f2      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d110      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d007      	beq.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9c:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e3d4      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4ba1      	ldr	r3, [pc, #644]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b9e      	ldr	r3, [pc, #632]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80e4 	beq.w	80020bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4a>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	f040 808b 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 8087 	bne.w	8002018 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e3ac      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_RCC_OscConfig+0x7c>
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3a:	e005      	b.n	8001f48 <HAL_RCC_OscConfig+0x88>
 8001f3c:	4b86      	ldr	r3, [pc, #536]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d223      	bcs.n	8001f94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fd73 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e38d      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f60:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4977      	ldr	r1, [pc, #476]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	4972      	ldr	r1, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
 8001f92:	e025      	b.n	8001fe0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	496a      	ldr	r1, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b69      	ldr	r3, [pc, #420]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	4965      	ldr	r1, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd33 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e34d      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe0:	f000 fc36 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	495a      	ldr	r1, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x29c>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x2a0>)
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x2a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fff1 	bl	8000fec <HAL_InitTick>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d052      	beq.n	80020ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	e331      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7ff f9b2 	bl	8001394 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7ff f9ae 	bl	8001394 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e31a      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	493b      	ldr	r1, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	4936      	ldr	r1, [pc, #216]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e01a      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002092:	f7ff f97f 	bl	8001394 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209a:	f7ff f97b 	bl	8001394 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e2e7      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x1da>
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d074      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x21a>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d064      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d160      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e2c4      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x24a>
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e01d      	b.n	8002146 <HAL_RCC_OscConfig+0x286>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002112:	d10c      	bne.n	800212e <HAL_RCC_OscConfig+0x26e>
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800211a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e00b      	b.n	8002146 <HAL_RCC_OscConfig+0x286>
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a06      	ldr	r2, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x298>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01c      	beq.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff f921 	bl	8001394 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002154:	e011      	b.n	800217a <HAL_RCC_OscConfig+0x2ba>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	08008a0c 	.word	0x08008a0c
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f914 	bl	8001394 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e280      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4baf      	ldr	r3, [pc, #700]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2a8>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f904 	bl	8001394 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f900 	bl	8001394 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e26c      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x310>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x328>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e249      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b93      	ldr	r3, [pc, #588]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4990      	ldr	r1, [pc, #576]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a8b      	ldr	r2, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f8bf 	bl	8001394 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff f8bb 	bl	8001394 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e227      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b82      	ldr	r3, [pc, #520]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	497c      	ldr	r1, [pc, #496]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f89b 	bl	8001394 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff f897 	bl	8001394 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e203      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	4b70      	ldr	r3, [pc, #448]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	4a67      	ldr	r2, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff f876 	bl	8001394 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff f872 	bl	8001394 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1de      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x3ec>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f859 	bl	8001394 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f855 	bl	8001394 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1c1      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b4f      	ldr	r3, [pc, #316]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a6 	beq.w	8002460 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b44      	ldr	r3, [pc, #272]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	; 0x58
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002358:	f7ff f81c 	bl	8001394 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7ff f818 	bl	8001394 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e184      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCC_OscConfig+0x57c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002396:	e024      	b.n	80023e2 <HAL_RCC_OscConfig+0x522>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d110      	bne.n	80023c2 <HAL_RCC_OscConfig+0x502>
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a24      	ldr	r2, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c0:	e00f      	b.n	80023e2 <HAL_RCC_OscConfig+0x522>
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe ffd3 	bl	8001394 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe ffcf 	bl	8001394 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e139      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_OscConfig+0x578>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ed      	beq.n	80023f2 <HAL_RCC_OscConfig+0x532>
 8002416:	e01a      	b.n	800244e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe ffbc 	bl	8001394 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241e:	e00f      	b.n	8002440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe ffb8 	bl	8001394 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d906      	bls.n	8002440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e122      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	4b90      	ldr	r3, [pc, #576]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e8      	bne.n	8002420 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a8a      	ldr	r2, [pc, #552]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8108 	beq.w	800267a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	2b02      	cmp	r3, #2
 8002470:	f040 80d0 	bne.w	8002614 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002474:	4b83      	ldr	r3, [pc, #524]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d130      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d127      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d11f      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b4:	2a07      	cmp	r2, #7
 80024b6:	bf14      	ite	ne
 80024b8:	2201      	movne	r2, #1
 80024ba:	2200      	moveq	r2, #0
 80024bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d06e      	beq.n	80025c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d069      	beq.n	80025c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b7      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800250c:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002518:	f7fe ff3c 	bl	8001394 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ff38 	bl	8001394 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0a4      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	4b54      	ldr	r3, [pc, #336]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253e:	4b51      	ldr	r3, [pc, #324]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x7c8>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800254e:	3a01      	subs	r2, #1
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002560:	0852      	lsrs	r2, r2, #1
 8002562:	3a01      	subs	r2, #1
 8002564:	0552      	lsls	r2, r2, #21
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0652      	lsls	r2, r2, #25
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002578:	0912      	lsrs	r2, r2, #4
 800257a:	0452      	lsls	r2, r2, #17
 800257c:	430a      	orrs	r2, r1
 800257e:	4941      	ldr	r1, [pc, #260]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3e      	ldr	r2, [pc, #248]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002590:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259c:	f7fe fefa 	bl	8001394 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fef6 	bl	8001394 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e062      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c2:	e05a      	b.n	800267a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e059      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d152      	bne.n	800267a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ec:	f7fe fed2 	bl	8001394 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fece 	bl	8001394 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e03a      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x734>
 8002612:	e032      	b.n	800267a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d02d      	beq.n	8002676 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002624:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002638:	f023 0303 	bic.w	r3, r3, #3
 800263c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 8002644:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fea1 	bl	8001394 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fe9d 	bl	8001394 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e009      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x7c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x796>
 8002674:	e001      	b.n	800267a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	f99d808c 	.word	0xf99d808c

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0c8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d910      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4961      	ldr	r1, [pc, #388]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b5f      	ldr	r3, [pc, #380]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0b0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d04c      	beq.n	8002776 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e4:	4b56      	ldr	r3, [pc, #344]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d121      	bne.n	8002734 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e09e      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d107      	bne.n	800270c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d115      	bne.n	8002734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e092      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e086      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002724:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e07e      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 0203 	bic.w	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	493f      	ldr	r1, [pc, #252]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fe25 	bl	8001394 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274c:	e00a      	b.n	8002764 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274e:	f7fe fe21 	bl	8001394 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e066      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 020c 	and.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	429a      	cmp	r2, r3
 8002774:	d1eb      	bne.n	800274e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	492c      	ldr	r1, [pc, #176]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d210      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4924      	ldr	r1, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1b0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e036      	b.n	8002832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4918      	ldr	r1, [pc, #96]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4910      	ldr	r1, [pc, #64]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002802:	f000 f825 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_RCC_ClockConfig+0x1b4>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490c      	ldr	r1, [pc, #48]	; (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fbe0 	bl	8000fec <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
 800282e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002830:	7afb      	ldrb	r3, [r7, #11]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	08008a0c 	.word	0x08008a0c
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d11e      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e005      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d102      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e004      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d134      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xac>
 80028f4:	e005      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f8:	617b      	str	r3, [r7, #20]
      break;
 80028fa:	e005      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_GetSysClockFreq+0x114>)
 80028fe:	617b      	str	r3, [r7, #20]
      break;
 8002900:	e002      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	fb02 f203 	mul.w	r2, r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0e5b      	lsrs	r3, r3, #25
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	3301      	adds	r3, #1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002948:	69bb      	ldr	r3, [r7, #24]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	08008a24 	.word	0x08008a24
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08008a1c 	.word	0x08008a1c

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029b0:	f7ff ffda 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0adb      	lsrs	r3, r3, #11
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4904      	ldr	r1, [pc, #16]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08008a1c 	.word	0x08008a1c

080029d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	220f      	movs	r2, #15
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCC_GetClockConfig+0x60>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0207 	and.w	r2, r3, #7
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40022000 	.word	0x40022000

08002a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a54:	f7ff f9d0 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a58:	6178      	str	r0, [r7, #20]
 8002a5a:	e014      	b.n	8002a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a74:	f7ff f9c0 	bl	8001df8 <HAL_PWREx_GetVoltageRange>
 8002a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d10b      	bne.n	8002aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d919      	bls.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2ba0      	cmp	r3, #160	; 0xa0
 8002a98:	d902      	bls.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e013      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e010      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d902      	bls.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002aac:	2303      	movs	r3, #3
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e00a      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d102      	bne.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab8:	2302      	movs	r3, #2
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e004      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d101      	bne.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	4909      	ldr	r1, [pc, #36]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40022000 	.word	0x40022000

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d041      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b20:	d02a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b26:	d824      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b32:	d81e      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b40:	4b86      	ldr	r3, [pc, #536]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a85      	ldr	r2, [pc, #532]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4c:	e015      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fabb 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b5e:	e00c      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3320      	adds	r3, #32
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fba6 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b70:	e003      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	74fb      	strb	r3, [r7, #19]
      break;
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b80:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8e:	4973      	ldr	r1, [pc, #460]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b96:	e001      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d041      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bb0:	d02a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bb6:	d824      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc2:	d81e      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bce:	e018      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bdc:	e015      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fa73 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bee:	e00c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3320      	adds	r3, #32
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fb5e 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	74fb      	strb	r3, [r7, #19]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c10:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1e:	494f      	ldr	r1, [pc, #316]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a0 	beq.w	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fb8a 	bl	8001394 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fb86 	bl	8001394 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01f      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d019      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe fb45 	bl	8001394 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0c:	e00b      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fb41 	bl	8001394 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d902      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	74fb      	strb	r3, [r7, #19]
            break;
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ec      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d52:	e009      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	74bb      	strb	r3, [r7, #18]
 8002d58:	e006      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d68:	7c7b      	ldrb	r3, [r7, #17]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b9e      	ldr	r3, [pc, #632]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	4a9d      	ldr	r2, [pc, #628]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d86:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	4994      	ldr	r1, [pc, #592]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da8:	4b8f      	ldr	r3, [pc, #572]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 020c 	bic.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	498c      	ldr	r1, [pc, #560]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dca:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	4983      	ldr	r1, [pc, #524]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	4972      	ldr	r1, [pc, #456]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e30:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	496a      	ldr	r1, [pc, #424]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	4961      	ldr	r1, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	4950      	ldr	r1, [pc, #320]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	4948      	ldr	r1, [pc, #288]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	493f      	ldr	r1, [pc, #252]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d028      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
 8002f28:	e011      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f8c8 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d028      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	491f      	ldr	r1, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f84:	60d3      	str	r3, [r2, #12]
 8002f86:	e011      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f899 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d109      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e014      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f867 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	4928      	ldr	r1, [pc, #160]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303a:	d10d      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f844 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d014      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	74bb      	strb	r3, [r7, #18]
 8003056:	e011      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003060:	d10c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3320      	adds	r3, #32
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f925 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ba:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030de:	4b75      	ldr	r3, [pc, #468]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
       ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
       ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d047      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e044      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d018      	beq.n	8003156 <RCCEx_PLLSAI1_Config+0x86>
 8003124:	2b03      	cmp	r3, #3
 8003126:	d825      	bhi.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x62>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d009      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x74>
 8003130:	e020      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e01a      	b.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003144:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e013      	b.n	800317e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003162:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003172:	e006      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e004      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003182:	bf00      	nop
    }

    if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800318a:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	430b      	orrs	r3, r1
 80031a0:	4944      	ldr	r1, [pc, #272]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d17d      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe f8ec 	bl	8001394 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c0:	f7fe f8e8 	bl	8001394 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
        break;
 80031d2:	e005      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d4:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ef      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d160      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	0912      	lsrs	r2, r2, #4
 8003204:	0452      	lsls	r2, r2, #17
 8003206:	430a      	orrs	r2, r1
 8003208:	492a      	ldr	r1, [pc, #168]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	610b      	str	r3, [r1, #16]
 800320e:	e027      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d112      	bne.n	800323c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800321e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	0211      	lsls	r1, r2, #8
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6912      	ldr	r2, [r2, #16]
 800322c:	0852      	lsrs	r2, r2, #1
 800322e:	3a01      	subs	r2, #1
 8003230:	0552      	lsls	r2, r2, #21
 8003232:	430a      	orrs	r2, r1
 8003234:	491f      	ldr	r1, [pc, #124]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]
 800323a:	e011      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003244:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6892      	ldr	r2, [r2, #8]
 800324c:	0211      	lsls	r1, r2, #8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6952      	ldr	r2, [r2, #20]
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	3a01      	subs	r2, #1
 8003256:	0652      	lsls	r2, r2, #25
 8003258:	430a      	orrs	r2, r1
 800325a:	4916      	ldr	r1, [pc, #88]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f892 	bl	8001394 <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003272:	e009      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003274:	f7fe f88e 	bl	8001394 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d902      	bls.n	8003288 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	73fb      	strb	r3, [r7, #15]
          break;
 8003286:	e005      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ef      	beq.n	8003274 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0203 	and.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d10d      	bne.n	80032fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
       ||
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
       ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d047      	beq.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
 8003302:	e044      	b.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d018      	beq.n	800333e <RCCEx_PLLSAI2_Config+0x86>
 800330c:	2b03      	cmp	r3, #3
 800330e:	d825      	bhi.n	800335c <RCCEx_PLLSAI2_Config+0xa4>
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <RCCEx_PLLSAI2_Config+0x62>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d009      	beq.n	800332c <RCCEx_PLLSAI2_Config+0x74>
 8003318:	e020      	b.n	800335c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11d      	bne.n	8003362 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332a:	e01a      	b.n	8003362 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e013      	b.n	8003366 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800335a:	e006      	b.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e004      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800336a:	bf00      	nop
    }

    if(status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	430b      	orrs	r3, r1
 8003388:	4939      	ldr	r1, [pc, #228]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d167      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a35      	ldr	r2, [pc, #212]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fd fff8 	bl	8001394 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033a6:	e009      	b.n	80033bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033a8:	f7fd fff4 	bl	8001394 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	73fb      	strb	r3, [r7, #15]
        break;
 80033ba:	e005      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ef      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d14a      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6892      	ldr	r2, [r2, #8]
 80033e4:	0211      	lsls	r1, r2, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68d2      	ldr	r2, [r2, #12]
 80033ea:	0912      	lsrs	r2, r2, #4
 80033ec:	0452      	lsls	r2, r2, #17
 80033ee:	430a      	orrs	r2, r1
 80033f0:	491f      	ldr	r1, [pc, #124]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	614b      	str	r3, [r1, #20]
 80033f6:	e011      	b.n	800341c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003400:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6912      	ldr	r2, [r2, #16]
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	3a01      	subs	r2, #1
 8003412:	0652      	lsls	r2, r2, #25
 8003414:	430a      	orrs	r2, r1
 8003416:	4916      	ldr	r1, [pc, #88]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fd ffb4 	bl	8001394 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003430:	f7fd ffb0 	bl	8001394 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
          break;
 8003442:	e005      	b.n	8003450 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4904      	ldr	r1, [pc, #16]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e049      	b.n	800351a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f841 	bl	8003522 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 f9f8 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e04f      	b.n	80035f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <HAL_TIM_Base_Start_IT+0xc4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d018      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_TIM_Base_Start_IT+0xc8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_TIM_Base_Start_IT+0xcc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIM_Base_Start_IT+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_TIM_Base_Start_IT+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_TIM_Base_Start_IT+0x76>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_TIM_Base_Start_IT+0xd8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d115      	bne.n	80035da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d015      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0xb4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d011      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d8:	e008      	b.n	80035ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e000      	b.n	80035ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40013400 	.word	0x40013400
 8003610:	40014000 	.word	0x40014000
 8003614:	00010007 	.word	0x00010007

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0202 	mvn.w	r2, #2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f905 	bl	800386a <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8f7 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f908 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0204 	mvn.w	r2, #4
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8db 	bl	800386a <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8cd 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8de 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0208 	mvn.w	r2, #8
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2204      	movs	r2, #4
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8b1 	bl	800386a <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8a3 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8b4 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b10      	cmp	r3, #16
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0210 	mvn.w	r2, #16
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2208      	movs	r2, #8
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f887 	bl	800386a <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f879 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f88a 	bl	800387e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0201 	mvn.w	r2, #1
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fb08 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f914 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d10e      	bne.n	80037f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d107      	bne.n	80037f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f907 	bl	8003a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d107      	bne.n	8003822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f838 	bl	8003892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d10e      	bne.n	800384e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d107      	bne.n	800384e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0220 	mvn.w	r2, #32
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8c7 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a40      	ldr	r2, [pc, #256]	; (80039bc <TIM_Base_SetConfig+0x114>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3d      	ldr	r2, [pc, #244]	; (80039c0 <TIM_Base_SetConfig+0x118>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <TIM_Base_SetConfig+0x11c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <TIM_Base_SetConfig+0x120>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <TIM_Base_SetConfig+0x124>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2f      	ldr	r2, [pc, #188]	; (80039bc <TIM_Base_SetConfig+0x114>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d01b      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <TIM_Base_SetConfig+0x118>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2b      	ldr	r2, [pc, #172]	; (80039c4 <TIM_Base_SetConfig+0x11c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <TIM_Base_SetConfig+0x120>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <TIM_Base_SetConfig+0x124>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <TIM_Base_SetConfig+0x128>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0xf8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <TIM_Base_SetConfig+0x124>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0xf8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <TIM_Base_SetConfig+0x128>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0xf8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0xf8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e040      	b.n	8003aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd f9f6 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fb94 	bl	8004184 <UART_SetConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e022      	b.n	8003aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fe12 	bl	8004698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fe99 	bl	80047dc <UART_CheckIdleState>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	f040 8082 	bne.w	8003bd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_UART_Transmit+0x26>
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07a      	b.n	8003bd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Transmit+0x38>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e073      	b.n	8003bd4 <HAL_UART_Transmit+0x120>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2221      	movs	r2, #33	; 0x21
 8003b00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b02:	f7fd fc47 	bl	8001394 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d108      	bne.n	8003b34 <HAL_UART_Transmit+0x80>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e003      	b.n	8003b3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b44:	e02d      	b.n	8003ba2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fe8c 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e039      	b.n	8003bd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	b292      	uxth	r2, r2
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3302      	adds	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e008      	b.n	8003b90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b292      	uxth	r2, r2
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1cb      	bne.n	8003b46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fe58 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e005      	b.n	8003bd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
  }
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d131      	bne.n	8003c56 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_Receive_DMA+0x22>
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02a      	b.n	8003c58 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Receive_DMA+0x34>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e023      	b.n	8003c58 <HAL_UART_Receive_DMA+0x7c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <HAL_UART_Receive_DMA+0x84>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c44:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fe8b 	bl	8004968 <UART_Start_Receive_DMA>
 8003c52:	4603      	mov	r3, r0
 8003c54:	e000      	b.n	8003c58 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40008000 	.word	0x40008000

08003c64 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c70:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d127      	bne.n	8003cd6 <HAL_UART_DMAStop+0x72>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b21      	cmp	r3, #33	; 0x21
 8003c8a:	d124      	bne.n	8003cd6 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fd79 	bl	80017a0 <HAL_DMA_Abort>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fe9f 	bl	80019fc <HAL_DMA_GetError>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d105      	bne.n	8003cd0 <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e032      	b.n	8003d36 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 feb5 	bl	8004a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d127      	bne.n	8003d34 <HAL_UART_DMAStop+0xd0>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b22      	cmp	r3, #34	; 0x22
 8003ce8:	d124      	bne.n	8003d34 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fd4a 	bl	80017a0 <HAL_DMA_Abort>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fe70 	bl	80019fc <HAL_DMA_GetError>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d105      	bne.n	8003d2e <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2210      	movs	r2, #16
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e003      	b.n	8003d36 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fe9b 	bl	8004a6a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 81ce 	beq.w	800412a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
      }
      return;
 8003d96:	e1c8      	b.n	800412a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80e3 	beq.w	8003f66 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4ba6      	ldr	r3, [pc, #664]	; (8004048 <HAL_UART_IRQHandler+0x308>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80d8 	beq.w	8003f66 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d010      	beq.n	8003de2 <HAL_UART_IRQHandler+0xa2>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_UART_IRQHandler+0xce>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e04:	f043 0204 	orr.w	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <HAL_UART_IRQHandler+0xfa>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2204      	movs	r2, #4
 8003e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e30:	f043 0202 	orr.w	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e66:	f043 0208 	orr.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d011      	beq.n	8003e9e <HAL_UART_IRQHandler+0x15e>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00c      	beq.n	8003e9e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8142 	beq.w	800412e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d004      	beq.n	8003eee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d031      	beq.n	8003f52 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fdbb 	bl	8004a6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d123      	bne.n	8003f4a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a4b      	ldr	r2, [pc, #300]	; (800404c <HAL_UART_IRQHandler+0x30c>)
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fc78 	bl	800181c <HAL_DMA_Abort_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d017      	beq.n	8003f62 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	e00f      	b.n	8003f62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f908 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e00b      	b.n	8003f62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f904 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e007      	b.n	8003f62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f900 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f60:	e0e5      	b.n	800412e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f62:	bf00      	nop
    return;
 8003f64:	e0e3      	b.n	800412e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	f040 80a9 	bne.w	80040c2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a3 	beq.w	80040c2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 809d 	beq.w	80040c2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d158      	bne.n	8004050 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80c1 	beq.w	8004132 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fb6:	893a      	ldrh	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	f080 80ba 	bcs.w	8004132 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	893a      	ldrh	r2, [r7, #8]
 8003fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d12a      	bne.n	800402c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004004:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fbba 	bl	80017a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004038:	b29b      	uxth	r3, r3
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	b29b      	uxth	r3, r3
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f893 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004046:	e074      	b.n	8004132 <HAL_UART_IRQHandler+0x3f2>
 8004048:	04000120 	.word	0x04000120
 800404c:	08004c15 	.word	0x08004c15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405c:	b29b      	uxth	r3, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d060      	beq.n	8004136 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004082:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0210 	bic.w	r2, r2, #16
 80040b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f856 	bl	800416c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040c0:	e039      	b.n	8004136 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <HAL_UART_IRQHandler+0x3a8>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fdc6 	bl	8004c72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e6:	e029      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01a      	beq.n	800413a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
    }
    return;
 800410c:	e015      	b.n	800413a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d011      	beq.n	800413c <HAL_UART_IRQHandler+0x3fc>
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fd8c 	bl	8004c40 <UART_EndTransmit_IT>
    return;
 8004128:	e008      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
      return;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
    return;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <HAL_UART_IRQHandler+0x3fc>
    return;
 800413a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop

08004144 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4bad      	ldr	r3, [pc, #692]	; (8004464 <UART_SetConfig+0x2e0>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4aa2      	ldr	r2, [pc, #648]	; (8004468 <UART_SetConfig+0x2e4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a99      	ldr	r2, [pc, #612]	; (800446c <UART_SetConfig+0x2e8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d121      	bne.n	800424e <UART_SetConfig+0xca>
 800420a:	4b99      	ldr	r3, [pc, #612]	; (8004470 <UART_SetConfig+0x2ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b03      	cmp	r3, #3
 8004216:	d817      	bhi.n	8004248 <UART_SetConfig+0xc4>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x9c>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	0800423d 	.word	0x0800423d
 8004228:	08004237 	.word	0x08004237
 800422c:	08004243 	.word	0x08004243
 8004230:	2301      	movs	r3, #1
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e0e7      	b.n	8004406 <UART_SetConfig+0x282>
 8004236:	2302      	movs	r3, #2
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e0e4      	b.n	8004406 <UART_SetConfig+0x282>
 800423c:	2304      	movs	r3, #4
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e0e1      	b.n	8004406 <UART_SetConfig+0x282>
 8004242:	2308      	movs	r3, #8
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e0de      	b.n	8004406 <UART_SetConfig+0x282>
 8004248:	2310      	movs	r3, #16
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e0db      	b.n	8004406 <UART_SetConfig+0x282>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a88      	ldr	r2, [pc, #544]	; (8004474 <UART_SetConfig+0x2f0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d132      	bne.n	80042be <UART_SetConfig+0x13a>
 8004258:	4b85      	ldr	r3, [pc, #532]	; (8004470 <UART_SetConfig+0x2ec>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d828      	bhi.n	80042b8 <UART_SetConfig+0x134>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0xe8>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042b9 	.word	0x080042b9
 8004274:	080042b9 	.word	0x080042b9
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042a7 	.word	0x080042a7
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e0af      	b.n	8004406 <UART_SetConfig+0x282>
 80042a6:	2302      	movs	r3, #2
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e0ac      	b.n	8004406 <UART_SetConfig+0x282>
 80042ac:	2304      	movs	r3, #4
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e0a9      	b.n	8004406 <UART_SetConfig+0x282>
 80042b2:	2308      	movs	r3, #8
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e0a6      	b.n	8004406 <UART_SetConfig+0x282>
 80042b8:	2310      	movs	r3, #16
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e0a3      	b.n	8004406 <UART_SetConfig+0x282>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6d      	ldr	r2, [pc, #436]	; (8004478 <UART_SetConfig+0x2f4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0x186>
 80042c8:	4b69      	ldr	r3, [pc, #420]	; (8004470 <UART_SetConfig+0x2ec>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d013      	beq.n	80042fe <UART_SetConfig+0x17a>
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	d814      	bhi.n	8004304 <UART_SetConfig+0x180>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d009      	beq.n	80042f2 <UART_SetConfig+0x16e>
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d810      	bhi.n	8004304 <UART_SetConfig+0x180>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <UART_SetConfig+0x168>
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x174>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x180>
 80042ec:	2300      	movs	r3, #0
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e089      	b.n	8004406 <UART_SetConfig+0x282>
 80042f2:	2302      	movs	r3, #2
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e086      	b.n	8004406 <UART_SetConfig+0x282>
 80042f8:	2304      	movs	r3, #4
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e083      	b.n	8004406 <UART_SetConfig+0x282>
 80042fe:	2308      	movs	r3, #8
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e080      	b.n	8004406 <UART_SetConfig+0x282>
 8004304:	2310      	movs	r3, #16
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e07d      	b.n	8004406 <UART_SetConfig+0x282>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a5b      	ldr	r2, [pc, #364]	; (800447c <UART_SetConfig+0x2f8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0x1d2>
 8004314:	4b56      	ldr	r3, [pc, #344]	; (8004470 <UART_SetConfig+0x2ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800431e:	2bc0      	cmp	r3, #192	; 0xc0
 8004320:	d013      	beq.n	800434a <UART_SetConfig+0x1c6>
 8004322:	2bc0      	cmp	r3, #192	; 0xc0
 8004324:	d814      	bhi.n	8004350 <UART_SetConfig+0x1cc>
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x1ba>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d810      	bhi.n	8004350 <UART_SetConfig+0x1cc>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x1b4>
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d006      	beq.n	8004344 <UART_SetConfig+0x1c0>
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x1cc>
 8004338:	2300      	movs	r3, #0
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e063      	b.n	8004406 <UART_SetConfig+0x282>
 800433e:	2302      	movs	r3, #2
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e060      	b.n	8004406 <UART_SetConfig+0x282>
 8004344:	2304      	movs	r3, #4
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e05d      	b.n	8004406 <UART_SetConfig+0x282>
 800434a:	2308      	movs	r3, #8
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e05a      	b.n	8004406 <UART_SetConfig+0x282>
 8004350:	2310      	movs	r3, #16
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e057      	b.n	8004406 <UART_SetConfig+0x282>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a49      	ldr	r2, [pc, #292]	; (8004480 <UART_SetConfig+0x2fc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0x228>
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <UART_SetConfig+0x2ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d017      	beq.n	80043a0 <UART_SetConfig+0x21c>
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d817      	bhi.n	80043a6 <UART_SetConfig+0x222>
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d00b      	beq.n	8004394 <UART_SetConfig+0x210>
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d811      	bhi.n	80043a6 <UART_SetConfig+0x222>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <UART_SetConfig+0x20a>
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d006      	beq.n	800439a <UART_SetConfig+0x216>
 800438c:	e00b      	b.n	80043a6 <UART_SetConfig+0x222>
 800438e:	2300      	movs	r3, #0
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e038      	b.n	8004406 <UART_SetConfig+0x282>
 8004394:	2302      	movs	r3, #2
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e035      	b.n	8004406 <UART_SetConfig+0x282>
 800439a:	2304      	movs	r3, #4
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e032      	b.n	8004406 <UART_SetConfig+0x282>
 80043a0:	2308      	movs	r3, #8
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e02f      	b.n	8004406 <UART_SetConfig+0x282>
 80043a6:	2310      	movs	r3, #16
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e02c      	b.n	8004406 <UART_SetConfig+0x282>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <UART_SetConfig+0x2e4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x27e>
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <UART_SetConfig+0x2ec>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c4:	d017      	beq.n	80043f6 <UART_SetConfig+0x272>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x278>
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d0:	d00b      	beq.n	80043ea <UART_SetConfig+0x266>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x278>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x260>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x26c>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x278>
 80043e4:	2300      	movs	r3, #0
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x282>
 80043ea:	2302      	movs	r3, #2
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e00a      	b.n	8004406 <UART_SetConfig+0x282>
 80043f0:	2304      	movs	r3, #4
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	e007      	b.n	8004406 <UART_SetConfig+0x282>
 80043f6:	2308      	movs	r3, #8
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e004      	b.n	8004406 <UART_SetConfig+0x282>
 80043fc:	2310      	movs	r3, #16
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e001      	b.n	8004406 <UART_SetConfig+0x282>
 8004402:	2310      	movs	r3, #16
 8004404:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <UART_SetConfig+0x2e4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f040 8087 	bne.w	8004520 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004412:	7efb      	ldrb	r3, [r7, #27]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d837      	bhi.n	8004488 <UART_SetConfig+0x304>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x29c>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004445 	.word	0x08004445
 8004424:	08004489 	.word	0x08004489
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004489 	.word	0x08004489
 8004430:	08004453 	.word	0x08004453
 8004434:	08004489 	.word	0x08004489
 8004438:	08004489 	.word	0x08004489
 800443c:	08004489 	.word	0x08004489
 8004440:	0800445b 	.word	0x0800445b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe fa9c 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8004448:	6178      	str	r0, [r7, #20]
        break;
 800444a:	e022      	b.n	8004492 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <UART_SetConfig+0x300>)
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e01f      	b.n	8004492 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe f9fd 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004456:	6178      	str	r0, [r7, #20]
        break;
 8004458:	e01b      	b.n	8004492 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445e:	617b      	str	r3, [r7, #20]
        break;
 8004460:	e017      	b.n	8004492 <UART_SetConfig+0x30e>
 8004462:	bf00      	nop
 8004464:	efff69f3 	.word	0xefff69f3
 8004468:	40008000 	.word	0x40008000
 800446c:	40013800 	.word	0x40013800
 8004470:	40021000 	.word	0x40021000
 8004474:	40004400 	.word	0x40004400
 8004478:	40004800 	.word	0x40004800
 800447c:	40004c00 	.word	0x40004c00
 8004480:	40005000 	.word	0x40005000
 8004484:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	76bb      	strb	r3, [r7, #26]
        break;
 8004490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80f1 	beq.w	800467c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d305      	bcc.n	80044b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d902      	bls.n	80044bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	76bb      	strb	r3, [r7, #26]
 80044ba:	e0df      	b.n	800467c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4618      	mov	r0, r3
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	020b      	lsls	r3, r1, #8
 80044ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044d2:	0202      	lsls	r2, r0, #8
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	6849      	ldr	r1, [r1, #4]
 80044d8:	0849      	lsrs	r1, r1, #1
 80044da:	4608      	mov	r0, r1
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	1814      	adds	r4, r2, r0
 80044e2:	eb43 0501 	adc.w	r5, r3, r1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	4620      	mov	r0, r4
 80044f2:	4629      	mov	r1, r5
 80044f4:	f7fb fec4 	bl	8000280 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004506:	d308      	bcc.n	800451a <UART_SetConfig+0x396>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450e:	d204      	bcs.n	800451a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e0b0      	b.n	800467c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	76bb      	strb	r3, [r7, #26]
 800451e:	e0ad      	b.n	800467c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	d15c      	bne.n	80045e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800452a:	7efb      	ldrb	r3, [r7, #27]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d828      	bhi.n	8004582 <UART_SetConfig+0x3fe>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x3b4>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004565 	.word	0x08004565
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004583 	.word	0x08004583
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
 8004550:	08004583 	.word	0x08004583
 8004554:	08004583 	.word	0x08004583
 8004558:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7fe fa10 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8004560:	6178      	str	r0, [r7, #20]
        break;
 8004562:	e013      	b.n	800458c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe fa22 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004568:	6178      	str	r0, [r7, #20]
        break;
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b49      	ldr	r3, [pc, #292]	; (8004694 <UART_SetConfig+0x510>)
 800456e:	617b      	str	r3, [r7, #20]
        break;
 8004570:	e00c      	b.n	800458c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe f96d 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004576:	6178      	str	r0, [r7, #20]
        break;
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	617b      	str	r3, [r7, #20]
        break;
 8004580:	e004      	b.n	800458c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	76bb      	strb	r3, [r7, #26]
        break;
 800458a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d074      	beq.n	800467c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d916      	bls.n	80045de <UART_SetConfig+0x45a>
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d212      	bcs.n	80045de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f023 030f 	bic.w	r3, r3, #15
 80045c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	89fa      	ldrh	r2, [r7, #14]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e04e      	b.n	800467c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	76bb      	strb	r3, [r7, #26]
 80045e2:	e04b      	b.n	800467c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e4:	7efb      	ldrb	r3, [r7, #27]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d827      	bhi.n	800463a <UART_SetConfig+0x4b6>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x46c>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fe f9b4 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8004618:	6178      	str	r0, [r7, #20]
        break;
 800461a:	e013      	b.n	8004644 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7fe f9c6 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004620:	6178      	str	r0, [r7, #20]
        break;
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <UART_SetConfig+0x510>)
 8004626:	617b      	str	r3, [r7, #20]
        break;
 8004628:	e00c      	b.n	8004644 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7fe f911 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800462e:	6178      	str	r0, [r7, #20]
        break;
 8004630:	e008      	b.n	8004644 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	617b      	str	r3, [r7, #20]
        break;
 8004638:	e004      	b.n	8004644 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	76bb      	strb	r3, [r7, #26]
        break;
 8004642:	bf00      	nop
    }

    if (pclk != 0U)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	085a      	lsrs	r2, r3, #1
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	441a      	add	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	b29b      	uxth	r3, r3
 800465e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d908      	bls.n	8004678 <UART_SetConfig+0x4f4>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d204      	bcs.n	8004678 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e001      	b.n	800467c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004688:	7ebb      	ldrb	r3, [r7, #26]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bdb0      	pop	{r4, r5, r7, pc}
 8004692:	bf00      	nop
 8004694:	00f42400 	.word	0x00f42400

08004698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01a      	beq.n	80047ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d10a      	bne.n	80047ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ec:	f7fc fdd2 	bl	8001394 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10e      	bne.n	800481e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f82d 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e023      	b.n	8004866 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d10e      	bne.n	800484a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f817 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e00d      	b.n	8004866 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487e:	e05e      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004886:	d05a      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004888:	f7fc fd84 	bl	8001394 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <UART_WaitOnFlagUntilTimeout+0x30>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11b      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e043      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02c      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f2:	d124      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800490c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	429a      	cmp	r2, r3
 800495a:	d091      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2222      	movs	r2, #34	; 0x22
 8004990:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02b      	beq.n	80049f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a25      	ldr	r2, [pc, #148]	; (8004a34 <UART_Start_Receive_DMA+0xcc>)
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <UART_Start_Receive_DMA+0xd0>)
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <UART_Start_Receive_DMA+0xd4>)
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	2200      	movs	r2, #0
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	4619      	mov	r1, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	461a      	mov	r2, r3
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	f7fc fe87 	bl	80016e0 <HAL_DMA_Start_IT>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2210      	movs	r2, #16
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e01c      	b.n	8004a2c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a08:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a28:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	08004ac9 	.word	0x08004ac9
 8004a38:	08004b61 	.word	0x08004b61
 8004a3c:	08004b99 	.word	0x08004b99

08004a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a56:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0210 	bic.w	r2, r2, #16
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d12a      	bne.n	8004b3a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0210 	bic.w	r2, r2, #16
 8004b38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fb0e 	bl	800416c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b50:	e002      	b.n	8004b58 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7fc f8f6 	bl	8000d44 <HAL_UART_RxCpltCallback>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d109      	bne.n	8004b8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4619      	mov	r1, r3
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff faf2 	bl	800416c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b88:	e002      	b.n	8004b90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fada 	bl	8004144 <HAL_UART_RxHalfCpltCallback>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004baa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d109      	bne.n	8004bd4 <UART_DMAError+0x3c>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b21      	cmp	r3, #33	; 0x21
 8004bc4:	d106      	bne.n	8004bd4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004bce:	6978      	ldr	r0, [r7, #20]
 8004bd0:	f7ff ff36 	bl	8004a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d109      	bne.n	8004bf6 <UART_DMAError+0x5e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	d106      	bne.n	8004bf6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004bf0:	6978      	ldr	r0, [r7, #20]
 8004bf2:	f7ff ff3a 	bl	8004a6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f7ff faa6 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fa90 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fc f887 	bl	8000d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <__NVIC_SetPriority>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db0a      	blt.n	8004cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <__NVIC_SetPriority+0x4c>)
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cb0:	e00a      	b.n	8004cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4908      	ldr	r1, [pc, #32]	; (8004cd8 <__NVIC_SetPriority+0x50>)
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	761a      	strb	r2, [r3, #24]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <SysTick_Handler+0x1c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ce4:	f001 fcfe 	bl	80066e4 <xTaskGetSchedulerState>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004cee:	f002 fae3 	bl	80072b8 <xPortSysTickHandler>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	e000e010 	.word	0xe000e010

08004cfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d00:	2100      	movs	r1, #0
 8004d02:	f06f 0004 	mvn.w	r0, #4
 8004d06:	f7ff ffbf 	bl	8004c88 <__NVIC_SetPriority>
#endif
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d16:	f3ef 8305 	mrs	r3, IPSR
 8004d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d22:	f06f 0305 	mvn.w	r3, #5
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e00c      	b.n	8004d44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <osKernelInitialize+0x44>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <osKernelInitialize+0x44>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e002      	b.n	8004d44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d44:	687b      	ldr	r3, [r7, #4]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000094 	.word	0x20000094

08004d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d5e:	f3ef 8305 	mrs	r3, IPSR
 8004d62:	603b      	str	r3, [r7, #0]
  return(result);
 8004d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d6a:	f06f 0305 	mvn.w	r3, #5
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	e010      	b.n	8004d94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <osKernelStart+0x48>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d109      	bne.n	8004d8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d7a:	f7ff ffbf 	bl	8004cfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <osKernelStart+0x48>)
 8004d80:	2202      	movs	r2, #2
 8004d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d84:	f001 f866 	bl	8005e54 <vTaskStartScheduler>
      stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e002      	b.n	8004d94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d94:	687b      	ldr	r3, [r7, #4]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000094 	.word	0x20000094

08004da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af04      	add	r7, sp, #16
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db4:	f3ef 8305 	mrs	r3, IPSR
 8004db8:	617b      	str	r3, [r7, #20]
  return(result);
 8004dba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d17e      	bne.n	8004ebe <osThreadNew+0x11a>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d07b      	beq.n	8004ebe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004dca:	2318      	movs	r3, #24
 8004dcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d045      	beq.n	8004e6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <osThreadNew+0x48>
        name = attr->name;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <osThreadNew+0x6e>
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b38      	cmp	r3, #56	; 0x38
 8004e04:	d805      	bhi.n	8004e12 <osThreadNew+0x6e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <osThreadNew+0x72>
        return (NULL);
 8004e12:	2300      	movs	r3, #0
 8004e14:	e054      	b.n	8004ec0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <osThreadNew+0xa8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b5b      	cmp	r3, #91	; 0x5b
 8004e34:	d90a      	bls.n	8004e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <osThreadNew+0xa8>
        mem = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e010      	b.n	8004e6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10c      	bne.n	8004e6e <osThreadNew+0xca>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d108      	bne.n	8004e6e <osThreadNew+0xca>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <osThreadNew+0xca>
          mem = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e001      	b.n	8004e6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d110      	bne.n	8004e96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e7c:	9202      	str	r2, [sp, #8]
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fe0c 	bl	8005aa8 <xTaskCreateStatic>
 8004e90:	4603      	mov	r3, r0
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e013      	b.n	8004ebe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d110      	bne.n	8004ebe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fe57 	bl	8005b62 <xTaskCreate>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <osThreadNew+0x11a>
            hTask = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ebe:	693b      	ldr	r3, [r7, #16]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3728      	adds	r7, #40	; 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed0:	f3ef 8305 	mrs	r3, IPSR
 8004ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <osDelay+0x1c>
    stat = osErrorISR;
 8004edc:	f06f 0305 	mvn.w	r3, #5
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e007      	b.n	8004ef4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 ff7c 	bl	8005dec <vTaskDelay>
    }
  }

  return (stat);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <vApplicationGetIdleTaskMemory+0x30>)
 8004f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20000098 	.word	0x20000098
 8004f30:	200000f4 	.word	0x200000f4

08004f34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a06      	ldr	r2, [pc, #24]	; (8004f64 <vApplicationGetTimerTaskMemory+0x30>)
 8004f4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	200002f4 	.word	0x200002f4
 8004f64:	20000350 	.word	0x20000350

08004f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f103 0208 	add.w	r2, r3, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 0208 	add.w	r2, r3, #8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f103 0208 	add.w	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005020:	d103      	bne.n	800502a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e00c      	b.n	8005044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3308      	adds	r3, #8
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e002      	b.n	8005038 <vListInsert+0x2e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d2f6      	bcs.n	8005032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6892      	ldr	r2, [r2, #8]
 8005092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6852      	ldr	r2, [r2, #4]
 800509c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d103      	bne.n	80050b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050fa:	f002 f84b 	bl	8007194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	3b01      	subs	r3, #1
 800512c:	68f9      	ldr	r1, [r7, #12]
 800512e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	22ff      	movs	r2, #255	; 0xff
 800513e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d114      	bne.n	800517a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3310      	adds	r3, #16
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f903 	bl	8006368 <xTaskRemoveFromEventList>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <xQueueGenericReset+0xcc>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	e009      	b.n	800518e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3310      	adds	r3, #16
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fef2 	bl	8004f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3324      	adds	r3, #36	; 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff feed 	bl	8004f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800518e:	f002 f831 	bl	80071f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005192:	2301      	movs	r3, #1
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08e      	sub	sp, #56	; 0x38
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <xQueueGenericCreateStatic+0x52>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <xQueueGenericCreateStatic+0x56>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueGenericCreateStatic+0x58>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <xQueueGenericCreateStatic+0x7e>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <xQueueGenericCreateStatic+0x82>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericCreateStatic+0x84>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61fb      	str	r3, [r7, #28]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800523e:	2350      	movs	r3, #80	; 0x50
 8005240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b50      	cmp	r3, #80	; 0x50
 8005246:	d00a      	beq.n	800525e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61bb      	str	r3, [r7, #24]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800525e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f805 	bl	8005290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005288:	4618      	mov	r0, r3
 800528a:	3730      	adds	r7, #48	; 0x30
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052be:	2101      	movs	r1, #1
 80052c0:	69b8      	ldr	r0, [r7, #24]
 80052c2:	f7ff ff05 	bl	80050d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08e      	sub	sp, #56	; 0x38
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052e6:	2300      	movs	r3, #0
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xQueueGenericSend+0x32>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <xQueueGenericSend+0x40>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGenericSend+0x44>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGenericSend+0x46>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <xQueueGenericSend+0x60>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d103      	bne.n	8005346 <xQueueGenericSend+0x6e>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <xQueueGenericSend+0x72>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <xQueueGenericSend+0x74>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xQueueGenericSend+0x8e>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	623b      	str	r3, [r7, #32]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005366:	f001 f9bd 	bl	80066e4 <xTaskGetSchedulerState>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <xQueueGenericSend+0x9e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueGenericSend+0xa2>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueGenericSend+0xa4>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericSend+0xbe>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61fb      	str	r3, [r7, #28]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005396:	f001 fefd 	bl	8007194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <xQueueGenericSend+0xd4>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d129      	bne.n	8005400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053b2:	f000 fa0b 	bl	80057cc <prvCopyDataToQueue>
 80053b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	3324      	adds	r3, #36	; 0x24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 ffcf 	bl	8006368 <xTaskRemoveFromEventList>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d013      	beq.n	80053f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053d0:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <xQueueGenericSend+0x1f8>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	e00a      	b.n	80053f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053e8:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <xQueueGenericSend+0x1f8>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053f8:	f001 fefc 	bl	80071f4 <vPortExitCritical>
				return pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e063      	b.n	80054c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005406:	f001 fef5 	bl	80071f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800540a:	2300      	movs	r3, #0
 800540c:	e05c      	b.n	80054c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4618      	mov	r0, r3
 800541a:	f001 f809 	bl	8006430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800541e:	2301      	movs	r3, #1
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005422:	f001 fee7 	bl	80071f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005426:	f000 fd7b 	bl	8005f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800542a:	f001 feb3 	bl	8007194 <vPortEnterCritical>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005434:	b25b      	sxtb	r3, r3
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543a:	d103      	bne.n	8005444 <xQueueGenericSend+0x16c>
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800544a:	b25b      	sxtb	r3, r3
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005450:	d103      	bne.n	800545a <xQueueGenericSend+0x182>
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800545a:	f001 fecb 	bl	80071f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800545e:	1d3a      	adds	r2, r7, #4
 8005460:	f107 0314 	add.w	r3, r7, #20
 8005464:	4611      	mov	r1, r2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fff8 	bl	800645c <xTaskCheckForTimeOut>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d124      	bne.n	80054bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005474:	f000 faa2 	bl	80059bc <prvIsQueueFull>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	3310      	adds	r3, #16
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff1e 	bl	80062c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800548c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800548e:	f000 fa2d 	bl	80058ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005492:	f000 fd53 	bl	8005f3c <xTaskResumeAll>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f47f af7c 	bne.w	8005396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <xQueueGenericSend+0x1f8>)
 80054a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	e772      	b.n	8005396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054b2:	f000 fa1b 	bl	80058ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054b6:	f000 fd41 	bl	8005f3c <xTaskResumeAll>
 80054ba:	e76c      	b.n	8005396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054be:	f000 fa15 	bl	80058ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054c2:	f000 fd3b 	bl	8005f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3738      	adds	r7, #56	; 0x38
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b090      	sub	sp, #64	; 0x40
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <xQueueGenericSendFromISR+0x3c>
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <xQueueGenericSendFromISR+0x40>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <xQueueGenericSendFromISR+0x42>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d103      	bne.n	800553e <xQueueGenericSendFromISR+0x6a>
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <xQueueGenericSendFromISR+0x6e>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <xQueueGenericSendFromISR+0x70>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	623b      	str	r3, [r7, #32]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800555e:	f001 fefb 	bl	8007358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005562:	f3ef 8211 	mrs	r2, BASEPRI
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	61fa      	str	r2, [r7, #28]
 8005578:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800557a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <xQueueGenericSendFromISR+0xbc>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d12f      	bne.n	80055f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a6:	f000 f911 	bl	80057cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b2:	d112      	bne.n	80055da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d016      	beq.n	80055ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fed1 	bl	8006368 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e007      	b.n	80055ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055de:	3301      	adds	r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	b25a      	sxtb	r2, r3
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055ea:	2301      	movs	r3, #1
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80055ee:	e001      	b.n	80055f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005602:	4618      	mov	r0, r3
 8005604:	3740      	adds	r7, #64	; 0x40
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	; 0x30
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005618:	2300      	movs	r3, #0
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <xQueueReceive+0x30>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	623b      	str	r3, [r7, #32]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <xQueueReceive+0x3e>
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xQueueReceive+0x42>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueReceive+0x44>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueReceive+0x5e>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	61fb      	str	r3, [r7, #28]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566a:	f001 f83b 	bl	80066e4 <xTaskGetSchedulerState>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xQueueReceive+0x6e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueReceive+0x72>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueReceive+0x74>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueReceive+0x8e>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569a:	f001 fd7b 	bl	8007194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01f      	beq.n	80056ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ae:	f000 f8f7 	bl	80058a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1e5a      	subs	r2, r3, #1
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00f      	beq.n	80056e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	3310      	adds	r3, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fe4e 	bl	8006368 <xTaskRemoveFromEventList>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056d2:	4b3d      	ldr	r3, [pc, #244]	; (80057c8 <xQueueReceive+0x1bc>)
 80056d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056e2:	f001 fd87 	bl	80071f4 <vPortExitCritical>
				return pdPASS;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e069      	b.n	80057be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f0:	f001 fd80 	bl	80071f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e062      	b.n	80057be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056fe:	f107 0310 	add.w	r3, r7, #16
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fe94 	bl	8006430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800570c:	f001 fd72 	bl	80071f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005710:	f000 fc06 	bl	8005f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005714:	f001 fd3e 	bl	8007194 <vPortEnterCritical>
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800571e:	b25b      	sxtb	r3, r3
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005724:	d103      	bne.n	800572e <xQueueReceive+0x122>
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005734:	b25b      	sxtb	r3, r3
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573a:	d103      	bne.n	8005744 <xQueueReceive+0x138>
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005744:	f001 fd56 	bl	80071f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005748:	1d3a      	adds	r2, r7, #4
 800574a:	f107 0310 	add.w	r3, r7, #16
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fe83 	bl	800645c <xTaskCheckForTimeOut>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d123      	bne.n	80057a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575e:	f000 f917 	bl	8005990 <prvIsQueueEmpty>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d017      	beq.n	8005798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4611      	mov	r1, r2
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fda9 	bl	80062c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005778:	f000 f8b8 	bl	80058ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800577c:	f000 fbde 	bl	8005f3c <xTaskResumeAll>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d189      	bne.n	800569a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <xQueueReceive+0x1bc>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	e780      	b.n	800569a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579a:	f000 f8a7 	bl	80058ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800579e:	f000 fbcd 	bl	8005f3c <xTaskResumeAll>
 80057a2:	e77a      	b.n	800569a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a6:	f000 f8a1 	bl	80058ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057aa:	f000 fbc7 	bl	8005f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b0:	f000 f8ee 	bl	8005990 <prvIsQueueEmpty>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f43f af6f 	beq.w	800569a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3730      	adds	r7, #48	; 0x30
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d14d      	bne.n	800588e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 ff92 	bl	8006720 <xTaskPriorityDisinherit>
 80057fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e043      	b.n	800588e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d119      	bne.n	8005840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6858      	ldr	r0, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	f001 fff2 	bl	8007800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d32b      	bcc.n	800588e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	e026      	b.n	800588e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68d8      	ldr	r0, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	461a      	mov	r2, r3
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	f001 ffd8 	bl	8007800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	425b      	negs	r3, r3
 800585a:	441a      	add	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d207      	bcs.n	800587c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	425b      	negs	r3, r3
 8005876:	441a      	add	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d105      	bne.n	800588e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3b01      	subs	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005896:	697b      	ldr	r3, [r7, #20]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d303      	bcc.n	80058d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68d9      	ldr	r1, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	461a      	mov	r2, r3
 80058de:	6838      	ldr	r0, [r7, #0]
 80058e0:	f001 ff8e 	bl	8007800 <memcpy>
	}
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058f4:	f001 fc4e 	bl	8007194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005900:	e011      	b.n	8005926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3324      	adds	r3, #36	; 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fd2a 	bl	8006368 <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800591a:	f000 fe01 	bl	8006520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	3b01      	subs	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dce9      	bgt.n	8005902 <prvUnlockQueue+0x16>
 800592e:	e000      	b.n	8005932 <prvUnlockQueue+0x46>
					break;
 8005930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800593a:	f001 fc5b 	bl	80071f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800593e:	f001 fc29 	bl	8007194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800594a:	e011      	b.n	8005970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d012      	beq.n	800597a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3310      	adds	r3, #16
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fd05 	bl	8006368 <xTaskRemoveFromEventList>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005964:	f000 fddc 	bl	8006520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	3b01      	subs	r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dce9      	bgt.n	800594c <prvUnlockQueue+0x60>
 8005978:	e000      	b.n	800597c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800597a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	22ff      	movs	r2, #255	; 0xff
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005984:	f001 fc36 	bl	80071f4 <vPortExitCritical>
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005998:	f001 fbfc 	bl	8007194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e001      	b.n	80059ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f001 fc21 	bl	80071f4 <vPortExitCritical>

	return xReturn;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059c4:	f001 fbe6 	bl	8007194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d102      	bne.n	80059da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e001      	b.n	80059de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059de:	f001 fc09 	bl	80071f4 <vPortExitCritical>

	return xReturn;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e014      	b.n	8005a26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059fc:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <vQueueAddToRegistry+0x50>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a08:	490c      	ldr	r1, [pc, #48]	; (8005a3c <vQueueAddToRegistry+0x50>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <vQueueAddToRegistry+0x50>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a1e:	e006      	b.n	8005a2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	d9e7      	bls.n	80059fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20001c64 	.word	0x20001c64

08005a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a50:	f001 fba0 	bl	8007194 <vPortEnterCritical>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a60:	d103      	bne.n	8005a6a <vQueueWaitForMessageRestricted+0x2a>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a76:	d103      	bne.n	8005a80 <vQueueWaitForMessageRestricted+0x40>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a80:	f001 fbb8 	bl	80071f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fc3b 	bl	8006310 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff ff26 	bl	80058ec <prvUnlockQueue>
	}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	623b      	str	r3, [r7, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xTaskCreateStatic+0x46>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	61fb      	str	r3, [r7, #28]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aee:	235c      	movs	r3, #92	; 0x5c
 8005af0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b5c      	cmp	r3, #92	; 0x5c
 8005af6:	d00a      	beq.n	8005b0e <xTaskCreateStatic+0x66>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	61bb      	str	r3, [r7, #24]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01e      	beq.n	8005b54 <xTaskCreateStatic+0xac>
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f850 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b4e:	f000 f8dd 	bl	8005d0c <prvAddNewTaskToReadyList>
 8005b52:	e001      	b.n	8005b58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b58:	697b      	ldr	r3, [r7, #20]
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3728      	adds	r7, #40	; 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b08c      	sub	sp, #48	; 0x30
 8005b66:	af04      	add	r7, sp, #16
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fc2e 	bl	80073d8 <pvPortMalloc>
 8005b7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b84:	205c      	movs	r0, #92	; 0x5c
 8005b86:	f001 fc27 	bl	80073d8 <pvPortMalloc>
 8005b8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
 8005b98:	e005      	b.n	8005ba6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f001 fce8 	bl	8007570 <vPortFree>
 8005ba0:	e001      	b.n	8005ba6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	9302      	str	r3, [sp, #8]
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f80e 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd0:	69f8      	ldr	r0, [r7, #28]
 8005bd2:	f000 f89b 	bl	8005d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e002      	b.n	8005be2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005be0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be2:	69bb      	ldr	r3, [r7, #24]
	}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	21a5      	movs	r1, #165	; 0xa5
 8005c06:	f001 fe09 	bl	800781c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c14:	3b01      	subs	r3, #1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	617b      	str	r3, [r7, #20]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01f      	beq.n	8005c8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e012      	b.n	8005c76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	7819      	ldrb	r1, [r3, #0]
 8005c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3334      	adds	r3, #52	; 0x34
 8005c60:	460a      	mov	r2, r1
 8005c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d9e9      	bls.n	8005c50 <prvInitialiseNewTask+0x64>
 8005c7c:	e000      	b.n	8005c80 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c88:	e003      	b.n	8005c92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	2b37      	cmp	r3, #55	; 0x37
 8005c96:	d901      	bls.n	8005c9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c98:	2337      	movs	r3, #55	; 0x37
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	2200      	movs	r2, #0
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff f978 	bl	8004fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	3318      	adds	r3, #24
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff f973 	bl	8004fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f001 f928 	bl	8006f40 <pxPortInitialiseStack>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d02:	bf00      	nop
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d14:	f001 fa3e 	bl	8007194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d18:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d22:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d30:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <prvAddNewTaskToReadyList+0xc4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d110      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d38:	f000 fc16 	bl	8006568 <prvInitialiseTaskLists>
 8005d3c:	e00d      	b.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d3e:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <prvAddNewTaskToReadyList+0xcc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d46:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d802      	bhi.n	8005d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <prvAddNewTaskToReadyList+0xd0>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <prvAddNewTaskToReadyList+0xd4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <prvAddNewTaskToReadyList+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <prvAddNewTaskToReadyList+0xd4>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <prvAddNewTaskToReadyList+0xd8>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7ff f913 	bl	8004fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d9c:	f001 fa2a 	bl	80071f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005da0:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <prvAddNewTaskToReadyList+0xcc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <prvAddNewTaskToReadyList+0xc8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d207      	bcs.n	8005dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvAddNewTaskToReadyList+0xdc>)
 8005db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000c24 	.word	0x20000c24
 8005dd4:	20000750 	.word	0x20000750
 8005dd8:	20000c30 	.word	0x20000c30
 8005ddc:	20000c40 	.word	0x20000c40
 8005de0:	20000c2c 	.word	0x20000c2c
 8005de4:	20000754 	.word	0x20000754
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d017      	beq.n	8005e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <vTaskDelay+0x60>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <vTaskDelay+0x30>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e1c:	f000 f880 	bl	8005f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e20:	2100      	movs	r1, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fcea 	bl	80067fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e28:	f000 f888 	bl	8005f3c <xTaskResumeAll>
 8005e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <vTaskDelay+0x64>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000c4c 	.word	0x20000c4c
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e62:	463a      	mov	r2, r7
 8005e64:	1d39      	adds	r1, r7, #4
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f848 	bl	8004f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	9202      	str	r2, [sp, #8]
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	460a      	mov	r2, r1
 8005e82:	4921      	ldr	r1, [pc, #132]	; (8005f08 <vTaskStartScheduler+0xb4>)
 8005e84:	4821      	ldr	r0, [pc, #132]	; (8005f0c <vTaskStartScheduler+0xb8>)
 8005e86:	f7ff fe0f 	bl	8005aa8 <xTaskCreateStatic>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <vTaskStartScheduler+0xbc>)
 8005e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e90:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <vTaskStartScheduler+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e001      	b.n	8005ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ea8:	f000 fcfc 	bl	80068a4 <xTimerCreateTimerTask>
 8005eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d116      	bne.n	8005ee2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	613b      	str	r3, [r7, #16]
}
 8005ec6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <vTaskStartScheduler+0xc0>)
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <vTaskStartScheduler+0xc4>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <vTaskStartScheduler+0xc8>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005edc:	f001 f8b8 	bl	8007050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ee0:	e00e      	b.n	8005f00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee8:	d10a      	bne.n	8005f00 <vTaskStartScheduler+0xac>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60fb      	str	r3, [r7, #12]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vTaskStartScheduler+0xaa>
}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	080089d0 	.word	0x080089d0
 8005f0c:	08006539 	.word	0x08006539
 8005f10:	20000c48 	.word	0x20000c48
 8005f14:	20000c44 	.word	0x20000c44
 8005f18:	20000c30 	.word	0x20000c30
 8005f1c:	20000c28 	.word	0x20000c28

08005f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <vTaskSuspendAll+0x18>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a03      	ldr	r2, [pc, #12]	; (8005f38 <vTaskSuspendAll+0x18>)
 8005f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	20000c4c 	.word	0x20000c4c

08005f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f4a:	4b42      	ldr	r3, [pc, #264]	; (8006054 <xTaskResumeAll+0x118>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	603b      	str	r3, [r7, #0]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f68:	f001 f914 	bl	8007194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <xTaskResumeAll+0x118>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	4a38      	ldr	r2, [pc, #224]	; (8006054 <xTaskResumeAll+0x118>)
 8005f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <xTaskResumeAll+0x118>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d162      	bne.n	8006044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f7e:	4b36      	ldr	r3, [pc, #216]	; (8006058 <xTaskResumeAll+0x11c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d05e      	beq.n	8006044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f86:	e02f      	b.n	8005fe8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <xTaskResumeAll+0x120>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff f871 	bl	800507c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff f86c 	bl	800507c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <xTaskResumeAll+0x124>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d903      	bls.n	8005fb8 <xTaskResumeAll+0x7c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <xTaskResumeAll+0x124>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <xTaskResumeAll+0x128>)
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe fff7 	bl	8004fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4b23      	ldr	r3, [pc, #140]	; (8006068 <xTaskResumeAll+0x12c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <xTaskResumeAll+0x130>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <xTaskResumeAll+0x120>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cb      	bne.n	8005f88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ff6:	f000 fb55 	bl	80066a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <xTaskResumeAll+0x134>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006006:	f000 f847 	bl	8006098 <xTaskIncrementTick>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <xTaskResumeAll+0x130>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3b01      	subs	r3, #1
 800601a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f1      	bne.n	8006006 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <xTaskResumeAll+0x134>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <xTaskResumeAll+0x130>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTaskResumeAll+0x138>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006044:	f001 f8d6 	bl	80071f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006048:	68bb      	ldr	r3, [r7, #8]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000c4c 	.word	0x20000c4c
 8006058:	20000c24 	.word	0x20000c24
 800605c:	20000be4 	.word	0x20000be4
 8006060:	20000c2c 	.word	0x20000c2c
 8006064:	20000754 	.word	0x20000754
 8006068:	20000750 	.word	0x20000750
 800606c:	20000c38 	.word	0x20000c38
 8006070:	20000c34 	.word	0x20000c34
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <xTaskGetTickCount+0x1c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000c28 	.word	0x20000c28

08006098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a2:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <xTaskIncrementTick+0x148>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 808f 	bne.w	80061ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ac:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b4:	4a4b      	ldr	r2, [pc, #300]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d120      	bne.n	8006102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060c0:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xTaskIncrementTick+0x46>
 80060e0:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	4b41      	ldr	r3, [pc, #260]	; (80061ec <xTaskIncrementTick+0x154>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3f      	ldr	r2, [pc, #252]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <xTaskIncrementTick+0x154>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <xTaskIncrementTick+0x158>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <xTaskIncrementTick+0x158>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	f000 fad1 	bl	80066a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006102:	4b3c      	ldr	r3, [pc, #240]	; (80061f4 <xTaskIncrementTick+0x15c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d349      	bcc.n	80061a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <xTaskIncrementTick+0x150>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006116:	4b37      	ldr	r3, [pc, #220]	; (80061f4 <xTaskIncrementTick+0x15c>)
 8006118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800611c:	601a      	str	r2, [r3, #0]
					break;
 800611e:	e03f      	b.n	80061a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006120:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <xTaskIncrementTick+0x150>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d203      	bcs.n	8006140 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006138:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <xTaskIncrementTick+0x15c>)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800613e:	e02f      	b.n	80061a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe ff99 	bl	800507c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3318      	adds	r3, #24
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff90 	bl	800507c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <xTaskIncrementTick+0x160>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <xTaskIncrementTick+0xd8>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <xTaskIncrementTick+0x160>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <xTaskIncrementTick+0x164>)
 800617e:	441a      	add	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe ff1b 	bl	8004fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <xTaskIncrementTick+0x168>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	429a      	cmp	r2, r3
 8006198:	d3b8      	bcc.n	800610c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619e:	e7b5      	b.n	800610c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <xTaskIncrementTick+0x168>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	4915      	ldr	r1, [pc, #84]	; (80061fc <xTaskIncrementTick+0x164>)
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d901      	bls.n	80061bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTaskIncrementTick+0x16c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e004      	b.n	80061d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <xTaskIncrementTick+0x170>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	4a0d      	ldr	r2, [pc, #52]	; (8006208 <xTaskIncrementTick+0x170>)
 80061d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061d4:	697b      	ldr	r3, [r7, #20]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000c4c 	.word	0x20000c4c
 80061e4:	20000c28 	.word	0x20000c28
 80061e8:	20000bdc 	.word	0x20000bdc
 80061ec:	20000be0 	.word	0x20000be0
 80061f0:	20000c3c 	.word	0x20000c3c
 80061f4:	20000c44 	.word	0x20000c44
 80061f8:	20000c2c 	.word	0x20000c2c
 80061fc:	20000754 	.word	0x20000754
 8006200:	20000750 	.word	0x20000750
 8006204:	20000c38 	.word	0x20000c38
 8006208:	20000c34 	.word	0x20000c34

0800620c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006212:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <vTaskSwitchContext+0xa8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800621a:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <vTaskSwitchContext+0xac>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006220:	e041      	b.n	80062a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006222:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <vTaskSwitchContext+0xac>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006228:	4b24      	ldr	r3, [pc, #144]	; (80062bc <vTaskSwitchContext+0xb0>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e010      	b.n	8006252 <vTaskSwitchContext+0x46>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <vTaskSwitchContext+0x40>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	607b      	str	r3, [r7, #4]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <vTaskSwitchContext+0x3e>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b01      	subs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	491b      	ldr	r1, [pc, #108]	; (80062c0 <vTaskSwitchContext+0xb4>)
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0e4      	beq.n	8006230 <vTaskSwitchContext+0x24>
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <vTaskSwitchContext+0xb4>)
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	3308      	adds	r3, #8
 8006288:	429a      	cmp	r2, r3
 800628a:	d104      	bne.n	8006296 <vTaskSwitchContext+0x8a>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <vTaskSwitchContext+0xb8>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <vTaskSwitchContext+0xb0>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6013      	str	r3, [r2, #0]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000c4c 	.word	0x20000c4c
 80062b8:	20000c38 	.word	0x20000c38
 80062bc:	20000c2c 	.word	0x20000c2c
 80062c0:	20000754 	.word	0x20000754
 80062c4:	20000750 	.word	0x20000750

080062c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	60fb      	str	r3, [r7, #12]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <vTaskPlaceOnEventList+0x44>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3318      	adds	r3, #24
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fe fe87 	bl	800500a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062fc:	2101      	movs	r1, #1
 80062fe:	6838      	ldr	r0, [r7, #0]
 8006300:	f000 fa7c 	bl	80067fc <prvAddCurrentTaskToDelayedList>
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000750 	.word	0x20000750

08006310 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	617b      	str	r3, [r7, #20]
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <vTaskPlaceOnEventListRestricted+0x54>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3318      	adds	r3, #24
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7fe fe3e 	bl	8004fc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800634c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006350:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	68b8      	ldr	r0, [r7, #8]
 8006356:	f000 fa51 	bl	80067fc <prvAddCurrentTaskToDelayedList>
	}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000750 	.word	0x20000750

08006368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe fe6f 	bl	800507c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <xTaskRemoveFromEventList+0xb0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11d      	bne.n	80063e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fe66 	bl	800507c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d903      	bls.n	80063c4 <xTaskRemoveFromEventList+0x5c>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <xTaskRemoveFromEventList+0xb8>)
 80063d2:	441a      	add	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fe fdf1 	bl	8004fc2 <vListInsertEnd>
 80063e0:	e005      	b.n	80063ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3318      	adds	r3, #24
 80063e6:	4619      	mov	r1, r3
 80063e8:	480e      	ldr	r0, [pc, #56]	; (8006424 <xTaskRemoveFromEventList+0xbc>)
 80063ea:	f7fe fdea 	bl	8004fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <xTaskRemoveFromEventList+0xc0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d905      	bls.n	8006408 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <xTaskRemoveFromEventList+0xc4>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e001      	b.n	800640c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800640c:	697b      	ldr	r3, [r7, #20]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000c4c 	.word	0x20000c4c
 800641c:	20000c2c 	.word	0x20000c2c
 8006420:	20000754 	.word	0x20000754
 8006424:	20000be4 	.word	0x20000be4
 8006428:	20000750 	.word	0x20000750
 800642c:	20000c38 	.word	0x20000c38

08006430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <vTaskInternalSetTimeOutState+0x24>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <vTaskInternalSetTimeOutState+0x28>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	20000c3c 	.word	0x20000c3c
 8006458:	20000c28 	.word	0x20000c28

0800645c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800649e:	f000 fe79 	bl	8007194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <xTaskCheckForTimeOut+0xbc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ba:	d102      	bne.n	80064c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e023      	b.n	800650a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <xTaskCheckForTimeOut+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d007      	beq.n	80064de <xTaskCheckForTimeOut+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e015      	b.n	800650a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d20b      	bcs.n	8006500 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff9b 	bl	8006430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e004      	b.n	800650a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006506:	2301      	movs	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800650a:	f000 fe73 	bl	80071f4 <vPortExitCritical>

	return xReturn;
 800650e:	69fb      	ldr	r3, [r7, #28]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000c28 	.word	0x20000c28
 800651c:	20000c3c 	.word	0x20000c3c

08006520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <vTaskMissedYield+0x14>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
}
 800652a:	bf00      	nop
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	20000c38 	.word	0x20000c38

08006538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006540:	f000 f852 	bl	80065e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <prvIdleTask+0x28>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d9f9      	bls.n	8006540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <prvIdleTask+0x2c>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800655c:	e7f0      	b.n	8006540 <prvIdleTask+0x8>
 800655e:	bf00      	nop
 8006560:	20000754 	.word	0x20000754
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	e00c      	b.n	800658e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <prvInitialiseTaskLists+0x60>)
 8006580:	4413      	add	r3, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fcf0 	bl	8004f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3301      	adds	r3, #1
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b37      	cmp	r3, #55	; 0x37
 8006592:	d9ef      	bls.n	8006574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006594:	480d      	ldr	r0, [pc, #52]	; (80065cc <prvInitialiseTaskLists+0x64>)
 8006596:	f7fe fce7 	bl	8004f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800659a:	480d      	ldr	r0, [pc, #52]	; (80065d0 <prvInitialiseTaskLists+0x68>)
 800659c:	f7fe fce4 	bl	8004f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065a0:	480c      	ldr	r0, [pc, #48]	; (80065d4 <prvInitialiseTaskLists+0x6c>)
 80065a2:	f7fe fce1 	bl	8004f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065a6:	480c      	ldr	r0, [pc, #48]	; (80065d8 <prvInitialiseTaskLists+0x70>)
 80065a8:	f7fe fcde 	bl	8004f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <prvInitialiseTaskLists+0x74>)
 80065ae:	f7fe fcdb 	bl	8004f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <prvInitialiseTaskLists+0x78>)
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <prvInitialiseTaskLists+0x64>)
 80065b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <prvInitialiseTaskLists+0x7c>)
 80065ba:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <prvInitialiseTaskLists+0x68>)
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000754 	.word	0x20000754
 80065cc:	20000bb4 	.word	0x20000bb4
 80065d0:	20000bc8 	.word	0x20000bc8
 80065d4:	20000be4 	.word	0x20000be4
 80065d8:	20000bf8 	.word	0x20000bf8
 80065dc:	20000c10 	.word	0x20000c10
 80065e0:	20000bdc 	.word	0x20000bdc
 80065e4:	20000be0 	.word	0x20000be0

080065e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ee:	e019      	b.n	8006624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065f0:	f000 fdd0 	bl	8007194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <prvCheckTasksWaitingTermination+0x50>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fd3b 	bl	800507c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <prvCheckTasksWaitingTermination+0x54>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3b01      	subs	r3, #1
 800660c:	4a0b      	ldr	r2, [pc, #44]	; (800663c <prvCheckTasksWaitingTermination+0x54>)
 800660e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3b01      	subs	r3, #1
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800661a:	f000 fdeb 	bl	80071f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f810 	bl	8006644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <prvCheckTasksWaitingTermination+0x58>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e1      	bne.n	80065f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000bf8 	.word	0x20000bf8
 800663c:	20000c24 	.word	0x20000c24
 8006640:	20000c0c 	.word	0x20000c0c

08006644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	4618      	mov	r0, r3
 800665c:	f000 ff88 	bl	8007570 <vPortFree>
				vPortFree( pxTCB );
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 ff85 	bl	8007570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006666:	e018      	b.n	800669a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800666e:	2b01      	cmp	r3, #1
 8006670:	d103      	bne.n	800667a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 ff7c 	bl	8007570 <vPortFree>
	}
 8006678:	e00f      	b.n	800669a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006680:	2b02      	cmp	r3, #2
 8006682:	d00a      	beq.n	800669a <prvDeleteTCB+0x56>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <prvDeleteTCB+0x54>
	}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066aa:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <prvResetNextTaskUnblockTime+0x38>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <prvResetNextTaskUnblockTime+0x3c>)
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066bc:	e008      	b.n	80066d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066be:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvResetNextTaskUnblockTime+0x38>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <prvResetNextTaskUnblockTime+0x3c>)
 80066ce:	6013      	str	r3, [r2, #0]
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000bdc 	.word	0x20000bdc
 80066e0:	20000c44 	.word	0x20000c44

080066e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <xTaskGetSchedulerState+0x34>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066f2:	2301      	movs	r3, #1
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	e008      	b.n	800670a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <xTaskGetSchedulerState+0x38>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006700:	2302      	movs	r3, #2
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	e001      	b.n	800670a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800670a:	687b      	ldr	r3, [r7, #4]
	}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000c30 	.word	0x20000c30
 800671c:	20000c4c 	.word	0x20000c4c

08006720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d056      	beq.n	80067e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <xTaskPriorityDisinherit+0xd0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d00a      	beq.n	8006756 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60bb      	str	r3, [r7, #8]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	429a      	cmp	r2, r3
 8006788:	d02c      	beq.n	80067e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678e:	2b00      	cmp	r3, #0
 8006790:	d128      	bne.n	80067e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fc70 	bl	800507c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <xTaskPriorityDisinherit+0xd4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <xTaskPriorityDisinherit+0xa4>
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <xTaskPriorityDisinherit+0xd4>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <xTaskPriorityDisinherit+0xd8>)
 80067d2:	441a      	add	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7fe fbf1 	bl	8004fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e4:	697b      	ldr	r3, [r7, #20]
	}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000750 	.word	0x20000750
 80067f4:	20000c2c 	.word	0x20000c2c
 80067f8:	20000754 	.word	0x20000754

080067fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <prvAddCurrentTaskToDelayedList+0x90>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800680c:	4b20      	ldr	r3, [pc, #128]	; (8006890 <prvAddCurrentTaskToDelayedList+0x94>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3304      	adds	r3, #4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fc32 	bl	800507c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681e:	d10a      	bne.n	8006836 <prvAddCurrentTaskToDelayedList+0x3a>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006826:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <prvAddCurrentTaskToDelayedList+0x94>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4819      	ldr	r0, [pc, #100]	; (8006894 <prvAddCurrentTaskToDelayedList+0x98>)
 8006830:	f7fe fbc7 	bl	8004fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006834:	e026      	b.n	8006884 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4413      	add	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800683e:	4b14      	ldr	r3, [pc, #80]	; (8006890 <prvAddCurrentTaskToDelayedList+0x94>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	429a      	cmp	r2, r3
 800684c:	d209      	bcs.n	8006862 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <prvAddCurrentTaskToDelayedList+0x94>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fbd5 	bl	800500a <vListInsert>
}
 8006860:	e010      	b.n	8006884 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <prvAddCurrentTaskToDelayedList+0x94>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fbcb 	bl	800500a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d202      	bcs.n	8006884 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800687e:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6013      	str	r3, [r2, #0]
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000c28 	.word	0x20000c28
 8006890:	20000750 	.word	0x20000750
 8006894:	20000c10 	.word	0x20000c10
 8006898:	20000be0 	.word	0x20000be0
 800689c:	20000bdc 	.word	0x20000bdc
 80068a0:	20000c44 	.word	0x20000c44

080068a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08a      	sub	sp, #40	; 0x28
 80068a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068ae:	f000 fb07 	bl	8006ec0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <xTimerCreateTimerTask+0x80>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d021      	beq.n	80068fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068c2:	1d3a      	adds	r2, r7, #4
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fb31 	bl	8004f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	9202      	str	r2, [sp, #8]
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	2302      	movs	r3, #2
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	460a      	mov	r2, r1
 80068e4:	4910      	ldr	r1, [pc, #64]	; (8006928 <xTimerCreateTimerTask+0x84>)
 80068e6:	4811      	ldr	r0, [pc, #68]	; (800692c <xTimerCreateTimerTask+0x88>)
 80068e8:	f7ff f8de 	bl	8005aa8 <xTaskCreateStatic>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4a10      	ldr	r2, [pc, #64]	; (8006930 <xTimerCreateTimerTask+0x8c>)
 80068f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <xTimerCreateTimerTask+0x8c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068fa:	2301      	movs	r3, #1
 80068fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	613b      	str	r3, [r7, #16]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800691a:	697b      	ldr	r3, [r7, #20]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000c80 	.word	0x20000c80
 8006928:	080089d8 	.word	0x080089d8
 800692c:	08006a69 	.word	0x08006a69
 8006930:	20000c84 	.word	0x20000c84

08006934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006942:	2300      	movs	r3, #0
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xTimerGenericCommand+0x2e>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	623b      	str	r3, [r7, #32]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006962:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <xTimerGenericCommand+0x98>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02a      	beq.n	80069c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b05      	cmp	r3, #5
 800697a:	dc18      	bgt.n	80069ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800697c:	f7ff feb2 	bl	80066e4 <xTaskGetSchedulerState>
 8006980:	4603      	mov	r3, r0
 8006982:	2b02      	cmp	r3, #2
 8006984:	d109      	bne.n	800699a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <xTimerGenericCommand+0x98>)
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f107 0110 	add.w	r1, r7, #16
 800698e:	2300      	movs	r3, #0
 8006990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006992:	f7fe fca1 	bl	80052d8 <xQueueGenericSend>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24
 8006998:	e012      	b.n	80069c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <xTimerGenericCommand+0x98>)
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	f107 0110 	add.w	r1, r7, #16
 80069a2:	2300      	movs	r3, #0
 80069a4:	2200      	movs	r2, #0
 80069a6:	f7fe fc97 	bl	80052d8 <xQueueGenericSend>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
 80069ac:	e008      	b.n	80069c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <xTimerGenericCommand+0x98>)
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f107 0110 	add.w	r1, r7, #16
 80069b6:	2300      	movs	r3, #0
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	f7fe fd8b 	bl	80054d4 <xQueueGenericSendFromISR>
 80069be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000c80 	.word	0x20000c80

080069d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <prvProcessExpiredTimer+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe fb47 	bl	800507c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d022      	beq.n	8006a42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	18d1      	adds	r1, r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	6978      	ldr	r0, [r7, #20]
 8006a0a:	f000 f8d1 	bl	8006bb0 <prvInsertTimerInActiveList>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01f      	beq.n	8006a54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a14:	2300      	movs	r3, #0
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	6978      	ldr	r0, [r7, #20]
 8006a20:	f7ff ff88 	bl	8006934 <xTimerGenericCommand>
 8006a24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d113      	bne.n	8006a54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	4798      	blx	r3
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20000c78 	.word	0x20000c78

08006a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a70:	f107 0308 	add.w	r3, r7, #8
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 f857 	bl	8006b28 <prvGetNextExpireTime>
 8006a7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f803 	bl	8006a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a86:	f000 f8d5 	bl	8006c34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a8a:	e7f1      	b.n	8006a70 <prvTimerTask+0x8>

08006a8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a96:	f7ff fa43 	bl	8005f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f866 	bl	8006b70 <prvSampleTimeNow>
 8006aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d130      	bne.n	8006b0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <prvProcessTimerOrBlockTask+0x3c>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d806      	bhi.n	8006ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aba:	f7ff fa3f 	bl	8005f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff85 	bl	80069d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ac6:	e024      	b.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <prvProcessTimerOrBlockTask+0x90>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <prvProcessTimerOrBlockTask+0x50>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <prvProcessTimerOrBlockTask+0x52>
 8006adc:	2300      	movs	r3, #0
 8006ade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <prvProcessTimerOrBlockTask+0x94>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	f7fe ffa7 	bl	8005a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006af2:	f7ff fa23 	bl	8005f3c <xTaskResumeAll>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <prvProcessTimerOrBlockTask+0x98>)
 8006afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	f3bf 8f6f 	isb	sy
}
 8006b0c:	e001      	b.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b0e:	f7ff fa15 	bl	8005f3c <xTaskResumeAll>
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000c7c 	.word	0x20000c7c
 8006b20:	20000c80 	.word	0x20000c80
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b30:	4b0e      	ldr	r3, [pc, #56]	; (8006b6c <prvGetNextExpireTime+0x44>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <prvGetNextExpireTime+0x16>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	e000      	b.n	8006b40 <prvGetNextExpireTime+0x18>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <prvGetNextExpireTime+0x44>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e001      	b.n	8006b5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000c78 	.word	0x20000c78

08006b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b78:	f7ff fa7e 	bl	8006078 <xTaskGetTickCount>
 8006b7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <prvSampleTimeNow+0x3c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d205      	bcs.n	8006b94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b88:	f000 f936 	bl	8006df8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b9a:	4a04      	ldr	r2, [pc, #16]	; (8006bac <prvSampleTimeNow+0x3c>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000c88 	.word	0x20000c88

08006bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d812      	bhi.n	8006bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad2      	subs	r2, r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e01b      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <prvInsertTimerInActiveList+0x7c>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fe fa08 	bl	800500a <vListInsert>
 8006bfa:	e012      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d206      	bcs.n	8006c12 <prvInsertTimerInActiveList+0x62>
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d302      	bcc.n	8006c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e007      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <prvInsertTimerInActiveList+0x80>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe f9f4 	bl	800500a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c22:	697b      	ldr	r3, [r7, #20]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000c7c 	.word	0x20000c7c
 8006c30:	20000c78 	.word	0x20000c78

08006c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08e      	sub	sp, #56	; 0x38
 8006c38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c3a:	e0ca      	b.n	8006dd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da18      	bge.n	8006c74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	3304      	adds	r3, #4
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	61fb      	str	r3, [r7, #28]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	6850      	ldr	r0, [r2, #4]
 8006c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6e:	6892      	ldr	r2, [r2, #8]
 8006c70:	4611      	mov	r1, r2
 8006c72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f2c0 80aa 	blt.w	8006dd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe f9f5 	bl	800507c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c92:	463b      	mov	r3, r7
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ff6b 	bl	8006b70 <prvSampleTimeNow>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	f200 8097 	bhi.w	8006dd2 <prvProcessReceivedCommands+0x19e>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <prvProcessReceivedCommands+0x78>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cd5 	.word	0x08006cd5
 8006cb8:	08006d49 	.word	0x08006d49
 8006cbc:	08006d5d 	.word	0x08006d5d
 8006cc0:	08006da7 	.word	0x08006da7
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006cd5 	.word	0x08006cd5
 8006ccc:	08006d49 	.word	0x08006d49
 8006cd0:	08006d5d 	.word	0x08006d5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	18d1      	adds	r1, r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf4:	f7ff ff5c 	bl	8006bb0 <prvInsertTimerInActiveList>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d069      	beq.n	8006dd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d05e      	beq.n	8006dd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d26:	f7ff fe05 	bl	8006934 <xTimerGenericCommand>
 8006d2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d14f      	bne.n	8006dd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	61bb      	str	r3, [r7, #24]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d5a:	e03a      	b.n	8006dd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	617b      	str	r3, [r7, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	18d1      	adds	r1, r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da0:	f7ff ff06 	bl	8006bb0 <prvInsertTimerInActiveList>
					break;
 8006da4:	e015      	b.n	8006dd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d103      	bne.n	8006dbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db6:	f000 fbdb 	bl	8007570 <vPortFree>
 8006dba:	e00a      	b.n	8006dd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dce:	e000      	b.n	8006dd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006dd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dd2:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <prvProcessReceivedCommands+0x1c0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	1d39      	adds	r1, r7, #4
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fc16 	bl	800560c <xQueueReceive>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f47f af2a 	bne.w	8006c3c <prvProcessReceivedCommands+0x8>
	}
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3730      	adds	r7, #48	; 0x30
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000c80 	.word	0x20000c80

08006df8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dfe:	e048      	b.n	8006e92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e00:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe f92f 	bl	800507c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d02e      	beq.n	8006e92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90e      	bls.n	8006e64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e52:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f7fe f8d4 	bl	800500a <vListInsert>
 8006e62:	e016      	b.n	8006e92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e64:	2300      	movs	r3, #0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff fd60 	bl	8006934 <xTimerGenericCommand>
 8006e74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	603b      	str	r3, [r7, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1b1      	bne.n	8006e00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ea2:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <prvSwitchTimerLists+0xc4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a04      	ldr	r2, [pc, #16]	; (8006eb8 <prvSwitchTimerLists+0xc0>)
 8006ea8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006eaa:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <prvSwitchTimerLists+0xc4>)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6013      	str	r3, [r2, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000c78 	.word	0x20000c78
 8006ebc:	20000c7c 	.word	0x20000c7c

08006ec0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ec6:	f000 f965 	bl	8007194 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <prvCheckForValidListAndQueue+0x60>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d120      	bne.n	8006f14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ed2:	4814      	ldr	r0, [pc, #80]	; (8006f24 <prvCheckForValidListAndQueue+0x64>)
 8006ed4:	f7fe f848 	bl	8004f68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ed8:	4813      	ldr	r0, [pc, #76]	; (8006f28 <prvCheckForValidListAndQueue+0x68>)
 8006eda:	f7fe f845 	bl	8004f68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <prvCheckForValidListAndQueue+0x6c>)
 8006ee0:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <prvCheckForValidListAndQueue+0x64>)
 8006ee2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ee4:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <prvCheckForValidListAndQueue+0x70>)
 8006ee6:	4a10      	ldr	r2, [pc, #64]	; (8006f28 <prvCheckForValidListAndQueue+0x68>)
 8006ee8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eea:	2300      	movs	r3, #0
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <prvCheckForValidListAndQueue+0x74>)
 8006ef0:	4a11      	ldr	r2, [pc, #68]	; (8006f38 <prvCheckForValidListAndQueue+0x78>)
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	200a      	movs	r0, #10
 8006ef6:	f7fe f953 	bl	80051a0 <xQueueGenericCreateStatic>
 8006efa:	4603      	mov	r3, r0
 8006efc:	4a08      	ldr	r2, [pc, #32]	; (8006f20 <prvCheckForValidListAndQueue+0x60>)
 8006efe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <prvCheckForValidListAndQueue+0x60>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <prvCheckForValidListAndQueue+0x60>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	490b      	ldr	r1, [pc, #44]	; (8006f3c <prvCheckForValidListAndQueue+0x7c>)
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fd6c 	bl	80059ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f14:	f000 f96e 	bl	80071f4 <vPortExitCritical>
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000c80 	.word	0x20000c80
 8006f24:	20000c50 	.word	0x20000c50
 8006f28:	20000c64 	.word	0x20000c64
 8006f2c:	20000c78 	.word	0x20000c78
 8006f30:	20000c7c 	.word	0x20000c7c
 8006f34:	20000d2c 	.word	0x20000d2c
 8006f38:	20000c8c 	.word	0x20000c8c
 8006f3c:	080089e0 	.word	0x080089e0

08006f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3b04      	subs	r3, #4
 8006f50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f023 0201 	bic.w	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <pxPortInitialiseStack+0x64>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3b14      	subs	r3, #20
 8006f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3b04      	subs	r3, #4
 8006f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f06f 0202 	mvn.w	r2, #2
 8006f8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3b20      	subs	r3, #32
 8006f94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	08006fa9 	.word	0x08006fa9

08006fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fb2:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <prvTaskExitError+0x54>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fba:	d00a      	beq.n	8006fd2 <prvTaskExitError+0x2a>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	60fb      	str	r3, [r7, #12]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <prvTaskExitError+0x28>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	60bb      	str	r3, [r7, #8]
}
 8006fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fe6:	bf00      	nop
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0fc      	beq.n	8006fe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <pxCurrentTCBConst2>)
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	6808      	ldr	r0, [r1, #0]
 8007006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	f380 8809 	msr	PSP, r0
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f380 8811 	msr	BASEPRI, r0
 800701a:	4770      	bx	lr
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst2>:
 8007020:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007028:	4808      	ldr	r0, [pc, #32]	; (800704c <prvPortStartFirstTask+0x24>)
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f380 8808 	msr	MSP, r0
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8814 	msr	CONTROL, r0
 800703a:	b662      	cpsie	i
 800703c:	b661      	cpsie	f
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	df00      	svc	0
 8007048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800704a:	bf00      	nop
 800704c:	e000ed08 	.word	0xe000ed08

08007050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007056:	4b46      	ldr	r3, [pc, #280]	; (8007170 <xPortStartScheduler+0x120>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a46      	ldr	r2, [pc, #280]	; (8007174 <xPortStartScheduler+0x124>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10a      	bne.n	8007076 <xPortStartScheduler+0x26>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007076:	4b3e      	ldr	r3, [pc, #248]	; (8007170 <xPortStartScheduler+0x120>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3f      	ldr	r2, [pc, #252]	; (8007178 <xPortStartScheduler+0x128>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10a      	bne.n	8007096 <xPortStartScheduler+0x46>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60fb      	str	r3, [r7, #12]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007096:	4b39      	ldr	r3, [pc, #228]	; (800717c <xPortStartScheduler+0x12c>)
 8007098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <xPortStartScheduler+0x130>)
 80070bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <xPortStartScheduler+0x134>)
 80070c0:	2207      	movs	r2, #7
 80070c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c4:	e009      	b.n	80070da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070c6:	4b2f      	ldr	r3, [pc, #188]	; (8007184 <xPortStartScheduler+0x134>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	4a2d      	ldr	r2, [pc, #180]	; (8007184 <xPortStartScheduler+0x134>)
 80070ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	d0ef      	beq.n	80070c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070e6:	4b27      	ldr	r3, [pc, #156]	; (8007184 <xPortStartScheduler+0x134>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f1c3 0307 	rsb	r3, r3, #7
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d00a      	beq.n	8007108 <xPortStartScheduler+0xb8>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	60bb      	str	r3, [r7, #8]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007108:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <xPortStartScheduler+0x134>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <xPortStartScheduler+0x134>)
 8007110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <xPortStartScheduler+0x134>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <xPortStartScheduler+0x134>)
 800711c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007126:	4b18      	ldr	r3, [pc, #96]	; (8007188 <xPortStartScheduler+0x138>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <xPortStartScheduler+0x138>)
 800712c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007132:	4b15      	ldr	r3, [pc, #84]	; (8007188 <xPortStartScheduler+0x138>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a14      	ldr	r2, [pc, #80]	; (8007188 <xPortStartScheduler+0x138>)
 8007138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800713c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800713e:	f000 f8dd 	bl	80072fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <xPortStartScheduler+0x13c>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007148:	f000 f8fc 	bl	8007344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800714c:	4b10      	ldr	r3, [pc, #64]	; (8007190 <xPortStartScheduler+0x140>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0f      	ldr	r2, [pc, #60]	; (8007190 <xPortStartScheduler+0x140>)
 8007152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007158:	f7ff ff66 	bl	8007028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800715c:	f7ff f856 	bl	800620c <vTaskSwitchContext>
	prvTaskExitError();
 8007160:	f7ff ff22 	bl	8006fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	e000ed00 	.word	0xe000ed00
 8007174:	410fc271 	.word	0x410fc271
 8007178:	410fc270 	.word	0x410fc270
 800717c:	e000e400 	.word	0xe000e400
 8007180:	20000d7c 	.word	0x20000d7c
 8007184:	20000d80 	.word	0x20000d80
 8007188:	e000ed20 	.word	0xe000ed20
 800718c:	2000000c 	.word	0x2000000c
 8007190:	e000ef34 	.word	0xe000ef34

08007194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	607b      	str	r3, [r7, #4]
}
 80071ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <vPortEnterCritical+0x58>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <vPortEnterCritical+0x58>)
 80071b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <vPortEnterCritical+0x58>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d10f      	bne.n	80071e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <vPortEnterCritical+0x5c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	603b      	str	r3, [r7, #0]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <vPortEnterCritical+0x4a>
	}
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <vPortExitCritical+0x50>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <vPortExitCritical+0x24>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <vPortExitCritical+0x50>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3b01      	subs	r3, #1
 800721e:	4a09      	ldr	r2, [pc, #36]	; (8007244 <vPortExitCritical+0x50>)
 8007220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007222:	4b08      	ldr	r3, [pc, #32]	; (8007244 <vPortExitCritical+0x50>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <vPortExitCritical+0x42>
 800722a:	2300      	movs	r3, #0
 800722c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	f383 8811 	msr	BASEPRI, r3
}
 8007234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	2000000c 	.word	0x2000000c
	...

08007250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007250:	f3ef 8009 	mrs	r0, PSP
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <pxCurrentTCBConst>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f01e 0f10 	tst.w	lr, #16
 8007260:	bf08      	it	eq
 8007262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007274:	f380 8811 	msr	BASEPRI, r0
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f7fe ffc4 	bl	800620c <vTaskSwitchContext>
 8007284:	f04f 0000 	mov.w	r0, #0
 8007288:	f380 8811 	msr	BASEPRI, r0
 800728c:	bc09      	pop	{r0, r3}
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	f01e 0f10 	tst.w	lr, #16
 800729a:	bf08      	it	eq
 800729c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072a0:	f380 8809 	msr	PSP, r0
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst>:
 80072b0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072d2:	f7fe fee1 	bl	8006098 <xTaskIncrementTick>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <xPortSysTickHandler+0x40>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <vPortSetupTimerInterrupt+0x38>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <vPortSetupTimerInterrupt+0x3c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <vPortSetupTimerInterrupt+0x40>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	4a09      	ldr	r2, [pc, #36]	; (8007340 <vPortSetupTimerInterrupt+0x44>)
 800731a:	3b01      	subs	r3, #1
 800731c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800731e:	4b04      	ldr	r3, [pc, #16]	; (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	e000e010 	.word	0xe000e010
 8007334:	e000e018 	.word	0xe000e018
 8007338:	20000000 	.word	0x20000000
 800733c:	10624dd3 	.word	0x10624dd3
 8007340:	e000e014 	.word	0xe000e014

08007344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007354 <vPortEnableVFP+0x10>
 8007348:	6801      	ldr	r1, [r0, #0]
 800734a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800734e:	6001      	str	r1, [r0, #0]
 8007350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007352:	bf00      	nop
 8007354:	e000ed88 	.word	0xe000ed88

08007358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800735e:	f3ef 8305 	mrs	r3, IPSR
 8007362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b0f      	cmp	r3, #15
 8007368:	d914      	bls.n	8007394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800736a:	4a17      	ldr	r2, [pc, #92]	; (80073c8 <vPortValidateInterruptPriority+0x70>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <vPortValidateInterruptPriority+0x74>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	7afa      	ldrb	r2, [r7, #11]
 800737a:	429a      	cmp	r2, r3
 800737c:	d20a      	bcs.n	8007394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	607b      	str	r3, [r7, #4]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <vPortValidateInterruptPriority+0x78>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <vPortValidateInterruptPriority+0x7c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d90a      	bls.n	80073ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	603b      	str	r3, [r7, #0]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <vPortValidateInterruptPriority+0x60>
	}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	e000e3f0 	.word	0xe000e3f0
 80073cc:	20000d7c 	.word	0x20000d7c
 80073d0:	e000ed0c 	.word	0xe000ed0c
 80073d4:	20000d80 	.word	0x20000d80

080073d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073e4:	f7fe fd9c 	bl	8005f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073e8:	4b5b      	ldr	r3, [pc, #364]	; (8007558 <pvPortMalloc+0x180>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073f0:	f000 f920 	bl	8007634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073f4:	4b59      	ldr	r3, [pc, #356]	; (800755c <pvPortMalloc+0x184>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 8093 	bne.w	8007528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01d      	beq.n	8007444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007408:	2208      	movs	r2, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b00      	cmp	r3, #0
 8007418:	d014      	beq.n	8007444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f023 0307 	bic.w	r3, r3, #7
 8007420:	3308      	adds	r3, #8
 8007422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <pvPortMalloc+0x6c>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	617b      	str	r3, [r7, #20]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d06e      	beq.n	8007528 <pvPortMalloc+0x150>
 800744a:	4b45      	ldr	r3, [pc, #276]	; (8007560 <pvPortMalloc+0x188>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d869      	bhi.n	8007528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007454:	4b43      	ldr	r3, [pc, #268]	; (8007564 <pvPortMalloc+0x18c>)
 8007456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007458:	4b42      	ldr	r3, [pc, #264]	; (8007564 <pvPortMalloc+0x18c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745e:	e004      	b.n	800746a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d903      	bls.n	800747c <pvPortMalloc+0xa4>
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f1      	bne.n	8007460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800747c:	4b36      	ldr	r3, [pc, #216]	; (8007558 <pvPortMalloc+0x180>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	429a      	cmp	r2, r3
 8007484:	d050      	beq.n	8007528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2208      	movs	r2, #8
 800748c:	4413      	add	r3, r2
 800748e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	2308      	movs	r3, #8
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d91f      	bls.n	80074e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <pvPortMalloc+0xf8>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	613b      	str	r3, [r7, #16]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074e2:	69b8      	ldr	r0, [r7, #24]
 80074e4:	f000 f908 	bl	80076f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074e8:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <pvPortMalloc+0x188>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <pvPortMalloc+0x188>)
 80074f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <pvPortMalloc+0x188>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <pvPortMalloc+0x190>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d203      	bcs.n	800750a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007502:	4b17      	ldr	r3, [pc, #92]	; (8007560 <pvPortMalloc+0x188>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <pvPortMalloc+0x190>)
 8007508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <pvPortMalloc+0x184>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	431a      	orrs	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <pvPortMalloc+0x194>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	4a11      	ldr	r2, [pc, #68]	; (800756c <pvPortMalloc+0x194>)
 8007526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007528:	f7fe fd08 	bl	8005f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <pvPortMalloc+0x174>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <pvPortMalloc+0x172>
	return pvReturn;
 800754c:	69fb      	ldr	r3, [r7, #28]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3728      	adds	r7, #40	; 0x28
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20001944 	.word	0x20001944
 800755c:	20001958 	.word	0x20001958
 8007560:	20001948 	.word	0x20001948
 8007564:	2000193c 	.word	0x2000193c
 8007568:	2000194c 	.word	0x2000194c
 800756c:	20001950 	.word	0x20001950

08007570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d04d      	beq.n	800761e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007582:	2308      	movs	r3, #8
 8007584:	425b      	negs	r3, r3
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	4b24      	ldr	r3, [pc, #144]	; (8007628 <vPortFree+0xb8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <vPortFree+0x44>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	60fb      	str	r3, [r7, #12]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <vPortFree+0x62>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60bb      	str	r3, [r7, #8]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <vPortFree+0xb8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4013      	ands	r3, r2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01e      	beq.n	800761e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11a      	bne.n	800761e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <vPortFree+0xb8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	401a      	ands	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075f8:	f7fe fc92 	bl	8005f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <vPortFree+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4413      	add	r3, r2
 8007606:	4a09      	ldr	r2, [pc, #36]	; (800762c <vPortFree+0xbc>)
 8007608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800760a:	6938      	ldr	r0, [r7, #16]
 800760c:	f000 f874 	bl	80076f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <vPortFree+0xc0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3301      	adds	r3, #1
 8007616:	4a06      	ldr	r2, [pc, #24]	; (8007630 <vPortFree+0xc0>)
 8007618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800761a:	f7fe fc8f 	bl	8005f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20001958 	.word	0x20001958
 800762c:	20001948 	.word	0x20001948
 8007630:	20001954 	.word	0x20001954

08007634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800763a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800763e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007640:	4b27      	ldr	r3, [pc, #156]	; (80076e0 <prvHeapInit+0xac>)
 8007642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00c      	beq.n	8007668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0307 	bic.w	r3, r3, #7
 800765a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <prvHeapInit+0xac>)
 8007664:	4413      	add	r3, r2
 8007666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800766c:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <prvHeapInit+0xb0>)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <prvHeapInit+0xb0>)
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4413      	add	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007680:	2208      	movs	r2, #8
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <prvHeapInit+0xb4>)
 8007694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007696:	4b14      	ldr	r3, [pc, #80]	; (80076e8 <prvHeapInit+0xb4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800769e:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <prvHeapInit+0xb4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvHeapInit+0xb4>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <prvHeapInit+0xb8>)
 80076c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <prvHeapInit+0xbc>)
 80076ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076cc:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <prvHeapInit+0xc0>)
 80076ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	20000d84 	.word	0x20000d84
 80076e4:	2000193c 	.word	0x2000193c
 80076e8:	20001944 	.word	0x20001944
 80076ec:	2000194c 	.word	0x2000194c
 80076f0:	20001948 	.word	0x20001948
 80076f4:	20001958 	.word	0x20001958

080076f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007700:	4b28      	ldr	r3, [pc, #160]	; (80077a4 <prvInsertBlockIntoFreeList+0xac>)
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	e002      	b.n	800770c <prvInsertBlockIntoFreeList+0x14>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d8f7      	bhi.n	8007706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d108      	bne.n	800773a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	441a      	add	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d118      	bne.n	8007780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d00d      	beq.n	8007776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e008      	b.n	8007788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007776:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e003      	b.n	8007788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	d002      	beq.n	8007796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	2000193c 	.word	0x2000193c
 80077a8:	20001944 	.word	0x20001944

080077ac <__errno>:
 80077ac:	4b01      	ldr	r3, [pc, #4]	; (80077b4 <__errno+0x8>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000010 	.word	0x20000010

080077b8 <__libc_init_array>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4d0d      	ldr	r5, [pc, #52]	; (80077f0 <__libc_init_array+0x38>)
 80077bc:	4c0d      	ldr	r4, [pc, #52]	; (80077f4 <__libc_init_array+0x3c>)
 80077be:	1b64      	subs	r4, r4, r5
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	2600      	movs	r6, #0
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	d109      	bne.n	80077dc <__libc_init_array+0x24>
 80077c8:	4d0b      	ldr	r5, [pc, #44]	; (80077f8 <__libc_init_array+0x40>)
 80077ca:	4c0c      	ldr	r4, [pc, #48]	; (80077fc <__libc_init_array+0x44>)
 80077cc:	f001 f80c 	bl	80087e8 <_init>
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	2600      	movs	r6, #0
 80077d6:	42a6      	cmp	r6, r4
 80077d8:	d105      	bne.n	80077e6 <__libc_init_array+0x2e>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e0:	4798      	blx	r3
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7ee      	b.n	80077c4 <__libc_init_array+0xc>
 80077e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ea:	4798      	blx	r3
 80077ec:	3601      	adds	r6, #1
 80077ee:	e7f2      	b.n	80077d6 <__libc_init_array+0x1e>
 80077f0:	08008af4 	.word	0x08008af4
 80077f4:	08008af4 	.word	0x08008af4
 80077f8:	08008af4 	.word	0x08008af4
 80077fc:	08008af8 	.word	0x08008af8

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <iprintf>:
 800782c:	b40f      	push	{r0, r1, r2, r3}
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <iprintf+0x2c>)
 8007830:	b513      	push	{r0, r1, r4, lr}
 8007832:	681c      	ldr	r4, [r3, #0]
 8007834:	b124      	cbz	r4, 8007840 <iprintf+0x14>
 8007836:	69a3      	ldr	r3, [r4, #24]
 8007838:	b913      	cbnz	r3, 8007840 <iprintf+0x14>
 800783a:	4620      	mov	r0, r4
 800783c:	f000 fa70 	bl	8007d20 <__sinit>
 8007840:	ab05      	add	r3, sp, #20
 8007842:	9a04      	ldr	r2, [sp, #16]
 8007844:	68a1      	ldr	r1, [r4, #8]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fc41 	bl	80080d0 <_vfiprintf_r>
 800784e:	b002      	add	sp, #8
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	b004      	add	sp, #16
 8007856:	4770      	bx	lr
 8007858:	20000010 	.word	0x20000010

0800785c <_puts_r>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	460e      	mov	r6, r1
 8007860:	4605      	mov	r5, r0
 8007862:	b118      	cbz	r0, 800786c <_puts_r+0x10>
 8007864:	6983      	ldr	r3, [r0, #24]
 8007866:	b90b      	cbnz	r3, 800786c <_puts_r+0x10>
 8007868:	f000 fa5a 	bl	8007d20 <__sinit>
 800786c:	69ab      	ldr	r3, [r5, #24]
 800786e:	68ac      	ldr	r4, [r5, #8]
 8007870:	b913      	cbnz	r3, 8007878 <_puts_r+0x1c>
 8007872:	4628      	mov	r0, r5
 8007874:	f000 fa54 	bl	8007d20 <__sinit>
 8007878:	4b2c      	ldr	r3, [pc, #176]	; (800792c <_puts_r+0xd0>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d120      	bne.n	80078c0 <_puts_r+0x64>
 800787e:	686c      	ldr	r4, [r5, #4]
 8007880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007882:	07db      	lsls	r3, r3, #31
 8007884:	d405      	bmi.n	8007892 <_puts_r+0x36>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	0598      	lsls	r0, r3, #22
 800788a:	d402      	bmi.n	8007892 <_puts_r+0x36>
 800788c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788e:	f000 fae5 	bl	8007e5c <__retarget_lock_acquire_recursive>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	0719      	lsls	r1, r3, #28
 8007896:	d51d      	bpl.n	80078d4 <_puts_r+0x78>
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	b1db      	cbz	r3, 80078d4 <_puts_r+0x78>
 800789c:	3e01      	subs	r6, #1
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078a4:	3b01      	subs	r3, #1
 80078a6:	60a3      	str	r3, [r4, #8]
 80078a8:	bb39      	cbnz	r1, 80078fa <_puts_r+0x9e>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da38      	bge.n	8007920 <_puts_r+0xc4>
 80078ae:	4622      	mov	r2, r4
 80078b0:	210a      	movs	r1, #10
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f85a 	bl	800796c <__swbuf_r>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d011      	beq.n	80078e0 <_puts_r+0x84>
 80078bc:	250a      	movs	r5, #10
 80078be:	e011      	b.n	80078e4 <_puts_r+0x88>
 80078c0:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <_puts_r+0xd4>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d101      	bne.n	80078ca <_puts_r+0x6e>
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	e7da      	b.n	8007880 <_puts_r+0x24>
 80078ca:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <_puts_r+0xd8>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bf08      	it	eq
 80078d0:	68ec      	ldreq	r4, [r5, #12]
 80078d2:	e7d5      	b.n	8007880 <_puts_r+0x24>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f89a 	bl	8007a10 <__swsetup_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d0dd      	beq.n	800789c <_puts_r+0x40>
 80078e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078e6:	07da      	lsls	r2, r3, #31
 80078e8:	d405      	bmi.n	80078f6 <_puts_r+0x9a>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	059b      	lsls	r3, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_puts_r+0x9a>
 80078f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078f2:	f000 fab4 	bl	8007e5e <__retarget_lock_release_recursive>
 80078f6:	4628      	mov	r0, r5
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da04      	bge.n	8007908 <_puts_r+0xac>
 80078fe:	69a2      	ldr	r2, [r4, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	dc06      	bgt.n	8007912 <_puts_r+0xb6>
 8007904:	290a      	cmp	r1, #10
 8007906:	d004      	beq.n	8007912 <_puts_r+0xb6>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	7019      	strb	r1, [r3, #0]
 8007910:	e7c5      	b.n	800789e <_puts_r+0x42>
 8007912:	4622      	mov	r2, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f000 f829 	bl	800796c <__swbuf_r>
 800791a:	3001      	adds	r0, #1
 800791c:	d1bf      	bne.n	800789e <_puts_r+0x42>
 800791e:	e7df      	b.n	80078e0 <_puts_r+0x84>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	250a      	movs	r5, #10
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	701d      	strb	r5, [r3, #0]
 800792a:	e7db      	b.n	80078e4 <_puts_r+0x88>
 800792c:	08008a78 	.word	0x08008a78
 8007930:	08008a98 	.word	0x08008a98
 8007934:	08008a58 	.word	0x08008a58

08007938 <puts>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <puts+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f7ff bf8d 	b.w	800785c <_puts_r>
 8007942:	bf00      	nop
 8007944:	20000010 	.word	0x20000010

08007948 <strncmp>:
 8007948:	b510      	push	{r4, lr}
 800794a:	b16a      	cbz	r2, 8007968 <strncmp+0x20>
 800794c:	3901      	subs	r1, #1
 800794e:	1884      	adds	r4, r0, r2
 8007950:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007954:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007958:	4293      	cmp	r3, r2
 800795a:	d103      	bne.n	8007964 <strncmp+0x1c>
 800795c:	42a0      	cmp	r0, r4
 800795e:	d001      	beq.n	8007964 <strncmp+0x1c>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f5      	bne.n	8007950 <strncmp+0x8>
 8007964:	1a98      	subs	r0, r3, r2
 8007966:	bd10      	pop	{r4, pc}
 8007968:	4610      	mov	r0, r2
 800796a:	e7fc      	b.n	8007966 <strncmp+0x1e>

0800796c <__swbuf_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	460e      	mov	r6, r1
 8007970:	4614      	mov	r4, r2
 8007972:	4605      	mov	r5, r0
 8007974:	b118      	cbz	r0, 800797e <__swbuf_r+0x12>
 8007976:	6983      	ldr	r3, [r0, #24]
 8007978:	b90b      	cbnz	r3, 800797e <__swbuf_r+0x12>
 800797a:	f000 f9d1 	bl	8007d20 <__sinit>
 800797e:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <__swbuf_r+0x98>)
 8007980:	429c      	cmp	r4, r3
 8007982:	d12b      	bne.n	80079dc <__swbuf_r+0x70>
 8007984:	686c      	ldr	r4, [r5, #4]
 8007986:	69a3      	ldr	r3, [r4, #24]
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	071a      	lsls	r2, r3, #28
 800798e:	d52f      	bpl.n	80079f0 <__swbuf_r+0x84>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	b36b      	cbz	r3, 80079f0 <__swbuf_r+0x84>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	6820      	ldr	r0, [r4, #0]
 8007998:	1ac0      	subs	r0, r0, r3
 800799a:	6963      	ldr	r3, [r4, #20]
 800799c:	b2f6      	uxtb	r6, r6
 800799e:	4283      	cmp	r3, r0
 80079a0:	4637      	mov	r7, r6
 80079a2:	dc04      	bgt.n	80079ae <__swbuf_r+0x42>
 80079a4:	4621      	mov	r1, r4
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 f926 	bl	8007bf8 <_fflush_r>
 80079ac:	bb30      	cbnz	r0, 80079fc <__swbuf_r+0x90>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	701e      	strb	r6, [r3, #0]
 80079bc:	6963      	ldr	r3, [r4, #20]
 80079be:	3001      	adds	r0, #1
 80079c0:	4283      	cmp	r3, r0
 80079c2:	d004      	beq.n	80079ce <__swbuf_r+0x62>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	07db      	lsls	r3, r3, #31
 80079c8:	d506      	bpl.n	80079d8 <__swbuf_r+0x6c>
 80079ca:	2e0a      	cmp	r6, #10
 80079cc:	d104      	bne.n	80079d8 <__swbuf_r+0x6c>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f911 	bl	8007bf8 <_fflush_r>
 80079d6:	b988      	cbnz	r0, 80079fc <__swbuf_r+0x90>
 80079d8:	4638      	mov	r0, r7
 80079da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <__swbuf_r+0x9c>)
 80079de:	429c      	cmp	r4, r3
 80079e0:	d101      	bne.n	80079e6 <__swbuf_r+0x7a>
 80079e2:	68ac      	ldr	r4, [r5, #8]
 80079e4:	e7cf      	b.n	8007986 <__swbuf_r+0x1a>
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <__swbuf_r+0xa0>)
 80079e8:	429c      	cmp	r4, r3
 80079ea:	bf08      	it	eq
 80079ec:	68ec      	ldreq	r4, [r5, #12]
 80079ee:	e7ca      	b.n	8007986 <__swbuf_r+0x1a>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f80c 	bl	8007a10 <__swsetup_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d0cb      	beq.n	8007994 <__swbuf_r+0x28>
 80079fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a00:	e7ea      	b.n	80079d8 <__swbuf_r+0x6c>
 8007a02:	bf00      	nop
 8007a04:	08008a78 	.word	0x08008a78
 8007a08:	08008a98 	.word	0x08008a98
 8007a0c:	08008a58 	.word	0x08008a58

08007a10 <__swsetup_r>:
 8007a10:	4b32      	ldr	r3, [pc, #200]	; (8007adc <__swsetup_r+0xcc>)
 8007a12:	b570      	push	{r4, r5, r6, lr}
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	4606      	mov	r6, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	b125      	cbz	r5, 8007a26 <__swsetup_r+0x16>
 8007a1c:	69ab      	ldr	r3, [r5, #24]
 8007a1e:	b913      	cbnz	r3, 8007a26 <__swsetup_r+0x16>
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f97d 	bl	8007d20 <__sinit>
 8007a26:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <__swsetup_r+0xd0>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	d10f      	bne.n	8007a4c <__swsetup_r+0x3c>
 8007a2c:	686c      	ldr	r4, [r5, #4]
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a34:	0719      	lsls	r1, r3, #28
 8007a36:	d42c      	bmi.n	8007a92 <__swsetup_r+0x82>
 8007a38:	06dd      	lsls	r5, r3, #27
 8007a3a:	d411      	bmi.n	8007a60 <__swsetup_r+0x50>
 8007a3c:	2309      	movs	r3, #9
 8007a3e:	6033      	str	r3, [r6, #0]
 8007a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a4a:	e03e      	b.n	8007aca <__swsetup_r+0xba>
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <__swsetup_r+0xd4>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__swsetup_r+0x46>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7eb      	b.n	8007a2e <__swsetup_r+0x1e>
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <__swsetup_r+0xd8>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7e6      	b.n	8007a2e <__swsetup_r+0x1e>
 8007a60:	0758      	lsls	r0, r3, #29
 8007a62:	d512      	bpl.n	8007a8a <__swsetup_r+0x7a>
 8007a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a66:	b141      	cbz	r1, 8007a7a <__swsetup_r+0x6a>
 8007a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <__swsetup_r+0x66>
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 fa59 	bl	8007f28 <_free_r>
 8007a76:	2300      	movs	r3, #0
 8007a78:	6363      	str	r3, [r4, #52]	; 0x34
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	2300      	movs	r3, #0
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f043 0308 	orr.w	r3, r3, #8
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	b94b      	cbnz	r3, 8007aaa <__swsetup_r+0x9a>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa0:	d003      	beq.n	8007aaa <__swsetup_r+0x9a>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 f9ff 	bl	8007ea8 <__smakebuf_r>
 8007aaa:	89a0      	ldrh	r0, [r4, #12]
 8007aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab0:	f010 0301 	ands.w	r3, r0, #1
 8007ab4:	d00a      	beq.n	8007acc <__swsetup_r+0xbc>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60a3      	str	r3, [r4, #8]
 8007aba:	6963      	ldr	r3, [r4, #20]
 8007abc:	425b      	negs	r3, r3
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	b943      	cbnz	r3, 8007ad6 <__swsetup_r+0xc6>
 8007ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ac8:	d1ba      	bne.n	8007a40 <__swsetup_r+0x30>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	0781      	lsls	r1, r0, #30
 8007ace:	bf58      	it	pl
 8007ad0:	6963      	ldrpl	r3, [r4, #20]
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	e7f4      	b.n	8007ac0 <__swsetup_r+0xb0>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7f7      	b.n	8007aca <__swsetup_r+0xba>
 8007ada:	bf00      	nop
 8007adc:	20000010 	.word	0x20000010
 8007ae0:	08008a78 	.word	0x08008a78
 8007ae4:	08008a98 	.word	0x08008a98
 8007ae8:	08008a58 	.word	0x08008a58

08007aec <__sflush_r>:
 8007aec:	898a      	ldrh	r2, [r1, #12]
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	4605      	mov	r5, r0
 8007af4:	0710      	lsls	r0, r2, #28
 8007af6:	460c      	mov	r4, r1
 8007af8:	d458      	bmi.n	8007bac <__sflush_r+0xc0>
 8007afa:	684b      	ldr	r3, [r1, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dc05      	bgt.n	8007b0c <__sflush_r+0x20>
 8007b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dc02      	bgt.n	8007b0c <__sflush_r+0x20>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	d0f9      	beq.n	8007b06 <__sflush_r+0x1a>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b18:	682f      	ldr	r7, [r5, #0]
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	d032      	beq.n	8007b84 <__sflush_r+0x98>
 8007b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	075a      	lsls	r2, r3, #29
 8007b24:	d505      	bpl.n	8007b32 <__sflush_r+0x46>
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	1ac0      	subs	r0, r0, r3
 8007b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b2c:	b10b      	cbz	r3, 8007b32 <__sflush_r+0x46>
 8007b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b30:	1ac0      	subs	r0, r0, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	4602      	mov	r2, r0
 8007b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b38:	6a21      	ldr	r1, [r4, #32]
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b0      	blx	r6
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	d106      	bne.n	8007b52 <__sflush_r+0x66>
 8007b44:	6829      	ldr	r1, [r5, #0]
 8007b46:	291d      	cmp	r1, #29
 8007b48:	d82c      	bhi.n	8007ba4 <__sflush_r+0xb8>
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <__sflush_r+0x108>)
 8007b4c:	40ca      	lsrs	r2, r1
 8007b4e:	07d6      	lsls	r6, r2, #31
 8007b50:	d528      	bpl.n	8007ba4 <__sflush_r+0xb8>
 8007b52:	2200      	movs	r2, #0
 8007b54:	6062      	str	r2, [r4, #4]
 8007b56:	04d9      	lsls	r1, r3, #19
 8007b58:	6922      	ldr	r2, [r4, #16]
 8007b5a:	6022      	str	r2, [r4, #0]
 8007b5c:	d504      	bpl.n	8007b68 <__sflush_r+0x7c>
 8007b5e:	1c42      	adds	r2, r0, #1
 8007b60:	d101      	bne.n	8007b66 <__sflush_r+0x7a>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	b903      	cbnz	r3, 8007b68 <__sflush_r+0x7c>
 8007b66:	6560      	str	r0, [r4, #84]	; 0x54
 8007b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6a:	602f      	str	r7, [r5, #0]
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d0ca      	beq.n	8007b06 <__sflush_r+0x1a>
 8007b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b74:	4299      	cmp	r1, r3
 8007b76:	d002      	beq.n	8007b7e <__sflush_r+0x92>
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f9d5 	bl	8007f28 <_free_r>
 8007b7e:	2000      	movs	r0, #0
 8007b80:	6360      	str	r0, [r4, #52]	; 0x34
 8007b82:	e7c1      	b.n	8007b08 <__sflush_r+0x1c>
 8007b84:	6a21      	ldr	r1, [r4, #32]
 8007b86:	2301      	movs	r3, #1
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b0      	blx	r6
 8007b8c:	1c41      	adds	r1, r0, #1
 8007b8e:	d1c7      	bne.n	8007b20 <__sflush_r+0x34>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0c4      	beq.n	8007b20 <__sflush_r+0x34>
 8007b96:	2b1d      	cmp	r3, #29
 8007b98:	d001      	beq.n	8007b9e <__sflush_r+0xb2>
 8007b9a:	2b16      	cmp	r3, #22
 8007b9c:	d101      	bne.n	8007ba2 <__sflush_r+0xb6>
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	e7b1      	b.n	8007b06 <__sflush_r+0x1a>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7ad      	b.n	8007b08 <__sflush_r+0x1c>
 8007bac:	690f      	ldr	r7, [r1, #16]
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	d0a9      	beq.n	8007b06 <__sflush_r+0x1a>
 8007bb2:	0793      	lsls	r3, r2, #30
 8007bb4:	680e      	ldr	r6, [r1, #0]
 8007bb6:	bf08      	it	eq
 8007bb8:	694b      	ldreq	r3, [r1, #20]
 8007bba:	600f      	str	r7, [r1, #0]
 8007bbc:	bf18      	it	ne
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	eba6 0807 	sub.w	r8, r6, r7
 8007bc4:	608b      	str	r3, [r1, #8]
 8007bc6:	f1b8 0f00 	cmp.w	r8, #0
 8007bca:	dd9c      	ble.n	8007b06 <__sflush_r+0x1a>
 8007bcc:	6a21      	ldr	r1, [r4, #32]
 8007bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd0:	4643      	mov	r3, r8
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b0      	blx	r6
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dc06      	bgt.n	8007bea <__sflush_r+0xfe>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be8:	e78e      	b.n	8007b08 <__sflush_r+0x1c>
 8007bea:	4407      	add	r7, r0
 8007bec:	eba8 0800 	sub.w	r8, r8, r0
 8007bf0:	e7e9      	b.n	8007bc6 <__sflush_r+0xda>
 8007bf2:	bf00      	nop
 8007bf4:	20400001 	.word	0x20400001

08007bf8 <_fflush_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	690b      	ldr	r3, [r1, #16]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b913      	cbnz	r3, 8007c08 <_fflush_r+0x10>
 8007c02:	2500      	movs	r5, #0
 8007c04:	4628      	mov	r0, r5
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	b118      	cbz	r0, 8007c12 <_fflush_r+0x1a>
 8007c0a:	6983      	ldr	r3, [r0, #24]
 8007c0c:	b90b      	cbnz	r3, 8007c12 <_fflush_r+0x1a>
 8007c0e:	f000 f887 	bl	8007d20 <__sinit>
 8007c12:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <_fflush_r+0x6c>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	d11b      	bne.n	8007c50 <_fflush_r+0x58>
 8007c18:	686c      	ldr	r4, [r5, #4]
 8007c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ef      	beq.n	8007c02 <_fflush_r+0xa>
 8007c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c24:	07d0      	lsls	r0, r2, #31
 8007c26:	d404      	bmi.n	8007c32 <_fflush_r+0x3a>
 8007c28:	0599      	lsls	r1, r3, #22
 8007c2a:	d402      	bmi.n	8007c32 <_fflush_r+0x3a>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 f915 	bl	8007e5c <__retarget_lock_acquire_recursive>
 8007c32:	4628      	mov	r0, r5
 8007c34:	4621      	mov	r1, r4
 8007c36:	f7ff ff59 	bl	8007aec <__sflush_r>
 8007c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c3c:	07da      	lsls	r2, r3, #31
 8007c3e:	4605      	mov	r5, r0
 8007c40:	d4e0      	bmi.n	8007c04 <_fflush_r+0xc>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	059b      	lsls	r3, r3, #22
 8007c46:	d4dd      	bmi.n	8007c04 <_fflush_r+0xc>
 8007c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4a:	f000 f908 	bl	8007e5e <__retarget_lock_release_recursive>
 8007c4e:	e7d9      	b.n	8007c04 <_fflush_r+0xc>
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <_fflush_r+0x70>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <_fflush_r+0x62>
 8007c56:	68ac      	ldr	r4, [r5, #8]
 8007c58:	e7df      	b.n	8007c1a <_fflush_r+0x22>
 8007c5a:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <_fflush_r+0x74>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68ec      	ldreq	r4, [r5, #12]
 8007c62:	e7da      	b.n	8007c1a <_fflush_r+0x22>
 8007c64:	08008a78 	.word	0x08008a78
 8007c68:	08008a98 	.word	0x08008a98
 8007c6c:	08008a58 	.word	0x08008a58

08007c70 <std>:
 8007c70:	2300      	movs	r3, #0
 8007c72:	b510      	push	{r4, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c7e:	6083      	str	r3, [r0, #8]
 8007c80:	8181      	strh	r1, [r0, #12]
 8007c82:	6643      	str	r3, [r0, #100]	; 0x64
 8007c84:	81c2      	strh	r2, [r0, #14]
 8007c86:	6183      	str	r3, [r0, #24]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	305c      	adds	r0, #92	; 0x5c
 8007c8e:	f7ff fdc5 	bl	800781c <memset>
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <std+0x38>)
 8007c94:	6263      	str	r3, [r4, #36]	; 0x24
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x3c>)
 8007c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x40>)
 8007c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x44>)
 8007ca0:	6224      	str	r4, [r4, #32]
 8007ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08008679 	.word	0x08008679
 8007cac:	0800869b 	.word	0x0800869b
 8007cb0:	080086d3 	.word	0x080086d3
 8007cb4:	080086f7 	.word	0x080086f7

08007cb8 <_cleanup_r>:
 8007cb8:	4901      	ldr	r1, [pc, #4]	; (8007cc0 <_cleanup_r+0x8>)
 8007cba:	f000 b8af 	b.w	8007e1c <_fwalk_reent>
 8007cbe:	bf00      	nop
 8007cc0:	08007bf9 	.word	0x08007bf9

08007cc4 <__sfmoreglue>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	1e4a      	subs	r2, r1, #1
 8007cc8:	2568      	movs	r5, #104	; 0x68
 8007cca:	4355      	muls	r5, r2
 8007ccc:	460e      	mov	r6, r1
 8007cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cd2:	f000 f979 	bl	8007fc8 <_malloc_r>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b140      	cbz	r0, 8007cec <__sfmoreglue+0x28>
 8007cda:	2100      	movs	r1, #0
 8007cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce0:	300c      	adds	r0, #12
 8007ce2:	60a0      	str	r0, [r4, #8]
 8007ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce8:	f7ff fd98 	bl	800781c <memset>
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}

08007cf0 <__sfp_lock_acquire>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sfp_lock_acquire+0x8>)
 8007cf2:	f000 b8b3 	b.w	8007e5c <__retarget_lock_acquire_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	20001cac 	.word	0x20001cac

08007cfc <__sfp_lock_release>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	; (8007d04 <__sfp_lock_release+0x8>)
 8007cfe:	f000 b8ae 	b.w	8007e5e <__retarget_lock_release_recursive>
 8007d02:	bf00      	nop
 8007d04:	20001cac 	.word	0x20001cac

08007d08 <__sinit_lock_acquire>:
 8007d08:	4801      	ldr	r0, [pc, #4]	; (8007d10 <__sinit_lock_acquire+0x8>)
 8007d0a:	f000 b8a7 	b.w	8007e5c <__retarget_lock_acquire_recursive>
 8007d0e:	bf00      	nop
 8007d10:	20001ca7 	.word	0x20001ca7

08007d14 <__sinit_lock_release>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__sinit_lock_release+0x8>)
 8007d16:	f000 b8a2 	b.w	8007e5e <__retarget_lock_release_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20001ca7 	.word	0x20001ca7

08007d20 <__sinit>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	4604      	mov	r4, r0
 8007d24:	f7ff fff0 	bl	8007d08 <__sinit_lock_acquire>
 8007d28:	69a3      	ldr	r3, [r4, #24]
 8007d2a:	b11b      	cbz	r3, 8007d34 <__sinit+0x14>
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f7ff bff0 	b.w	8007d14 <__sinit_lock_release>
 8007d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d38:	6523      	str	r3, [r4, #80]	; 0x50
 8007d3a:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <__sinit+0x68>)
 8007d3c:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <__sinit+0x6c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	bf04      	itt	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	61a3      	streq	r3, [r4, #24]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f820 	bl	8007d90 <__sfp>
 8007d50:	6060      	str	r0, [r4, #4]
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f81c 	bl	8007d90 <__sfp>
 8007d58:	60a0      	str	r0, [r4, #8]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 f818 	bl	8007d90 <__sfp>
 8007d60:	2200      	movs	r2, #0
 8007d62:	60e0      	str	r0, [r4, #12]
 8007d64:	2104      	movs	r1, #4
 8007d66:	6860      	ldr	r0, [r4, #4]
 8007d68:	f7ff ff82 	bl	8007c70 <std>
 8007d6c:	68a0      	ldr	r0, [r4, #8]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	2109      	movs	r1, #9
 8007d72:	f7ff ff7d 	bl	8007c70 <std>
 8007d76:	68e0      	ldr	r0, [r4, #12]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	2112      	movs	r1, #18
 8007d7c:	f7ff ff78 	bl	8007c70 <std>
 8007d80:	2301      	movs	r3, #1
 8007d82:	61a3      	str	r3, [r4, #24]
 8007d84:	e7d2      	b.n	8007d2c <__sinit+0xc>
 8007d86:	bf00      	nop
 8007d88:	08008a54 	.word	0x08008a54
 8007d8c:	08007cb9 	.word	0x08007cb9

08007d90 <__sfp>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	4607      	mov	r7, r0
 8007d94:	f7ff ffac 	bl	8007cf0 <__sfp_lock_acquire>
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <__sfp+0x84>)
 8007d9a:	681e      	ldr	r6, [r3, #0]
 8007d9c:	69b3      	ldr	r3, [r6, #24]
 8007d9e:	b913      	cbnz	r3, 8007da6 <__sfp+0x16>
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffbd 	bl	8007d20 <__sinit>
 8007da6:	3648      	adds	r6, #72	; 0x48
 8007da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	d503      	bpl.n	8007db8 <__sfp+0x28>
 8007db0:	6833      	ldr	r3, [r6, #0]
 8007db2:	b30b      	cbz	r3, 8007df8 <__sfp+0x68>
 8007db4:	6836      	ldr	r6, [r6, #0]
 8007db6:	e7f7      	b.n	8007da8 <__sfp+0x18>
 8007db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dbc:	b9d5      	cbnz	r5, 8007df4 <__sfp+0x64>
 8007dbe:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <__sfp+0x88>)
 8007dc0:	60e3      	str	r3, [r4, #12]
 8007dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8007dc8:	f000 f847 	bl	8007e5a <__retarget_lock_init_recursive>
 8007dcc:	f7ff ff96 	bl	8007cfc <__sfp_lock_release>
 8007dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dd8:	6025      	str	r5, [r4, #0]
 8007dda:	61a5      	str	r5, [r4, #24]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	4629      	mov	r1, r5
 8007de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007de4:	f7ff fd1a 	bl	800781c <memset>
 8007de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df0:	4620      	mov	r0, r4
 8007df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df4:	3468      	adds	r4, #104	; 0x68
 8007df6:	e7d9      	b.n	8007dac <__sfp+0x1c>
 8007df8:	2104      	movs	r1, #4
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f7ff ff62 	bl	8007cc4 <__sfmoreglue>
 8007e00:	4604      	mov	r4, r0
 8007e02:	6030      	str	r0, [r6, #0]
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1d5      	bne.n	8007db4 <__sfp+0x24>
 8007e08:	f7ff ff78 	bl	8007cfc <__sfp_lock_release>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	e7ee      	b.n	8007df0 <__sfp+0x60>
 8007e12:	bf00      	nop
 8007e14:	08008a54 	.word	0x08008a54
 8007e18:	ffff0001 	.word	0xffff0001

08007e1c <_fwalk_reent>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	4606      	mov	r6, r0
 8007e22:	4688      	mov	r8, r1
 8007e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e28:	2700      	movs	r7, #0
 8007e2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e32:	d505      	bpl.n	8007e40 <_fwalk_reent+0x24>
 8007e34:	6824      	ldr	r4, [r4, #0]
 8007e36:	2c00      	cmp	r4, #0
 8007e38:	d1f7      	bne.n	8007e2a <_fwalk_reent+0xe>
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e40:	89ab      	ldrh	r3, [r5, #12]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d907      	bls.n	8007e56 <_fwalk_reent+0x3a>
 8007e46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	d003      	beq.n	8007e56 <_fwalk_reent+0x3a>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	47c0      	blx	r8
 8007e54:	4307      	orrs	r7, r0
 8007e56:	3568      	adds	r5, #104	; 0x68
 8007e58:	e7e9      	b.n	8007e2e <_fwalk_reent+0x12>

08007e5a <__retarget_lock_init_recursive>:
 8007e5a:	4770      	bx	lr

08007e5c <__retarget_lock_acquire_recursive>:
 8007e5c:	4770      	bx	lr

08007e5e <__retarget_lock_release_recursive>:
 8007e5e:	4770      	bx	lr

08007e60 <__swhatbuf_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	460e      	mov	r6, r1
 8007e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	b096      	sub	sp, #88	; 0x58
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	461d      	mov	r5, r3
 8007e70:	da07      	bge.n	8007e82 <__swhatbuf_r+0x22>
 8007e72:	2300      	movs	r3, #0
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	89b3      	ldrh	r3, [r6, #12]
 8007e78:	061a      	lsls	r2, r3, #24
 8007e7a:	d410      	bmi.n	8007e9e <__swhatbuf_r+0x3e>
 8007e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e80:	e00e      	b.n	8007ea0 <__swhatbuf_r+0x40>
 8007e82:	466a      	mov	r2, sp
 8007e84:	f000 fc5e 	bl	8008744 <_fstat_r>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dbf2      	blt.n	8007e72 <__swhatbuf_r+0x12>
 8007e8c:	9a01      	ldr	r2, [sp, #4]
 8007e8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e96:	425a      	negs	r2, r3
 8007e98:	415a      	adcs	r2, r3
 8007e9a:	602a      	str	r2, [r5, #0]
 8007e9c:	e7ee      	b.n	8007e7c <__swhatbuf_r+0x1c>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	b016      	add	sp, #88	; 0x58
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}

08007ea8 <__smakebuf_r>:
 8007ea8:	898b      	ldrh	r3, [r1, #12]
 8007eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eac:	079d      	lsls	r5, r3, #30
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	d507      	bpl.n	8007ec4 <__smakebuf_r+0x1c>
 8007eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	6163      	str	r3, [r4, #20]
 8007ec0:	b002      	add	sp, #8
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	ab01      	add	r3, sp, #4
 8007ec6:	466a      	mov	r2, sp
 8007ec8:	f7ff ffca 	bl	8007e60 <__swhatbuf_r>
 8007ecc:	9900      	ldr	r1, [sp, #0]
 8007ece:	4605      	mov	r5, r0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f879 	bl	8007fc8 <_malloc_r>
 8007ed6:	b948      	cbnz	r0, 8007eec <__smakebuf_r+0x44>
 8007ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d4ef      	bmi.n	8007ec0 <__smakebuf_r+0x18>
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	f043 0302 	orr.w	r3, r3, #2
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	e7e3      	b.n	8007eb4 <__smakebuf_r+0xc>
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <__smakebuf_r+0x7c>)
 8007eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	6020      	str	r0, [r4, #0]
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	6163      	str	r3, [r4, #20]
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	6120      	str	r0, [r4, #16]
 8007f02:	b15b      	cbz	r3, 8007f1c <__smakebuf_r+0x74>
 8007f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 fc2d 	bl	8008768 <_isatty_r>
 8007f0e:	b128      	cbz	r0, 8007f1c <__smakebuf_r+0x74>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f023 0303 	bic.w	r3, r3, #3
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	89a0      	ldrh	r0, [r4, #12]
 8007f1e:	4305      	orrs	r5, r0
 8007f20:	81a5      	strh	r5, [r4, #12]
 8007f22:	e7cd      	b.n	8007ec0 <__smakebuf_r+0x18>
 8007f24:	08007cb9 	.word	0x08007cb9

08007f28 <_free_r>:
 8007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	d048      	beq.n	8007fc0 <_free_r+0x98>
 8007f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f32:	9001      	str	r0, [sp, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f1a1 0404 	sub.w	r4, r1, #4
 8007f3a:	bfb8      	it	lt
 8007f3c:	18e4      	addlt	r4, r4, r3
 8007f3e:	f000 fc35 	bl	80087ac <__malloc_lock>
 8007f42:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <_free_r+0x9c>)
 8007f44:	9801      	ldr	r0, [sp, #4]
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	4615      	mov	r5, r2
 8007f4a:	b933      	cbnz	r3, 8007f5a <_free_r+0x32>
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	6014      	str	r4, [r2, #0]
 8007f50:	b003      	add	sp, #12
 8007f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f56:	f000 bc2f 	b.w	80087b8 <__malloc_unlock>
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	d90b      	bls.n	8007f76 <_free_r+0x4e>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	1862      	adds	r2, r4, r1
 8007f62:	4293      	cmp	r3, r2
 8007f64:	bf04      	itt	eq
 8007f66:	681a      	ldreq	r2, [r3, #0]
 8007f68:	685b      	ldreq	r3, [r3, #4]
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	bf04      	itt	eq
 8007f6e:	1852      	addeq	r2, r2, r1
 8007f70:	6022      	streq	r2, [r4, #0]
 8007f72:	602c      	str	r4, [r5, #0]
 8007f74:	e7ec      	b.n	8007f50 <_free_r+0x28>
 8007f76:	461a      	mov	r2, r3
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b10b      	cbz	r3, 8007f80 <_free_r+0x58>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d9fa      	bls.n	8007f76 <_free_r+0x4e>
 8007f80:	6811      	ldr	r1, [r2, #0]
 8007f82:	1855      	adds	r5, r2, r1
 8007f84:	42a5      	cmp	r5, r4
 8007f86:	d10b      	bne.n	8007fa0 <_free_r+0x78>
 8007f88:	6824      	ldr	r4, [r4, #0]
 8007f8a:	4421      	add	r1, r4
 8007f8c:	1854      	adds	r4, r2, r1
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6011      	str	r1, [r2, #0]
 8007f92:	d1dd      	bne.n	8007f50 <_free_r+0x28>
 8007f94:	681c      	ldr	r4, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	6053      	str	r3, [r2, #4]
 8007f9a:	4421      	add	r1, r4
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	e7d7      	b.n	8007f50 <_free_r+0x28>
 8007fa0:	d902      	bls.n	8007fa8 <_free_r+0x80>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	e7d3      	b.n	8007f50 <_free_r+0x28>
 8007fa8:	6825      	ldr	r5, [r4, #0]
 8007faa:	1961      	adds	r1, r4, r5
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf04      	itt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	bf04      	itt	eq
 8007fb8:	1949      	addeq	r1, r1, r5
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6054      	str	r4, [r2, #4]
 8007fbe:	e7c7      	b.n	8007f50 <_free_r+0x28>
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	2000195c 	.word	0x2000195c

08007fc8 <_malloc_r>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	1ccd      	adds	r5, r1, #3
 8007fcc:	f025 0503 	bic.w	r5, r5, #3
 8007fd0:	3508      	adds	r5, #8
 8007fd2:	2d0c      	cmp	r5, #12
 8007fd4:	bf38      	it	cc
 8007fd6:	250c      	movcc	r5, #12
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	4606      	mov	r6, r0
 8007fdc:	db01      	blt.n	8007fe2 <_malloc_r+0x1a>
 8007fde:	42a9      	cmp	r1, r5
 8007fe0:	d903      	bls.n	8007fea <_malloc_r+0x22>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6033      	str	r3, [r6, #0]
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fea:	f000 fbdf 	bl	80087ac <__malloc_lock>
 8007fee:	4921      	ldr	r1, [pc, #132]	; (8008074 <_malloc_r+0xac>)
 8007ff0:	680a      	ldr	r2, [r1, #0]
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	b99c      	cbnz	r4, 800801e <_malloc_r+0x56>
 8007ff6:	4f20      	ldr	r7, [pc, #128]	; (8008078 <_malloc_r+0xb0>)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	b923      	cbnz	r3, 8008006 <_malloc_r+0x3e>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 fb2a 	bl	8008658 <_sbrk_r>
 8008004:	6038      	str	r0, [r7, #0]
 8008006:	4629      	mov	r1, r5
 8008008:	4630      	mov	r0, r6
 800800a:	f000 fb25 	bl	8008658 <_sbrk_r>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d123      	bne.n	800805a <_malloc_r+0x92>
 8008012:	230c      	movs	r3, #12
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	4630      	mov	r0, r6
 8008018:	f000 fbce 	bl	80087b8 <__malloc_unlock>
 800801c:	e7e3      	b.n	8007fe6 <_malloc_r+0x1e>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	1b5b      	subs	r3, r3, r5
 8008022:	d417      	bmi.n	8008054 <_malloc_r+0x8c>
 8008024:	2b0b      	cmp	r3, #11
 8008026:	d903      	bls.n	8008030 <_malloc_r+0x68>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	441c      	add	r4, r3
 800802c:	6025      	str	r5, [r4, #0]
 800802e:	e004      	b.n	800803a <_malloc_r+0x72>
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	42a2      	cmp	r2, r4
 8008034:	bf0c      	ite	eq
 8008036:	600b      	streq	r3, [r1, #0]
 8008038:	6053      	strne	r3, [r2, #4]
 800803a:	4630      	mov	r0, r6
 800803c:	f000 fbbc 	bl	80087b8 <__malloc_unlock>
 8008040:	f104 000b 	add.w	r0, r4, #11
 8008044:	1d23      	adds	r3, r4, #4
 8008046:	f020 0007 	bic.w	r0, r0, #7
 800804a:	1ac2      	subs	r2, r0, r3
 800804c:	d0cc      	beq.n	8007fe8 <_malloc_r+0x20>
 800804e:	1a1b      	subs	r3, r3, r0
 8008050:	50a3      	str	r3, [r4, r2]
 8008052:	e7c9      	b.n	8007fe8 <_malloc_r+0x20>
 8008054:	4622      	mov	r2, r4
 8008056:	6864      	ldr	r4, [r4, #4]
 8008058:	e7cc      	b.n	8007ff4 <_malloc_r+0x2c>
 800805a:	1cc4      	adds	r4, r0, #3
 800805c:	f024 0403 	bic.w	r4, r4, #3
 8008060:	42a0      	cmp	r0, r4
 8008062:	d0e3      	beq.n	800802c <_malloc_r+0x64>
 8008064:	1a21      	subs	r1, r4, r0
 8008066:	4630      	mov	r0, r6
 8008068:	f000 faf6 	bl	8008658 <_sbrk_r>
 800806c:	3001      	adds	r0, #1
 800806e:	d1dd      	bne.n	800802c <_malloc_r+0x64>
 8008070:	e7cf      	b.n	8008012 <_malloc_r+0x4a>
 8008072:	bf00      	nop
 8008074:	2000195c 	.word	0x2000195c
 8008078:	20001960 	.word	0x20001960

0800807c <__sfputc_r>:
 800807c:	6893      	ldr	r3, [r2, #8]
 800807e:	3b01      	subs	r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	b410      	push	{r4}
 8008084:	6093      	str	r3, [r2, #8]
 8008086:	da08      	bge.n	800809a <__sfputc_r+0x1e>
 8008088:	6994      	ldr	r4, [r2, #24]
 800808a:	42a3      	cmp	r3, r4
 800808c:	db01      	blt.n	8008092 <__sfputc_r+0x16>
 800808e:	290a      	cmp	r1, #10
 8008090:	d103      	bne.n	800809a <__sfputc_r+0x1e>
 8008092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008096:	f7ff bc69 	b.w	800796c <__swbuf_r>
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	1c58      	adds	r0, r3, #1
 800809e:	6010      	str	r0, [r2, #0]
 80080a0:	7019      	strb	r1, [r3, #0]
 80080a2:	4608      	mov	r0, r1
 80080a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <__sfputs_r>:
 80080aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	18d5      	adds	r5, r2, r3
 80080b4:	42ac      	cmp	r4, r5
 80080b6:	d101      	bne.n	80080bc <__sfputs_r+0x12>
 80080b8:	2000      	movs	r0, #0
 80080ba:	e007      	b.n	80080cc <__sfputs_r+0x22>
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	463a      	mov	r2, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ffda 	bl	800807c <__sfputc_r>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d1f3      	bne.n	80080b4 <__sfputs_r+0xa>
 80080cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080d0 <_vfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	460d      	mov	r5, r1
 80080d6:	b09d      	sub	sp, #116	; 0x74
 80080d8:	4614      	mov	r4, r2
 80080da:	4698      	mov	r8, r3
 80080dc:	4606      	mov	r6, r0
 80080de:	b118      	cbz	r0, 80080e8 <_vfiprintf_r+0x18>
 80080e0:	6983      	ldr	r3, [r0, #24]
 80080e2:	b90b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x18>
 80080e4:	f7ff fe1c 	bl	8007d20 <__sinit>
 80080e8:	4b89      	ldr	r3, [pc, #548]	; (8008310 <_vfiprintf_r+0x240>)
 80080ea:	429d      	cmp	r5, r3
 80080ec:	d11b      	bne.n	8008126 <_vfiprintf_r+0x56>
 80080ee:	6875      	ldr	r5, [r6, #4]
 80080f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f2:	07d9      	lsls	r1, r3, #31
 80080f4:	d405      	bmi.n	8008102 <_vfiprintf_r+0x32>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	059a      	lsls	r2, r3, #22
 80080fa:	d402      	bmi.n	8008102 <_vfiprintf_r+0x32>
 80080fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080fe:	f7ff fead 	bl	8007e5c <__retarget_lock_acquire_recursive>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	071b      	lsls	r3, r3, #28
 8008106:	d501      	bpl.n	800810c <_vfiprintf_r+0x3c>
 8008108:	692b      	ldr	r3, [r5, #16]
 800810a:	b9eb      	cbnz	r3, 8008148 <_vfiprintf_r+0x78>
 800810c:	4629      	mov	r1, r5
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff fc7e 	bl	8007a10 <__swsetup_r>
 8008114:	b1c0      	cbz	r0, 8008148 <_vfiprintf_r+0x78>
 8008116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008118:	07dc      	lsls	r4, r3, #31
 800811a:	d50e      	bpl.n	800813a <_vfiprintf_r+0x6a>
 800811c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008120:	b01d      	add	sp, #116	; 0x74
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	4b7b      	ldr	r3, [pc, #492]	; (8008314 <_vfiprintf_r+0x244>)
 8008128:	429d      	cmp	r5, r3
 800812a:	d101      	bne.n	8008130 <_vfiprintf_r+0x60>
 800812c:	68b5      	ldr	r5, [r6, #8]
 800812e:	e7df      	b.n	80080f0 <_vfiprintf_r+0x20>
 8008130:	4b79      	ldr	r3, [pc, #484]	; (8008318 <_vfiprintf_r+0x248>)
 8008132:	429d      	cmp	r5, r3
 8008134:	bf08      	it	eq
 8008136:	68f5      	ldreq	r5, [r6, #12]
 8008138:	e7da      	b.n	80080f0 <_vfiprintf_r+0x20>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	0598      	lsls	r0, r3, #22
 800813e:	d4ed      	bmi.n	800811c <_vfiprintf_r+0x4c>
 8008140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008142:	f7ff fe8c 	bl	8007e5e <__retarget_lock_release_recursive>
 8008146:	e7e9      	b.n	800811c <_vfiprintf_r+0x4c>
 8008148:	2300      	movs	r3, #0
 800814a:	9309      	str	r3, [sp, #36]	; 0x24
 800814c:	2320      	movs	r3, #32
 800814e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008152:	f8cd 800c 	str.w	r8, [sp, #12]
 8008156:	2330      	movs	r3, #48	; 0x30
 8008158:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800831c <_vfiprintf_r+0x24c>
 800815c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008160:	f04f 0901 	mov.w	r9, #1
 8008164:	4623      	mov	r3, r4
 8008166:	469a      	mov	sl, r3
 8008168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816c:	b10a      	cbz	r2, 8008172 <_vfiprintf_r+0xa2>
 800816e:	2a25      	cmp	r2, #37	; 0x25
 8008170:	d1f9      	bne.n	8008166 <_vfiprintf_r+0x96>
 8008172:	ebba 0b04 	subs.w	fp, sl, r4
 8008176:	d00b      	beq.n	8008190 <_vfiprintf_r+0xc0>
 8008178:	465b      	mov	r3, fp
 800817a:	4622      	mov	r2, r4
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff93 	bl	80080aa <__sfputs_r>
 8008184:	3001      	adds	r0, #1
 8008186:	f000 80aa 	beq.w	80082de <_vfiprintf_r+0x20e>
 800818a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800818c:	445a      	add	r2, fp
 800818e:	9209      	str	r2, [sp, #36]	; 0x24
 8008190:	f89a 3000 	ldrb.w	r3, [sl]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80a2 	beq.w	80082de <_vfiprintf_r+0x20e>
 800819a:	2300      	movs	r3, #0
 800819c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a4:	f10a 0a01 	add.w	sl, sl, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b0:	931a      	str	r3, [sp, #104]	; 0x68
 80081b2:	4654      	mov	r4, sl
 80081b4:	2205      	movs	r2, #5
 80081b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ba:	4858      	ldr	r0, [pc, #352]	; (800831c <_vfiprintf_r+0x24c>)
 80081bc:	f7f8 f810 	bl	80001e0 <memchr>
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	b9d8      	cbnz	r0, 80081fc <_vfiprintf_r+0x12c>
 80081c4:	06d1      	lsls	r1, r2, #27
 80081c6:	bf44      	itt	mi
 80081c8:	2320      	movmi	r3, #32
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	0713      	lsls	r3, r2, #28
 80081d0:	bf44      	itt	mi
 80081d2:	232b      	movmi	r3, #43	; 0x2b
 80081d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d8:	f89a 3000 	ldrb.w	r3, [sl]
 80081dc:	2b2a      	cmp	r3, #42	; 0x2a
 80081de:	d015      	beq.n	800820c <_vfiprintf_r+0x13c>
 80081e0:	9a07      	ldr	r2, [sp, #28]
 80081e2:	4654      	mov	r4, sl
 80081e4:	2000      	movs	r0, #0
 80081e6:	f04f 0c0a 	mov.w	ip, #10
 80081ea:	4621      	mov	r1, r4
 80081ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f0:	3b30      	subs	r3, #48	; 0x30
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d94e      	bls.n	8008294 <_vfiprintf_r+0x1c4>
 80081f6:	b1b0      	cbz	r0, 8008226 <_vfiprintf_r+0x156>
 80081f8:	9207      	str	r2, [sp, #28]
 80081fa:	e014      	b.n	8008226 <_vfiprintf_r+0x156>
 80081fc:	eba0 0308 	sub.w	r3, r0, r8
 8008200:	fa09 f303 	lsl.w	r3, r9, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	46a2      	mov	sl, r4
 800820a:	e7d2      	b.n	80081b2 <_vfiprintf_r+0xe2>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	1d19      	adds	r1, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfbb      	ittet	lt
 8008218:	425b      	neglt	r3, r3
 800821a:	f042 0202 	orrlt.w	r2, r2, #2
 800821e:	9307      	strge	r3, [sp, #28]
 8008220:	9307      	strlt	r3, [sp, #28]
 8008222:	bfb8      	it	lt
 8008224:	9204      	strlt	r2, [sp, #16]
 8008226:	7823      	ldrb	r3, [r4, #0]
 8008228:	2b2e      	cmp	r3, #46	; 0x2e
 800822a:	d10c      	bne.n	8008246 <_vfiprintf_r+0x176>
 800822c:	7863      	ldrb	r3, [r4, #1]
 800822e:	2b2a      	cmp	r3, #42	; 0x2a
 8008230:	d135      	bne.n	800829e <_vfiprintf_r+0x1ce>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9203      	str	r2, [sp, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008242:	3402      	adds	r4, #2
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800832c <_vfiprintf_r+0x25c>
 800824a:	7821      	ldrb	r1, [r4, #0]
 800824c:	2203      	movs	r2, #3
 800824e:	4650      	mov	r0, sl
 8008250:	f7f7 ffc6 	bl	80001e0 <memchr>
 8008254:	b140      	cbz	r0, 8008268 <_vfiprintf_r+0x198>
 8008256:	2340      	movs	r3, #64	; 0x40
 8008258:	eba0 000a 	sub.w	r0, r0, sl
 800825c:	fa03 f000 	lsl.w	r0, r3, r0
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	4303      	orrs	r3, r0
 8008264:	3401      	adds	r4, #1
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826c:	482c      	ldr	r0, [pc, #176]	; (8008320 <_vfiprintf_r+0x250>)
 800826e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008272:	2206      	movs	r2, #6
 8008274:	f7f7 ffb4 	bl	80001e0 <memchr>
 8008278:	2800      	cmp	r0, #0
 800827a:	d03f      	beq.n	80082fc <_vfiprintf_r+0x22c>
 800827c:	4b29      	ldr	r3, [pc, #164]	; (8008324 <_vfiprintf_r+0x254>)
 800827e:	bb1b      	cbnz	r3, 80082c8 <_vfiprintf_r+0x1f8>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	3307      	adds	r3, #7
 8008284:	f023 0307 	bic.w	r3, r3, #7
 8008288:	3308      	adds	r3, #8
 800828a:	9303      	str	r3, [sp, #12]
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	443b      	add	r3, r7
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	e767      	b.n	8008164 <_vfiprintf_r+0x94>
 8008294:	fb0c 3202 	mla	r2, ip, r2, r3
 8008298:	460c      	mov	r4, r1
 800829a:	2001      	movs	r0, #1
 800829c:	e7a5      	b.n	80081ea <_vfiprintf_r+0x11a>
 800829e:	2300      	movs	r3, #0
 80082a0:	3401      	adds	r4, #1
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	4619      	mov	r1, r3
 80082a6:	f04f 0c0a 	mov.w	ip, #10
 80082aa:	4620      	mov	r0, r4
 80082ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b0:	3a30      	subs	r2, #48	; 0x30
 80082b2:	2a09      	cmp	r2, #9
 80082b4:	d903      	bls.n	80082be <_vfiprintf_r+0x1ee>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0c5      	beq.n	8008246 <_vfiprintf_r+0x176>
 80082ba:	9105      	str	r1, [sp, #20]
 80082bc:	e7c3      	b.n	8008246 <_vfiprintf_r+0x176>
 80082be:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c2:	4604      	mov	r4, r0
 80082c4:	2301      	movs	r3, #1
 80082c6:	e7f0      	b.n	80082aa <_vfiprintf_r+0x1da>
 80082c8:	ab03      	add	r3, sp, #12
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4b16      	ldr	r3, [pc, #88]	; (8008328 <_vfiprintf_r+0x258>)
 80082d0:	a904      	add	r1, sp, #16
 80082d2:	4630      	mov	r0, r6
 80082d4:	f3af 8000 	nop.w
 80082d8:	4607      	mov	r7, r0
 80082da:	1c78      	adds	r0, r7, #1
 80082dc:	d1d6      	bne.n	800828c <_vfiprintf_r+0x1bc>
 80082de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e0:	07d9      	lsls	r1, r3, #31
 80082e2:	d405      	bmi.n	80082f0 <_vfiprintf_r+0x220>
 80082e4:	89ab      	ldrh	r3, [r5, #12]
 80082e6:	059a      	lsls	r2, r3, #22
 80082e8:	d402      	bmi.n	80082f0 <_vfiprintf_r+0x220>
 80082ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ec:	f7ff fdb7 	bl	8007e5e <__retarget_lock_release_recursive>
 80082f0:	89ab      	ldrh	r3, [r5, #12]
 80082f2:	065b      	lsls	r3, r3, #25
 80082f4:	f53f af12 	bmi.w	800811c <_vfiprintf_r+0x4c>
 80082f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082fa:	e711      	b.n	8008120 <_vfiprintf_r+0x50>
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <_vfiprintf_r+0x258>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f880 	bl	800840c <_printf_i>
 800830c:	e7e4      	b.n	80082d8 <_vfiprintf_r+0x208>
 800830e:	bf00      	nop
 8008310:	08008a78 	.word	0x08008a78
 8008314:	08008a98 	.word	0x08008a98
 8008318:	08008a58 	.word	0x08008a58
 800831c:	08008ab8 	.word	0x08008ab8
 8008320:	08008ac2 	.word	0x08008ac2
 8008324:	00000000 	.word	0x00000000
 8008328:	080080ab 	.word	0x080080ab
 800832c:	08008abe 	.word	0x08008abe

08008330 <_printf_common>:
 8008330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	4616      	mov	r6, r2
 8008336:	4699      	mov	r9, r3
 8008338:	688a      	ldr	r2, [r1, #8]
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008340:	4293      	cmp	r3, r2
 8008342:	bfb8      	it	lt
 8008344:	4613      	movlt	r3, r2
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800834c:	4607      	mov	r7, r0
 800834e:	460c      	mov	r4, r1
 8008350:	b10a      	cbz	r2, 8008356 <_printf_common+0x26>
 8008352:	3301      	adds	r3, #1
 8008354:	6033      	str	r3, [r6, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	0699      	lsls	r1, r3, #26
 800835a:	bf42      	ittt	mi
 800835c:	6833      	ldrmi	r3, [r6, #0]
 800835e:	3302      	addmi	r3, #2
 8008360:	6033      	strmi	r3, [r6, #0]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d106      	bne.n	8008378 <_printf_common+0x48>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	6832      	ldr	r2, [r6, #0]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	42ab      	cmp	r3, r5
 8008376:	dc26      	bgt.n	80083c6 <_printf_common+0x96>
 8008378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800837c:	1e13      	subs	r3, r2, #0
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	bf18      	it	ne
 8008382:	2301      	movne	r3, #1
 8008384:	0692      	lsls	r2, r2, #26
 8008386:	d42b      	bmi.n	80083e0 <_printf_common+0xb0>
 8008388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838c:	4649      	mov	r1, r9
 800838e:	4638      	mov	r0, r7
 8008390:	47c0      	blx	r8
 8008392:	3001      	adds	r0, #1
 8008394:	d01e      	beq.n	80083d4 <_printf_common+0xa4>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	68e5      	ldr	r5, [r4, #12]
 800839a:	6832      	ldr	r2, [r6, #0]
 800839c:	f003 0306 	and.w	r3, r3, #6
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	bf08      	it	eq
 80083a4:	1aad      	subeq	r5, r5, r2
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	bf0c      	ite	eq
 80083ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b0:	2500      	movne	r5, #0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfc4      	itt	gt
 80083b6:	1a9b      	subgt	r3, r3, r2
 80083b8:	18ed      	addgt	r5, r5, r3
 80083ba:	2600      	movs	r6, #0
 80083bc:	341a      	adds	r4, #26
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d11a      	bne.n	80083f8 <_printf_common+0xc8>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e008      	b.n	80083d8 <_printf_common+0xa8>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4649      	mov	r1, r9
 80083cc:	4638      	mov	r0, r7
 80083ce:	47c0      	blx	r8
 80083d0:	3001      	adds	r0, #1
 80083d2:	d103      	bne.n	80083dc <_printf_common+0xac>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	3501      	adds	r5, #1
 80083de:	e7c6      	b.n	800836e <_printf_common+0x3e>
 80083e0:	18e1      	adds	r1, r4, r3
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	2030      	movs	r0, #48	; 0x30
 80083e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ea:	4422      	add	r2, r4
 80083ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7c7      	b.n	8008388 <_printf_common+0x58>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4622      	mov	r2, r4
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d0e6      	beq.n	80083d4 <_printf_common+0xa4>
 8008406:	3601      	adds	r6, #1
 8008408:	e7d9      	b.n	80083be <_printf_common+0x8e>
	...

0800840c <_printf_i>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	460c      	mov	r4, r1
 8008412:	4691      	mov	r9, r2
 8008414:	7e27      	ldrb	r7, [r4, #24]
 8008416:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008418:	2f78      	cmp	r7, #120	; 0x78
 800841a:	4680      	mov	r8, r0
 800841c:	469a      	mov	sl, r3
 800841e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008422:	d807      	bhi.n	8008434 <_printf_i+0x28>
 8008424:	2f62      	cmp	r7, #98	; 0x62
 8008426:	d80a      	bhi.n	800843e <_printf_i+0x32>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80d8 	beq.w	80085de <_printf_i+0x1d2>
 800842e:	2f58      	cmp	r7, #88	; 0x58
 8008430:	f000 80a3 	beq.w	800857a <_printf_i+0x16e>
 8008434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800843c:	e03a      	b.n	80084b4 <_printf_i+0xa8>
 800843e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008442:	2b15      	cmp	r3, #21
 8008444:	d8f6      	bhi.n	8008434 <_printf_i+0x28>
 8008446:	a001      	add	r0, pc, #4	; (adr r0, 800844c <_printf_i+0x40>)
 8008448:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084b9 	.word	0x080084b9
 8008454:	08008435 	.word	0x08008435
 8008458:	08008435 	.word	0x08008435
 800845c:	08008435 	.word	0x08008435
 8008460:	08008435 	.word	0x08008435
 8008464:	080084b9 	.word	0x080084b9
 8008468:	08008435 	.word	0x08008435
 800846c:	08008435 	.word	0x08008435
 8008470:	08008435 	.word	0x08008435
 8008474:	08008435 	.word	0x08008435
 8008478:	080085c5 	.word	0x080085c5
 800847c:	080084e9 	.word	0x080084e9
 8008480:	080085a7 	.word	0x080085a7
 8008484:	08008435 	.word	0x08008435
 8008488:	08008435 	.word	0x08008435
 800848c:	080085e7 	.word	0x080085e7
 8008490:	08008435 	.word	0x08008435
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008435 	.word	0x08008435
 800849c:	08008435 	.word	0x08008435
 80084a0:	080085af 	.word	0x080085af
 80084a4:	680b      	ldr	r3, [r1, #0]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	600a      	str	r2, [r1, #0]
 80084ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0a3      	b.n	8008600 <_printf_i+0x1f4>
 80084b8:	6825      	ldr	r5, [r4, #0]
 80084ba:	6808      	ldr	r0, [r1, #0]
 80084bc:	062e      	lsls	r6, r5, #24
 80084be:	f100 0304 	add.w	r3, r0, #4
 80084c2:	d50a      	bpl.n	80084da <_printf_i+0xce>
 80084c4:	6805      	ldr	r5, [r0, #0]
 80084c6:	600b      	str	r3, [r1, #0]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	da03      	bge.n	80084d4 <_printf_i+0xc8>
 80084cc:	232d      	movs	r3, #45	; 0x2d
 80084ce:	426d      	negs	r5, r5
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	485e      	ldr	r0, [pc, #376]	; (8008650 <_printf_i+0x244>)
 80084d6:	230a      	movs	r3, #10
 80084d8:	e019      	b.n	800850e <_printf_i+0x102>
 80084da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084de:	6805      	ldr	r5, [r0, #0]
 80084e0:	600b      	str	r3, [r1, #0]
 80084e2:	bf18      	it	ne
 80084e4:	b22d      	sxthne	r5, r5
 80084e6:	e7ef      	b.n	80084c8 <_printf_i+0xbc>
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	1d18      	adds	r0, r3, #4
 80084ee:	6008      	str	r0, [r1, #0]
 80084f0:	0628      	lsls	r0, r5, #24
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0xec>
 80084f4:	681d      	ldr	r5, [r3, #0]
 80084f6:	e002      	b.n	80084fe <_printf_i+0xf2>
 80084f8:	0669      	lsls	r1, r5, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0xe8>
 80084fc:	881d      	ldrh	r5, [r3, #0]
 80084fe:	4854      	ldr	r0, [pc, #336]	; (8008650 <_printf_i+0x244>)
 8008500:	2f6f      	cmp	r7, #111	; 0x6f
 8008502:	bf0c      	ite	eq
 8008504:	2308      	moveq	r3, #8
 8008506:	230a      	movne	r3, #10
 8008508:	2100      	movs	r1, #0
 800850a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850e:	6866      	ldr	r6, [r4, #4]
 8008510:	60a6      	str	r6, [r4, #8]
 8008512:	2e00      	cmp	r6, #0
 8008514:	bfa2      	ittt	ge
 8008516:	6821      	ldrge	r1, [r4, #0]
 8008518:	f021 0104 	bicge.w	r1, r1, #4
 800851c:	6021      	strge	r1, [r4, #0]
 800851e:	b90d      	cbnz	r5, 8008524 <_printf_i+0x118>
 8008520:	2e00      	cmp	r6, #0
 8008522:	d04d      	beq.n	80085c0 <_printf_i+0x1b4>
 8008524:	4616      	mov	r6, r2
 8008526:	fbb5 f1f3 	udiv	r1, r5, r3
 800852a:	fb03 5711 	mls	r7, r3, r1, r5
 800852e:	5dc7      	ldrb	r7, [r0, r7]
 8008530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008534:	462f      	mov	r7, r5
 8008536:	42bb      	cmp	r3, r7
 8008538:	460d      	mov	r5, r1
 800853a:	d9f4      	bls.n	8008526 <_printf_i+0x11a>
 800853c:	2b08      	cmp	r3, #8
 800853e:	d10b      	bne.n	8008558 <_printf_i+0x14c>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07df      	lsls	r7, r3, #31
 8008544:	d508      	bpl.n	8008558 <_printf_i+0x14c>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4299      	cmp	r1, r3
 800854c:	bfde      	ittt	le
 800854e:	2330      	movle	r3, #48	; 0x30
 8008550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008554:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008558:	1b92      	subs	r2, r2, r6
 800855a:	6122      	str	r2, [r4, #16]
 800855c:	f8cd a000 	str.w	sl, [sp]
 8008560:	464b      	mov	r3, r9
 8008562:	aa03      	add	r2, sp, #12
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff fee2 	bl	8008330 <_printf_common>
 800856c:	3001      	adds	r0, #1
 800856e:	d14c      	bne.n	800860a <_printf_i+0x1fe>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008574:	b004      	add	sp, #16
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	4835      	ldr	r0, [pc, #212]	; (8008650 <_printf_i+0x244>)
 800857c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	680e      	ldr	r6, [r1, #0]
 8008584:	061f      	lsls	r7, r3, #24
 8008586:	f856 5b04 	ldr.w	r5, [r6], #4
 800858a:	600e      	str	r6, [r1, #0]
 800858c:	d514      	bpl.n	80085b8 <_printf_i+0x1ac>
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	bf44      	itt	mi
 8008592:	f043 0320 	orrmi.w	r3, r3, #32
 8008596:	6023      	strmi	r3, [r4, #0]
 8008598:	b91d      	cbnz	r5, 80085a2 <_printf_i+0x196>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f023 0320 	bic.w	r3, r3, #32
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	2310      	movs	r3, #16
 80085a4:	e7b0      	b.n	8008508 <_printf_i+0xfc>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	f043 0320 	orr.w	r3, r3, #32
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	2378      	movs	r3, #120	; 0x78
 80085b0:	4828      	ldr	r0, [pc, #160]	; (8008654 <_printf_i+0x248>)
 80085b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085b6:	e7e3      	b.n	8008580 <_printf_i+0x174>
 80085b8:	065e      	lsls	r6, r3, #25
 80085ba:	bf48      	it	mi
 80085bc:	b2ad      	uxthmi	r5, r5
 80085be:	e7e6      	b.n	800858e <_printf_i+0x182>
 80085c0:	4616      	mov	r6, r2
 80085c2:	e7bb      	b.n	800853c <_printf_i+0x130>
 80085c4:	680b      	ldr	r3, [r1, #0]
 80085c6:	6826      	ldr	r6, [r4, #0]
 80085c8:	6960      	ldr	r0, [r4, #20]
 80085ca:	1d1d      	adds	r5, r3, #4
 80085cc:	600d      	str	r5, [r1, #0]
 80085ce:	0635      	lsls	r5, r6, #24
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0x1cc>
 80085d4:	6018      	str	r0, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0x1d2>
 80085d8:	0671      	lsls	r1, r6, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0x1c8>
 80085dc:	8018      	strh	r0, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	4616      	mov	r6, r2
 80085e4:	e7ba      	b.n	800855c <_printf_i+0x150>
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	600a      	str	r2, [r1, #0]
 80085ec:	681e      	ldr	r6, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b108      	cbz	r0, 80085fe <_printf_i+0x1f2>
 80085fa:	1b80      	subs	r0, r0, r6
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008608:	e7a8      	b.n	800855c <_printf_i+0x150>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d0ab      	beq.n	8008570 <_printf_i+0x164>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	079b      	lsls	r3, r3, #30
 800861c:	d413      	bmi.n	8008646 <_printf_i+0x23a>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e7a4      	b.n	8008574 <_printf_i+0x168>
 800862a:	2301      	movs	r3, #1
 800862c:	4632      	mov	r2, r6
 800862e:	4649      	mov	r1, r9
 8008630:	4640      	mov	r0, r8
 8008632:	47d0      	blx	sl
 8008634:	3001      	adds	r0, #1
 8008636:	d09b      	beq.n	8008570 <_printf_i+0x164>
 8008638:	3501      	adds	r5, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	42ab      	cmp	r3, r5
 8008642:	dcf2      	bgt.n	800862a <_printf_i+0x21e>
 8008644:	e7eb      	b.n	800861e <_printf_i+0x212>
 8008646:	2500      	movs	r5, #0
 8008648:	f104 0619 	add.w	r6, r4, #25
 800864c:	e7f5      	b.n	800863a <_printf_i+0x22e>
 800864e:	bf00      	nop
 8008650:	08008ac9 	.word	0x08008ac9
 8008654:	08008ada 	.word	0x08008ada

08008658 <_sbrk_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d06      	ldr	r5, [pc, #24]	; (8008674 <_sbrk_r+0x1c>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7f8 fdd0 	bl	8001208 <_sbrk>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_sbrk_r+0x1a>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_sbrk_r+0x1a>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20001cb0 	.word	0x20001cb0

08008678 <__sread>:
 8008678:	b510      	push	{r4, lr}
 800867a:	460c      	mov	r4, r1
 800867c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008680:	f000 f8a0 	bl	80087c4 <_read_r>
 8008684:	2800      	cmp	r0, #0
 8008686:	bfab      	itete	ge
 8008688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800868a:	89a3      	ldrhlt	r3, [r4, #12]
 800868c:	181b      	addge	r3, r3, r0
 800868e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008692:	bfac      	ite	ge
 8008694:	6563      	strge	r3, [r4, #84]	; 0x54
 8008696:	81a3      	strhlt	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__swrite>:
 800869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	461f      	mov	r7, r3
 80086a0:	898b      	ldrh	r3, [r1, #12]
 80086a2:	05db      	lsls	r3, r3, #23
 80086a4:	4605      	mov	r5, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4616      	mov	r6, r2
 80086aa:	d505      	bpl.n	80086b8 <__swrite+0x1e>
 80086ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b0:	2302      	movs	r3, #2
 80086b2:	2200      	movs	r2, #0
 80086b4:	f000 f868 	bl	8008788 <_lseek_r>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	4632      	mov	r2, r6
 80086c6:	463b      	mov	r3, r7
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	f000 b817 	b.w	8008700 <_write_r>

080086d2 <__sseek>:
 80086d2:	b510      	push	{r4, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086da:	f000 f855 	bl	8008788 <_lseek_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	bf15      	itete	ne
 80086e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ee:	81a3      	strheq	r3, [r4, #12]
 80086f0:	bf18      	it	ne
 80086f2:	81a3      	strhne	r3, [r4, #12]
 80086f4:	bd10      	pop	{r4, pc}

080086f6 <__sclose>:
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	f000 b813 	b.w	8008724 <_close_r>
	...

08008700 <_write_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d07      	ldr	r5, [pc, #28]	; (8008720 <_write_r+0x20>)
 8008704:	4604      	mov	r4, r0
 8008706:	4608      	mov	r0, r1
 8008708:	4611      	mov	r1, r2
 800870a:	2200      	movs	r2, #0
 800870c:	602a      	str	r2, [r5, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f7f8 fd29 	bl	8001166 <_write>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_write_r+0x1e>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_write_r+0x1e>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20001cb0 	.word	0x20001cb0

08008724 <_close_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d06      	ldr	r5, [pc, #24]	; (8008740 <_close_r+0x1c>)
 8008728:	2300      	movs	r3, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7f8 fd35 	bl	800119e <_close>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_close_r+0x1a>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_close_r+0x1a>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20001cb0 	.word	0x20001cb0

08008744 <_fstat_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	; (8008764 <_fstat_r+0x20>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	f7f8 fd30 	bl	80011b6 <_fstat>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d102      	bne.n	8008760 <_fstat_r+0x1c>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b103      	cbz	r3, 8008760 <_fstat_r+0x1c>
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	20001cb0 	.word	0x20001cb0

08008768 <_isatty_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	; (8008784 <_isatty_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f8 fd2f 	bl	80011d6 <_isatty>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_isatty_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_isatty_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	20001cb0 	.word	0x20001cb0

08008788 <_lseek_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	; (80087a8 <_lseek_r+0x20>)
 800878c:	4604      	mov	r4, r0
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7f8 fd28 	bl	80011ec <_lseek>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_lseek_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_lseek_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20001cb0 	.word	0x20001cb0

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f7ff bb55 	b.w	8007e5c <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20001ca8 	.word	0x20001ca8

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f7ff bb50 	b.w	8007e5e <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20001ca8 	.word	0x20001ca8

080087c4 <_read_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	; (80087e4 <_read_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7f8 fcaa 	bl	800112c <_read>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_read_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_read_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20001cb0 	.word	0x20001cb0

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
