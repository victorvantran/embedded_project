
hello_uart_dma_idle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b58  08008b58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b60  08008b60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  20000074  08008bdc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  08008bdc  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c5e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fdd  00000000  00000000  00041d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00045ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00047560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d94  00000000  00000000  00048c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a08e  00000000  00000000  000729fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100105  00000000  00000000  0008ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018cb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eac  00000000  00000000  0018cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008838 	.word	0x08008838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008838 	.word	0x08008838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <USER_UART2_IRQHandler>:
/* APPLICATION PROGRAMMER */
// UART2
UARTRingBufferHandle_t xUART2RingBuffer;

void USER_UART2_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <USER_UART2_IRQHandler+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0310 	and.w	r3, r3, #16
 8000586:	2b10      	cmp	r3, #16
 8000588:	d108      	bne.n	800059c <USER_UART2_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <USER_UART2_IRQHandler+0x28>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2210      	movs	r2, #16
 8000590:	621a      	str	r2, [r3, #32]

		printf("UART2 Idle IRQ Detected\r\n");
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <USER_UART2_IRQHandler+0x2c>)
 8000594:	f007 f9f8 	bl	8007988 <puts>
		USER_UART2_IDLECallback();
 8000598:	f000 f846 	bl	8000628 <USER_UART2_IDLECallback>
	}
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20001b90 	.word	0x20001b90
 80005a4:	08008850 	.word	0x08008850

080005a8 <vInitUARTRingBuffer>:
/* IMPLEMENTATION */
void vInitUARTRingBuffer(UARTRingBufferHandle_t *pxUARTRingBuffer,
		UART_HandleTypeDef *huart,
		uint8_t *dmaRX, uint32_t dmaRXSize,
		uint8_t *dmaTX, uint32_t dmaTXSize)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	// Structure
	pxUARTRingBuffer->huart = huart;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	601a      	str	r2, [r3, #0]
	pxUARTRingBuffer->xRXBuffer.puDMABuffer = dmaRX;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
	pxUARTRingBuffer->xRXBuffer.uDMABufferSize = dmaRXSize;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	721a      	strb	r2, [r3, #8]
	pxUARTRingBuffer->xRXBuffer.uHeadIndex = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	725a      	strb	r2, [r3, #9]
	pxUARTRingBuffer->xRXBuffer.uTailIndex = 0;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	729a      	strb	r2, [r3, #10]
	pxUARTRingBuffer->xRXBuffer.uRollOver = 0;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2200      	movs	r2, #0
 80005da:	72da      	strb	r2, [r3, #11]
	pxUARTRingBuffer->xTXBuffer.puDMABuffer = dmaTX;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	69ba      	ldr	r2, [r7, #24]
 80005e0:	60da      	str	r2, [r3, #12]
	pxUARTRingBuffer->xTXBuffer.uDMABufferSize = dmaTXSize;
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	741a      	strb	r2, [r3, #16]
	pxUARTRingBuffer->xTXBuffer.uHeadIndex = 0;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2200      	movs	r2, #0
 80005ee:	745a      	strb	r2, [r3, #17]
	pxUARTRingBuffer->xTXBuffer.uTailIndex = 0;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2200      	movs	r2, #0
 80005f4:	749a      	strb	r2, [r3, #18]
	pxUARTRingBuffer->xTXBuffer.uRollOver = 0;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2200      	movs	r2, #0
 80005fa:	74da      	strb	r2, [r3, #19]

	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f042 0210 	orr.w	r2, r2, #16
 800060a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxUARTRingBuffer->xRXBuffer.puDMABuffer, pxUARTRingBuffer->xRXBuffer.uDMABufferSize);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6859      	ldr	r1, [r3, #4]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	7a1b      	ldrb	r3, [r3, #8]
 8000614:	b29b      	uxth	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	68b8      	ldr	r0, [r7, #8]
 800061a:	f003 fb33 	bl	8003c84 <HAL_UART_Receive_DMA>

  // Transfer DMA Buffer

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <USER_UART2_IDLECallback>:


void USER_UART2_IDLECallback(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
	// Tail catch up to head
	xUART2RingBuffer.xRXBuffer.uHeadIndex = xUART2RingBuffer.xRXBuffer.uDMABufferSize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800062e:	4b85      	ldr	r3, [pc, #532]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000630:	7a1a      	ldrb	r2, [r3, #8]
 8000632:	4b85      	ldr	r3, [pc, #532]	; (8000848 <USER_UART2_IDLECallback+0x220>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b81      	ldr	r3, [pc, #516]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000640:	725a      	strb	r2, [r3, #9]

	// Task notification...
	uint16_t uTailIndex = xUART2RingBuffer.xRXBuffer.uTailIndex;
 8000642:	4b80      	ldr	r3, [pc, #512]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000644:	7a9b      	ldrb	r3, [r3, #10]
 8000646:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t uHeadIndex = xUART2RingBuffer.xRXBuffer.uHeadIndex;
 8000648:	4b7e      	ldr	r3, [pc, #504]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800064a:	7a5b      	ldrb	r3, [r3, #9]
 800064c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t uParseIndex = uTailIndex;
 800064e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000650:	85bb      	strh	r3, [r7, #44]	; 0x2c

	// Complete and half complete...
	uint8_t uRollOver = xUART2RingBuffer.xRXBuffer.uRollOver;
 8000652:	4b7c      	ldr	r3, [pc, #496]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000654:	7adb      	ldrb	r3, [r3, #11]
 8000656:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if (uRollOver == 0)
 800065a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800065e:	2b00      	cmp	r3, #0
 8000660:	d133      	bne.n	80006ca <USER_UART2_IDLECallback+0xa2>
	{
		while (uParseIndex != uHeadIndex)
 8000662:	e02d      	b.n	80006c0 <USER_UART2_IDLECallback+0x98>
		{
			if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 8000664:	4b77      	ldr	r3, [pc, #476]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b0d      	cmp	r3, #13
 8000670:	d123      	bne.n	80006ba <USER_UART2_IDLECallback+0x92>
			{
				if (uParseIndex - uTailIndex > 0)
 8000672:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd0d      	ble.n	8000698 <USER_UART2_IDLECallback+0x70>
				{
					char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 800067c:	4b71      	ldr	r3, [pc, #452]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000682:	4413      	add	r3, r2
 8000684:	607b      	str	r3, [r7, #4]
					size_t candidateLength = uParseIndex - uTailIndex;
 8000686:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	603b      	str	r3, [r7, #0]

					vHandleCandidateCommand(candidate, candidateLength);
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f931 	bl	80008f8 <vHandleCandidateCommand>
 8000696:	e002      	b.n	800069e <USER_UART2_IDLECallback+0x76>
				}
				else
				{
					printf("NO COMMAND RECEIVED (JUST CR)z\r\n");
 8000698:	486c      	ldr	r0, [pc, #432]	; (800084c <USER_UART2_IDLECallback+0x224>)
 800069a:	f007 f975 	bl	8007988 <puts>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 800069e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a68      	ldr	r2, [pc, #416]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80006a4:	7a12      	ldrb	r2, [r2, #8]
 80006a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80006aa:	fb02 f201 	mul.w	r2, r2, r1
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
				xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 80006b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b63      	ldr	r3, [pc, #396]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80006b8:	729a      	strb	r2, [r3, #10]
			}

			uParseIndex++;
 80006ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006bc:	3301      	adds	r3, #1
 80006be:	85bb      	strh	r3, [r7, #44]	; 0x2c
		while (uParseIndex != uHeadIndex)
 80006c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d1cd      	bne.n	8000664 <USER_UART2_IDLECallback+0x3c>
 80006c8:	e0af      	b.n	800082a <USER_UART2_IDLECallback+0x202>
		}
	}
	else if (uRollOver == 1)
 80006ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 80a1 	bne.w	8000816 <USER_UART2_IDLECallback+0x1ee>
	{
		if (uParseIndex > uHeadIndex)
 80006d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006d8:	429a      	cmp	r2, r3
 80006da:	f240 8091 	bls.w	8000800 <USER_UART2_IDLECallback+0x1d8>
		{
			while (uParseIndex < xUART2RingBuffer.xRXBuffer.uDMABufferSize)
 80006de:	e02d      	b.n	800073c <USER_UART2_IDLECallback+0x114>
			{
				if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 80006e0:	4b58      	ldr	r3, [pc, #352]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b0d      	cmp	r3, #13
 80006ec:	d123      	bne.n	8000736 <USER_UART2_IDLECallback+0x10e>
				{
					// [!] size arguement of strncmp due to circular

					if (uParseIndex - uTailIndex > 0)
 80006ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80006f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd0d      	ble.n	8000714 <USER_UART2_IDLECallback+0xec>
					{
						char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006fe:	4413      	add	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
						size_t candidateLength = uParseIndex - uTailIndex;
 8000702:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	60bb      	str	r3, [r7, #8]
						vHandleCandidateCommand(candidate, candidateLength);
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 f8f3 	bl	80008f8 <vHandleCandidateCommand>
 8000712:	e002      	b.n	800071a <USER_UART2_IDLECallback+0xf2>
					}
					else
					{
						printf("NO COMMAND RECEIVED (JUST CR)pr\r\n");
 8000714:	484e      	ldr	r0, [pc, #312]	; (8000850 <USER_UART2_IDLECallback+0x228>)
 8000716:	f007 f937 	bl	8007988 <puts>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 800071a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800071c:	3301      	adds	r3, #1
 800071e:	4a49      	ldr	r2, [pc, #292]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000720:	7a12      	ldrb	r2, [r2, #8]
 8000722:	fb93 f1f2 	sdiv	r1, r3, r2
 8000726:	fb02 f201 	mul.w	r2, r2, r1
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	85fb      	strh	r3, [r7, #46]	; 0x2e
					xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 800072e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000734:	729a      	strb	r2, [r3, #10]
				}
				uParseIndex++;
 8000736:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000738:	3301      	adds	r3, #1
 800073a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			while (uParseIndex < xUART2RingBuffer.xRXBuffer.uDMABufferSize)
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800073e:	7a1b      	ldrb	r3, [r3, #8]
 8000740:	b29b      	uxth	r3, r3
 8000742:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000744:	429a      	cmp	r2, r3
 8000746:	d3cb      	bcc.n	80006e0 <USER_UART2_IDLECallback+0xb8>
			}

			uParseIndex = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			xUART2RingBuffer.xRXBuffer.uRollOver = 0;
 800074c:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800074e:	2200      	movs	r2, #0
 8000750:	72da      	strb	r2, [r3, #11]

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 8000752:	e050      	b.n	80007f6 <USER_UART2_IDLECallback+0x1ce>
			{
				if (xUART2RingBuffer.xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 8000754:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d146      	bne.n	80007f0 <USER_UART2_IDLECallback+0x1c8>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 8000762:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000764:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000766:	429a      	cmp	r2, r3
 8000768:	d91e      	bls.n	80007a8 <USER_UART2_IDLECallback+0x180>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 800076a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800076c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800076e:	429a      	cmp	r2, r3
 8000770:	d016      	beq.n	80007a0 <USER_UART2_IDLECallback+0x178>
						{
							char *candidateFirst = (char *)(xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex);
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000778:	4413      	add	r3, r2
 800077a:	61fb      	str	r3, [r7, #28]
							size_t candidateFirstLength = xUART2RingBuffer.xRXBuffer.uDMABufferSize - uTailIndex;
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	61bb      	str	r3, [r7, #24]
							char *candidateSecond = (char *)(xUART2RingBuffer.xRXBuffer.puDMABuffer);
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	617b      	str	r3, [r7, #20]
							size_t candidateSecondLength = uParseIndex;
 800078e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000790:	613b      	str	r3, [r7, #16]

							vHandleCandidateCommandSplit(candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	69b9      	ldr	r1, [r7, #24]
 8000798:	69f8      	ldr	r0, [r7, #28]
 800079a:	f000 f8db 	bl	8000954 <vHandleCandidateCommandSplit>
 800079e:	e019      	b.n	80007d4 <USER_UART2_IDLECallback+0x1ac>
						}
						else
						{
							printf("NO COMMAND RECEIVED (JUST CR)in\r\n");
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <USER_UART2_IDLECallback+0x22c>)
 80007a2:	f007 f8f1 	bl	8007988 <puts>
 80007a6:	e015      	b.n	80007d4 <USER_UART2_IDLECallback+0x1ac>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 80007a8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dd0d      	ble.n	80007ce <USER_UART2_IDLECallback+0x1a6>
						{
							char *candidate = (char *)xUART2RingBuffer.xRXBuffer.puDMABuffer + uTailIndex;
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007b8:	4413      	add	r3, r2
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateLength = uParseIndex - uTailIndex;
 80007bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	623b      	str	r3, [r7, #32]

							vHandleCandidateCommand(candidate, candidateLength);
 80007c4:	6a39      	ldr	r1, [r7, #32]
 80007c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007c8:	f000 f896 	bl	80008f8 <vHandleCandidateCommand>
 80007cc:	e002      	b.n	80007d4 <USER_UART2_IDLECallback+0x1ac>
						}
						else
						{
							printf("NO COMMAND RECEIVED (JUST CR)rf\r\n");
 80007ce:	4822      	ldr	r0, [pc, #136]	; (8000858 <USER_UART2_IDLECallback+0x230>)
 80007d0:	f007 f8da 	bl	8007988 <puts>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % xUART2RingBuffer.xRXBuffer.uDMABufferSize;
 80007d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80007da:	7a12      	ldrb	r2, [r2, #8]
 80007dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80007e0:	fb02 f201 	mul.w	r2, r2, r1
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
					xUART2RingBuffer.xRXBuffer.uTailIndex = uTailIndex;
 80007e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 80007ee:	729a      	strb	r2, [r3, #10]
				}

				uParseIndex++;
 80007f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007f2:	3301      	adds	r3, #1
 80007f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
			while (uParseIndex != uHeadIndex)
 80007f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80007f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d1aa      	bne.n	8000754 <USER_UART2_IDLECallback+0x12c>
 80007fe:	e014      	b.n	800082a <USER_UART2_IDLECallback+0x202>
			}
		}
		else
		{
			printf("TOO MUCH DATA SENT AT ONCE BEFORE IT CAN BE PROCESSED. TRY INCREASING BUFFER SIZE >1\r\n");
 8000800:	4816      	ldr	r0, [pc, #88]	; (800085c <USER_UART2_IDLECallback+0x234>)
 8000802:	f007 f8c1 	bl	8007988 <puts>
			xUART2RingBuffer.xRXBuffer.uTailIndex = uHeadIndex;
 8000806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800080c:	729a      	strb	r2, [r3, #10]
			xUART2RingBuffer.xRXBuffer.uRollOver = 0;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000810:	2200      	movs	r2, #0
 8000812:	72da      	strb	r2, [r3, #11]
 8000814:	e009      	b.n	800082a <USER_UART2_IDLECallback+0x202>
		}
	}
	else
	{
		printf("TOO MUCH DATA SENT AT ONCE BEFORE IT CAN BE PROCESSED. TRY INCREASING BUFFER SIZE >2\r\n");
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <USER_UART2_IDLECallback+0x238>)
 8000818:	f007 f8b6 	bl	8007988 <puts>
		xUART2RingBuffer.xRXBuffer.uTailIndex = uHeadIndex;
 800081c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000822:	729a      	strb	r2, [r3, #10]
		xUART2RingBuffer.xRXBuffer.uRollOver = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000826:	2200      	movs	r2, #0
 8000828:	72da      	strb	r2, [r3, #11]
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", xUART2RingBuffer.xRXBuffer.uTailIndex, xUART2RingBuffer.xRXBuffer.uHeadIndex);
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 800082c:	7a9b      	ldrb	r3, [r3, #10]
 800082e:	4619      	mov	r1, r3
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <USER_UART2_IDLECallback+0x21c>)
 8000832:	7a5b      	ldrb	r3, [r3, #9]
 8000834:	461a      	mov	r2, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <USER_UART2_IDLECallback+0x23c>)
 8000838:	f007 f820 	bl	800787c <iprintf>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20001964 	.word	0x20001964
 8000848:	200019f8 	.word	0x200019f8
 800084c:	0800886c 	.word	0x0800886c
 8000850:	0800888c 	.word	0x0800888c
 8000854:	080088b0 	.word	0x080088b0
 8000858:	080088d4 	.word	0x080088d4
 800085c:	080088f8 	.word	0x080088f8
 8000860:	08008950 	.word	0x08008950
 8000864:	080089a8 	.word	0x080089a8

08000868 <bCommandMatch>:



uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fcab 	bl	80001d0 <strlen>
 800087a:	4602      	mov	r2, r0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4293      	cmp	r3, r2
 8000880:	d109      	bne.n	8000896 <bCommandMatch+0x2e>
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f007 f886 	bl	8007998 <strncmp>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <bCommandMatch+0x2e>
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <bCommandMatch+0x30>
 8000896:	2300      	movs	r3, #0
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fc8d 	bl	80001d0 <strlen>
 80008b6:	4601      	mov	r1, r0
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 80008be:	4299      	cmp	r1, r3
 80008c0:	d114      	bne.n	80008ec <bCommandSplitMatch+0x4a>
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f007 f866 	bl	8007998 <strncmp>
 80008cc:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10c      	bne.n	80008ec <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	6839      	ldr	r1, [r7, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 f85b 	bl	8007998 <strncmp>
 80008e2:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <bCommandSplitMatch+0x4a>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <bCommandSplitMatch+0x4c>
 80008ec:	2300      	movs	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <vHandleCandidateCommand>:


void vHandleCandidateCommand(const char *candidate, size_t candidateLength)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	if (bCommandMatch("ON", candidate, candidateLength))
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <vHandleCandidateCommand+0x48>)
 8000908:	f7ff ffae 	bl	8000868 <bCommandMatch>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d003      	beq.n	800091a <vHandleCandidateCommand+0x22>
	{
		printf("SET LIGHT\r\n");
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <vHandleCandidateCommand+0x4c>)
 8000914:	f007 f838 	bl	8007988 <puts>
	}
	else
	{
		printf("INVALID COMMAND RECEIVED\r\n");
	}
}
 8000918:	e00e      	b.n	8000938 <vHandleCandidateCommand+0x40>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <vHandleCandidateCommand+0x50>)
 8000920:	f7ff ffa2 	bl	8000868 <bCommandMatch>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <vHandleCandidateCommand+0x3a>
		printf("UNSET LIGHT\r\n");
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <vHandleCandidateCommand+0x54>)
 800092c:	f007 f82c 	bl	8007988 <puts>
}
 8000930:	e002      	b.n	8000938 <vHandleCandidateCommand+0x40>
		printf("INVALID COMMAND RECEIVED\r\n");
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <vHandleCandidateCommand+0x58>)
 8000934:	f007 f828 	bl	8007988 <puts>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	080089c8 	.word	0x080089c8
 8000944:	080089cc 	.word	0x080089cc
 8000948:	080089d8 	.word	0x080089d8
 800094c:	080089dc 	.word	0x080089dc
 8000950:	080089ec 	.word	0x080089ec

08000954 <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af02      	add	r7, sp, #8
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	68f9      	ldr	r1, [r7, #12]
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <vHandleCandidateCommandSplit+0x58>)
 800096e:	f7ff ff98 	bl	80008a2 <bCommandSplitMatch>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <vHandleCandidateCommandSplit+0x5c>)
 800097a:	f007 f805 	bl	8007988 <puts>
	}
	else
	{
		printf("INVALID COMMAND RECEIVED\r\n");
	}
}
 800097e:	e011      	b.n	80009a4 <vHandleCandidateCommandSplit+0x50>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	68f9      	ldr	r1, [r7, #12]
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <vHandleCandidateCommandSplit+0x60>)
 800098c:	f7ff ff89 	bl	80008a2 <bCommandSplitMatch>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <vHandleCandidateCommandSplit+0x64>)
 8000998:	f006 fff6 	bl	8007988 <puts>
}
 800099c:	e002      	b.n	80009a4 <vHandleCandidateCommandSplit+0x50>
		printf("INVALID COMMAND RECEIVED\r\n");
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <vHandleCandidateCommandSplit+0x68>)
 80009a0:	f006 fff2 	bl	8007988 <puts>
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	080089c8 	.word	0x080089c8
 80009b0:	080089cc 	.word	0x080089cc
 80009b4:	080089d8 	.word	0x080089d8
 80009b8:	080089dc 	.word	0x080089dc
 80009bc:	080089ec 	.word	0x080089ec

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fc93 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f82d 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f929 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d2:	f000 f901 	bl	8000bd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009d6:	f000 f8cf 	bl	8000b78 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009da:	f000 f89d 	bl	8000b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vInitUARTRingBuffer(&xUART2RingBuffer,
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <main+0x4c>)
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <main+0x50>)
 80009ea:	490a      	ldr	r1, [pc, #40]	; (8000a14 <main+0x54>)
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <main+0x58>)
 80009ee:	f7ff fddb 	bl	80005a8 <vInitUARTRingBuffer>
  //HAL_UART_Receive_DMA(&huart2, rx2Buffer, sizeof(rx2Buffer));

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009f2:	f004 f9b5 	bl	8004d60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <main+0x5c>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <main+0x60>)
 80009fc:	f004 f9fa 	bl	8004df4 <osThreadNew>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <main+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a06:	f004 f9cf 	bl	8004da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x4a>
 8000a0c:	20001b10 	.word	0x20001b10
 8000a10:	20001978 	.word	0x20001978
 8000a14:	20001b90 	.word	0x20001b90
 8000a18:	20001964 	.word	0x20001964
 8000a1c:	08008a54 	.word	0x08008a54
 8000a20:	08000d49 	.word	0x08000d49
 8000a24:	20001a40 	.word	0x20001a40

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0b8      	sub	sp, #224	; 0xe0
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a32:	2244      	movs	r2, #68	; 0x44
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 ff18 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2288      	movs	r2, #136	; 0x88
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f006 ff0a 	bl	800786c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a66:	2310      	movs	r3, #16
 8000a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7e:	230a      	movs	r3, #10
 8000a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f9e6 	bl	8001e6c <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aa6:	f000 f975 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000acc:	2104      	movs	r1, #4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fdb2 	bl	8002638 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ada:	f000 f95b 	bl	8000d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 ffdb 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000af8:	f000 f94c 	bl	8000d94 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b00:	f001 f95e 	bl	8001dc0 <HAL_PWREx_ControlVoltageScaling>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b0a:	f000 f943 	bl	8000d94 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	37e0      	adds	r7, #224	; 0xe0
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART1_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b5c:	f002 ff32 	bl	80039c4 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f915 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20001a8c 	.word	0x20001a8c
 8000b74:	40013800 	.word	0x40013800

08000b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_USART2_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x58>)
 8000bbc:	f002 ff02 	bl	80039c4 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8e5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20001b90 	.word	0x20001b90
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_DMA_Init+0x48>)
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <MX_DMA_Init+0x48>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_DMA_Init+0x48>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f000 fc70 	bl	80014e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c00:	2010      	movs	r0, #16
 8000c02:	f000 fc89 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2105      	movs	r1, #5
 8000c0a:	2011      	movs	r0, #17
 8000c0c:	f000 fc68 	bl	80014e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c10:	2011      	movs	r0, #17
 8000c12:	f000 fc81 	bl	8001518 <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_GPIO_Init+0xa4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_GPIO_Init+0xa8>)
 8000ca0:	f001 f868 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_GPIO_Init+0xa8>)
 8000cbc:	f000 feb0 	bl	8001a20 <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <__io_putchar+0x20>)
 8000ce2:	f002 febd 	bl	8003a60 <HAL_UART_Transmit>
	return ch;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20001b90 	.word	0x20001b90

08000cf4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_UART_RxCpltCallback+0x2c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d106      	bne.n	8000d12 <HAL_UART_RxCpltCallback+0x1e>
	{
		xUART2RingBuffer.xRXBuffer.uRollOver++;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_UART_RxCpltCallback+0x30>)
 8000d06:	7adb      	ldrb	r3, [r3, #11]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_UART_RxCpltCallback+0x30>)
 8000d10:	72da      	strb	r2, [r3, #11]
	}
	printf("COMPLETE RECEIVE\r\n");
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_RxCpltCallback+0x34>)
 8000d14:	f006 fe38 	bl	8007988 <puts>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20001b90 	.word	0x20001b90
 8000d24:	20001964 	.word	0x20001964
 8000d28:	08008a14 	.word	0x08008a14

08000d2c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	printf(" complete hi\r\n");
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <HAL_UART_TxCpltCallback+0x18>)
 8000d36:	f006 fe27 	bl	8007988 <puts>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08008a28 	.word	0x08008a28

08000d48 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

  	//printf("Task\r\n");
  	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

  	char *a = "hi";
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <StartUARTTask+0x20>)
 8000d52:	60fb      	str	r3, [r7, #12]
  	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)a, sizeof(a));
 8000d54:	2204      	movs	r2, #4
 8000d56:	68f9      	ldr	r1, [r7, #12]
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <StartUARTTask+0x24>)
 8000d5a:	f002 ff15 	bl	8003b88 <HAL_UART_Transmit_DMA>
    osDelay(200);
 8000d5e:	20c8      	movs	r0, #200	; 0xc8
 8000d60:	f004 f8da 	bl	8004f18 <osDelay>
  {
 8000d64:	e7f4      	b.n	8000d50 <StartUARTTask+0x8>
 8000d66:	bf00      	nop
 8000d68:	08008a38 	.word	0x08008a38
 8000d6c:	20001b90 	.word	0x20001b90

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d82:	f000 fad5 	bl	8001330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40001000 	.word	0x40001000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_MspInit+0x4c>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	; 0x60
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_MspInit+0x4c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210f      	movs	r1, #15
 8000dda:	f06f 0001 	mvn.w	r0, #1
 8000dde:	f000 fb7f 	bl	80014e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a61      	ldr	r2, [pc, #388]	; (8000f94 <HAL_UART_MspInit+0x1a4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d132      	bne.n	8000e78 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e12:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	4a60      	ldr	r2, [pc, #384]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1e:	4b5e      	ldr	r3, [pc, #376]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a5a      	ldr	r2, [pc, #360]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e54:	2307      	movs	r3, #7
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fddd 	bl	8001a20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2105      	movs	r1, #5
 8000e6a:	2025      	movs	r0, #37	; 0x25
 8000e6c:	f000 fb38 	bl	80014e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 fb51 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e76:	e088      	b.n	8000f8a <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a47      	ldr	r2, [pc, #284]	; (8000f9c <HAL_UART_MspInit+0x1ac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	f040 8083 	bne.w	8000f8a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	4a43      	ldr	r2, [pc, #268]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	4a3d      	ldr	r2, [pc, #244]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_UART_MspInit+0x1a8>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f000 fda5 	bl	8001a20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <HAL_UART_MspInit+0x1b4>)
 8000eda:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000f02:	2220      	movs	r2, #32
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f0c:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000f0e:	f000 fb11 	bl	8001534 <HAL_DMA_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000f18:	f7ff ff3c 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000f20:	671a      	str	r2, [r3, #112]	; 0x70
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_UART_MspInit+0x1b0>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_UART_MspInit+0x1bc>)
 8000f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f36:	2210      	movs	r2, #16
 8000f38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f60:	f000 fae8 	bl	8001534 <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000f6a:	f7ff ff13 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f72:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_UART_MspInit+0x1b8>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f000 faae 	bl	80014e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f84:	2026      	movs	r0, #38	; 0x26
 8000f86:	f000 fac7 	bl	8001518 <HAL_NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	200019f8 	.word	0x200019f8
 8000fa4:	4002006c 	.word	0x4002006c
 8000fa8:	20001a44 	.word	0x20001a44
 8000fac:	40020080 	.word	0x40020080

08000fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f000 fa8b 	bl	80014e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f000 faa4 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_InitTick+0x9c>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_InitTick+0x9c>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_InitTick+0x9c>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fcc6 	bl	8002984 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ff8:	f001 fc98 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8000ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_InitTick+0xa0>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	3b01      	subs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_InitTick+0xa4>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_InitTick+0xa8>)
 8001010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_InitTick+0xa4>)
 8001014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001018:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_InitTick+0xa4>)
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_InitTick+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_InitTick+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_InitTick+0xa4>)
 800102e:	f002 f9f7 	bl	8003420 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_InitTick+0xa4>)
 800103a:	f002 fa53 	bl	80034e4 <HAL_TIM_Base_Start_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	431bde83 	.word	0x431bde83
 8001054:	20001c14 	.word	0x20001c14
 8001058:	40001000 	.word	0x40001000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA1_Channel6_IRQHandler+0x10>)
 800108e:	f000 fbe8 	bl	8001862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200019f8 	.word	0x200019f8

0800109c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Channel7_IRQHandler+0x10>)
 80010a2:	f000 fbde 	bl	8001862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20001a44 	.word	0x20001a44

080010b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <USART1_IRQHandler+0x10>)
 80010b6:	f002 fe29 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001a8c 	.word	0x20001a8c

080010c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <USART2_IRQHandler+0x14>)
 80010ca:	f002 fe1f 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART2_IRQHandler();
 80010ce:	f7ff fa53 	bl	8000578 <USER_UART2_IRQHandler>
	/* USER CODE END USART2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20001b90 	.word	0x20001b90

080010dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM6_DAC_IRQHandler+0x10>)
 80010e2:	f002 fa6f 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001c14 	.word	0x20001c14

080010f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001102:	f3af 8000 	nop.w
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
	}

return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fdc3 	bl	8000cd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x12>
	}
	return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:

int _close(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_isatty>:

int _isatty(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f006 fafe 	bl	80077fc <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20018000 	.word	0x20018000
 800122c:	00000400 	.word	0x00000400
 8001230:	20000090 	.word	0x20000090
 8001234:	20001cb8 	.word	0x20001cb8

08001238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SystemInit+0x5c>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <SystemInit+0x5c>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <SystemInit+0x60>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <SystemInit+0x60>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <SystemInit+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <SystemInit+0x60>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <SystemInit+0x60>)
 8001264:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001268:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800126c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <SystemInit+0x60>)
 8001270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001274:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <SystemInit+0x60>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <SystemInit+0x60>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SystemInit+0x60>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	40021000 	.word	0x40021000

0800129c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a0:	f7ff ffca 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
	ldr	r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LoopForever+0x16>)
	cmp	r2, r3
 80012c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f006 fa9d 	bl	8007808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ce:	f7ff fb77 	bl	80009c0 <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012d8:	08008b68 	.word	0x08008b68
	ldr	r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012e0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80012e4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80012e8:	20001cb4 	.word	0x20001cb4

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_Init+0x3c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_Init+0x3c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f8df 	bl	80014ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fe4f 	bl	8000fb0 <HAL_InitTick>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	e001      	b.n	8001322 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800131e:	f7ff fd3f 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001322:	79fb      	ldrb	r3, [r7, #7]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20001c60 	.word	0x20001c60

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20001c60 	.word	0x20001c60

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff4c 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f2:	f7ff ff61 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 80014f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff ffb1 	bl	8001464 <NVIC_EncodePriority>
 8001502:	4602      	mov	r2, r0
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff80 	bl	8001410 <__NVIC_SetPriority>
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff54 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e098      	b.n	8001678 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_DMA_Init+0x150>)
 800154e:	429a      	cmp	r2, r3
 8001550:	d80f      	bhi.n	8001572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_DMA_Init+0x154>)
 800155a:	4413      	add	r3, r2
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <HAL_DMA_Init+0x158>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_DMA_Init+0x15c>)
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
 8001570:	e00e      	b.n	8001590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	4b46      	ldr	r3, [pc, #280]	; (8001694 <HAL_DMA_Init+0x160>)
 800157a:	4413      	add	r3, r2
 800157c:	4a43      	ldr	r2, [pc, #268]	; (800168c <HAL_DMA_Init+0x158>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_DMA_Init+0x164>)
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ea:	d039      	beq.n	8001660 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_DMA_Init+0x15c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11a      	bne.n	800162c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_DMA_Init+0x168>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 031c 	and.w	r3, r3, #28
 8001602:	210f      	movs	r1, #15
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	4924      	ldr	r1, [pc, #144]	; (800169c <HAL_DMA_Init+0x168>)
 800160c:	4013      	ands	r3, r2
 800160e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_DMA_Init+0x168>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 031c 	and.w	r3, r3, #28
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	491d      	ldr	r1, [pc, #116]	; (800169c <HAL_DMA_Init+0x168>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
 800162a:	e019      	b.n	8001660 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_DMA_Init+0x16c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 031c 	and.w	r3, r3, #28
 8001638:	210f      	movs	r1, #15
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	4917      	ldr	r1, [pc, #92]	; (80016a0 <HAL_DMA_Init+0x16c>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_DMA_Init+0x16c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 031c 	and.w	r3, r3, #28
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	4911      	ldr	r1, [pc, #68]	; (80016a0 <HAL_DMA_Init+0x16c>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40020407 	.word	0x40020407
 8001688:	bffdfff8 	.word	0xbffdfff8
 800168c:	cccccccd 	.word	0xcccccccd
 8001690:	40020000 	.word	0x40020000
 8001694:	bffdfbf8 	.word	0xbffdfbf8
 8001698:	40020400 	.word	0x40020400
 800169c:	400200a8 	.word	0x400200a8
 80016a0:	400204a8 	.word	0x400204a8

080016a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Start_IT+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e04b      	b.n	800175c <HAL_DMA_Start_IT+0xb8>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d13a      	bne.n	800174e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f95f 	bl	80019c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 020e 	orr.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e00f      	b.n	800173c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 020a 	orr.w	r2, r2, #10
 800173a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e005      	b.n	800175a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d008      	beq.n	800178e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2204      	movs	r2, #4
 8001780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e022      	b.n	80017d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 020e 	bic.w	r2, r2, #14
 800179c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f003 021c 	and.w	r2, r3, #28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2101      	movs	r1, #1
 80017bc:	fa01 f202 	lsl.w	r2, r1, r2
 80017c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d005      	beq.n	8001804 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	e029      	b.n	8001858 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f003 021c 	and.w	r2, r3, #28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
    }
  }
  return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f003 031c 	and.w	r3, r3, #28
 8001882:	2204      	movs	r2, #4
 8001884:	409a      	lsls	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d026      	beq.n	80018dc <HAL_DMA_IRQHandler+0x7a>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d021      	beq.n	80018dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0204 	bic.w	r2, r2, #4
 80018b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 021c 	and.w	r2, r3, #28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2104      	movs	r1, #4
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d071      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80018da:	e06c      	b.n	80019b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f003 031c 	and.w	r3, r3, #28
 80018e4:	2202      	movs	r2, #2
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02e      	beq.n	800194e <HAL_DMA_IRQHandler+0xec>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d029      	beq.n	800194e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020a 	bic.w	r2, r2, #10
 8001916:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021c 	and.w	r2, r3, #28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2102      	movs	r1, #2
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d038      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800194c:	e033      	b.n	80019b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 031c 	and.w	r3, r3, #28
 8001956:	2208      	movs	r2, #8
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d02a      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x156>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d025      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 020e 	bic.w	r2, r2, #14
 800197a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f003 021c 	and.w	r2, r3, #28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
}
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f003 021c 	and.w	r2, r3, #28
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d108      	bne.n	8001a04 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a02:	e007      	b.n	8001a14 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e17f      	b.n	8001d30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8171 	beq.w	8001d2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00b      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2b11      	cmp	r3, #17
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d118      	bne.n	8001b08 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001adc:	2201      	movs	r2, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	f003 0201 	and.w	r2, r3, #1
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x128>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	6939      	ldr	r1, [r7, #16]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ac 	beq.w	8001d2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bea:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x242>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x23e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x23a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x236>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x232>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x22e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x22a>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c62:	2300      	movs	r3, #0
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c74:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae78 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000c00 	.word	0x48000c00
 8001d64:	48001000 	.word	0x48001000
 8001d68:	48001400 	.word	0x48001400
 8001d6c:	48001800 	.word	0x48001800
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_PWREx_GetVoltageRange+0x18>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dce:	d130      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ddc:	d038      	beq.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2232      	movs	r2, #50	; 0x32
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9b      	lsrs	r3, r3, #18
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e04:	e002      	b.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	d102      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f2      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2c:	d110      	bne.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e00f      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3e:	d007      	beq.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000
 8001e64:	20000000 	.word	0x20000000
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e3d4      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7e:	4ba1      	ldr	r3, [pc, #644]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e88:	4b9e      	ldr	r3, [pc, #632]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80e4 	beq.w	8002068 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4a>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	f040 808b 	bne.w	8001fc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 8087 	bne.w	8001fc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb6:	4b93      	ldr	r3, [pc, #588]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e3ac      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x7c>
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCC_OscConfig+0x88>
 8001ee8:	4b86      	ldr	r3, [pc, #536]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d223      	bcs.n	8001f40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fd73 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e38d      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0c:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a7c      	ldr	r2, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4977      	ldr	r1, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	4972      	ldr	r1, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
 8001f3e:	e025      	b.n	8001f8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6f      	ldr	r2, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	496a      	ldr	r1, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5e:	4b69      	ldr	r3, [pc, #420]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4965      	ldr	r1, [pc, #404]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fd33 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e34d      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8c:	f000 fc36 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	495a      	ldr	r1, [pc, #360]	; (8002108 <HAL_RCC_OscConfig+0x29c>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_OscConfig+0x2a0>)
 8001faa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fac:	4b58      	ldr	r3, [pc, #352]	; (8002110 <HAL_RCC_OscConfig+0x2a4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fffd 	bl	8000fb0 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d052      	beq.n	8002066 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	e331      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d032      	beq.n	8002032 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f9be 	bl	8001358 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f9ba 	bl	8001358 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e31a      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff2:	4b44      	ldr	r3, [pc, #272]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a40      	ldr	r2, [pc, #256]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	493b      	ldr	r1, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e01a      	b.n	8002068 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002032:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800203e:	f7ff f98b 	bl	8001358 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002046:	f7ff f987 	bl	8001358 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e2e7      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x1da>
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002066:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d074      	beq.n	800215e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b08      	cmp	r3, #8
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x21a>
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d10e      	bne.n	800209e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d064      	beq.n	800215c <HAL_RCC_OscConfig+0x2f0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d160      	bne.n	800215c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e2c4      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x24a>
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e01d      	b.n	80020f2 <HAL_RCC_OscConfig+0x286>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x26e>
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x286>
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x298>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01c      	beq.n	8002134 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff f92d 	bl	8001358 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002100:	e011      	b.n	8002126 <HAL_RCC_OscConfig+0x2ba>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	08008a78 	.word	0x08008a78
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f920 	bl	8001358 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e280      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4baf      	ldr	r3, [pc, #700]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x2a8>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f910 	bl	8001358 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f90c 	bl	8001358 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e26c      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214e:	4ba5      	ldr	r3, [pc, #660]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x2d0>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d060      	beq.n	800222c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x310>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d119      	bne.n	80021aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d116      	bne.n	80021aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x328>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e249      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b93      	ldr	r3, [pc, #588]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4990      	ldr	r1, [pc, #576]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a8:	e040      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d023      	beq.n	80021fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b2:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a8b      	ldr	r2, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f8cb 	bl	8001358 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f8c7 	bl	8001358 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e227      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d8:	4b82      	ldr	r3, [pc, #520]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b7f      	ldr	r3, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	497c      	ldr	r1, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
 80021f8:	e018      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff f8a7 	bl	8001358 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff f8a3 	bl	8001358 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e203      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d03c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	4a67      	ldr	r2, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f882 	bl	8001358 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff f87e 	bl	8001358 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1de      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800226a:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800226c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCC_OscConfig+0x3ec>
 8002278:	e01b      	b.n	80022b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7ff f865 	bl	8001358 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff f861 	bl	8001358 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1c1      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ef      	bne.n	8002292 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80a6 	beq.w	800240c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c4:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b44      	ldr	r3, [pc, #272]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a43      	ldr	r2, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_OscConfig+0x57c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d118      	bne.n	800232a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x57c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_RCC_OscConfig+0x57c>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002304:	f7ff f828 	bl	8001358 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7ff f824 	bl	8001358 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e184      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x57c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <HAL_RCC_OscConfig+0x4d8>
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002342:	e024      	b.n	800238e <HAL_RCC_OscConfig+0x522>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d110      	bne.n	800236e <HAL_RCC_OscConfig+0x502>
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236c:	e00f      	b.n	800238e <HAL_RCC_OscConfig+0x522>
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe ffdf 	bl	8001358 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe ffdb 	bl	8001358 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e139      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x578>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ed      	beq.n	800239e <HAL_RCC_OscConfig+0x532>
 80023c2:	e01a      	b.n	80023fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7fe ffc8 	bl	8001358 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ca:	e00f      	b.n	80023ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe ffc4 	bl	8001358 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d906      	bls.n	80023ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e122      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ec:	4b90      	ldr	r3, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e8      	bne.n	80023cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8108 	beq.w	8002626 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	2b02      	cmp	r3, #2
 800241c:	f040 80d0 	bne.w	80025c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002420:	4b83      	ldr	r3, [pc, #524]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	429a      	cmp	r2, r3
 8002432:	d130      	bne.n	8002496 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d127      	bne.n	8002496 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d11f      	bne.n	8002496 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002460:	2a07      	cmp	r2, #7
 8002462:	bf14      	ite	ne
 8002464:	2201      	movne	r2, #1
 8002466:	2200      	moveq	r2, #0
 8002468:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246a:	4293      	cmp	r3, r2
 800246c:	d113      	bne.n	8002496 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d109      	bne.n	8002496 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d06e      	beq.n	8002574 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d069      	beq.n	8002570 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b7      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c4:	f7fe ff48 	bl	8001358 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe ff44 	bl	8001358 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0a4      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ea:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x7c8>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024fa:	3a01      	subs	r2, #1
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002504:	0212      	lsls	r2, r2, #8
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800250c:	0852      	lsrs	r2, r2, #1
 800250e:	3a01      	subs	r2, #1
 8002510:	0552      	lsls	r2, r2, #21
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002518:	0852      	lsrs	r2, r2, #1
 800251a:	3a01      	subs	r2, #1
 800251c:	0652      	lsls	r2, r2, #25
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002524:	0912      	lsrs	r2, r2, #4
 8002526:	0452      	lsls	r2, r2, #17
 8002528:	430a      	orrs	r2, r1
 800252a:	4941      	ldr	r1, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3e      	ldr	r2, [pc, #248]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002546:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002548:	f7fe ff06 	bl	8001358 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff02 	bl	8001358 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e062      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256e:	e05a      	b.n	8002626 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e059      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d152      	bne.n	8002626 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002596:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002598:	f7fe fede 	bl	8001358 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe feda 	bl	8001358 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e03a      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x734>
 80025be:	e032      	b.n	8002626 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d02d      	beq.n	8002622 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025e4:	f023 0303 	bic.w	r3, r3, #3
 80025e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 80025f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fead 	bl	8001358 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fea9 	bl	8001358 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e009      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_OscConfig+0x7c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x796>
 8002620:	e001      	b.n	8002626 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	f99d808c 	.word	0xf99d808c

08002638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0c8      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4961      	ldr	r1, [pc, #388]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b0      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d04c      	beq.n	8002722 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d121      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e09e      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a8:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d115      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e092      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e086      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e07e      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 0203 	bic.w	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	493f      	ldr	r1, [pc, #252]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f2:	f7fe fe31 	bl	8001358 <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fa:	f7fe fe2d 	bl	8001358 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e066      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 020c 	and.w	r2, r3, #12
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	429a      	cmp	r2, r3
 8002720:	d1eb      	bne.n	80026fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	492c      	ldr	r1, [pc, #176]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d210      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4924      	ldr	r1, [pc, #144]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e036      	b.n	80027de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4918      	ldr	r1, [pc, #96]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4910      	ldr	r1, [pc, #64]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ae:	f000 f825 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490c      	ldr	r1, [pc, #48]	; (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fbec 	bl	8000fb0 <HAL_InitTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	72fb      	strb	r3, [r7, #11]

  return status;
 80027dc:	7afb      	ldrb	r3, [r7, #11]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08008a78 	.word	0x08008a78
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d121      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d11e      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e005      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d102      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e004      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d101      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 8002882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d134      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0xac>
 80028a0:	e005      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 80028a4:	617b      	str	r3, [r7, #20]
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 80028aa:	617b      	str	r3, [r7, #20]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	617b      	str	r3, [r7, #20]
      break;
 80028b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	3301      	adds	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	fb02 f203 	mul.w	r2, r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	0e5b      	lsrs	r3, r3, #25
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	3301      	adds	r3, #1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f4:	69bb      	ldr	r3, [r7, #24]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	08008a90 	.word	0x08008a90
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_GetHCLKFreq+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002930:	f7ff fff0 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08008a88 	.word	0x08008a88

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800295c:	f7ff ffda 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	08008a88 	.word	0x08008a88

08002984 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	220f      	movs	r2, #15
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_RCC_GetClockConfig+0x60>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40022000 	.word	0x40022000

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9d0 	bl	8001da4 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	e014      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9c0 	bl	8001da4 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d10b      	bne.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d919      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2ba0      	cmp	r3, #160	; 0xa0
 8002a44:	d902      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a46:	2302      	movs	r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e013      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e010      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d902      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a58:	2303      	movs	r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00a      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d102      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e004      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d101      	bne.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 0207 	bic.w	r2, r3, #7
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d041      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002acc:	d02a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af8:	e015      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fabb 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0a:	e00c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fba6 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	74fb      	strb	r3, [r7, #19]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3a:	4973      	ldr	r1, [pc, #460]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d041      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5c:	d02a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b62:	d824      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d81e      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d010      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	e018      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b88:	e015      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa73 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9a:	e00c      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fb5e 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bac:	e003      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bbc:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bca:	494f      	ldr	r1, [pc, #316]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bd2:	e001      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fb96 	bl	8001358 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe fb92 	bl	8001358 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	74fb      	strb	r3, [r7, #19]
        break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d15c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fb51 	bl	8001358 <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fb4d 	bl	8001358 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd0:	e006      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ec      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7c7b      	ldrb	r3, [r7, #17]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b9e      	ldr	r3, [pc, #632]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a9d      	ldr	r2, [pc, #628]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4b98      	ldr	r3, [pc, #608]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 020c 	bic.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	498c      	ldr	r1, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d76:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4983      	ldr	r1, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d98:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	497b      	ldr	r1, [pc, #492]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4972      	ldr	r1, [pc, #456]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ddc:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e20:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	4959      	ldr	r1, [pc, #356]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4948      	ldr	r1, [pc, #288]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	4937      	ldr	r1, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f8c8 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d028      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	491f      	ldr	r1, [pc, #124]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f30:	60d3      	str	r3, [r2, #12]
 8002f32:	e011      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f899 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f82:	d109      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	e014      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f867 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02f      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4928      	ldr	r1, [pc, #160]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f844 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3320      	adds	r3, #32
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f925 	bl	8003264 <RCCEx_PLLSAI2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800306e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
       ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
       ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d047      	beq.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e044      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d018      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x86>
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d825      	bhi.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <RCCEx_PLLSAI1_Config+0x62>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d009      	beq.n	80030f0 <RCCEx_PLLSAI1_Config+0x74>
 80030dc:	e020      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11d      	bne.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e01a      	b.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f0:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e013      	b.n	800312a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310e:	4b54      	ldr	r3, [pc, #336]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311e:	e006      	b.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e004      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	430b      	orrs	r3, r1
 800314c:	4944      	ldr	r1, [pc, #272]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d17d      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe f8f8 	bl	8001358 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fe f8f4 	bl	8001358 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003180:	4b37      	ldr	r3, [pc, #220]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d160      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0912      	lsrs	r2, r2, #4
 80031b0:	0452      	lsls	r2, r2, #17
 80031b2:	430a      	orrs	r2, r1
 80031b4:	492a      	ldr	r1, [pc, #168]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	610b      	str	r3, [r1, #16]
 80031ba:	e027      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d112      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	0211      	lsls	r1, r2, #8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6912      	ldr	r2, [r2, #16]
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	3a01      	subs	r2, #1
 80031dc:	0552      	lsls	r2, r2, #21
 80031de:	430a      	orrs	r2, r1
 80031e0:	491f      	ldr	r1, [pc, #124]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]
 80031e6:	e011      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6892      	ldr	r2, [r2, #8]
 80031f8:	0211      	lsls	r1, r2, #8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6952      	ldr	r2, [r2, #20]
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0652      	lsls	r2, r2, #25
 8003204:	430a      	orrs	r2, r1
 8003206:	4916      	ldr	r1, [pc, #88]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a13      	ldr	r2, [pc, #76]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003216:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe f89e 	bl	8001358 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321e:	e009      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003220:	f7fe f89a 	bl	8001358 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d902      	bls.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	73fb      	strb	r3, [r7, #15]
          break;
 8003232:	e005      	b.n	8003240 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000

08003264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
       ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
       ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d047      	beq.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	e044      	b.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d018      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0x86>
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d825      	bhi.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <RCCEx_PLLSAI2_Config+0x62>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d009      	beq.n	80032d8 <RCCEx_PLLSAI2_Config+0x74>
 80032c4:	e020      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11d      	bne.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d6:	e01a      	b.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e013      	b.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003306:	e006      	b.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e004      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003316:	bf00      	nop
    }

    if(status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	430b      	orrs	r3, r1
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d167      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a35      	ldr	r2, [pc, #212]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe f804 	bl	8001358 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003354:	f7fe f800 	bl	8001358 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
        break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003368:	4b2c      	ldr	r3, [pc, #176]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d14a      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	0211      	lsls	r1, r2, #8
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	0912      	lsrs	r2, r2, #4
 8003398:	0452      	lsls	r2, r2, #17
 800339a:	430a      	orrs	r2, r1
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	614b      	str	r3, [r1, #20]
 80033a2:	e011      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	0211      	lsls	r1, r2, #8
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6912      	ldr	r2, [r2, #16]
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	0652      	lsls	r2, r2, #25
 80033c0:	430a      	orrs	r2, r1
 80033c2:	4916      	ldr	r1, [pc, #88]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fd ffc0 	bl	8001358 <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033da:	e009      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033dc:	f7fd ffbc 	bl	8001358 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d902      	bls.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	73fb      	strb	r3, [r7, #15]
          break;
 80033ee:	e005      	b.n	80033fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e049      	b.n	80034c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f841 	bl	80034ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 f9f8 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04f      	b.n	800359c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d018      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_TIM_Base_Start_IT+0xc8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIM_Base_Start_IT+0x76>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d115      	bne.n	8003586 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003562:	4013      	ands	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d015      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d011      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	e008      	b.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e000      	b.n	800359a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	00010007 	.word	0x00010007

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f905 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8f7 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f908 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8db 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8cd 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8de 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8b1 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8a3 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8b4 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f887 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f879 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f88a 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fb14 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f914 	bl	800399c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d10e      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d107      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800379a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f907 	bl	80039b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f838 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d10e      	bne.n	80037fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0220 	mvn.w	r2, #32
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8c7 	bl	8003988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <TIM_Base_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <TIM_Base_SetConfig+0x120>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_Base_SetConfig+0x114>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d01b      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <TIM_Base_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d017      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0x124>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a11      	ldr	r2, [pc, #68]	; (800397c <TIM_Base_SetConfig+0x128>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <TIM_Base_SetConfig+0x130>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800

08003988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e040      	b.n	8003a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fa02 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fbae 	bl	8004164 <UART_SetConfig>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fe2c 	bl	8004678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 feb3 	bl	80047bc <UART_CheckIdleState>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	f040 8082 	bne.w	8003b7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_Transmit+0x26>
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07a      	b.n	8003b80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x38>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e073      	b.n	8003b80 <HAL_UART_Transmit+0x120>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2221      	movs	r2, #33	; 0x21
 8003aac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fc53 	bl	8001358 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d108      	bne.n	8003ae0 <HAL_UART_Transmit+0x80>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e003      	b.n	8003ae8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003af0:	e02d      	b.n	8003b4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fea6 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e039      	b.n	8003b80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3302      	adds	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e008      	b.n	8003b3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	b292      	uxth	r2, r2
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1cb      	bne.n	8003af2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2140      	movs	r1, #64	; 0x40
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fe72 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e005      	b.n	8003b80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d166      	bne.n	8003c6c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_UART_Transmit_DMA+0x22>
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e05f      	b.n	8003c6e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Transmit_DMA+0x34>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e058      	b.n	8003c6e <HAL_UART_Transmit_DMA+0xe6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	88fa      	ldrh	r2, [r7, #6]
 8003bd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2221      	movs	r2, #33	; 0x21
 8003be6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02b      	beq.n	8003c48 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <HAL_UART_Transmit_DMA+0xf0>)
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <HAL_UART_Transmit_DMA+0xf4>)
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_UART_Transmit_DMA+0xf8>)
 8003c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	4619      	mov	r1, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	461a      	mov	r2, r3
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f7fd fd3e 	bl	80016a4 <HAL_DMA_Start_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2210      	movs	r2, #16
 8003c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e012      	b.n	8003c6e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c66:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	08004aa9 	.word	0x08004aa9
 8003c7c:	08004afd 	.word	0x08004afd
 8003c80:	08004be9 	.word	0x08004be9

08003c84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d131      	bne.n	8003cfe <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_UART_Receive_DMA+0x22>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e02a      	b.n	8003d00 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Receive_DMA+0x34>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e023      	b.n	8003d00 <HAL_UART_Receive_DMA+0x7c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_UART_Receive_DMA+0x84>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cec:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fe27 	bl	8004948 <UART_Start_Receive_DMA>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	e000      	b.n	8003d00 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40008000 	.word	0x40008000

08003d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d113      	bne.n	8003d64 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 81ce 	beq.w	80040f6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
      }
      return;
 8003d62:	e1c8      	b.n	80040f6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80e3 	beq.w	8003f32 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4ba6      	ldr	r3, [pc, #664]	; (8004014 <HAL_UART_IRQHandler+0x308>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80d8 	beq.w	8003f32 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_UART_IRQHandler+0xa2>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_UART_IRQHandler+0xce>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_UART_IRQHandler+0xfa>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	f043 0202 	orr.w	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_UART_IRQHandler+0x15e>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8142 	beq.w	80040fa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d004      	beq.n	8003eba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d031      	beq.n	8003f1e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fdc5 	bl	8004a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d123      	bne.n	8003f16 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <HAL_UART_IRQHandler+0x30c>)
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd fc74 	bl	80017e0 <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d017      	beq.n	8003f2e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00f      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f912 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e00b      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f90e 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f90a 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f2c:	e0e5      	b.n	80040fa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	bf00      	nop
    return;
 8003f30:	e0e3      	b.n	80040fa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80a9 	bne.w	800408e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a3 	beq.w	800408e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 809d 	beq.w	800408e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d158      	bne.n	800401c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80c1 	beq.w	80040fe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f82:	893a      	ldrh	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	f080 80ba 	bcs.w	80040fe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12a      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0210 	bic.w	r2, r2, #16
 8003fec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fbb6 	bl	8001764 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004004:	b29b      	uxth	r3, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29b      	uxth	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f89d 	bl	800414c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004012:	e074      	b.n	80040fe <HAL_UART_IRQHandler+0x3f2>
 8004014:	04000120 	.word	0x04000120
 8004018:	08004c65 	.word	0x08004c65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004028:	b29b      	uxth	r3, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d063      	beq.n	8004102 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d060      	beq.n	8004102 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800404e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f860 	bl	800414c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800408c:	e039      	b.n	8004102 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_UART_IRQHandler+0x3a8>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fe08 	bl	8004cc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040b2:	e029      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01a      	beq.n	8004106 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
    }
    return;
 80040d8:	e015      	b.n	8004106 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d011      	beq.n	8004108 <HAL_UART_IRQHandler+0x3fc>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fdce 	bl	8004c90 <UART_EndTransmit_IT>
    return;
 80040f4:	e008      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
      return;
 80040f6:	bf00      	nop
 80040f8:	e006      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
    return;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
      return;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004106:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4bad      	ldr	r3, [pc, #692]	; (8004444 <UART_SetConfig+0x2e0>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4aa2      	ldr	r2, [pc, #648]	; (8004448 <UART_SetConfig+0x2e4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a99      	ldr	r2, [pc, #612]	; (800444c <UART_SetConfig+0x2e8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d121      	bne.n	800422e <UART_SetConfig+0xca>
 80041ea:	4b99      	ldr	r3, [pc, #612]	; (8004450 <UART_SetConfig+0x2ec>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d817      	bhi.n	8004228 <UART_SetConfig+0xc4>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x9c>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	0800421d 	.word	0x0800421d
 8004208:	08004217 	.word	0x08004217
 800420c:	08004223 	.word	0x08004223
 8004210:	2301      	movs	r3, #1
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e0e7      	b.n	80043e6 <UART_SetConfig+0x282>
 8004216:	2302      	movs	r3, #2
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e0e4      	b.n	80043e6 <UART_SetConfig+0x282>
 800421c:	2304      	movs	r3, #4
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	e0e1      	b.n	80043e6 <UART_SetConfig+0x282>
 8004222:	2308      	movs	r3, #8
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e0de      	b.n	80043e6 <UART_SetConfig+0x282>
 8004228:	2310      	movs	r3, #16
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e0db      	b.n	80043e6 <UART_SetConfig+0x282>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a88      	ldr	r2, [pc, #544]	; (8004454 <UART_SetConfig+0x2f0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d132      	bne.n	800429e <UART_SetConfig+0x13a>
 8004238:	4b85      	ldr	r3, [pc, #532]	; (8004450 <UART_SetConfig+0x2ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d828      	bhi.n	8004298 <UART_SetConfig+0x134>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0xe8>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	08004281 	.word	0x08004281
 8004250:	08004299 	.word	0x08004299
 8004254:	08004299 	.word	0x08004299
 8004258:	08004299 	.word	0x08004299
 800425c:	0800428d 	.word	0x0800428d
 8004260:	08004299 	.word	0x08004299
 8004264:	08004299 	.word	0x08004299
 8004268:	08004299 	.word	0x08004299
 800426c:	08004287 	.word	0x08004287
 8004270:	08004299 	.word	0x08004299
 8004274:	08004299 	.word	0x08004299
 8004278:	08004299 	.word	0x08004299
 800427c:	08004293 	.word	0x08004293
 8004280:	2300      	movs	r3, #0
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e0af      	b.n	80043e6 <UART_SetConfig+0x282>
 8004286:	2302      	movs	r3, #2
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e0ac      	b.n	80043e6 <UART_SetConfig+0x282>
 800428c:	2304      	movs	r3, #4
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e0a9      	b.n	80043e6 <UART_SetConfig+0x282>
 8004292:	2308      	movs	r3, #8
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e0a6      	b.n	80043e6 <UART_SetConfig+0x282>
 8004298:	2310      	movs	r3, #16
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e0a3      	b.n	80043e6 <UART_SetConfig+0x282>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6d      	ldr	r2, [pc, #436]	; (8004458 <UART_SetConfig+0x2f4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d120      	bne.n	80042ea <UART_SetConfig+0x186>
 80042a8:	4b69      	ldr	r3, [pc, #420]	; (8004450 <UART_SetConfig+0x2ec>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042b2:	2b30      	cmp	r3, #48	; 0x30
 80042b4:	d013      	beq.n	80042de <UART_SetConfig+0x17a>
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d814      	bhi.n	80042e4 <UART_SetConfig+0x180>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d009      	beq.n	80042d2 <UART_SetConfig+0x16e>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d810      	bhi.n	80042e4 <UART_SetConfig+0x180>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <UART_SetConfig+0x168>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d006      	beq.n	80042d8 <UART_SetConfig+0x174>
 80042ca:	e00b      	b.n	80042e4 <UART_SetConfig+0x180>
 80042cc:	2300      	movs	r3, #0
 80042ce:	76fb      	strb	r3, [r7, #27]
 80042d0:	e089      	b.n	80043e6 <UART_SetConfig+0x282>
 80042d2:	2302      	movs	r3, #2
 80042d4:	76fb      	strb	r3, [r7, #27]
 80042d6:	e086      	b.n	80043e6 <UART_SetConfig+0x282>
 80042d8:	2304      	movs	r3, #4
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e083      	b.n	80043e6 <UART_SetConfig+0x282>
 80042de:	2308      	movs	r3, #8
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e080      	b.n	80043e6 <UART_SetConfig+0x282>
 80042e4:	2310      	movs	r3, #16
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e07d      	b.n	80043e6 <UART_SetConfig+0x282>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5b      	ldr	r2, [pc, #364]	; (800445c <UART_SetConfig+0x2f8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d120      	bne.n	8004336 <UART_SetConfig+0x1d2>
 80042f4:	4b56      	ldr	r3, [pc, #344]	; (8004450 <UART_SetConfig+0x2ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004300:	d013      	beq.n	800432a <UART_SetConfig+0x1c6>
 8004302:	2bc0      	cmp	r3, #192	; 0xc0
 8004304:	d814      	bhi.n	8004330 <UART_SetConfig+0x1cc>
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d009      	beq.n	800431e <UART_SetConfig+0x1ba>
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d810      	bhi.n	8004330 <UART_SetConfig+0x1cc>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <UART_SetConfig+0x1b4>
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d006      	beq.n	8004324 <UART_SetConfig+0x1c0>
 8004316:	e00b      	b.n	8004330 <UART_SetConfig+0x1cc>
 8004318:	2300      	movs	r3, #0
 800431a:	76fb      	strb	r3, [r7, #27]
 800431c:	e063      	b.n	80043e6 <UART_SetConfig+0x282>
 800431e:	2302      	movs	r3, #2
 8004320:	76fb      	strb	r3, [r7, #27]
 8004322:	e060      	b.n	80043e6 <UART_SetConfig+0x282>
 8004324:	2304      	movs	r3, #4
 8004326:	76fb      	strb	r3, [r7, #27]
 8004328:	e05d      	b.n	80043e6 <UART_SetConfig+0x282>
 800432a:	2308      	movs	r3, #8
 800432c:	76fb      	strb	r3, [r7, #27]
 800432e:	e05a      	b.n	80043e6 <UART_SetConfig+0x282>
 8004330:	2310      	movs	r3, #16
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	e057      	b.n	80043e6 <UART_SetConfig+0x282>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a49      	ldr	r2, [pc, #292]	; (8004460 <UART_SetConfig+0x2fc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d125      	bne.n	800438c <UART_SetConfig+0x228>
 8004340:	4b43      	ldr	r3, [pc, #268]	; (8004450 <UART_SetConfig+0x2ec>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434e:	d017      	beq.n	8004380 <UART_SetConfig+0x21c>
 8004350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004354:	d817      	bhi.n	8004386 <UART_SetConfig+0x222>
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d00b      	beq.n	8004374 <UART_SetConfig+0x210>
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d811      	bhi.n	8004386 <UART_SetConfig+0x222>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <UART_SetConfig+0x20a>
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d006      	beq.n	800437a <UART_SetConfig+0x216>
 800436c:	e00b      	b.n	8004386 <UART_SetConfig+0x222>
 800436e:	2300      	movs	r3, #0
 8004370:	76fb      	strb	r3, [r7, #27]
 8004372:	e038      	b.n	80043e6 <UART_SetConfig+0x282>
 8004374:	2302      	movs	r3, #2
 8004376:	76fb      	strb	r3, [r7, #27]
 8004378:	e035      	b.n	80043e6 <UART_SetConfig+0x282>
 800437a:	2304      	movs	r3, #4
 800437c:	76fb      	strb	r3, [r7, #27]
 800437e:	e032      	b.n	80043e6 <UART_SetConfig+0x282>
 8004380:	2308      	movs	r3, #8
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e02f      	b.n	80043e6 <UART_SetConfig+0x282>
 8004386:	2310      	movs	r3, #16
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e02c      	b.n	80043e6 <UART_SetConfig+0x282>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <UART_SetConfig+0x2e4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d125      	bne.n	80043e2 <UART_SetConfig+0x27e>
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <UART_SetConfig+0x2ec>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043a4:	d017      	beq.n	80043d6 <UART_SetConfig+0x272>
 80043a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043aa:	d817      	bhi.n	80043dc <UART_SetConfig+0x278>
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d00b      	beq.n	80043ca <UART_SetConfig+0x266>
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d811      	bhi.n	80043dc <UART_SetConfig+0x278>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <UART_SetConfig+0x260>
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d006      	beq.n	80043d0 <UART_SetConfig+0x26c>
 80043c2:	e00b      	b.n	80043dc <UART_SetConfig+0x278>
 80043c4:	2300      	movs	r3, #0
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x282>
 80043ca:	2302      	movs	r3, #2
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e00a      	b.n	80043e6 <UART_SetConfig+0x282>
 80043d0:	2304      	movs	r3, #4
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e007      	b.n	80043e6 <UART_SetConfig+0x282>
 80043d6:	2308      	movs	r3, #8
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e004      	b.n	80043e6 <UART_SetConfig+0x282>
 80043dc:	2310      	movs	r3, #16
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	e001      	b.n	80043e6 <UART_SetConfig+0x282>
 80043e2:	2310      	movs	r3, #16
 80043e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <UART_SetConfig+0x2e4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	f040 8087 	bne.w	8004500 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043f2:	7efb      	ldrb	r3, [r7, #27]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d837      	bhi.n	8004468 <UART_SetConfig+0x304>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x29c>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004425 	.word	0x08004425
 8004404:	08004469 	.word	0x08004469
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004469 	.word	0x08004469
 8004410:	08004433 	.word	0x08004433
 8004414:	08004469 	.word	0x08004469
 8004418:	08004469 	.word	0x08004469
 800441c:	08004469 	.word	0x08004469
 8004420:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe fa82 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004428:	6178      	str	r0, [r7, #20]
        break;
 800442a:	e022      	b.n	8004472 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <UART_SetConfig+0x300>)
 800442e:	617b      	str	r3, [r7, #20]
        break;
 8004430:	e01f      	b.n	8004472 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe f9e3 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8004436:	6178      	str	r0, [r7, #20]
        break;
 8004438:	e01b      	b.n	8004472 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	617b      	str	r3, [r7, #20]
        break;
 8004440:	e017      	b.n	8004472 <UART_SetConfig+0x30e>
 8004442:	bf00      	nop
 8004444:	efff69f3 	.word	0xefff69f3
 8004448:	40008000 	.word	0x40008000
 800444c:	40013800 	.word	0x40013800
 8004450:	40021000 	.word	0x40021000
 8004454:	40004400 	.word	0x40004400
 8004458:	40004800 	.word	0x40004800
 800445c:	40004c00 	.word	0x40004c00
 8004460:	40005000 	.word	0x40005000
 8004464:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	76bb      	strb	r3, [r7, #26]
        break;
 8004470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80f1 	beq.w	800465c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	429a      	cmp	r2, r3
 8004488:	d305      	bcc.n	8004496 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	429a      	cmp	r2, r3
 8004494:	d902      	bls.n	800449c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	76bb      	strb	r3, [r7, #26]
 800449a:	e0df      	b.n	800465c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4618      	mov	r0, r3
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	020b      	lsls	r3, r1, #8
 80044ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044b2:	0202      	lsls	r2, r0, #8
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	6849      	ldr	r1, [r1, #4]
 80044b8:	0849      	lsrs	r1, r1, #1
 80044ba:	4608      	mov	r0, r1
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	1814      	adds	r4, r2, r0
 80044c2:	eb43 0501 	adc.w	r5, r3, r1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	4620      	mov	r0, r4
 80044d2:	4629      	mov	r1, r5
 80044d4:	f7fb fed4 	bl	8000280 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d308      	bcc.n	80044fa <UART_SetConfig+0x396>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ee:	d204      	bcs.n	80044fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	e0b0      	b.n	800465c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	76bb      	strb	r3, [r7, #26]
 80044fe:	e0ad      	b.n	800465c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d15c      	bne.n	80045c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800450a:	7efb      	ldrb	r3, [r7, #27]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d828      	bhi.n	8004562 <UART_SetConfig+0x3fe>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x3b4>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004563 	.word	0x08004563
 8004528:	08004553 	.word	0x08004553
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe f9f6 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e013      	b.n	800456c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe fa08 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004548:	6178      	str	r0, [r7, #20]
        break;
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b49      	ldr	r3, [pc, #292]	; (8004674 <UART_SetConfig+0x510>)
 800454e:	617b      	str	r3, [r7, #20]
        break;
 8004550:	e00c      	b.n	800456c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe f953 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8004556:	6178      	str	r0, [r7, #20]
        break;
 8004558:	e008      	b.n	800456c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	617b      	str	r3, [r7, #20]
        break;
 8004560:	e004      	b.n	800456c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	76bb      	strb	r3, [r7, #26]
        break;
 800456a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d074      	beq.n	800465c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005a      	lsls	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	b29b      	uxth	r3, r3
 8004588:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d916      	bls.n	80045be <UART_SetConfig+0x45a>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d212      	bcs.n	80045be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f023 030f 	bic.w	r3, r3, #15
 80045a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	89fa      	ldrh	r2, [r7, #14]
 80045ba:	60da      	str	r2, [r3, #12]
 80045bc:	e04e      	b.n	800465c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	76bb      	strb	r3, [r7, #26]
 80045c2:	e04b      	b.n	800465c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045c4:	7efb      	ldrb	r3, [r7, #27]
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d827      	bhi.n	800461a <UART_SetConfig+0x4b6>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x46c>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe f99a 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 80045f8:	6178      	str	r0, [r7, #20]
        break;
 80045fa:	e013      	b.n	8004624 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe f9ac 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004600:	6178      	str	r0, [r7, #20]
        break;
 8004602:	e00f      	b.n	8004624 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <UART_SetConfig+0x510>)
 8004606:	617b      	str	r3, [r7, #20]
        break;
 8004608:	e00c      	b.n	8004624 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe f8f7 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 800460e:	6178      	str	r0, [r7, #20]
        break;
 8004610:	e008      	b.n	8004624 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	617b      	str	r3, [r7, #20]
        break;
 8004618:	e004      	b.n	8004624 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	76bb      	strb	r3, [r7, #26]
        break;
 8004622:	bf00      	nop
    }

    if (pclk != 0U)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	085a      	lsrs	r2, r3, #1
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	441a      	add	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	b29b      	uxth	r3, r3
 800463e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	d908      	bls.n	8004658 <UART_SetConfig+0x4f4>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d204      	bcs.n	8004658 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e001      	b.n	800465c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004668:	7ebb      	ldrb	r3, [r7, #26]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bdb0      	pop	{r4, r5, r7, pc}
 8004672:	bf00      	nop
 8004674:	00f42400 	.word	0x00f42400

08004678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d10a      	bne.n	800478e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047cc:	f7fc fdc4 	bl	8001358 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10e      	bne.n	80047fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f82d 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e023      	b.n	8004846 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d10e      	bne.n	800482a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f817 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00d      	b.n	8004846 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	e05e      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004866:	d05a      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004868:	f7fc fd76 	bl	8001358 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <UART_WaitOnFlagUntilTimeout+0x30>
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11b      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800488c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e043      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02c      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	d124      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048dc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00f      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d091      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2222      	movs	r2, #34	; 0x22
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02b      	beq.n	80049d2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <UART_Start_Receive_DMA+0xcc>)
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <UART_Start_Receive_DMA+0xd0>)
 8004988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <UART_Start_Receive_DMA+0xd4>)
 8004990:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	2200      	movs	r2, #0
 8004998:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	4619      	mov	r1, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	461a      	mov	r2, r3
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	f7fc fe79 	bl	80016a4 <HAL_DMA_Start_IT>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2210      	movs	r2, #16
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e01c      	b.n	8004a0c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a08:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	08004b19 	.word	0x08004b19
 8004a18:	08004bb1 	.word	0x08004bb1
 8004a1c:	08004be9 	.word	0x08004be9

08004a20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a36:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d107      	bne.n	8004a8a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0210 	bic.w	r2, r2, #16
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d114      	bne.n	8004aee <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ada:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aec:	e002      	b.n	8004af4 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7fc f91c 	bl	8000d2c <HAL_UART_TxCpltCallback>
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff fb00 	bl	8004110 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d12a      	bne.n	8004b8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d107      	bne.n	8004b8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0210 	bic.w	r2, r2, #16
 8004b88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff fad6 	bl	800414c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ba0:	e002      	b.n	8004ba8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7fc f8a6 	bl	8000cf4 <HAL_UART_RxCpltCallback>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d109      	bne.n	8004bda <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff faba 	bl	800414c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bd8:	e002      	b.n	8004be0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7ff faa2 	bl	8004124 <HAL_UART_RxHalfCpltCallback>
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b80      	cmp	r3, #128	; 0x80
 8004c0e:	d109      	bne.n	8004c24 <UART_DMAError+0x3c>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b21      	cmp	r3, #33	; 0x21
 8004c14:	d106      	bne.n	8004c24 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff fefe 	bl	8004a20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d109      	bne.n	8004c46 <UART_DMAError+0x5e>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	d106      	bne.n	8004c46 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c40:	6978      	ldr	r0, [r7, #20]
 8004c42:	f7ff ff02 	bl	8004a4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4c:	f043 0210 	orr.w	r2, r3, #16
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7ff fa6e 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fa58 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc f839 	bl	8000d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <__NVIC_SetPriority>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	6039      	str	r1, [r7, #0]
 8004ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db0a      	blt.n	8004d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	490c      	ldr	r1, [pc, #48]	; (8004d24 <__NVIC_SetPriority+0x4c>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d00:	e00a      	b.n	8004d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4908      	ldr	r1, [pc, #32]	; (8004d28 <__NVIC_SetPriority+0x50>)
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	440b      	add	r3, r1
 8004d16:	761a      	strb	r2, [r3, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000e100 	.word	0xe000e100
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <SysTick_Handler+0x1c>)
 8004d32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d34:	f001 fcfe 	bl	8006734 <xTaskGetSchedulerState>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d3e:	f002 fae3 	bl	8007308 <xPortSysTickHandler>
  }
}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000e010 	.word	0xe000e010

08004d4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d50:	2100      	movs	r1, #0
 8004d52:	f06f 0004 	mvn.w	r0, #4
 8004d56:	f7ff ffbf 	bl	8004cd8 <__NVIC_SetPriority>
#endif
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d66:	f3ef 8305 	mrs	r3, IPSR
 8004d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d72:	f06f 0305 	mvn.w	r3, #5
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e00c      	b.n	8004d94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <osKernelInitialize+0x44>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <osKernelInitialize+0x44>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e002      	b.n	8004d94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d94:	687b      	ldr	r3, [r7, #4]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000094 	.word	0x20000094

08004da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	603b      	str	r3, [r7, #0]
  return(result);
 8004db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dba:	f06f 0305 	mvn.w	r3, #5
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e010      	b.n	8004de4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <osKernelStart+0x48>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d109      	bne.n	8004dde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dca:	f7ff ffbf 	bl	8004d4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <osKernelStart+0x48>)
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004dd4:	f001 f866 	bl	8005ea4 <vTaskStartScheduler>
      stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	e002      	b.n	8004de4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004de4:	687b      	ldr	r3, [r7, #4]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000094 	.word	0x20000094

08004df4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e04:	f3ef 8305 	mrs	r3, IPSR
 8004e08:	617b      	str	r3, [r7, #20]
  return(result);
 8004e0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d17e      	bne.n	8004f0e <osThreadNew+0x11a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d07b      	beq.n	8004f0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e1a:	2318      	movs	r3, #24
 8004e1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d045      	beq.n	8004eba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <osThreadNew+0x48>
        name = attr->name;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <osThreadNew+0x6e>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b38      	cmp	r3, #56	; 0x38
 8004e54:	d805      	bhi.n	8004e62 <osThreadNew+0x6e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <osThreadNew+0x72>
        return (NULL);
 8004e62:	2300      	movs	r3, #0
 8004e64:	e054      	b.n	8004f10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00e      	beq.n	8004e9c <osThreadNew+0xa8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b5b      	cmp	r3, #91	; 0x5b
 8004e84:	d90a      	bls.n	8004e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osThreadNew+0xa8>
        mem = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e010      	b.n	8004ebe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10c      	bne.n	8004ebe <osThreadNew+0xca>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <osThreadNew+0xca>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <osThreadNew+0xca>
          mem = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e001      	b.n	8004ebe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d110      	bne.n	8004ee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ecc:	9202      	str	r2, [sp, #8]
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fe0c 	bl	8005af8 <xTaskCreateStatic>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e013      	b.n	8004f0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d110      	bne.n	8004f0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	f107 0310 	add.w	r3, r7, #16
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fe57 	bl	8005bb2 <xTaskCreate>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <osThreadNew+0x11a>
            hTask = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f0e:	693b      	ldr	r3, [r7, #16]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f20:	f3ef 8305 	mrs	r3, IPSR
 8004f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <osDelay+0x1c>
    stat = osErrorISR;
 8004f2c:	f06f 0305 	mvn.w	r3, #5
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e007      	b.n	8004f44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 ff7c 	bl	8005e3c <vTaskDelay>
    }
  }

  return (stat);
 8004f44:	68fb      	ldr	r3, [r7, #12]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <vApplicationGetIdleTaskMemory+0x30>)
 8004f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000098 	.word	0x20000098
 8004f80:	200000f4 	.word	0x200000f4

08004f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a06      	ldr	r2, [pc, #24]	; (8004fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8004f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	200002f4 	.word	0x200002f4
 8004fb4:	20000350 	.word	0x20000350

08004fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f103 0208 	add.w	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 0208 	add.w	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 0208 	add.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005070:	d103      	bne.n	800507a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e00c      	b.n	8005094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3308      	adds	r3, #8
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e002      	b.n	8005088 <vListInsert+0x2e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	d2f6      	bcs.n	8005082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6852      	ldr	r2, [r2, #4]
 80050ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d103      	bne.n	8005100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800514a:	f002 f84b 	bl	80071e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	3b01      	subs	r3, #1
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d114      	bne.n	80051ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3310      	adds	r3, #16
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 f903 	bl	80063b8 <xTaskRemoveFromEventList>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <xQueueGenericReset+0xcc>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	e009      	b.n	80051de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3310      	adds	r3, #16
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fef2 	bl	8004fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff feed 	bl	8004fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051de:	f002 f831 	bl	8007244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051e2:	2301      	movs	r3, #1
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <xQueueGenericCreateStatic+0x52>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <xQueueGenericCreateStatic+0x56>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericCreateStatic+0x58>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	623b      	str	r3, [r7, #32]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <xQueueGenericCreateStatic+0x7e>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <xQueueGenericCreateStatic+0x82>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueGenericCreateStatic+0x84>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61fb      	str	r3, [r7, #28]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800528e:	2350      	movs	r3, #80	; 0x50
 8005290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b50      	cmp	r3, #80	; 0x50
 8005296:	d00a      	beq.n	80052ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	61bb      	str	r3, [r7, #24]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f805 	bl	80052e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3730      	adds	r7, #48	; 0x30
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e002      	b.n	8005302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800530e:	2101      	movs	r1, #1
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff ff05 	bl	8005120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	; 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueGenericSend+0x32>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <xQueueGenericSend+0x40>
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <xQueueGenericSend+0x44>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <xQueueGenericSend+0x46>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <xQueueGenericSend+0x60>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d103      	bne.n	8005396 <xQueueGenericSend+0x6e>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <xQueueGenericSend+0x72>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericSend+0x74>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b6:	f001 f9bd 	bl	8006734 <xTaskGetSchedulerState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <xQueueGenericSend+0x9e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xQueueGenericSend+0xa2>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <xQueueGenericSend+0xa4>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61fb      	str	r3, [r7, #28]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e6:	f001 fefd 	bl	80071e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <xQueueGenericSend+0xd4>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d129      	bne.n	8005450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005402:	f000 fa0b 	bl	800581c <prvCopyDataToQueue>
 8005406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3324      	adds	r3, #36	; 0x24
 8005414:	4618      	mov	r0, r3
 8005416:	f000 ffcf 	bl	80063b8 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <xQueueGenericSend+0x1f8>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e00a      	b.n	8005448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b39      	ldr	r3, [pc, #228]	; (8005520 <xQueueGenericSend+0x1f8>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005448:	f001 fefc 	bl	8007244 <vPortExitCritical>
				return pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	e063      	b.n	8005518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005456:	f001 fef5 	bl	8007244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800545a:	2300      	movs	r3, #0
 800545c:	e05c      	b.n	8005518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f809 	bl	8006480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005472:	f001 fee7 	bl	8007244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005476:	f000 fd7b 	bl	8005f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547a:	f001 feb3 	bl	80071e4 <vPortEnterCritical>
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548a:	d103      	bne.n	8005494 <xQueueGenericSend+0x16c>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x182>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054aa:	f001 fecb 	bl	8007244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fff8 	bl	80064ac <xTaskCheckForTimeOut>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d124      	bne.n	800550c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c4:	f000 faa2 	bl	8005a0c <prvIsQueueFull>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	3310      	adds	r3, #16
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 ff1e 	bl	8006318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054de:	f000 fa2d 	bl	800593c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054e2:	f000 fd53 	bl	8005f8c <xTaskResumeAll>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af7c 	bne.w	80053e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <xQueueGenericSend+0x1f8>)
 80054f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	e772      	b.n	80053e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005502:	f000 fa1b 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005506:	f000 fd41 	bl	8005f8c <xTaskResumeAll>
 800550a:	e76c      	b.n	80053e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800550c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550e:	f000 fa15 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005512:	f000 fd3b 	bl	8005f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3738      	adds	r7, #56	; 0x38
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b090      	sub	sp, #64	; 0x40
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <xQueueGenericSendFromISR+0x3c>
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueGenericSendFromISR+0x40>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueGenericSendFromISR+0x42>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <xQueueGenericSendFromISR+0x6a>
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <xQueueGenericSendFromISR+0x6e>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xQueueGenericSendFromISR+0x70>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	623b      	str	r3, [r7, #32]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ae:	f001 fefb 	bl	80073a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b2:	f3ef 8211 	mrs	r2, BASEPRI
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <xQueueGenericSendFromISR+0xbc>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d12f      	bne.n	8005640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055f6:	f000 f911 	bl	800581c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005602:	d112      	bne.n	800562a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fed1 	bl	80063b8 <xTaskRemoveFromEventList>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e007      	b.n	800563a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800562a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800562e:	3301      	adds	r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	b25a      	sxtb	r2, r3
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800563a:	2301      	movs	r3, #1
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800563e:	e001      	b.n	8005644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005640:	2300      	movs	r3, #0
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800564e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005652:	4618      	mov	r0, r3
 8005654:	3740      	adds	r7, #64	; 0x40
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	; 0x30
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005668:	2300      	movs	r3, #0
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <xQueueReceive+0x30>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	623b      	str	r3, [r7, #32]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <xQueueReceive+0x3e>
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueReceive+0x42>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueReceive+0x44>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xQueueReceive+0x5e>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61fb      	str	r3, [r7, #28]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ba:	f001 f83b 	bl	8006734 <xTaskGetSchedulerState>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <xQueueReceive+0x6e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <xQueueReceive+0x72>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueReceive+0x74>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xQueueReceive+0x8e>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61bb      	str	r3, [r7, #24]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ea:	f001 fd7b 	bl	80071e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01f      	beq.n	800573a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fe:	f000 f8f7 	bl	80058f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00f      	beq.n	8005732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	3310      	adds	r3, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fe4e 	bl	80063b8 <xTaskRemoveFromEventList>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005722:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <xQueueReceive+0x1bc>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005732:	f001 fd87 	bl	8007244 <vPortExitCritical>
				return pdPASS;
 8005736:	2301      	movs	r3, #1
 8005738:	e069      	b.n	800580e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d103      	bne.n	8005748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005740:	f001 fd80 	bl	8007244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005744:	2300      	movs	r3, #0
 8005746:	e062      	b.n	800580e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fe94 	bl	8006480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575c:	f001 fd72 	bl	8007244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005760:	f000 fc06 	bl	8005f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005764:	f001 fd3e 	bl	80071e4 <vPortEnterCritical>
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005774:	d103      	bne.n	800577e <xQueueReceive+0x122>
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005784:	b25b      	sxtb	r3, r3
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578a:	d103      	bne.n	8005794 <xQueueReceive+0x138>
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005794:	f001 fd56 	bl	8007244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005798:	1d3a      	adds	r2, r7, #4
 800579a:	f107 0310 	add.w	r3, r7, #16
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fe83 	bl	80064ac <xTaskCheckForTimeOut>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d123      	bne.n	80057f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ae:	f000 f917 	bl	80059e0 <prvIsQueueEmpty>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d017      	beq.n	80057e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	3324      	adds	r3, #36	; 0x24
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fda9 	bl	8006318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c8:	f000 f8b8 	bl	800593c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057cc:	f000 fbde 	bl	8005f8c <xTaskResumeAll>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d189      	bne.n	80056ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <xQueueReceive+0x1bc>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e780      	b.n	80056ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ea:	f000 f8a7 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ee:	f000 fbcd 	bl	8005f8c <xTaskResumeAll>
 80057f2:	e77a      	b.n	80056ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f6:	f000 f8a1 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fa:	f000 fbc7 	bl	8005f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005800:	f000 f8ee 	bl	80059e0 <prvIsQueueEmpty>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	f43f af6f 	beq.w	80056ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800580c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800580e:	4618      	mov	r0, r3
 8005810:	3730      	adds	r7, #48	; 0x30
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d14d      	bne.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 ff92 	bl	8006770 <xTaskPriorityDisinherit>
 800584c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	e043      	b.n	80058de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d119      	bne.n	8005890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6858      	ldr	r0, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	461a      	mov	r2, r3
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	f001 fff2 	bl	8007850 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d32b      	bcc.n	80058de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	e026      	b.n	80058de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68d8      	ldr	r0, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	f001 ffd8 	bl	8007850 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	425b      	negs	r3, r3
 80058aa:	441a      	add	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	425b      	negs	r3, r3
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d105      	bne.n	80058de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3b01      	subs	r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d303      	bcc.n	8005924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68d9      	ldr	r1, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	461a      	mov	r2, r3
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f001 ff8e 	bl	8007850 <memcpy>
	}
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005944:	f001 fc4e 	bl	80071e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005950:	e011      	b.n	8005976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fd2a 	bl	80063b8 <xTaskRemoveFromEventList>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800596a:	f000 fe01 	bl	8006570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	3b01      	subs	r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dce9      	bgt.n	8005952 <prvUnlockQueue+0x16>
 800597e:	e000      	b.n	8005982 <prvUnlockQueue+0x46>
					break;
 8005980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fc5b 	bl	8007244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800598e:	f001 fc29 	bl	80071e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599a:	e011      	b.n	80059c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3310      	adds	r3, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fd05 	bl	80063b8 <xTaskRemoveFromEventList>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059b4:	f000 fddc 	bl	8006570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dce9      	bgt.n	800599c <prvUnlockQueue+0x60>
 80059c8:	e000      	b.n	80059cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	22ff      	movs	r2, #255	; 0xff
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059d4:	f001 fc36 	bl	8007244 <vPortExitCritical>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e8:	f001 fbfc 	bl	80071e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e001      	b.n	80059fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059fe:	f001 fc21 	bl	8007244 <vPortExitCritical>

	return xReturn;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a14:	f001 fbe6 	bl	80071e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d102      	bne.n	8005a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a24:	2301      	movs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e001      	b.n	8005a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f001 fc09 	bl	8007244 <vPortExitCritical>

	return xReturn;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e014      	b.n	8005a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a58:	490c      	ldr	r1, [pc, #48]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a6e:	e006      	b.n	8005a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d9e7      	bls.n	8005a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20001c64 	.word	0x20001c64

08005a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa0:	f001 fba0 	bl	80071e4 <vPortEnterCritical>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab0:	d103      	bne.n	8005aba <vQueueWaitForMessageRestricted+0x2a>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac6:	d103      	bne.n	8005ad0 <vQueueWaitForMessageRestricted+0x40>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad0:	f001 fbb8 	bl	8007244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fc3b 	bl	8006360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff26 	bl	800593c <prvUnlockQueue>
	}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	61fb      	str	r3, [r7, #28]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b3e:	235c      	movs	r3, #92	; 0x5c
 8005b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b5c      	cmp	r3, #92	; 0x5c
 8005b46:	d00a      	beq.n	8005b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61bb      	str	r3, [r7, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <xTaskCreateStatic+0xac>
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01b      	beq.n	8005ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9303      	str	r3, [sp, #12]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	9302      	str	r3, [sp, #8]
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f850 	bl	8005c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9e:	f000 f8dd 	bl	8005d5c <prvAddNewTaskToReadyList>
 8005ba2:	e001      	b.n	8005ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ba8:	697b      	ldr	r3, [r7, #20]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b08c      	sub	sp, #48	; 0x30
 8005bb6:	af04      	add	r7, sp, #16
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fc2e 	bl	8007428 <pvPortMalloc>
 8005bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bd4:	205c      	movs	r0, #92	; 0x5c
 8005bd6:	f001 fc27 	bl	8007428 <pvPortMalloc>
 8005bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
 8005be8:	e005      	b.n	8005bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f001 fce8 	bl	80075c0 <vPortFree>
 8005bf0:	e001      	b.n	8005bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f80e 	bl	8005c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c20:	69f8      	ldr	r0, [r7, #28]
 8005c22:	f000 f89b 	bl	8005d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e002      	b.n	8005c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c32:	69bb      	ldr	r3, [r7, #24]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	461a      	mov	r2, r3
 8005c54:	21a5      	movs	r1, #165	; 0xa5
 8005c56:	f001 fe09 	bl	800786c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	3b01      	subs	r3, #1
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	617b      	str	r3, [r7, #20]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01f      	beq.n	8005cda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e012      	b.n	8005cc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	7819      	ldrb	r1, [r3, #0]
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	3334      	adds	r3, #52	; 0x34
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b0f      	cmp	r3, #15
 8005cca:	d9e9      	bls.n	8005ca0 <prvInitialiseNewTask+0x64>
 8005ccc:	e000      	b.n	8005cd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd8:	e003      	b.n	8005ce2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b37      	cmp	r3, #55	; 0x37
 8005ce6:	d901      	bls.n	8005cec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce8:	2337      	movs	r3, #55	; 0x37
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	3304      	adds	r3, #4
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff f978 	bl	8004ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff f973 	bl	8004ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	68f9      	ldr	r1, [r7, #12]
 8005d3a:	69b8      	ldr	r0, [r7, #24]
 8005d3c:	f001 f928 	bl	8006f90 <pxPortInitialiseStack>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d52:	bf00      	nop
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d64:	f001 fa3e 	bl	80071e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d68:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d72:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d7a:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <prvAddNewTaskToReadyList+0xc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d110      	bne.n	8005daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d88:	f000 fc16 	bl	80065b8 <prvInitialiseTaskLists>
 8005d8c:	e00d      	b.n	8005daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <prvAddNewTaskToReadyList+0xcc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d96:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d802      	bhi.n	8005daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da4:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005db2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <prvAddNewTaskToReadyList+0xd0>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <prvAddNewTaskToReadyList+0xd4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <prvAddNewTaskToReadyList+0x74>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <prvAddNewTaskToReadyList+0xd4>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <prvAddNewTaskToReadyList+0xd8>)
 8005dde:	441a      	add	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7ff f913 	bl	8005012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dec:	f001 fa2a 	bl	8007244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df0:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <prvAddNewTaskToReadyList+0xcc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00e      	beq.n	8005e16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvAddNewTaskToReadyList+0xc8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d207      	bcs.n	8005e16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvAddNewTaskToReadyList+0xdc>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000c24 	.word	0x20000c24
 8005e24:	20000750 	.word	0x20000750
 8005e28:	20000c30 	.word	0x20000c30
 8005e2c:	20000c40 	.word	0x20000c40
 8005e30:	20000c2c 	.word	0x20000c2c
 8005e34:	20000754 	.word	0x20000754
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d017      	beq.n	8005e7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <vTaskDelay+0x60>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <vTaskDelay+0x30>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60bb      	str	r3, [r7, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e6c:	f000 f880 	bl	8005f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e70:	2100      	movs	r1, #0
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fcea 	bl	800684c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e78:	f000 f888 	bl	8005f8c <xTaskResumeAll>
 8005e7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <vTaskDelay+0x64>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000c4c 	.word	0x20000c4c
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	1d39      	adds	r1, r7, #4
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff f848 	bl	8004f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	4921      	ldr	r1, [pc, #132]	; (8005f58 <vTaskStartScheduler+0xb4>)
 8005ed4:	4821      	ldr	r0, [pc, #132]	; (8005f5c <vTaskStartScheduler+0xb8>)
 8005ed6:	f7ff fe0f 	bl	8005af8 <xTaskCreateStatic>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <vTaskStartScheduler+0xbc>)
 8005ede:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ee0:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <vTaskStartScheduler+0xbc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e001      	b.n	8005ef2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d102      	bne.n	8005efe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ef8:	f000 fcfc 	bl	80068f4 <xTimerCreateTimerTask>
 8005efc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d116      	bne.n	8005f32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <vTaskStartScheduler+0xc0>)
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <vTaskStartScheduler+0xc4>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <vTaskStartScheduler+0xc8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f2c:	f001 f8b8 	bl	80070a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f30:	e00e      	b.n	8005f50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f38:	d10a      	bne.n	8005f50 <vTaskStartScheduler+0xac>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60fb      	str	r3, [r7, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vTaskStartScheduler+0xaa>
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	08008a3c 	.word	0x08008a3c
 8005f5c:	08006589 	.word	0x08006589
 8005f60:	20000c48 	.word	0x20000c48
 8005f64:	20000c44 	.word	0x20000c44
 8005f68:	20000c30 	.word	0x20000c30
 8005f6c:	20000c28 	.word	0x20000c28

08005f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <vTaskSuspendAll+0x18>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a03      	ldr	r2, [pc, #12]	; (8005f88 <vTaskSuspendAll+0x18>)
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	20000c4c 	.word	0x20000c4c

08005f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f9a:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <xTaskResumeAll+0x118>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	603b      	str	r3, [r7, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fb8:	f001 f914 	bl	80071e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fbc:	4b39      	ldr	r3, [pc, #228]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc6:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <xTaskResumeAll+0x118>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d162      	bne.n	8006094 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <xTaskResumeAll+0x11c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d05e      	beq.n	8006094 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd6:	e02f      	b.n	8006038 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b34      	ldr	r3, [pc, #208]	; (80060ac <xTaskResumeAll+0x120>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff f871 	bl	80050cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff f86c 	bl	80050cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <xTaskResumeAll+0x124>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d903      	bls.n	8006008 <xTaskResumeAll+0x7c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <xTaskResumeAll+0x124>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <xTaskResumeAll+0x128>)
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe fff7 	bl	8005012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <xTaskResumeAll+0x12c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006032:	4b22      	ldr	r3, [pc, #136]	; (80060bc <xTaskResumeAll+0x130>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <xTaskResumeAll+0x120>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1cb      	bne.n	8005fd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006046:	f000 fb55 	bl	80066f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <xTaskResumeAll+0x134>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d010      	beq.n	8006078 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006056:	f000 f847 	bl	80060e8 <xTaskIncrementTick>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <xTaskResumeAll+0x130>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3b01      	subs	r3, #1
 800606a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f1      	bne.n	8006056 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <xTaskResumeAll+0x134>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006078:	4b10      	ldr	r3, [pc, #64]	; (80060bc <xTaskResumeAll+0x130>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <xTaskResumeAll+0x138>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006094:	f001 f8d6 	bl	8007244 <vPortExitCritical>

	return xAlreadyYielded;
 8006098:	68bb      	ldr	r3, [r7, #8]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000c4c 	.word	0x20000c4c
 80060a8:	20000c24 	.word	0x20000c24
 80060ac:	20000be4 	.word	0x20000be4
 80060b0:	20000c2c 	.word	0x20000c2c
 80060b4:	20000754 	.word	0x20000754
 80060b8:	20000750 	.word	0x20000750
 80060bc:	20000c38 	.word	0x20000c38
 80060c0:	20000c34 	.word	0x20000c34
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <xTaskGetTickCount+0x1c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000c28 	.word	0x20000c28

080060e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f2:	4b4f      	ldr	r3, [pc, #316]	; (8006230 <xTaskIncrementTick+0x148>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 808f 	bne.w	800621a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060fc:	4b4d      	ldr	r3, [pc, #308]	; (8006234 <xTaskIncrementTick+0x14c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006104:	4a4b      	ldr	r2, [pc, #300]	; (8006234 <xTaskIncrementTick+0x14c>)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d120      	bne.n	8006152 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006110:	4b49      	ldr	r3, [pc, #292]	; (8006238 <xTaskIncrementTick+0x150>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <xTaskIncrementTick+0x48>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	603b      	str	r3, [r7, #0]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xTaskIncrementTick+0x46>
 8006130:	4b41      	ldr	r3, [pc, #260]	; (8006238 <xTaskIncrementTick+0x150>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <xTaskIncrementTick+0x154>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3f      	ldr	r2, [pc, #252]	; (8006238 <xTaskIncrementTick+0x150>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4a3f      	ldr	r2, [pc, #252]	; (800623c <xTaskIncrementTick+0x154>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <xTaskIncrementTick+0x158>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	4a3d      	ldr	r2, [pc, #244]	; (8006240 <xTaskIncrementTick+0x158>)
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	f000 fad1 	bl	80066f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006152:	4b3c      	ldr	r3, [pc, #240]	; (8006244 <xTaskIncrementTick+0x15c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d349      	bcc.n	80061f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <xTaskIncrementTick+0x150>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <xTaskIncrementTick+0x15c>)
 8006168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800616c:	601a      	str	r2, [r3, #0]
					break;
 800616e:	e03f      	b.n	80061f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	4b31      	ldr	r3, [pc, #196]	; (8006238 <xTaskIncrementTick+0x150>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d203      	bcs.n	8006190 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <xTaskIncrementTick+0x15c>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800618e:	e02f      	b.n	80061f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe ff99 	bl	80050cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3318      	adds	r3, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe ff90 	bl	80050cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4b25      	ldr	r3, [pc, #148]	; (8006248 <xTaskIncrementTick+0x160>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d903      	bls.n	80061c0 <xTaskIncrementTick+0xd8>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a22      	ldr	r2, [pc, #136]	; (8006248 <xTaskIncrementTick+0x160>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <xTaskIncrementTick+0x164>)
 80061ce:	441a      	add	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe ff1b 	bl	8005012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <xTaskIncrementTick+0x168>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d3b8      	bcc.n	800615c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061ea:	2301      	movs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ee:	e7b5      	b.n	800615c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <xTaskIncrementTick+0x168>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	4915      	ldr	r1, [pc, #84]	; (800624c <xTaskIncrementTick+0x164>)
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d901      	bls.n	800620c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <xTaskIncrementTick+0x16c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e004      	b.n	8006224 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <xTaskIncrementTick+0x170>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <xTaskIncrementTick+0x170>)
 8006222:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000c4c 	.word	0x20000c4c
 8006234:	20000c28 	.word	0x20000c28
 8006238:	20000bdc 	.word	0x20000bdc
 800623c:	20000be0 	.word	0x20000be0
 8006240:	20000c3c 	.word	0x20000c3c
 8006244:	20000c44 	.word	0x20000c44
 8006248:	20000c2c 	.word	0x20000c2c
 800624c:	20000754 	.word	0x20000754
 8006250:	20000750 	.word	0x20000750
 8006254:	20000c38 	.word	0x20000c38
 8006258:	20000c34 	.word	0x20000c34

0800625c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006262:	4b28      	ldr	r3, [pc, #160]	; (8006304 <vTaskSwitchContext+0xa8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800626a:	4b27      	ldr	r3, [pc, #156]	; (8006308 <vTaskSwitchContext+0xac>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006270:	e041      	b.n	80062f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006272:	4b25      	ldr	r3, [pc, #148]	; (8006308 <vTaskSwitchContext+0xac>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006278:	4b24      	ldr	r3, [pc, #144]	; (800630c <vTaskSwitchContext+0xb0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e010      	b.n	80062a2 <vTaskSwitchContext+0x46>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <vTaskSwitchContext+0x40>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	607b      	str	r3, [r7, #4]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <vTaskSwitchContext+0x3e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	491b      	ldr	r1, [pc, #108]	; (8006310 <vTaskSwitchContext+0xb4>)
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0e4      	beq.n	8006280 <vTaskSwitchContext+0x24>
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <vTaskSwitchContext+0xb4>)
 80062c2:	4413      	add	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3308      	adds	r3, #8
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <vTaskSwitchContext+0x8a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <vTaskSwitchContext+0xb8>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4a06      	ldr	r2, [pc, #24]	; (800630c <vTaskSwitchContext+0xb0>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000c4c 	.word	0x20000c4c
 8006308:	20000c38 	.word	0x20000c38
 800630c:	20000c2c 	.word	0x20000c2c
 8006310:	20000754 	.word	0x20000754
 8006314:	20000750 	.word	0x20000750

08006318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60fb      	str	r3, [r7, #12]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800633e:	4b07      	ldr	r3, [pc, #28]	; (800635c <vTaskPlaceOnEventList+0x44>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3318      	adds	r3, #24
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fe fe87 	bl	800505a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800634c:	2101      	movs	r1, #1
 800634e:	6838      	ldr	r0, [r7, #0]
 8006350:	f000 fa7c 	bl	800684c <prvAddCurrentTaskToDelayedList>
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000750 	.word	0x20000750

08006360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	617b      	str	r3, [r7, #20]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3318      	adds	r3, #24
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7fe fe3e 	bl	8005012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f000 fa51 	bl	800684c <prvAddCurrentTaskToDelayedList>
	}
 80063aa:	bf00      	nop
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000750 	.word	0x20000750

080063b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe fe6f 	bl	80050cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <xTaskRemoveFromEventList+0xb0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11d      	bne.n	8006432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fe66 	bl	80050cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <xTaskRemoveFromEventList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d903      	bls.n	8006414 <xTaskRemoveFromEventList+0x5c>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4a16      	ldr	r2, [pc, #88]	; (800646c <xTaskRemoveFromEventList+0xb4>)
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4a13      	ldr	r2, [pc, #76]	; (8006470 <xTaskRemoveFromEventList+0xb8>)
 8006422:	441a      	add	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fdf1 	bl	8005012 <vListInsertEnd>
 8006430:	e005      	b.n	800643e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3318      	adds	r3, #24
 8006436:	4619      	mov	r1, r3
 8006438:	480e      	ldr	r0, [pc, #56]	; (8006474 <xTaskRemoveFromEventList+0xbc>)
 800643a:	f7fe fdea 	bl	8005012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <xTaskRemoveFromEventList+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d905      	bls.n	8006458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <xTaskRemoveFromEventList+0xc4>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e001      	b.n	800645c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800645c:	697b      	ldr	r3, [r7, #20]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000c4c 	.word	0x20000c4c
 800646c:	20000c2c 	.word	0x20000c2c
 8006470:	20000754 	.word	0x20000754
 8006474:	20000be4 	.word	0x20000be4
 8006478:	20000750 	.word	0x20000750
 800647c:	20000c38 	.word	0x20000c38

08006480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <vTaskInternalSetTimeOutState+0x24>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <vTaskInternalSetTimeOutState+0x28>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	605a      	str	r2, [r3, #4]
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000c3c 	.word	0x20000c3c
 80064a8:	20000c28 	.word	0x20000c28

080064ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	613b      	str	r3, [r7, #16]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	60fb      	str	r3, [r7, #12]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ee:	f000 fe79 	bl	80071e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <xTaskCheckForTimeOut+0xbc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800650a:	d102      	bne.n	8006512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e023      	b.n	800655a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b15      	ldr	r3, [pc, #84]	; (800656c <xTaskCheckForTimeOut+0xc0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d007      	beq.n	800652e <xTaskCheckForTimeOut+0x82>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e015      	b.n	800655a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	d20b      	bcs.n	8006550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff9b 	bl	8006480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e004      	b.n	800655a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f000 fe73 	bl	8007244 <vPortExitCritical>

	return xReturn;
 800655e:	69fb      	ldr	r3, [r7, #28]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000c28 	.word	0x20000c28
 800656c:	20000c3c 	.word	0x20000c3c

08006570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <vTaskMissedYield+0x14>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	20000c38 	.word	0x20000c38

08006588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006590:	f000 f852 	bl	8006638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <prvIdleTask+0x28>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d9f9      	bls.n	8006590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <prvIdleTask+0x2c>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065ac:	e7f0      	b.n	8006590 <prvIdleTask+0x8>
 80065ae:	bf00      	nop
 80065b0:	20000754 	.word	0x20000754
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	e00c      	b.n	80065de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <prvInitialiseTaskLists+0x60>)
 80065d0:	4413      	add	r3, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fcf0 	bl	8004fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3301      	adds	r3, #1
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b37      	cmp	r3, #55	; 0x37
 80065e2:	d9ef      	bls.n	80065c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e4:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x64>)
 80065e6:	f7fe fce7 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ea:	480d      	ldr	r0, [pc, #52]	; (8006620 <prvInitialiseTaskLists+0x68>)
 80065ec:	f7fe fce4 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f0:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x6c>)
 80065f2:	f7fe fce1 	bl	8004fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f6:	480c      	ldr	r0, [pc, #48]	; (8006628 <prvInitialiseTaskLists+0x70>)
 80065f8:	f7fe fcde 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x74>)
 80065fe:	f7fe fcdb 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvInitialiseTaskLists+0x78>)
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x64>)
 8006606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvInitialiseTaskLists+0x7c>)
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <prvInitialiseTaskLists+0x68>)
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000754 	.word	0x20000754
 800661c:	20000bb4 	.word	0x20000bb4
 8006620:	20000bc8 	.word	0x20000bc8
 8006624:	20000be4 	.word	0x20000be4
 8006628:	20000bf8 	.word	0x20000bf8
 800662c:	20000c10 	.word	0x20000c10
 8006630:	20000bdc 	.word	0x20000bdc
 8006634:	20000be0 	.word	0x20000be0

08006638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663e:	e019      	b.n	8006674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006640:	f000 fdd0 	bl	80071e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fd3b 	bl	80050cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a0b      	ldr	r2, [pc, #44]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 800665e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800666a:	f000 fdeb 	bl	8007244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f810 	bl	8006694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <prvCheckTasksWaitingTermination+0x58>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e1      	bne.n	8006640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000bf8 	.word	0x20000bf8
 800668c:	20000c24 	.word	0x20000c24
 8006690:	20000c0c 	.word	0x20000c0c

08006694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 ff88 	bl	80075c0 <vPortFree>
				vPortFree( pxTCB );
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 ff85 	bl	80075c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066b6:	e018      	b.n	80066ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d103      	bne.n	80066ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 ff7c 	bl	80075c0 <vPortFree>
	}
 80066c8:	e00f      	b.n	80066ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d00a      	beq.n	80066ea <prvDeleteTCB+0x56>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	60fb      	str	r3, [r7, #12]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <prvDeleteTCB+0x54>
	}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <prvResetNextTaskUnblockTime+0x38>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvResetNextTaskUnblockTime+0x3c>)
 8006706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800670a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800670c:	e008      	b.n	8006720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <prvResetNextTaskUnblockTime+0x38>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4a04      	ldr	r2, [pc, #16]	; (8006730 <prvResetNextTaskUnblockTime+0x3c>)
 800671e:	6013      	str	r3, [r2, #0]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20000bdc 	.word	0x20000bdc
 8006730:	20000c44 	.word	0x20000c44

08006734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <xTaskGetSchedulerState+0x34>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006742:	2301      	movs	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	e008      	b.n	800675a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <xTaskGetSchedulerState+0x38>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006750:	2302      	movs	r3, #2
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e001      	b.n	800675a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800675a:	687b      	ldr	r3, [r7, #4]
	}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	20000c30 	.word	0x20000c30
 800676c:	20000c4c 	.word	0x20000c4c

08006770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d056      	beq.n	8006834 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006786:	4b2e      	ldr	r3, [pc, #184]	; (8006840 <xTaskPriorityDisinherit+0xd0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	429a      	cmp	r2, r3
 800678e:	d00a      	beq.n	80067a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c8:	1e5a      	subs	r2, r3, #1
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d02c      	beq.n	8006834 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d128      	bne.n	8006834 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fc70 	bl	80050cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <xTaskPriorityDisinherit+0xd4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d903      	bls.n	8006814 <xTaskPriorityDisinherit+0xa4>
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	4a0c      	ldr	r2, [pc, #48]	; (8006844 <xTaskPriorityDisinherit+0xd4>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4a09      	ldr	r2, [pc, #36]	; (8006848 <xTaskPriorityDisinherit+0xd8>)
 8006822:	441a      	add	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe fbf1 	bl	8005012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006834:	697b      	ldr	r3, [r7, #20]
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000750 	.word	0x20000750
 8006844:	20000c2c 	.word	0x20000c2c
 8006848:	20000754 	.word	0x20000754

0800684c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <prvAddCurrentTaskToDelayedList+0x90>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800685c:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3304      	adds	r3, #4
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fc32 	bl	80050cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686e:	d10a      	bne.n	8006886 <prvAddCurrentTaskToDelayedList+0x3a>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4819      	ldr	r0, [pc, #100]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006880:	f7fe fbc7 	bl	8005012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006884:	e026      	b.n	80068d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800688e:	4b14      	ldr	r3, [pc, #80]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	429a      	cmp	r2, r3
 800689c:	d209      	bcs.n	80068b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800689e:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fbd5 	bl	800505a <vListInsert>
}
 80068b0:	e010      	b.n	80068d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b2:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fe fbcb 	bl	800505a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d202      	bcs.n	80068d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068ce:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000c28 	.word	0x20000c28
 80068e0:	20000750 	.word	0x20000750
 80068e4:	20000c10 	.word	0x20000c10
 80068e8:	20000be0 	.word	0x20000be0
 80068ec:	20000bdc 	.word	0x20000bdc
 80068f0:	20000c44 	.word	0x20000c44

080068f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068fe:	f000 fb07 	bl	8006f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <xTimerCreateTimerTask+0x80>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d021      	beq.n	800694e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006912:	1d3a      	adds	r2, r7, #4
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fb31 	bl	8004f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	2302      	movs	r3, #2
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	460a      	mov	r2, r1
 8006934:	4910      	ldr	r1, [pc, #64]	; (8006978 <xTimerCreateTimerTask+0x84>)
 8006936:	4811      	ldr	r0, [pc, #68]	; (800697c <xTimerCreateTimerTask+0x88>)
 8006938:	f7ff f8de 	bl	8005af8 <xTaskCreateStatic>
 800693c:	4603      	mov	r3, r0
 800693e:	4a10      	ldr	r2, [pc, #64]	; (8006980 <xTimerCreateTimerTask+0x8c>)
 8006940:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006942:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <xTimerCreateTimerTask+0x8c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000c80 	.word	0x20000c80
 8006978:	08008a44 	.word	0x08008a44
 800697c:	08006ab9 	.word	0x08006ab9
 8006980:	20000c84 	.word	0x20000c84

08006984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	623b      	str	r3, [r7, #32]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <xTimerGenericCommand+0x98>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02a      	beq.n	8006a10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b05      	cmp	r3, #5
 80069ca:	dc18      	bgt.n	80069fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069cc:	f7ff feb2 	bl	8006734 <xTaskGetSchedulerState>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d109      	bne.n	80069ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <xTimerGenericCommand+0x98>)
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f107 0110 	add.w	r1, r7, #16
 80069de:	2300      	movs	r3, #0
 80069e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e2:	f7fe fca1 	bl	8005328 <xQueueGenericSend>
 80069e6:	6278      	str	r0, [r7, #36]	; 0x24
 80069e8:	e012      	b.n	8006a10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <xTimerGenericCommand+0x98>)
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f107 0110 	add.w	r1, r7, #16
 80069f2:	2300      	movs	r3, #0
 80069f4:	2200      	movs	r2, #0
 80069f6:	f7fe fc97 	bl	8005328 <xQueueGenericSend>
 80069fa:	6278      	str	r0, [r7, #36]	; 0x24
 80069fc:	e008      	b.n	8006a10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <xTimerGenericCommand+0x98>)
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	f107 0110 	add.w	r1, r7, #16
 8006a06:	2300      	movs	r3, #0
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	f7fe fd8b 	bl	8005524 <xQueueGenericSendFromISR>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000c80 	.word	0x20000c80

08006a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2a:	4b22      	ldr	r3, [pc, #136]	; (8006ab4 <prvProcessExpiredTimer+0x94>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fb47 	bl	80050cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d022      	beq.n	8006a92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	18d1      	adds	r1, r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f000 f8d1 	bl	8006c00 <prvInsertTimerInActiveList>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01f      	beq.n	8006aa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f7ff ff88 	bl	8006984 <xTimerGenericCommand>
 8006a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d113      	bne.n	8006aa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60fb      	str	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	6978      	ldr	r0, [r7, #20]
 8006aaa:	4798      	blx	r3
}
 8006aac:	bf00      	nop
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000c78 	.word	0x20000c78

08006ab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ac0:	f107 0308 	add.w	r3, r7, #8
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f857 	bl	8006b78 <prvGetNextExpireTime>
 8006aca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f803 	bl	8006adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ad6:	f000 f8d5 	bl	8006c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ada:	e7f1      	b.n	8006ac0 <prvTimerTask+0x8>

08006adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ae6:	f7ff fa43 	bl	8005f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f866 	bl	8006bc0 <prvSampleTimeNow>
 8006af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d130      	bne.n	8006b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <prvProcessTimerOrBlockTask+0x3c>
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d806      	bhi.n	8006b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b0a:	f7ff fa3f 	bl	8005f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff ff85 	bl	8006a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b16:	e024      	b.n	8006b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <prvProcessTimerOrBlockTask+0x90>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <prvProcessTimerOrBlockTask+0x50>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <prvProcessTimerOrBlockTask+0x52>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <prvProcessTimerOrBlockTask+0x94>)
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f7fe ffa7 	bl	8005a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b42:	f7ff fa23 	bl	8005f8c <xTaskResumeAll>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b4c:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <prvProcessTimerOrBlockTask+0x98>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
}
 8006b5c:	e001      	b.n	8006b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b5e:	f7ff fa15 	bl	8005f8c <xTaskResumeAll>
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000c7c 	.word	0x20000c7c
 8006b70:	20000c80 	.word	0x20000c80
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <prvGetNextExpireTime+0x44>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <prvGetNextExpireTime+0x16>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	e000      	b.n	8006b90 <prvGetNextExpireTime+0x18>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b9c:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <prvGetNextExpireTime+0x44>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e001      	b.n	8006bac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000c78 	.word	0x20000c78

08006bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bc8:	f7ff fa7e 	bl	80060c8 <xTaskGetTickCount>
 8006bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <prvSampleTimeNow+0x3c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d205      	bcs.n	8006be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bd8:	f000 f936 	bl	8006e48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e002      	b.n	8006bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bea:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <prvSampleTimeNow+0x3c>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000c88 	.word	0x20000c88

08006c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d812      	bhi.n	8006c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e01b      	b.n	8006c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <prvInsertTimerInActiveList+0x7c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7fe fa08 	bl	800505a <vListInsert>
 8006c4a:	e012      	b.n	8006c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d206      	bcs.n	8006c62 <prvInsertTimerInActiveList+0x62>
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d302      	bcc.n	8006c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e007      	b.n	8006c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <prvInsertTimerInActiveList+0x80>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe f9f4 	bl	800505a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c72:	697b      	ldr	r3, [r7, #20]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000c7c 	.word	0x20000c7c
 8006c80:	20000c78 	.word	0x20000c78

08006c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08e      	sub	sp, #56	; 0x38
 8006c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c8a:	e0ca      	b.n	8006e22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da18      	bge.n	8006cc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	3304      	adds	r3, #4
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	61fb      	str	r3, [r7, #28]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cba:	6850      	ldr	r0, [r2, #4]
 8006cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cbe:	6892      	ldr	r2, [r2, #8]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f2c0 80aa 	blt.w	8006e20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe f9f5 	bl	80050cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff6b 	bl	8006bc0 <prvSampleTimeNow>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	f200 8097 	bhi.w	8006e22 <prvProcessReceivedCommands+0x19e>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <prvProcessReceivedCommands+0x78>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d99 	.word	0x08006d99
 8006d0c:	08006dad 	.word	0x08006dad
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d25 	.word	0x08006d25
 8006d1c:	08006d99 	.word	0x08006d99
 8006d20:	08006dad 	.word	0x08006dad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	18d1      	adds	r1, r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d44:	f7ff ff5c 	bl	8006c00 <prvInsertTimerInActiveList>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d069      	beq.n	8006e22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d05e      	beq.n	8006e22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	441a      	add	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	2300      	movs	r3, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d76:	f7ff fe05 	bl	8006984 <xTimerGenericCommand>
 8006d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d14f      	bne.n	8006e22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61bb      	str	r3, [r7, #24]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006daa:	e03a      	b.n	8006e22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	617b      	str	r3, [r7, #20]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	18d1      	adds	r1, r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df0:	f7ff ff06 	bl	8006c00 <prvInsertTimerInActiveList>
					break;
 8006df4:	e015      	b.n	8006e22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e06:	f000 fbdb 	bl	80075c0 <vPortFree>
 8006e0a:	e00a      	b.n	8006e22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e1e:	e000      	b.n	8006e22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <prvProcessReceivedCommands+0x1c0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	1d39      	adds	r1, r7, #4
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fc16 	bl	800565c <xQueueReceive>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f47f af2a 	bne.w	8006c8c <prvProcessReceivedCommands+0x8>
	}
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	3730      	adds	r7, #48	; 0x30
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000c80 	.word	0x20000c80

08006e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4e:	e048      	b.n	8006ee2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5a:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe f92f 	bl	80050cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02e      	beq.n	8006ee2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90e      	bls.n	8006eb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea2:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f7fe f8d4 	bl	800505a <vListInsert>
 8006eb2:	e016      	b.n	8006ee2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff fd60 	bl	8006984 <xTimerGenericCommand>
 8006ec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	603b      	str	r3, [r7, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1b1      	bne.n	8006e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvSwitchTimerLists+0xc4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSwitchTimerLists+0xc4>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000c78 	.word	0x20000c78
 8006f0c:	20000c7c 	.word	0x20000c7c

08006f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f16:	f000 f965 	bl	80071e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f22:	4814      	ldr	r0, [pc, #80]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f24:	f7fe f848 	bl	8004fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f28:	4813      	ldr	r0, [pc, #76]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f2a:	f7fe f845 	bl	8004fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <prvCheckForValidListAndQueue+0x6c>)
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <prvCheckForValidListAndQueue+0x70>)
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <prvCheckForValidListAndQueue+0x74>)
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <prvCheckForValidListAndQueue+0x78>)
 8006f42:	2110      	movs	r1, #16
 8006f44:	200a      	movs	r0, #10
 8006f46:	f7fe f953 	bl	80051f0 <xQueueGenericCreateStatic>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	490b      	ldr	r1, [pc, #44]	; (8006f8c <prvCheckForValidListAndQueue+0x7c>)
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fd6c 	bl	8005a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f64:	f000 f96e 	bl	8007244 <vPortExitCritical>
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000c80 	.word	0x20000c80
 8006f74:	20000c50 	.word	0x20000c50
 8006f78:	20000c64 	.word	0x20000c64
 8006f7c:	20000c78 	.word	0x20000c78
 8006f80:	20000c7c 	.word	0x20000c7c
 8006f84:	20000d2c 	.word	0x20000d2c
 8006f88:	20000c8c 	.word	0x20000c8c
 8006f8c:	08008a4c 	.word	0x08008a4c

08006f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b04      	subs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <pxPortInitialiseStack+0x64>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b14      	subs	r3, #20
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f06f 0202 	mvn.w	r2, #2
 8006fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b20      	subs	r3, #32
 8006fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	08006ff9 	.word	0x08006ff9

08006ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <prvTaskExitError+0x54>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700a:	d00a      	beq.n	8007022 <prvTaskExitError+0x2a>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60fb      	str	r3, [r7, #12]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <prvTaskExitError+0x28>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60bb      	str	r3, [r7, #8]
}
 8007034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007036:	bf00      	nop
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0fc      	beq.n	8007038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	2000000c 	.word	0x2000000c

08007050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pxCurrentTCBConst2>)
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	f380 8809 	msr	PSP, r0
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	4770      	bx	lr
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst2>:
 8007070:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <prvPortStartFirstTask+0x24>)
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f380 8808 	msr	MSP, r0
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8814 	msr	CONTROL, r0
 800708a:	b662      	cpsie	i
 800708c:	b661      	cpsie	f
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	df00      	svc	0
 8007098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800709a:	bf00      	nop
 800709c:	e000ed08 	.word	0xe000ed08

080070a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070a6:	4b46      	ldr	r3, [pc, #280]	; (80071c0 <xPortStartScheduler+0x120>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a46      	ldr	r2, [pc, #280]	; (80071c4 <xPortStartScheduler+0x124>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d10a      	bne.n	80070c6 <xPortStartScheduler+0x26>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	613b      	str	r3, [r7, #16]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c6:	4b3e      	ldr	r3, [pc, #248]	; (80071c0 <xPortStartScheduler+0x120>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a3f      	ldr	r2, [pc, #252]	; (80071c8 <xPortStartScheduler+0x128>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10a      	bne.n	80070e6 <xPortStartScheduler+0x46>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <xPortStartScheduler+0x12c>)
 80070e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	22ff      	movs	r2, #255	; 0xff
 80070f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <xPortStartScheduler+0x130>)
 800710c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <xPortStartScheduler+0x134>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007114:	e009      	b.n	800712a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007116:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <xPortStartScheduler+0x134>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3b01      	subs	r3, #1
 800711c:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <xPortStartScheduler+0x134>)
 800711e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d0ef      	beq.n	8007116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <xPortStartScheduler+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1c3 0307 	rsb	r3, r3, #7
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00a      	beq.n	8007158 <xPortStartScheduler+0xb8>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60bb      	str	r3, [r7, #8]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007158:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <xPortStartScheduler+0x134>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <xPortStartScheduler+0x134>)
 8007160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <xPortStartScheduler+0x134>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800716a:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <xPortStartScheduler+0x134>)
 800716c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007176:	4b18      	ldr	r3, [pc, #96]	; (80071d8 <xPortStartScheduler+0x138>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <xPortStartScheduler+0x138>)
 800717c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <xPortStartScheduler+0x138>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <xPortStartScheduler+0x138>)
 8007188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800718c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800718e:	f000 f8dd 	bl	800734c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <xPortStartScheduler+0x13c>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007198:	f000 f8fc 	bl	8007394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800719c:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <xPortStartScheduler+0x140>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <xPortStartScheduler+0x140>)
 80071a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071a8:	f7ff ff66 	bl	8007078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071ac:	f7ff f856 	bl	800625c <vTaskSwitchContext>
	prvTaskExitError();
 80071b0:	f7ff ff22 	bl	8006ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	e000ed00 	.word	0xe000ed00
 80071c4:	410fc271 	.word	0x410fc271
 80071c8:	410fc270 	.word	0x410fc270
 80071cc:	e000e400 	.word	0xe000e400
 80071d0:	20000d7c 	.word	0x20000d7c
 80071d4:	20000d80 	.word	0x20000d80
 80071d8:	e000ed20 	.word	0xe000ed20
 80071dc:	2000000c 	.word	0x2000000c
 80071e0:	e000ef34 	.word	0xe000ef34

080071e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	607b      	str	r3, [r7, #4]
}
 80071fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <vPortEnterCritical+0x58>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a0d      	ldr	r2, [pc, #52]	; (800723c <vPortEnterCritical+0x58>)
 8007206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <vPortEnterCritical+0x58>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10f      	bne.n	8007230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <vPortEnterCritical+0x5c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <vPortEnterCritical+0x4c>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	603b      	str	r3, [r7, #0]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vPortEnterCritical+0x4a>
	}
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	2000000c 	.word	0x2000000c
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <vPortExitCritical+0x50>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <vPortExitCritical+0x24>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	607b      	str	r3, [r7, #4]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <vPortExitCritical+0x50>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3b01      	subs	r3, #1
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <vPortExitCritical+0x50>)
 8007270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <vPortExitCritical+0x50>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d105      	bne.n	8007286 <vPortExitCritical+0x42>
 800727a:	2300      	movs	r3, #0
 800727c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f383 8811 	msr	BASEPRI, r3
}
 8007284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	2000000c 	.word	0x2000000c
	...

080072a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072a0:	f3ef 8009 	mrs	r0, PSP
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <pxCurrentTCBConst>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	f01e 0f10 	tst.w	lr, #16
 80072b0:	bf08      	it	eq
 80072b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072c4:	f380 8811 	msr	BASEPRI, r0
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f7fe ffc4 	bl	800625c <vTaskSwitchContext>
 80072d4:	f04f 0000 	mov.w	r0, #0
 80072d8:	f380 8811 	msr	BASEPRI, r0
 80072dc:	bc09      	pop	{r0, r3}
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e6:	f01e 0f10 	tst.w	lr, #16
 80072ea:	bf08      	it	eq
 80072ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072f0:	f380 8809 	msr	PSP, r0
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w

08007300 <pxCurrentTCBConst>:
 8007300:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007322:	f7fe fee1 	bl	80060e8 <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <xPortSysTickHandler+0x40>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f383 8811 	msr	BASEPRI, r3
}
 800733e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007350:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <vPortSetupTimerInterrupt+0x38>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <vPortSetupTimerInterrupt+0x3c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0a      	ldr	r2, [pc, #40]	; (800738c <vPortSetupTimerInterrupt+0x40>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	4a09      	ldr	r2, [pc, #36]	; (8007390 <vPortSetupTimerInterrupt+0x44>)
 800736a:	3b01      	subs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	e000e010 	.word	0xe000e010
 8007384:	e000e018 	.word	0xe000e018
 8007388:	20000000 	.word	0x20000000
 800738c:	10624dd3 	.word	0x10624dd3
 8007390:	e000e014 	.word	0xe000e014

08007394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073a4 <vPortEnableVFP+0x10>
 8007398:	6801      	ldr	r1, [r0, #0]
 800739a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800739e:	6001      	str	r1, [r0, #0]
 80073a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073a2:	bf00      	nop
 80073a4:	e000ed88 	.word	0xe000ed88

080073a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073ae:	f3ef 8305 	mrs	r3, IPSR
 80073b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b0f      	cmp	r3, #15
 80073b8:	d914      	bls.n	80073e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <vPortValidateInterruptPriority+0x70>)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073c4:	4b15      	ldr	r3, [pc, #84]	; (800741c <vPortValidateInterruptPriority+0x74>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	7afa      	ldrb	r2, [r7, #11]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d20a      	bcs.n	80073e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	607b      	str	r3, [r7, #4]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073e4:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <vPortValidateInterruptPriority+0x78>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073ec:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <vPortValidateInterruptPriority+0x7c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d90a      	bls.n	800740a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	603b      	str	r3, [r7, #0]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <vPortValidateInterruptPriority+0x60>
	}
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	e000e3f0 	.word	0xe000e3f0
 800741c:	20000d7c 	.word	0x20000d7c
 8007420:	e000ed0c 	.word	0xe000ed0c
 8007424:	20000d80 	.word	0x20000d80

08007428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007434:	f7fe fd9c 	bl	8005f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007438:	4b5b      	ldr	r3, [pc, #364]	; (80075a8 <pvPortMalloc+0x180>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007440:	f000 f920 	bl	8007684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007444:	4b59      	ldr	r3, [pc, #356]	; (80075ac <pvPortMalloc+0x184>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	f040 8093 	bne.w	8007578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01d      	beq.n	8007494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007458:	2208      	movs	r2, #8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d014      	beq.n	8007494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	3308      	adds	r3, #8
 8007472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <pvPortMalloc+0x6c>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	617b      	str	r3, [r7, #20]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d06e      	beq.n	8007578 <pvPortMalloc+0x150>
 800749a:	4b45      	ldr	r3, [pc, #276]	; (80075b0 <pvPortMalloc+0x188>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d869      	bhi.n	8007578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074a4:	4b43      	ldr	r3, [pc, #268]	; (80075b4 <pvPortMalloc+0x18c>)
 80074a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074a8:	4b42      	ldr	r3, [pc, #264]	; (80075b4 <pvPortMalloc+0x18c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ae:	e004      	b.n	80074ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <pvPortMalloc+0xa4>
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f1      	bne.n	80074b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074cc:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <pvPortMalloc+0x180>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d050      	beq.n	8007578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2208      	movs	r2, #8
 80074dc:	4413      	add	r3, r2
 80074de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	2308      	movs	r3, #8
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d91f      	bls.n	8007538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <pvPortMalloc+0xf8>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	613b      	str	r3, [r7, #16]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007532:	69b8      	ldr	r0, [r7, #24]
 8007534:	f000 f908 	bl	8007748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007538:	4b1d      	ldr	r3, [pc, #116]	; (80075b0 <pvPortMalloc+0x188>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <pvPortMalloc+0x188>)
 8007544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007546:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <pvPortMalloc+0x188>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <pvPortMalloc+0x190>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d203      	bcs.n	800755a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007552:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <pvPortMalloc+0x188>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <pvPortMalloc+0x190>)
 8007558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	4b13      	ldr	r3, [pc, #76]	; (80075ac <pvPortMalloc+0x184>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	431a      	orrs	r2, r3
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800756e:	4b13      	ldr	r3, [pc, #76]	; (80075bc <pvPortMalloc+0x194>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3301      	adds	r3, #1
 8007574:	4a11      	ldr	r2, [pc, #68]	; (80075bc <pvPortMalloc+0x194>)
 8007576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007578:	f7fe fd08 	bl	8005f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <pvPortMalloc+0x174>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60fb      	str	r3, [r7, #12]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <pvPortMalloc+0x172>
	return pvReturn;
 800759c:	69fb      	ldr	r3, [r7, #28]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20001944 	.word	0x20001944
 80075ac:	20001958 	.word	0x20001958
 80075b0:	20001948 	.word	0x20001948
 80075b4:	2000193c 	.word	0x2000193c
 80075b8:	2000194c 	.word	0x2000194c
 80075bc:	20001950 	.word	0x20001950

080075c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d04d      	beq.n	800766e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075d2:	2308      	movs	r3, #8
 80075d4:	425b      	negs	r3, r3
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4413      	add	r3, r2
 80075da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	4b24      	ldr	r3, [pc, #144]	; (8007678 <vPortFree+0xb8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <vPortFree+0x44>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60fb      	str	r3, [r7, #12]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <vPortFree+0x62>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60bb      	str	r3, [r7, #8]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <vPortFree+0xb8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4013      	ands	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01e      	beq.n	800766e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11a      	bne.n	800766e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <vPortFree+0xb8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	43db      	mvns	r3, r3
 8007642:	401a      	ands	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007648:	f7fe fc92 	bl	8005f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <vPortFree+0xbc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4413      	add	r3, r2
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <vPortFree+0xbc>)
 8007658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800765a:	6938      	ldr	r0, [r7, #16]
 800765c:	f000 f874 	bl	8007748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <vPortFree+0xc0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	4a06      	ldr	r2, [pc, #24]	; (8007680 <vPortFree+0xc0>)
 8007668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800766a:	f7fe fc8f 	bl	8005f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800766e:	bf00      	nop
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20001958 	.word	0x20001958
 800767c:	20001948 	.word	0x20001948
 8007680:	20001954 	.word	0x20001954

08007684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800768a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800768e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007690:	4b27      	ldr	r3, [pc, #156]	; (8007730 <prvHeapInit+0xac>)
 8007692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3307      	adds	r3, #7
 80076a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0307 	bic.w	r3, r3, #7
 80076aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <prvHeapInit+0xac>)
 80076b4:	4413      	add	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076bc:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <prvHeapInit+0xb0>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <prvHeapInit+0xb0>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076d0:	2208      	movs	r2, #8
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0307 	bic.w	r3, r3, #7
 80076de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a15      	ldr	r2, [pc, #84]	; (8007738 <prvHeapInit+0xb4>)
 80076e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <prvHeapInit+0xb4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <prvHeapInit+0xb4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	1ad2      	subs	r2, r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <prvHeapInit+0xb4>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <prvHeapInit+0xb8>)
 8007712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <prvHeapInit+0xbc>)
 800771a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <prvHeapInit+0xc0>)
 800771e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	20000d84 	.word	0x20000d84
 8007734:	2000193c 	.word	0x2000193c
 8007738:	20001944 	.word	0x20001944
 800773c:	2000194c 	.word	0x2000194c
 8007740:	20001948 	.word	0x20001948
 8007744:	20001958 	.word	0x20001958

08007748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007750:	4b28      	ldr	r3, [pc, #160]	; (80077f4 <prvInsertBlockIntoFreeList+0xac>)
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e002      	b.n	800775c <prvInsertBlockIntoFreeList+0x14>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	429a      	cmp	r2, r3
 8007764:	d8f7      	bhi.n	8007756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	d108      	bne.n	800778a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	441a      	add	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d118      	bne.n	80077d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <prvInsertBlockIntoFreeList+0xb0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d00d      	beq.n	80077c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	441a      	add	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e008      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <prvInsertBlockIntoFreeList+0xb0>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e003      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d002      	beq.n	80077e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000193c 	.word	0x2000193c
 80077f8:	20001944 	.word	0x20001944

080077fc <__errno>:
 80077fc:	4b01      	ldr	r3, [pc, #4]	; (8007804 <__errno+0x8>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000010 	.word	0x20000010

08007808 <__libc_init_array>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4d0d      	ldr	r5, [pc, #52]	; (8007840 <__libc_init_array+0x38>)
 800780c:	4c0d      	ldr	r4, [pc, #52]	; (8007844 <__libc_init_array+0x3c>)
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	2600      	movs	r6, #0
 8007814:	42a6      	cmp	r6, r4
 8007816:	d109      	bne.n	800782c <__libc_init_array+0x24>
 8007818:	4d0b      	ldr	r5, [pc, #44]	; (8007848 <__libc_init_array+0x40>)
 800781a:	4c0c      	ldr	r4, [pc, #48]	; (800784c <__libc_init_array+0x44>)
 800781c:	f001 f80c 	bl	8008838 <_init>
 8007820:	1b64      	subs	r4, r4, r5
 8007822:	10a4      	asrs	r4, r4, #2
 8007824:	2600      	movs	r6, #0
 8007826:	42a6      	cmp	r6, r4
 8007828:	d105      	bne.n	8007836 <__libc_init_array+0x2e>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007830:	4798      	blx	r3
 8007832:	3601      	adds	r6, #1
 8007834:	e7ee      	b.n	8007814 <__libc_init_array+0xc>
 8007836:	f855 3b04 	ldr.w	r3, [r5], #4
 800783a:	4798      	blx	r3
 800783c:	3601      	adds	r6, #1
 800783e:	e7f2      	b.n	8007826 <__libc_init_array+0x1e>
 8007840:	08008b60 	.word	0x08008b60
 8007844:	08008b60 	.word	0x08008b60
 8007848:	08008b60 	.word	0x08008b60
 800784c:	08008b64 	.word	0x08008b64

08007850 <memcpy>:
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007858:	d100      	bne.n	800785c <memcpy+0xc>
 800785a:	4770      	bx	lr
 800785c:	b510      	push	{r4, lr}
 800785e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007866:	4291      	cmp	r1, r2
 8007868:	d1f9      	bne.n	800785e <memcpy+0xe>
 800786a:	bd10      	pop	{r4, pc}

0800786c <memset>:
 800786c:	4402      	add	r2, r0
 800786e:	4603      	mov	r3, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <iprintf>:
 800787c:	b40f      	push	{r0, r1, r2, r3}
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <iprintf+0x2c>)
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	b124      	cbz	r4, 8007890 <iprintf+0x14>
 8007886:	69a3      	ldr	r3, [r4, #24]
 8007888:	b913      	cbnz	r3, 8007890 <iprintf+0x14>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 fa70 	bl	8007d70 <__sinit>
 8007890:	ab05      	add	r3, sp, #20
 8007892:	9a04      	ldr	r2, [sp, #16]
 8007894:	68a1      	ldr	r1, [r4, #8]
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fc41 	bl	8008120 <_vfiprintf_r>
 800789e:	b002      	add	sp, #8
 80078a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a4:	b004      	add	sp, #16
 80078a6:	4770      	bx	lr
 80078a8:	20000010 	.word	0x20000010

080078ac <_puts_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	460e      	mov	r6, r1
 80078b0:	4605      	mov	r5, r0
 80078b2:	b118      	cbz	r0, 80078bc <_puts_r+0x10>
 80078b4:	6983      	ldr	r3, [r0, #24]
 80078b6:	b90b      	cbnz	r3, 80078bc <_puts_r+0x10>
 80078b8:	f000 fa5a 	bl	8007d70 <__sinit>
 80078bc:	69ab      	ldr	r3, [r5, #24]
 80078be:	68ac      	ldr	r4, [r5, #8]
 80078c0:	b913      	cbnz	r3, 80078c8 <_puts_r+0x1c>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 fa54 	bl	8007d70 <__sinit>
 80078c8:	4b2c      	ldr	r3, [pc, #176]	; (800797c <_puts_r+0xd0>)
 80078ca:	429c      	cmp	r4, r3
 80078cc:	d120      	bne.n	8007910 <_puts_r+0x64>
 80078ce:	686c      	ldr	r4, [r5, #4]
 80078d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_puts_r+0x36>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_puts_r+0x36>
 80078dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078de:	f000 fae5 	bl	8007eac <__retarget_lock_acquire_recursive>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	0719      	lsls	r1, r3, #28
 80078e6:	d51d      	bpl.n	8007924 <_puts_r+0x78>
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	b1db      	cbz	r3, 8007924 <_puts_r+0x78>
 80078ec:	3e01      	subs	r6, #1
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f4:	3b01      	subs	r3, #1
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	bb39      	cbnz	r1, 800794a <_puts_r+0x9e>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da38      	bge.n	8007970 <_puts_r+0xc4>
 80078fe:	4622      	mov	r2, r4
 8007900:	210a      	movs	r1, #10
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f85a 	bl	80079bc <__swbuf_r>
 8007908:	3001      	adds	r0, #1
 800790a:	d011      	beq.n	8007930 <_puts_r+0x84>
 800790c:	250a      	movs	r5, #10
 800790e:	e011      	b.n	8007934 <_puts_r+0x88>
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <_puts_r+0xd4>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <_puts_r+0x6e>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7da      	b.n	80078d0 <_puts_r+0x24>
 800791a:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <_puts_r+0xd8>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7d5      	b.n	80078d0 <_puts_r+0x24>
 8007924:	4621      	mov	r1, r4
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f89a 	bl	8007a60 <__swsetup_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	d0dd      	beq.n	80078ec <_puts_r+0x40>
 8007930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007936:	07da      	lsls	r2, r3, #31
 8007938:	d405      	bmi.n	8007946 <_puts_r+0x9a>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	059b      	lsls	r3, r3, #22
 800793e:	d402      	bmi.n	8007946 <_puts_r+0x9a>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f000 fab4 	bl	8007eae <__retarget_lock_release_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	bd70      	pop	{r4, r5, r6, pc}
 800794a:	2b00      	cmp	r3, #0
 800794c:	da04      	bge.n	8007958 <_puts_r+0xac>
 800794e:	69a2      	ldr	r2, [r4, #24]
 8007950:	429a      	cmp	r2, r3
 8007952:	dc06      	bgt.n	8007962 <_puts_r+0xb6>
 8007954:	290a      	cmp	r1, #10
 8007956:	d004      	beq.n	8007962 <_puts_r+0xb6>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	6022      	str	r2, [r4, #0]
 800795e:	7019      	strb	r1, [r3, #0]
 8007960:	e7c5      	b.n	80078ee <_puts_r+0x42>
 8007962:	4622      	mov	r2, r4
 8007964:	4628      	mov	r0, r5
 8007966:	f000 f829 	bl	80079bc <__swbuf_r>
 800796a:	3001      	adds	r0, #1
 800796c:	d1bf      	bne.n	80078ee <_puts_r+0x42>
 800796e:	e7df      	b.n	8007930 <_puts_r+0x84>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	250a      	movs	r5, #10
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	701d      	strb	r5, [r3, #0]
 800797a:	e7db      	b.n	8007934 <_puts_r+0x88>
 800797c:	08008ae4 	.word	0x08008ae4
 8007980:	08008b04 	.word	0x08008b04
 8007984:	08008ac4 	.word	0x08008ac4

08007988 <puts>:
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <puts+0xc>)
 800798a:	4601      	mov	r1, r0
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f7ff bf8d 	b.w	80078ac <_puts_r>
 8007992:	bf00      	nop
 8007994:	20000010 	.word	0x20000010

08007998 <strncmp>:
 8007998:	b510      	push	{r4, lr}
 800799a:	b16a      	cbz	r2, 80079b8 <strncmp+0x20>
 800799c:	3901      	subs	r1, #1
 800799e:	1884      	adds	r4, r0, r2
 80079a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d103      	bne.n	80079b4 <strncmp+0x1c>
 80079ac:	42a0      	cmp	r0, r4
 80079ae:	d001      	beq.n	80079b4 <strncmp+0x1c>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f5      	bne.n	80079a0 <strncmp+0x8>
 80079b4:	1a98      	subs	r0, r3, r2
 80079b6:	bd10      	pop	{r4, pc}
 80079b8:	4610      	mov	r0, r2
 80079ba:	e7fc      	b.n	80079b6 <strncmp+0x1e>

080079bc <__swbuf_r>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	460e      	mov	r6, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	4605      	mov	r5, r0
 80079c4:	b118      	cbz	r0, 80079ce <__swbuf_r+0x12>
 80079c6:	6983      	ldr	r3, [r0, #24]
 80079c8:	b90b      	cbnz	r3, 80079ce <__swbuf_r+0x12>
 80079ca:	f000 f9d1 	bl	8007d70 <__sinit>
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <__swbuf_r+0x98>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d12b      	bne.n	8007a2c <__swbuf_r+0x70>
 80079d4:	686c      	ldr	r4, [r5, #4]
 80079d6:	69a3      	ldr	r3, [r4, #24]
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	071a      	lsls	r2, r3, #28
 80079de:	d52f      	bpl.n	8007a40 <__swbuf_r+0x84>
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	b36b      	cbz	r3, 8007a40 <__swbuf_r+0x84>
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	6820      	ldr	r0, [r4, #0]
 80079e8:	1ac0      	subs	r0, r0, r3
 80079ea:	6963      	ldr	r3, [r4, #20]
 80079ec:	b2f6      	uxtb	r6, r6
 80079ee:	4283      	cmp	r3, r0
 80079f0:	4637      	mov	r7, r6
 80079f2:	dc04      	bgt.n	80079fe <__swbuf_r+0x42>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 f926 	bl	8007c48 <_fflush_r>
 80079fc:	bb30      	cbnz	r0, 8007a4c <__swbuf_r+0x90>
 80079fe:	68a3      	ldr	r3, [r4, #8]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	60a3      	str	r3, [r4, #8]
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	6022      	str	r2, [r4, #0]
 8007a0a:	701e      	strb	r6, [r3, #0]
 8007a0c:	6963      	ldr	r3, [r4, #20]
 8007a0e:	3001      	adds	r0, #1
 8007a10:	4283      	cmp	r3, r0
 8007a12:	d004      	beq.n	8007a1e <__swbuf_r+0x62>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	07db      	lsls	r3, r3, #31
 8007a18:	d506      	bpl.n	8007a28 <__swbuf_r+0x6c>
 8007a1a:	2e0a      	cmp	r6, #10
 8007a1c:	d104      	bne.n	8007a28 <__swbuf_r+0x6c>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f911 	bl	8007c48 <_fflush_r>
 8007a26:	b988      	cbnz	r0, 8007a4c <__swbuf_r+0x90>
 8007a28:	4638      	mov	r0, r7
 8007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <__swbuf_r+0x9c>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d101      	bne.n	8007a36 <__swbuf_r+0x7a>
 8007a32:	68ac      	ldr	r4, [r5, #8]
 8007a34:	e7cf      	b.n	80079d6 <__swbuf_r+0x1a>
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <__swbuf_r+0xa0>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	bf08      	it	eq
 8007a3c:	68ec      	ldreq	r4, [r5, #12]
 8007a3e:	e7ca      	b.n	80079d6 <__swbuf_r+0x1a>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f80c 	bl	8007a60 <__swsetup_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0cb      	beq.n	80079e4 <__swbuf_r+0x28>
 8007a4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a50:	e7ea      	b.n	8007a28 <__swbuf_r+0x6c>
 8007a52:	bf00      	nop
 8007a54:	08008ae4 	.word	0x08008ae4
 8007a58:	08008b04 	.word	0x08008b04
 8007a5c:	08008ac4 	.word	0x08008ac4

08007a60 <__swsetup_r>:
 8007a60:	4b32      	ldr	r3, [pc, #200]	; (8007b2c <__swsetup_r+0xcc>)
 8007a62:	b570      	push	{r4, r5, r6, lr}
 8007a64:	681d      	ldr	r5, [r3, #0]
 8007a66:	4606      	mov	r6, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	b125      	cbz	r5, 8007a76 <__swsetup_r+0x16>
 8007a6c:	69ab      	ldr	r3, [r5, #24]
 8007a6e:	b913      	cbnz	r3, 8007a76 <__swsetup_r+0x16>
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f97d 	bl	8007d70 <__sinit>
 8007a76:	4b2e      	ldr	r3, [pc, #184]	; (8007b30 <__swsetup_r+0xd0>)
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	d10f      	bne.n	8007a9c <__swsetup_r+0x3c>
 8007a7c:	686c      	ldr	r4, [r5, #4]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a84:	0719      	lsls	r1, r3, #28
 8007a86:	d42c      	bmi.n	8007ae2 <__swsetup_r+0x82>
 8007a88:	06dd      	lsls	r5, r3, #27
 8007a8a:	d411      	bmi.n	8007ab0 <__swsetup_r+0x50>
 8007a8c:	2309      	movs	r3, #9
 8007a8e:	6033      	str	r3, [r6, #0]
 8007a90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a9a:	e03e      	b.n	8007b1a <__swsetup_r+0xba>
 8007a9c:	4b25      	ldr	r3, [pc, #148]	; (8007b34 <__swsetup_r+0xd4>)
 8007a9e:	429c      	cmp	r4, r3
 8007aa0:	d101      	bne.n	8007aa6 <__swsetup_r+0x46>
 8007aa2:	68ac      	ldr	r4, [r5, #8]
 8007aa4:	e7eb      	b.n	8007a7e <__swsetup_r+0x1e>
 8007aa6:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <__swsetup_r+0xd8>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	bf08      	it	eq
 8007aac:	68ec      	ldreq	r4, [r5, #12]
 8007aae:	e7e6      	b.n	8007a7e <__swsetup_r+0x1e>
 8007ab0:	0758      	lsls	r0, r3, #29
 8007ab2:	d512      	bpl.n	8007ada <__swsetup_r+0x7a>
 8007ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab6:	b141      	cbz	r1, 8007aca <__swsetup_r+0x6a>
 8007ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007abc:	4299      	cmp	r1, r3
 8007abe:	d002      	beq.n	8007ac6 <__swsetup_r+0x66>
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 fa59 	bl	8007f78 <_free_r>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6063      	str	r3, [r4, #4]
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f043 0308 	orr.w	r3, r3, #8
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	b94b      	cbnz	r3, 8007afa <__swsetup_r+0x9a>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af0:	d003      	beq.n	8007afa <__swsetup_r+0x9a>
 8007af2:	4621      	mov	r1, r4
 8007af4:	4630      	mov	r0, r6
 8007af6:	f000 f9ff 	bl	8007ef8 <__smakebuf_r>
 8007afa:	89a0      	ldrh	r0, [r4, #12]
 8007afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b00:	f010 0301 	ands.w	r3, r0, #1
 8007b04:	d00a      	beq.n	8007b1c <__swsetup_r+0xbc>
 8007b06:	2300      	movs	r3, #0
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	425b      	negs	r3, r3
 8007b0e:	61a3      	str	r3, [r4, #24]
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b943      	cbnz	r3, 8007b26 <__swsetup_r+0xc6>
 8007b14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b18:	d1ba      	bne.n	8007a90 <__swsetup_r+0x30>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	0781      	lsls	r1, r0, #30
 8007b1e:	bf58      	it	pl
 8007b20:	6963      	ldrpl	r3, [r4, #20]
 8007b22:	60a3      	str	r3, [r4, #8]
 8007b24:	e7f4      	b.n	8007b10 <__swsetup_r+0xb0>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7f7      	b.n	8007b1a <__swsetup_r+0xba>
 8007b2a:	bf00      	nop
 8007b2c:	20000010 	.word	0x20000010
 8007b30:	08008ae4 	.word	0x08008ae4
 8007b34:	08008b04 	.word	0x08008b04
 8007b38:	08008ac4 	.word	0x08008ac4

08007b3c <__sflush_r>:
 8007b3c:	898a      	ldrh	r2, [r1, #12]
 8007b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	4605      	mov	r5, r0
 8007b44:	0710      	lsls	r0, r2, #28
 8007b46:	460c      	mov	r4, r1
 8007b48:	d458      	bmi.n	8007bfc <__sflush_r+0xc0>
 8007b4a:	684b      	ldr	r3, [r1, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dc05      	bgt.n	8007b5c <__sflush_r+0x20>
 8007b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dc02      	bgt.n	8007b5c <__sflush_r+0x20>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	d0f9      	beq.n	8007b56 <__sflush_r+0x1a>
 8007b62:	2300      	movs	r3, #0
 8007b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b68:	682f      	ldr	r7, [r5, #0]
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	d032      	beq.n	8007bd4 <__sflush_r+0x98>
 8007b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	075a      	lsls	r2, r3, #29
 8007b74:	d505      	bpl.n	8007b82 <__sflush_r+0x46>
 8007b76:	6863      	ldr	r3, [r4, #4]
 8007b78:	1ac0      	subs	r0, r0, r3
 8007b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b7c:	b10b      	cbz	r3, 8007b82 <__sflush_r+0x46>
 8007b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b80:	1ac0      	subs	r0, r0, r3
 8007b82:	2300      	movs	r3, #0
 8007b84:	4602      	mov	r2, r0
 8007b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b88:	6a21      	ldr	r1, [r4, #32]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b0      	blx	r6
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	d106      	bne.n	8007ba2 <__sflush_r+0x66>
 8007b94:	6829      	ldr	r1, [r5, #0]
 8007b96:	291d      	cmp	r1, #29
 8007b98:	d82c      	bhi.n	8007bf4 <__sflush_r+0xb8>
 8007b9a:	4a2a      	ldr	r2, [pc, #168]	; (8007c44 <__sflush_r+0x108>)
 8007b9c:	40ca      	lsrs	r2, r1
 8007b9e:	07d6      	lsls	r6, r2, #31
 8007ba0:	d528      	bpl.n	8007bf4 <__sflush_r+0xb8>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	6062      	str	r2, [r4, #4]
 8007ba6:	04d9      	lsls	r1, r3, #19
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	d504      	bpl.n	8007bb8 <__sflush_r+0x7c>
 8007bae:	1c42      	adds	r2, r0, #1
 8007bb0:	d101      	bne.n	8007bb6 <__sflush_r+0x7a>
 8007bb2:	682b      	ldr	r3, [r5, #0]
 8007bb4:	b903      	cbnz	r3, 8007bb8 <__sflush_r+0x7c>
 8007bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8007bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bba:	602f      	str	r7, [r5, #0]
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d0ca      	beq.n	8007b56 <__sflush_r+0x1a>
 8007bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <__sflush_r+0x92>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f9d5 	bl	8007f78 <_free_r>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007bd2:	e7c1      	b.n	8007b58 <__sflush_r+0x1c>
 8007bd4:	6a21      	ldr	r1, [r4, #32]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b0      	blx	r6
 8007bdc:	1c41      	adds	r1, r0, #1
 8007bde:	d1c7      	bne.n	8007b70 <__sflush_r+0x34>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0c4      	beq.n	8007b70 <__sflush_r+0x34>
 8007be6:	2b1d      	cmp	r3, #29
 8007be8:	d001      	beq.n	8007bee <__sflush_r+0xb2>
 8007bea:	2b16      	cmp	r3, #22
 8007bec:	d101      	bne.n	8007bf2 <__sflush_r+0xb6>
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	e7b1      	b.n	8007b56 <__sflush_r+0x1a>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	e7ad      	b.n	8007b58 <__sflush_r+0x1c>
 8007bfc:	690f      	ldr	r7, [r1, #16]
 8007bfe:	2f00      	cmp	r7, #0
 8007c00:	d0a9      	beq.n	8007b56 <__sflush_r+0x1a>
 8007c02:	0793      	lsls	r3, r2, #30
 8007c04:	680e      	ldr	r6, [r1, #0]
 8007c06:	bf08      	it	eq
 8007c08:	694b      	ldreq	r3, [r1, #20]
 8007c0a:	600f      	str	r7, [r1, #0]
 8007c0c:	bf18      	it	ne
 8007c0e:	2300      	movne	r3, #0
 8007c10:	eba6 0807 	sub.w	r8, r6, r7
 8007c14:	608b      	str	r3, [r1, #8]
 8007c16:	f1b8 0f00 	cmp.w	r8, #0
 8007c1a:	dd9c      	ble.n	8007b56 <__sflush_r+0x1a>
 8007c1c:	6a21      	ldr	r1, [r4, #32]
 8007c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c20:	4643      	mov	r3, r8
 8007c22:	463a      	mov	r2, r7
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b0      	blx	r6
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	dc06      	bgt.n	8007c3a <__sflush_r+0xfe>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c38:	e78e      	b.n	8007b58 <__sflush_r+0x1c>
 8007c3a:	4407      	add	r7, r0
 8007c3c:	eba8 0800 	sub.w	r8, r8, r0
 8007c40:	e7e9      	b.n	8007c16 <__sflush_r+0xda>
 8007c42:	bf00      	nop
 8007c44:	20400001 	.word	0x20400001

08007c48 <_fflush_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	b913      	cbnz	r3, 8007c58 <_fflush_r+0x10>
 8007c52:	2500      	movs	r5, #0
 8007c54:	4628      	mov	r0, r5
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	b118      	cbz	r0, 8007c62 <_fflush_r+0x1a>
 8007c5a:	6983      	ldr	r3, [r0, #24]
 8007c5c:	b90b      	cbnz	r3, 8007c62 <_fflush_r+0x1a>
 8007c5e:	f000 f887 	bl	8007d70 <__sinit>
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <_fflush_r+0x6c>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d11b      	bne.n	8007ca0 <_fflush_r+0x58>
 8007c68:	686c      	ldr	r4, [r5, #4]
 8007c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0ef      	beq.n	8007c52 <_fflush_r+0xa>
 8007c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c74:	07d0      	lsls	r0, r2, #31
 8007c76:	d404      	bmi.n	8007c82 <_fflush_r+0x3a>
 8007c78:	0599      	lsls	r1, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_fflush_r+0x3a>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7e:	f000 f915 	bl	8007eac <__retarget_lock_acquire_recursive>
 8007c82:	4628      	mov	r0, r5
 8007c84:	4621      	mov	r1, r4
 8007c86:	f7ff ff59 	bl	8007b3c <__sflush_r>
 8007c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c8c:	07da      	lsls	r2, r3, #31
 8007c8e:	4605      	mov	r5, r0
 8007c90:	d4e0      	bmi.n	8007c54 <_fflush_r+0xc>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	059b      	lsls	r3, r3, #22
 8007c96:	d4dd      	bmi.n	8007c54 <_fflush_r+0xc>
 8007c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9a:	f000 f908 	bl	8007eae <__retarget_lock_release_recursive>
 8007c9e:	e7d9      	b.n	8007c54 <_fflush_r+0xc>
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <_fflush_r+0x70>)
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	d101      	bne.n	8007caa <_fflush_r+0x62>
 8007ca6:	68ac      	ldr	r4, [r5, #8]
 8007ca8:	e7df      	b.n	8007c6a <_fflush_r+0x22>
 8007caa:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <_fflush_r+0x74>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	bf08      	it	eq
 8007cb0:	68ec      	ldreq	r4, [r5, #12]
 8007cb2:	e7da      	b.n	8007c6a <_fflush_r+0x22>
 8007cb4:	08008ae4 	.word	0x08008ae4
 8007cb8:	08008b04 	.word	0x08008b04
 8007cbc:	08008ac4 	.word	0x08008ac4

08007cc0 <std>:
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cce:	6083      	str	r3, [r0, #8]
 8007cd0:	8181      	strh	r1, [r0, #12]
 8007cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cd4:	81c2      	strh	r2, [r0, #14]
 8007cd6:	6183      	str	r3, [r0, #24]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	2208      	movs	r2, #8
 8007cdc:	305c      	adds	r0, #92	; 0x5c
 8007cde:	f7ff fdc5 	bl	800786c <memset>
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std+0x38>)
 8007ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <std+0x3c>)
 8007ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <std+0x40>)
 8007cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std+0x44>)
 8007cf0:	6224      	str	r4, [r4, #32]
 8007cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	bf00      	nop
 8007cf8:	080086c9 	.word	0x080086c9
 8007cfc:	080086eb 	.word	0x080086eb
 8007d00:	08008723 	.word	0x08008723
 8007d04:	08008747 	.word	0x08008747

08007d08 <_cleanup_r>:
 8007d08:	4901      	ldr	r1, [pc, #4]	; (8007d10 <_cleanup_r+0x8>)
 8007d0a:	f000 b8af 	b.w	8007e6c <_fwalk_reent>
 8007d0e:	bf00      	nop
 8007d10:	08007c49 	.word	0x08007c49

08007d14 <__sfmoreglue>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	1e4a      	subs	r2, r1, #1
 8007d18:	2568      	movs	r5, #104	; 0x68
 8007d1a:	4355      	muls	r5, r2
 8007d1c:	460e      	mov	r6, r1
 8007d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d22:	f000 f979 	bl	8008018 <_malloc_r>
 8007d26:	4604      	mov	r4, r0
 8007d28:	b140      	cbz	r0, 8007d3c <__sfmoreglue+0x28>
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d30:	300c      	adds	r0, #12
 8007d32:	60a0      	str	r0, [r4, #8]
 8007d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d38:	f7ff fd98 	bl	800786c <memset>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}

08007d40 <__sfp_lock_acquire>:
 8007d40:	4801      	ldr	r0, [pc, #4]	; (8007d48 <__sfp_lock_acquire+0x8>)
 8007d42:	f000 b8b3 	b.w	8007eac <__retarget_lock_acquire_recursive>
 8007d46:	bf00      	nop
 8007d48:	20001cac 	.word	0x20001cac

08007d4c <__sfp_lock_release>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	; (8007d54 <__sfp_lock_release+0x8>)
 8007d4e:	f000 b8ae 	b.w	8007eae <__retarget_lock_release_recursive>
 8007d52:	bf00      	nop
 8007d54:	20001cac 	.word	0x20001cac

08007d58 <__sinit_lock_acquire>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__sinit_lock_acquire+0x8>)
 8007d5a:	f000 b8a7 	b.w	8007eac <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20001ca7 	.word	0x20001ca7

08007d64 <__sinit_lock_release>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__sinit_lock_release+0x8>)
 8007d66:	f000 b8a2 	b.w	8007eae <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20001ca7 	.word	0x20001ca7

08007d70 <__sinit>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4604      	mov	r4, r0
 8007d74:	f7ff fff0 	bl	8007d58 <__sinit_lock_acquire>
 8007d78:	69a3      	ldr	r3, [r4, #24]
 8007d7a:	b11b      	cbz	r3, 8007d84 <__sinit+0x14>
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	f7ff bff0 	b.w	8007d64 <__sinit_lock_release>
 8007d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d88:	6523      	str	r3, [r4, #80]	; 0x50
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <__sinit+0x68>)
 8007d8c:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <__sinit+0x6c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	bf04      	itt	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	61a3      	streq	r3, [r4, #24]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 f820 	bl	8007de0 <__sfp>
 8007da0:	6060      	str	r0, [r4, #4]
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f81c 	bl	8007de0 <__sfp>
 8007da8:	60a0      	str	r0, [r4, #8]
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f818 	bl	8007de0 <__sfp>
 8007db0:	2200      	movs	r2, #0
 8007db2:	60e0      	str	r0, [r4, #12]
 8007db4:	2104      	movs	r1, #4
 8007db6:	6860      	ldr	r0, [r4, #4]
 8007db8:	f7ff ff82 	bl	8007cc0 <std>
 8007dbc:	68a0      	ldr	r0, [r4, #8]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	2109      	movs	r1, #9
 8007dc2:	f7ff ff7d 	bl	8007cc0 <std>
 8007dc6:	68e0      	ldr	r0, [r4, #12]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	2112      	movs	r1, #18
 8007dcc:	f7ff ff78 	bl	8007cc0 <std>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	61a3      	str	r3, [r4, #24]
 8007dd4:	e7d2      	b.n	8007d7c <__sinit+0xc>
 8007dd6:	bf00      	nop
 8007dd8:	08008ac0 	.word	0x08008ac0
 8007ddc:	08007d09 	.word	0x08007d09

08007de0 <__sfp>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	4607      	mov	r7, r0
 8007de4:	f7ff ffac 	bl	8007d40 <__sfp_lock_acquire>
 8007de8:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <__sfp+0x84>)
 8007dea:	681e      	ldr	r6, [r3, #0]
 8007dec:	69b3      	ldr	r3, [r6, #24]
 8007dee:	b913      	cbnz	r3, 8007df6 <__sfp+0x16>
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffbd 	bl	8007d70 <__sinit>
 8007df6:	3648      	adds	r6, #72	; 0x48
 8007df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	d503      	bpl.n	8007e08 <__sfp+0x28>
 8007e00:	6833      	ldr	r3, [r6, #0]
 8007e02:	b30b      	cbz	r3, 8007e48 <__sfp+0x68>
 8007e04:	6836      	ldr	r6, [r6, #0]
 8007e06:	e7f7      	b.n	8007df8 <__sfp+0x18>
 8007e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e0c:	b9d5      	cbnz	r5, 8007e44 <__sfp+0x64>
 8007e0e:	4b16      	ldr	r3, [pc, #88]	; (8007e68 <__sfp+0x88>)
 8007e10:	60e3      	str	r3, [r4, #12]
 8007e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e16:	6665      	str	r5, [r4, #100]	; 0x64
 8007e18:	f000 f847 	bl	8007eaa <__retarget_lock_init_recursive>
 8007e1c:	f7ff ff96 	bl	8007d4c <__sfp_lock_release>
 8007e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e28:	6025      	str	r5, [r4, #0]
 8007e2a:	61a5      	str	r5, [r4, #24]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e34:	f7ff fd1a 	bl	800786c <memset>
 8007e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e40:	4620      	mov	r0, r4
 8007e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e44:	3468      	adds	r4, #104	; 0x68
 8007e46:	e7d9      	b.n	8007dfc <__sfp+0x1c>
 8007e48:	2104      	movs	r1, #4
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	f7ff ff62 	bl	8007d14 <__sfmoreglue>
 8007e50:	4604      	mov	r4, r0
 8007e52:	6030      	str	r0, [r6, #0]
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d1d5      	bne.n	8007e04 <__sfp+0x24>
 8007e58:	f7ff ff78 	bl	8007d4c <__sfp_lock_release>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	e7ee      	b.n	8007e40 <__sfp+0x60>
 8007e62:	bf00      	nop
 8007e64:	08008ac0 	.word	0x08008ac0
 8007e68:	ffff0001 	.word	0xffff0001

08007e6c <_fwalk_reent>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	4606      	mov	r6, r0
 8007e72:	4688      	mov	r8, r1
 8007e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e78:	2700      	movs	r7, #0
 8007e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e82:	d505      	bpl.n	8007e90 <_fwalk_reent+0x24>
 8007e84:	6824      	ldr	r4, [r4, #0]
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	d1f7      	bne.n	8007e7a <_fwalk_reent+0xe>
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e90:	89ab      	ldrh	r3, [r5, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d907      	bls.n	8007ea6 <_fwalk_reent+0x3a>
 8007e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	d003      	beq.n	8007ea6 <_fwalk_reent+0x3a>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	47c0      	blx	r8
 8007ea4:	4307      	orrs	r7, r0
 8007ea6:	3568      	adds	r5, #104	; 0x68
 8007ea8:	e7e9      	b.n	8007e7e <_fwalk_reent+0x12>

08007eaa <__retarget_lock_init_recursive>:
 8007eaa:	4770      	bx	lr

08007eac <__retarget_lock_acquire_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_release_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <__swhatbuf_r>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	460e      	mov	r6, r1
 8007eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	b096      	sub	sp, #88	; 0x58
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	461d      	mov	r5, r3
 8007ec0:	da07      	bge.n	8007ed2 <__swhatbuf_r+0x22>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	89b3      	ldrh	r3, [r6, #12]
 8007ec8:	061a      	lsls	r2, r3, #24
 8007eca:	d410      	bmi.n	8007eee <__swhatbuf_r+0x3e>
 8007ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed0:	e00e      	b.n	8007ef0 <__swhatbuf_r+0x40>
 8007ed2:	466a      	mov	r2, sp
 8007ed4:	f000 fc5e 	bl	8008794 <_fstat_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	dbf2      	blt.n	8007ec2 <__swhatbuf_r+0x12>
 8007edc:	9a01      	ldr	r2, [sp, #4]
 8007ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ee6:	425a      	negs	r2, r3
 8007ee8:	415a      	adcs	r2, r3
 8007eea:	602a      	str	r2, [r5, #0]
 8007eec:	e7ee      	b.n	8007ecc <__swhatbuf_r+0x1c>
 8007eee:	2340      	movs	r3, #64	; 0x40
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	b016      	add	sp, #88	; 0x58
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <__smakebuf_r>:
 8007ef8:	898b      	ldrh	r3, [r1, #12]
 8007efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007efc:	079d      	lsls	r5, r3, #30
 8007efe:	4606      	mov	r6, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	d507      	bpl.n	8007f14 <__smakebuf_r+0x1c>
 8007f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	6123      	str	r3, [r4, #16]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	6163      	str	r3, [r4, #20]
 8007f10:	b002      	add	sp, #8
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	ab01      	add	r3, sp, #4
 8007f16:	466a      	mov	r2, sp
 8007f18:	f7ff ffca 	bl	8007eb0 <__swhatbuf_r>
 8007f1c:	9900      	ldr	r1, [sp, #0]
 8007f1e:	4605      	mov	r5, r0
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f879 	bl	8008018 <_malloc_r>
 8007f26:	b948      	cbnz	r0, 8007f3c <__smakebuf_r+0x44>
 8007f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2c:	059a      	lsls	r2, r3, #22
 8007f2e:	d4ef      	bmi.n	8007f10 <__smakebuf_r+0x18>
 8007f30:	f023 0303 	bic.w	r3, r3, #3
 8007f34:	f043 0302 	orr.w	r3, r3, #2
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	e7e3      	b.n	8007f04 <__smakebuf_r+0xc>
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <__smakebuf_r+0x7c>)
 8007f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	6020      	str	r0, [r4, #0]
 8007f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	9b00      	ldr	r3, [sp, #0]
 8007f4c:	6163      	str	r3, [r4, #20]
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	6120      	str	r0, [r4, #16]
 8007f52:	b15b      	cbz	r3, 8007f6c <__smakebuf_r+0x74>
 8007f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 fc2d 	bl	80087b8 <_isatty_r>
 8007f5e:	b128      	cbz	r0, 8007f6c <__smakebuf_r+0x74>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	89a0      	ldrh	r0, [r4, #12]
 8007f6e:	4305      	orrs	r5, r0
 8007f70:	81a5      	strh	r5, [r4, #12]
 8007f72:	e7cd      	b.n	8007f10 <__smakebuf_r+0x18>
 8007f74:	08007d09 	.word	0x08007d09

08007f78 <_free_r>:
 8007f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f7a:	2900      	cmp	r1, #0
 8007f7c:	d048      	beq.n	8008010 <_free_r+0x98>
 8007f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f82:	9001      	str	r0, [sp, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f1a1 0404 	sub.w	r4, r1, #4
 8007f8a:	bfb8      	it	lt
 8007f8c:	18e4      	addlt	r4, r4, r3
 8007f8e:	f000 fc35 	bl	80087fc <__malloc_lock>
 8007f92:	4a20      	ldr	r2, [pc, #128]	; (8008014 <_free_r+0x9c>)
 8007f94:	9801      	ldr	r0, [sp, #4]
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	4615      	mov	r5, r2
 8007f9a:	b933      	cbnz	r3, 8007faa <_free_r+0x32>
 8007f9c:	6063      	str	r3, [r4, #4]
 8007f9e:	6014      	str	r4, [r2, #0]
 8007fa0:	b003      	add	sp, #12
 8007fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fa6:	f000 bc2f 	b.w	8008808 <__malloc_unlock>
 8007faa:	42a3      	cmp	r3, r4
 8007fac:	d90b      	bls.n	8007fc6 <_free_r+0x4e>
 8007fae:	6821      	ldr	r1, [r4, #0]
 8007fb0:	1862      	adds	r2, r4, r1
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bf04      	itt	eq
 8007fb6:	681a      	ldreq	r2, [r3, #0]
 8007fb8:	685b      	ldreq	r3, [r3, #4]
 8007fba:	6063      	str	r3, [r4, #4]
 8007fbc:	bf04      	itt	eq
 8007fbe:	1852      	addeq	r2, r2, r1
 8007fc0:	6022      	streq	r2, [r4, #0]
 8007fc2:	602c      	str	r4, [r5, #0]
 8007fc4:	e7ec      	b.n	8007fa0 <_free_r+0x28>
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	b10b      	cbz	r3, 8007fd0 <_free_r+0x58>
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d9fa      	bls.n	8007fc6 <_free_r+0x4e>
 8007fd0:	6811      	ldr	r1, [r2, #0]
 8007fd2:	1855      	adds	r5, r2, r1
 8007fd4:	42a5      	cmp	r5, r4
 8007fd6:	d10b      	bne.n	8007ff0 <_free_r+0x78>
 8007fd8:	6824      	ldr	r4, [r4, #0]
 8007fda:	4421      	add	r1, r4
 8007fdc:	1854      	adds	r4, r2, r1
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	d1dd      	bne.n	8007fa0 <_free_r+0x28>
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	6053      	str	r3, [r2, #4]
 8007fea:	4421      	add	r1, r4
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	e7d7      	b.n	8007fa0 <_free_r+0x28>
 8007ff0:	d902      	bls.n	8007ff8 <_free_r+0x80>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	e7d3      	b.n	8007fa0 <_free_r+0x28>
 8007ff8:	6825      	ldr	r5, [r4, #0]
 8007ffa:	1961      	adds	r1, r4, r5
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	bf04      	itt	eq
 8008000:	6819      	ldreq	r1, [r3, #0]
 8008002:	685b      	ldreq	r3, [r3, #4]
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	bf04      	itt	eq
 8008008:	1949      	addeq	r1, r1, r5
 800800a:	6021      	streq	r1, [r4, #0]
 800800c:	6054      	str	r4, [r2, #4]
 800800e:	e7c7      	b.n	8007fa0 <_free_r+0x28>
 8008010:	b003      	add	sp, #12
 8008012:	bd30      	pop	{r4, r5, pc}
 8008014:	2000195c 	.word	0x2000195c

08008018 <_malloc_r>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	1ccd      	adds	r5, r1, #3
 800801c:	f025 0503 	bic.w	r5, r5, #3
 8008020:	3508      	adds	r5, #8
 8008022:	2d0c      	cmp	r5, #12
 8008024:	bf38      	it	cc
 8008026:	250c      	movcc	r5, #12
 8008028:	2d00      	cmp	r5, #0
 800802a:	4606      	mov	r6, r0
 800802c:	db01      	blt.n	8008032 <_malloc_r+0x1a>
 800802e:	42a9      	cmp	r1, r5
 8008030:	d903      	bls.n	800803a <_malloc_r+0x22>
 8008032:	230c      	movs	r3, #12
 8008034:	6033      	str	r3, [r6, #0]
 8008036:	2000      	movs	r0, #0
 8008038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803a:	f000 fbdf 	bl	80087fc <__malloc_lock>
 800803e:	4921      	ldr	r1, [pc, #132]	; (80080c4 <_malloc_r+0xac>)
 8008040:	680a      	ldr	r2, [r1, #0]
 8008042:	4614      	mov	r4, r2
 8008044:	b99c      	cbnz	r4, 800806e <_malloc_r+0x56>
 8008046:	4f20      	ldr	r7, [pc, #128]	; (80080c8 <_malloc_r+0xb0>)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	b923      	cbnz	r3, 8008056 <_malloc_r+0x3e>
 800804c:	4621      	mov	r1, r4
 800804e:	4630      	mov	r0, r6
 8008050:	f000 fb2a 	bl	80086a8 <_sbrk_r>
 8008054:	6038      	str	r0, [r7, #0]
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	f000 fb25 	bl	80086a8 <_sbrk_r>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	d123      	bne.n	80080aa <_malloc_r+0x92>
 8008062:	230c      	movs	r3, #12
 8008064:	6033      	str	r3, [r6, #0]
 8008066:	4630      	mov	r0, r6
 8008068:	f000 fbce 	bl	8008808 <__malloc_unlock>
 800806c:	e7e3      	b.n	8008036 <_malloc_r+0x1e>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	1b5b      	subs	r3, r3, r5
 8008072:	d417      	bmi.n	80080a4 <_malloc_r+0x8c>
 8008074:	2b0b      	cmp	r3, #11
 8008076:	d903      	bls.n	8008080 <_malloc_r+0x68>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	441c      	add	r4, r3
 800807c:	6025      	str	r5, [r4, #0]
 800807e:	e004      	b.n	800808a <_malloc_r+0x72>
 8008080:	6863      	ldr	r3, [r4, #4]
 8008082:	42a2      	cmp	r2, r4
 8008084:	bf0c      	ite	eq
 8008086:	600b      	streq	r3, [r1, #0]
 8008088:	6053      	strne	r3, [r2, #4]
 800808a:	4630      	mov	r0, r6
 800808c:	f000 fbbc 	bl	8008808 <__malloc_unlock>
 8008090:	f104 000b 	add.w	r0, r4, #11
 8008094:	1d23      	adds	r3, r4, #4
 8008096:	f020 0007 	bic.w	r0, r0, #7
 800809a:	1ac2      	subs	r2, r0, r3
 800809c:	d0cc      	beq.n	8008038 <_malloc_r+0x20>
 800809e:	1a1b      	subs	r3, r3, r0
 80080a0:	50a3      	str	r3, [r4, r2]
 80080a2:	e7c9      	b.n	8008038 <_malloc_r+0x20>
 80080a4:	4622      	mov	r2, r4
 80080a6:	6864      	ldr	r4, [r4, #4]
 80080a8:	e7cc      	b.n	8008044 <_malloc_r+0x2c>
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d0e3      	beq.n	800807c <_malloc_r+0x64>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 faf6 	bl	80086a8 <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d1dd      	bne.n	800807c <_malloc_r+0x64>
 80080c0:	e7cf      	b.n	8008062 <_malloc_r+0x4a>
 80080c2:	bf00      	nop
 80080c4:	2000195c 	.word	0x2000195c
 80080c8:	20001960 	.word	0x20001960

080080cc <__sfputc_r>:
 80080cc:	6893      	ldr	r3, [r2, #8]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	b410      	push	{r4}
 80080d4:	6093      	str	r3, [r2, #8]
 80080d6:	da08      	bge.n	80080ea <__sfputc_r+0x1e>
 80080d8:	6994      	ldr	r4, [r2, #24]
 80080da:	42a3      	cmp	r3, r4
 80080dc:	db01      	blt.n	80080e2 <__sfputc_r+0x16>
 80080de:	290a      	cmp	r1, #10
 80080e0:	d103      	bne.n	80080ea <__sfputc_r+0x1e>
 80080e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e6:	f7ff bc69 	b.w	80079bc <__swbuf_r>
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	1c58      	adds	r0, r3, #1
 80080ee:	6010      	str	r0, [r2, #0]
 80080f0:	7019      	strb	r1, [r3, #0]
 80080f2:	4608      	mov	r0, r1
 80080f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <__sfputs_r>:
 80080fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	4614      	mov	r4, r2
 8008102:	18d5      	adds	r5, r2, r3
 8008104:	42ac      	cmp	r4, r5
 8008106:	d101      	bne.n	800810c <__sfputs_r+0x12>
 8008108:	2000      	movs	r0, #0
 800810a:	e007      	b.n	800811c <__sfputs_r+0x22>
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	463a      	mov	r2, r7
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ffda 	bl	80080cc <__sfputc_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d1f3      	bne.n	8008104 <__sfputs_r+0xa>
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008120 <_vfiprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	460d      	mov	r5, r1
 8008126:	b09d      	sub	sp, #116	; 0x74
 8008128:	4614      	mov	r4, r2
 800812a:	4698      	mov	r8, r3
 800812c:	4606      	mov	r6, r0
 800812e:	b118      	cbz	r0, 8008138 <_vfiprintf_r+0x18>
 8008130:	6983      	ldr	r3, [r0, #24]
 8008132:	b90b      	cbnz	r3, 8008138 <_vfiprintf_r+0x18>
 8008134:	f7ff fe1c 	bl	8007d70 <__sinit>
 8008138:	4b89      	ldr	r3, [pc, #548]	; (8008360 <_vfiprintf_r+0x240>)
 800813a:	429d      	cmp	r5, r3
 800813c:	d11b      	bne.n	8008176 <_vfiprintf_r+0x56>
 800813e:	6875      	ldr	r5, [r6, #4]
 8008140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008142:	07d9      	lsls	r1, r3, #31
 8008144:	d405      	bmi.n	8008152 <_vfiprintf_r+0x32>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	059a      	lsls	r2, r3, #22
 800814a:	d402      	bmi.n	8008152 <_vfiprintf_r+0x32>
 800814c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800814e:	f7ff fead 	bl	8007eac <__retarget_lock_acquire_recursive>
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	071b      	lsls	r3, r3, #28
 8008156:	d501      	bpl.n	800815c <_vfiprintf_r+0x3c>
 8008158:	692b      	ldr	r3, [r5, #16]
 800815a:	b9eb      	cbnz	r3, 8008198 <_vfiprintf_r+0x78>
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff fc7e 	bl	8007a60 <__swsetup_r>
 8008164:	b1c0      	cbz	r0, 8008198 <_vfiprintf_r+0x78>
 8008166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008168:	07dc      	lsls	r4, r3, #31
 800816a:	d50e      	bpl.n	800818a <_vfiprintf_r+0x6a>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008170:	b01d      	add	sp, #116	; 0x74
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	4b7b      	ldr	r3, [pc, #492]	; (8008364 <_vfiprintf_r+0x244>)
 8008178:	429d      	cmp	r5, r3
 800817a:	d101      	bne.n	8008180 <_vfiprintf_r+0x60>
 800817c:	68b5      	ldr	r5, [r6, #8]
 800817e:	e7df      	b.n	8008140 <_vfiprintf_r+0x20>
 8008180:	4b79      	ldr	r3, [pc, #484]	; (8008368 <_vfiprintf_r+0x248>)
 8008182:	429d      	cmp	r5, r3
 8008184:	bf08      	it	eq
 8008186:	68f5      	ldreq	r5, [r6, #12]
 8008188:	e7da      	b.n	8008140 <_vfiprintf_r+0x20>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	0598      	lsls	r0, r3, #22
 800818e:	d4ed      	bmi.n	800816c <_vfiprintf_r+0x4c>
 8008190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008192:	f7ff fe8c 	bl	8007eae <__retarget_lock_release_recursive>
 8008196:	e7e9      	b.n	800816c <_vfiprintf_r+0x4c>
 8008198:	2300      	movs	r3, #0
 800819a:	9309      	str	r3, [sp, #36]	; 0x24
 800819c:	2320      	movs	r3, #32
 800819e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a6:	2330      	movs	r3, #48	; 0x30
 80081a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800836c <_vfiprintf_r+0x24c>
 80081ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081b0:	f04f 0901 	mov.w	r9, #1
 80081b4:	4623      	mov	r3, r4
 80081b6:	469a      	mov	sl, r3
 80081b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081bc:	b10a      	cbz	r2, 80081c2 <_vfiprintf_r+0xa2>
 80081be:	2a25      	cmp	r2, #37	; 0x25
 80081c0:	d1f9      	bne.n	80081b6 <_vfiprintf_r+0x96>
 80081c2:	ebba 0b04 	subs.w	fp, sl, r4
 80081c6:	d00b      	beq.n	80081e0 <_vfiprintf_r+0xc0>
 80081c8:	465b      	mov	r3, fp
 80081ca:	4622      	mov	r2, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff ff93 	bl	80080fa <__sfputs_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	f000 80aa 	beq.w	800832e <_vfiprintf_r+0x20e>
 80081da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081dc:	445a      	add	r2, fp
 80081de:	9209      	str	r2, [sp, #36]	; 0x24
 80081e0:	f89a 3000 	ldrb.w	r3, [sl]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80a2 	beq.w	800832e <_vfiprintf_r+0x20e>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f4:	f10a 0a01 	add.w	sl, sl, #1
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008200:	931a      	str	r3, [sp, #104]	; 0x68
 8008202:	4654      	mov	r4, sl
 8008204:	2205      	movs	r2, #5
 8008206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820a:	4858      	ldr	r0, [pc, #352]	; (800836c <_vfiprintf_r+0x24c>)
 800820c:	f7f7 ffe8 	bl	80001e0 <memchr>
 8008210:	9a04      	ldr	r2, [sp, #16]
 8008212:	b9d8      	cbnz	r0, 800824c <_vfiprintf_r+0x12c>
 8008214:	06d1      	lsls	r1, r2, #27
 8008216:	bf44      	itt	mi
 8008218:	2320      	movmi	r3, #32
 800821a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821e:	0713      	lsls	r3, r2, #28
 8008220:	bf44      	itt	mi
 8008222:	232b      	movmi	r3, #43	; 0x2b
 8008224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008228:	f89a 3000 	ldrb.w	r3, [sl]
 800822c:	2b2a      	cmp	r3, #42	; 0x2a
 800822e:	d015      	beq.n	800825c <_vfiprintf_r+0x13c>
 8008230:	9a07      	ldr	r2, [sp, #28]
 8008232:	4654      	mov	r4, sl
 8008234:	2000      	movs	r0, #0
 8008236:	f04f 0c0a 	mov.w	ip, #10
 800823a:	4621      	mov	r1, r4
 800823c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008240:	3b30      	subs	r3, #48	; 0x30
 8008242:	2b09      	cmp	r3, #9
 8008244:	d94e      	bls.n	80082e4 <_vfiprintf_r+0x1c4>
 8008246:	b1b0      	cbz	r0, 8008276 <_vfiprintf_r+0x156>
 8008248:	9207      	str	r2, [sp, #28]
 800824a:	e014      	b.n	8008276 <_vfiprintf_r+0x156>
 800824c:	eba0 0308 	sub.w	r3, r0, r8
 8008250:	fa09 f303 	lsl.w	r3, r9, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	46a2      	mov	sl, r4
 800825a:	e7d2      	b.n	8008202 <_vfiprintf_r+0xe2>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	1d19      	adds	r1, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	9103      	str	r1, [sp, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfbb      	ittet	lt
 8008268:	425b      	neglt	r3, r3
 800826a:	f042 0202 	orrlt.w	r2, r2, #2
 800826e:	9307      	strge	r3, [sp, #28]
 8008270:	9307      	strlt	r3, [sp, #28]
 8008272:	bfb8      	it	lt
 8008274:	9204      	strlt	r2, [sp, #16]
 8008276:	7823      	ldrb	r3, [r4, #0]
 8008278:	2b2e      	cmp	r3, #46	; 0x2e
 800827a:	d10c      	bne.n	8008296 <_vfiprintf_r+0x176>
 800827c:	7863      	ldrb	r3, [r4, #1]
 800827e:	2b2a      	cmp	r3, #42	; 0x2a
 8008280:	d135      	bne.n	80082ee <_vfiprintf_r+0x1ce>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	1d1a      	adds	r2, r3, #4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	9203      	str	r2, [sp, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfb8      	it	lt
 800828e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008292:	3402      	adds	r4, #2
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800837c <_vfiprintf_r+0x25c>
 800829a:	7821      	ldrb	r1, [r4, #0]
 800829c:	2203      	movs	r2, #3
 800829e:	4650      	mov	r0, sl
 80082a0:	f7f7 ff9e 	bl	80001e0 <memchr>
 80082a4:	b140      	cbz	r0, 80082b8 <_vfiprintf_r+0x198>
 80082a6:	2340      	movs	r3, #64	; 0x40
 80082a8:	eba0 000a 	sub.w	r0, r0, sl
 80082ac:	fa03 f000 	lsl.w	r0, r3, r0
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	4303      	orrs	r3, r0
 80082b4:	3401      	adds	r4, #1
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082bc:	482c      	ldr	r0, [pc, #176]	; (8008370 <_vfiprintf_r+0x250>)
 80082be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082c2:	2206      	movs	r2, #6
 80082c4:	f7f7 ff8c 	bl	80001e0 <memchr>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d03f      	beq.n	800834c <_vfiprintf_r+0x22c>
 80082cc:	4b29      	ldr	r3, [pc, #164]	; (8008374 <_vfiprintf_r+0x254>)
 80082ce:	bb1b      	cbnz	r3, 8008318 <_vfiprintf_r+0x1f8>
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	3307      	adds	r3, #7
 80082d4:	f023 0307 	bic.w	r3, r3, #7
 80082d8:	3308      	adds	r3, #8
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082de:	443b      	add	r3, r7
 80082e0:	9309      	str	r3, [sp, #36]	; 0x24
 80082e2:	e767      	b.n	80081b4 <_vfiprintf_r+0x94>
 80082e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e8:	460c      	mov	r4, r1
 80082ea:	2001      	movs	r0, #1
 80082ec:	e7a5      	b.n	800823a <_vfiprintf_r+0x11a>
 80082ee:	2300      	movs	r3, #0
 80082f0:	3401      	adds	r4, #1
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	4619      	mov	r1, r3
 80082f6:	f04f 0c0a 	mov.w	ip, #10
 80082fa:	4620      	mov	r0, r4
 80082fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008300:	3a30      	subs	r2, #48	; 0x30
 8008302:	2a09      	cmp	r2, #9
 8008304:	d903      	bls.n	800830e <_vfiprintf_r+0x1ee>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c5      	beq.n	8008296 <_vfiprintf_r+0x176>
 800830a:	9105      	str	r1, [sp, #20]
 800830c:	e7c3      	b.n	8008296 <_vfiprintf_r+0x176>
 800830e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008312:	4604      	mov	r4, r0
 8008314:	2301      	movs	r3, #1
 8008316:	e7f0      	b.n	80082fa <_vfiprintf_r+0x1da>
 8008318:	ab03      	add	r3, sp, #12
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	462a      	mov	r2, r5
 800831e:	4b16      	ldr	r3, [pc, #88]	; (8008378 <_vfiprintf_r+0x258>)
 8008320:	a904      	add	r1, sp, #16
 8008322:	4630      	mov	r0, r6
 8008324:	f3af 8000 	nop.w
 8008328:	4607      	mov	r7, r0
 800832a:	1c78      	adds	r0, r7, #1
 800832c:	d1d6      	bne.n	80082dc <_vfiprintf_r+0x1bc>
 800832e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008330:	07d9      	lsls	r1, r3, #31
 8008332:	d405      	bmi.n	8008340 <_vfiprintf_r+0x220>
 8008334:	89ab      	ldrh	r3, [r5, #12]
 8008336:	059a      	lsls	r2, r3, #22
 8008338:	d402      	bmi.n	8008340 <_vfiprintf_r+0x220>
 800833a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800833c:	f7ff fdb7 	bl	8007eae <__retarget_lock_release_recursive>
 8008340:	89ab      	ldrh	r3, [r5, #12]
 8008342:	065b      	lsls	r3, r3, #25
 8008344:	f53f af12 	bmi.w	800816c <_vfiprintf_r+0x4c>
 8008348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834a:	e711      	b.n	8008170 <_vfiprintf_r+0x50>
 800834c:	ab03      	add	r3, sp, #12
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	462a      	mov	r2, r5
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <_vfiprintf_r+0x258>)
 8008354:	a904      	add	r1, sp, #16
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f880 	bl	800845c <_printf_i>
 800835c:	e7e4      	b.n	8008328 <_vfiprintf_r+0x208>
 800835e:	bf00      	nop
 8008360:	08008ae4 	.word	0x08008ae4
 8008364:	08008b04 	.word	0x08008b04
 8008368:	08008ac4 	.word	0x08008ac4
 800836c:	08008b24 	.word	0x08008b24
 8008370:	08008b2e 	.word	0x08008b2e
 8008374:	00000000 	.word	0x00000000
 8008378:	080080fb 	.word	0x080080fb
 800837c:	08008b2a 	.word	0x08008b2a

08008380 <_printf_common>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	4616      	mov	r6, r2
 8008386:	4699      	mov	r9, r3
 8008388:	688a      	ldr	r2, [r1, #8]
 800838a:	690b      	ldr	r3, [r1, #16]
 800838c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008390:	4293      	cmp	r3, r2
 8008392:	bfb8      	it	lt
 8008394:	4613      	movlt	r3, r2
 8008396:	6033      	str	r3, [r6, #0]
 8008398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800839c:	4607      	mov	r7, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b10a      	cbz	r2, 80083a6 <_printf_common+0x26>
 80083a2:	3301      	adds	r3, #1
 80083a4:	6033      	str	r3, [r6, #0]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	0699      	lsls	r1, r3, #26
 80083aa:	bf42      	ittt	mi
 80083ac:	6833      	ldrmi	r3, [r6, #0]
 80083ae:	3302      	addmi	r3, #2
 80083b0:	6033      	strmi	r3, [r6, #0]
 80083b2:	6825      	ldr	r5, [r4, #0]
 80083b4:	f015 0506 	ands.w	r5, r5, #6
 80083b8:	d106      	bne.n	80083c8 <_printf_common+0x48>
 80083ba:	f104 0a19 	add.w	sl, r4, #25
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	6832      	ldr	r2, [r6, #0]
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	42ab      	cmp	r3, r5
 80083c6:	dc26      	bgt.n	8008416 <_printf_common+0x96>
 80083c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083cc:	1e13      	subs	r3, r2, #0
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	bf18      	it	ne
 80083d2:	2301      	movne	r3, #1
 80083d4:	0692      	lsls	r2, r2, #26
 80083d6:	d42b      	bmi.n	8008430 <_printf_common+0xb0>
 80083d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083dc:	4649      	mov	r1, r9
 80083de:	4638      	mov	r0, r7
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d01e      	beq.n	8008424 <_printf_common+0xa4>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	68e5      	ldr	r5, [r4, #12]
 80083ea:	6832      	ldr	r2, [r6, #0]
 80083ec:	f003 0306 	and.w	r3, r3, #6
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	bf08      	it	eq
 80083f4:	1aad      	subeq	r5, r5, r2
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	bf0c      	ite	eq
 80083fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008400:	2500      	movne	r5, #0
 8008402:	4293      	cmp	r3, r2
 8008404:	bfc4      	itt	gt
 8008406:	1a9b      	subgt	r3, r3, r2
 8008408:	18ed      	addgt	r5, r5, r3
 800840a:	2600      	movs	r6, #0
 800840c:	341a      	adds	r4, #26
 800840e:	42b5      	cmp	r5, r6
 8008410:	d11a      	bne.n	8008448 <_printf_common+0xc8>
 8008412:	2000      	movs	r0, #0
 8008414:	e008      	b.n	8008428 <_printf_common+0xa8>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4649      	mov	r1, r9
 800841c:	4638      	mov	r0, r7
 800841e:	47c0      	blx	r8
 8008420:	3001      	adds	r0, #1
 8008422:	d103      	bne.n	800842c <_printf_common+0xac>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	3501      	adds	r5, #1
 800842e:	e7c6      	b.n	80083be <_printf_common+0x3e>
 8008430:	18e1      	adds	r1, r4, r3
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	2030      	movs	r0, #48	; 0x30
 8008436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800843a:	4422      	add	r2, r4
 800843c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008444:	3302      	adds	r3, #2
 8008446:	e7c7      	b.n	80083d8 <_printf_common+0x58>
 8008448:	2301      	movs	r3, #1
 800844a:	4622      	mov	r2, r4
 800844c:	4649      	mov	r1, r9
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	3001      	adds	r0, #1
 8008454:	d0e6      	beq.n	8008424 <_printf_common+0xa4>
 8008456:	3601      	adds	r6, #1
 8008458:	e7d9      	b.n	800840e <_printf_common+0x8e>
	...

0800845c <_printf_i>:
 800845c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	4691      	mov	r9, r2
 8008464:	7e27      	ldrb	r7, [r4, #24]
 8008466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008468:	2f78      	cmp	r7, #120	; 0x78
 800846a:	4680      	mov	r8, r0
 800846c:	469a      	mov	sl, r3
 800846e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008472:	d807      	bhi.n	8008484 <_printf_i+0x28>
 8008474:	2f62      	cmp	r7, #98	; 0x62
 8008476:	d80a      	bhi.n	800848e <_printf_i+0x32>
 8008478:	2f00      	cmp	r7, #0
 800847a:	f000 80d8 	beq.w	800862e <_printf_i+0x1d2>
 800847e:	2f58      	cmp	r7, #88	; 0x58
 8008480:	f000 80a3 	beq.w	80085ca <_printf_i+0x16e>
 8008484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800848c:	e03a      	b.n	8008504 <_printf_i+0xa8>
 800848e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008492:	2b15      	cmp	r3, #21
 8008494:	d8f6      	bhi.n	8008484 <_printf_i+0x28>
 8008496:	a001      	add	r0, pc, #4	; (adr r0, 800849c <_printf_i+0x40>)
 8008498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800849c:	080084f5 	.word	0x080084f5
 80084a0:	08008509 	.word	0x08008509
 80084a4:	08008485 	.word	0x08008485
 80084a8:	08008485 	.word	0x08008485
 80084ac:	08008485 	.word	0x08008485
 80084b0:	08008485 	.word	0x08008485
 80084b4:	08008509 	.word	0x08008509
 80084b8:	08008485 	.word	0x08008485
 80084bc:	08008485 	.word	0x08008485
 80084c0:	08008485 	.word	0x08008485
 80084c4:	08008485 	.word	0x08008485
 80084c8:	08008615 	.word	0x08008615
 80084cc:	08008539 	.word	0x08008539
 80084d0:	080085f7 	.word	0x080085f7
 80084d4:	08008485 	.word	0x08008485
 80084d8:	08008485 	.word	0x08008485
 80084dc:	08008637 	.word	0x08008637
 80084e0:	08008485 	.word	0x08008485
 80084e4:	08008539 	.word	0x08008539
 80084e8:	08008485 	.word	0x08008485
 80084ec:	08008485 	.word	0x08008485
 80084f0:	080085ff 	.word	0x080085ff
 80084f4:	680b      	ldr	r3, [r1, #0]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	600a      	str	r2, [r1, #0]
 80084fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008504:	2301      	movs	r3, #1
 8008506:	e0a3      	b.n	8008650 <_printf_i+0x1f4>
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	6808      	ldr	r0, [r1, #0]
 800850c:	062e      	lsls	r6, r5, #24
 800850e:	f100 0304 	add.w	r3, r0, #4
 8008512:	d50a      	bpl.n	800852a <_printf_i+0xce>
 8008514:	6805      	ldr	r5, [r0, #0]
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	2d00      	cmp	r5, #0
 800851a:	da03      	bge.n	8008524 <_printf_i+0xc8>
 800851c:	232d      	movs	r3, #45	; 0x2d
 800851e:	426d      	negs	r5, r5
 8008520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008524:	485e      	ldr	r0, [pc, #376]	; (80086a0 <_printf_i+0x244>)
 8008526:	230a      	movs	r3, #10
 8008528:	e019      	b.n	800855e <_printf_i+0x102>
 800852a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800852e:	6805      	ldr	r5, [r0, #0]
 8008530:	600b      	str	r3, [r1, #0]
 8008532:	bf18      	it	ne
 8008534:	b22d      	sxthne	r5, r5
 8008536:	e7ef      	b.n	8008518 <_printf_i+0xbc>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	6825      	ldr	r5, [r4, #0]
 800853c:	1d18      	adds	r0, r3, #4
 800853e:	6008      	str	r0, [r1, #0]
 8008540:	0628      	lsls	r0, r5, #24
 8008542:	d501      	bpl.n	8008548 <_printf_i+0xec>
 8008544:	681d      	ldr	r5, [r3, #0]
 8008546:	e002      	b.n	800854e <_printf_i+0xf2>
 8008548:	0669      	lsls	r1, r5, #25
 800854a:	d5fb      	bpl.n	8008544 <_printf_i+0xe8>
 800854c:	881d      	ldrh	r5, [r3, #0]
 800854e:	4854      	ldr	r0, [pc, #336]	; (80086a0 <_printf_i+0x244>)
 8008550:	2f6f      	cmp	r7, #111	; 0x6f
 8008552:	bf0c      	ite	eq
 8008554:	2308      	moveq	r3, #8
 8008556:	230a      	movne	r3, #10
 8008558:	2100      	movs	r1, #0
 800855a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800855e:	6866      	ldr	r6, [r4, #4]
 8008560:	60a6      	str	r6, [r4, #8]
 8008562:	2e00      	cmp	r6, #0
 8008564:	bfa2      	ittt	ge
 8008566:	6821      	ldrge	r1, [r4, #0]
 8008568:	f021 0104 	bicge.w	r1, r1, #4
 800856c:	6021      	strge	r1, [r4, #0]
 800856e:	b90d      	cbnz	r5, 8008574 <_printf_i+0x118>
 8008570:	2e00      	cmp	r6, #0
 8008572:	d04d      	beq.n	8008610 <_printf_i+0x1b4>
 8008574:	4616      	mov	r6, r2
 8008576:	fbb5 f1f3 	udiv	r1, r5, r3
 800857a:	fb03 5711 	mls	r7, r3, r1, r5
 800857e:	5dc7      	ldrb	r7, [r0, r7]
 8008580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008584:	462f      	mov	r7, r5
 8008586:	42bb      	cmp	r3, r7
 8008588:	460d      	mov	r5, r1
 800858a:	d9f4      	bls.n	8008576 <_printf_i+0x11a>
 800858c:	2b08      	cmp	r3, #8
 800858e:	d10b      	bne.n	80085a8 <_printf_i+0x14c>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	07df      	lsls	r7, r3, #31
 8008594:	d508      	bpl.n	80085a8 <_printf_i+0x14c>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	6861      	ldr	r1, [r4, #4]
 800859a:	4299      	cmp	r1, r3
 800859c:	bfde      	ittt	le
 800859e:	2330      	movle	r3, #48	; 0x30
 80085a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085a8:	1b92      	subs	r2, r2, r6
 80085aa:	6122      	str	r2, [r4, #16]
 80085ac:	f8cd a000 	str.w	sl, [sp]
 80085b0:	464b      	mov	r3, r9
 80085b2:	aa03      	add	r2, sp, #12
 80085b4:	4621      	mov	r1, r4
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7ff fee2 	bl	8008380 <_printf_common>
 80085bc:	3001      	adds	r0, #1
 80085be:	d14c      	bne.n	800865a <_printf_i+0x1fe>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c4:	b004      	add	sp, #16
 80085c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ca:	4835      	ldr	r0, [pc, #212]	; (80086a0 <_printf_i+0x244>)
 80085cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	680e      	ldr	r6, [r1, #0]
 80085d4:	061f      	lsls	r7, r3, #24
 80085d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085da:	600e      	str	r6, [r1, #0]
 80085dc:	d514      	bpl.n	8008608 <_printf_i+0x1ac>
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	bf44      	itt	mi
 80085e2:	f043 0320 	orrmi.w	r3, r3, #32
 80085e6:	6023      	strmi	r3, [r4, #0]
 80085e8:	b91d      	cbnz	r5, 80085f2 <_printf_i+0x196>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f023 0320 	bic.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2310      	movs	r3, #16
 80085f4:	e7b0      	b.n	8008558 <_printf_i+0xfc>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	f043 0320 	orr.w	r3, r3, #32
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	2378      	movs	r3, #120	; 0x78
 8008600:	4828      	ldr	r0, [pc, #160]	; (80086a4 <_printf_i+0x248>)
 8008602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008606:	e7e3      	b.n	80085d0 <_printf_i+0x174>
 8008608:	065e      	lsls	r6, r3, #25
 800860a:	bf48      	it	mi
 800860c:	b2ad      	uxthmi	r5, r5
 800860e:	e7e6      	b.n	80085de <_printf_i+0x182>
 8008610:	4616      	mov	r6, r2
 8008612:	e7bb      	b.n	800858c <_printf_i+0x130>
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	6826      	ldr	r6, [r4, #0]
 8008618:	6960      	ldr	r0, [r4, #20]
 800861a:	1d1d      	adds	r5, r3, #4
 800861c:	600d      	str	r5, [r1, #0]
 800861e:	0635      	lsls	r5, r6, #24
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	d501      	bpl.n	8008628 <_printf_i+0x1cc>
 8008624:	6018      	str	r0, [r3, #0]
 8008626:	e002      	b.n	800862e <_printf_i+0x1d2>
 8008628:	0671      	lsls	r1, r6, #25
 800862a:	d5fb      	bpl.n	8008624 <_printf_i+0x1c8>
 800862c:	8018      	strh	r0, [r3, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	4616      	mov	r6, r2
 8008634:	e7ba      	b.n	80085ac <_printf_i+0x150>
 8008636:	680b      	ldr	r3, [r1, #0]
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	600a      	str	r2, [r1, #0]
 800863c:	681e      	ldr	r6, [r3, #0]
 800863e:	6862      	ldr	r2, [r4, #4]
 8008640:	2100      	movs	r1, #0
 8008642:	4630      	mov	r0, r6
 8008644:	f7f7 fdcc 	bl	80001e0 <memchr>
 8008648:	b108      	cbz	r0, 800864e <_printf_i+0x1f2>
 800864a:	1b80      	subs	r0, r0, r6
 800864c:	6060      	str	r0, [r4, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	2300      	movs	r3, #0
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008658:	e7a8      	b.n	80085ac <_printf_i+0x150>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d0ab      	beq.n	80085c0 <_printf_i+0x164>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	079b      	lsls	r3, r3, #30
 800866c:	d413      	bmi.n	8008696 <_printf_i+0x23a>
 800866e:	68e0      	ldr	r0, [r4, #12]
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	4298      	cmp	r0, r3
 8008674:	bfb8      	it	lt
 8008676:	4618      	movlt	r0, r3
 8008678:	e7a4      	b.n	80085c4 <_printf_i+0x168>
 800867a:	2301      	movs	r3, #1
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	47d0      	blx	sl
 8008684:	3001      	adds	r0, #1
 8008686:	d09b      	beq.n	80085c0 <_printf_i+0x164>
 8008688:	3501      	adds	r5, #1
 800868a:	68e3      	ldr	r3, [r4, #12]
 800868c:	9903      	ldr	r1, [sp, #12]
 800868e:	1a5b      	subs	r3, r3, r1
 8008690:	42ab      	cmp	r3, r5
 8008692:	dcf2      	bgt.n	800867a <_printf_i+0x21e>
 8008694:	e7eb      	b.n	800866e <_printf_i+0x212>
 8008696:	2500      	movs	r5, #0
 8008698:	f104 0619 	add.w	r6, r4, #25
 800869c:	e7f5      	b.n	800868a <_printf_i+0x22e>
 800869e:	bf00      	nop
 80086a0:	08008b35 	.word	0x08008b35
 80086a4:	08008b46 	.word	0x08008b46

080086a8 <_sbrk_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_sbrk_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7f8 fd8a 	bl	80011cc <_sbrk>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_sbrk_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_sbrk_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	20001cb0 	.word	0x20001cb0

080086c8 <__sread>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	460c      	mov	r4, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	f000 f8a0 	bl	8008814 <_read_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	bfab      	itete	ge
 80086d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086da:	89a3      	ldrhlt	r3, [r4, #12]
 80086dc:	181b      	addge	r3, r3, r0
 80086de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086e2:	bfac      	ite	ge
 80086e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086e6:	81a3      	strhlt	r3, [r4, #12]
 80086e8:	bd10      	pop	{r4, pc}

080086ea <__swrite>:
 80086ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ee:	461f      	mov	r7, r3
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	05db      	lsls	r3, r3, #23
 80086f4:	4605      	mov	r5, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	4616      	mov	r6, r2
 80086fa:	d505      	bpl.n	8008708 <__swrite+0x1e>
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	2302      	movs	r3, #2
 8008702:	2200      	movs	r2, #0
 8008704:	f000 f868 	bl	80087d8 <_lseek_r>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	4632      	mov	r2, r6
 8008716:	463b      	mov	r3, r7
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	f000 b817 	b.w	8008750 <_write_r>

08008722 <__sseek>:
 8008722:	b510      	push	{r4, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872a:	f000 f855 	bl	80087d8 <_lseek_r>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	bf15      	itete	ne
 8008734:	6560      	strne	r0, [r4, #84]	; 0x54
 8008736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800873a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800873e:	81a3      	strheq	r3, [r4, #12]
 8008740:	bf18      	it	ne
 8008742:	81a3      	strhne	r3, [r4, #12]
 8008744:	bd10      	pop	{r4, pc}

08008746 <__sclose>:
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 b813 	b.w	8008774 <_close_r>
	...

08008750 <_write_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	; (8008770 <_write_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7f8 fce3 	bl	800112a <_write>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_write_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_write_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20001cb0 	.word	0x20001cb0

08008774 <_close_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d06      	ldr	r5, [pc, #24]	; (8008790 <_close_r+0x1c>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	f7f8 fcef 	bl	8001162 <_close>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_close_r+0x1a>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_close_r+0x1a>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20001cb0 	.word	0x20001cb0

08008794 <_fstat_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d07      	ldr	r5, [pc, #28]	; (80087b4 <_fstat_r+0x20>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	f7f8 fcea 	bl	800117a <_fstat>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d102      	bne.n	80087b0 <_fstat_r+0x1c>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	b103      	cbz	r3, 80087b0 <_fstat_r+0x1c>
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	bf00      	nop
 80087b4:	20001cb0 	.word	0x20001cb0

080087b8 <_isatty_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_isatty_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f8 fce9 	bl	800119a <_isatty>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_isatty_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_isatty_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20001cb0 	.word	0x20001cb0

080087d8 <_lseek_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	; (80087f8 <_lseek_r+0x20>)
 80087dc:	4604      	mov	r4, r0
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7f8 fce2 	bl	80011b0 <_lseek>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_lseek_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_lseek_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20001cb0 	.word	0x20001cb0

080087fc <__malloc_lock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__malloc_lock+0x8>)
 80087fe:	f7ff bb55 	b.w	8007eac <__retarget_lock_acquire_recursive>
 8008802:	bf00      	nop
 8008804:	20001ca8 	.word	0x20001ca8

08008808 <__malloc_unlock>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__malloc_unlock+0x8>)
 800880a:	f7ff bb50 	b.w	8007eae <__retarget_lock_release_recursive>
 800880e:	bf00      	nop
 8008810:	20001ca8 	.word	0x20001ca8

08008814 <_read_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d07      	ldr	r5, [pc, #28]	; (8008834 <_read_r+0x20>)
 8008818:	4604      	mov	r4, r0
 800881a:	4608      	mov	r0, r1
 800881c:	4611      	mov	r1, r2
 800881e:	2200      	movs	r2, #0
 8008820:	602a      	str	r2, [r5, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	f7f8 fc64 	bl	80010f0 <_read>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_read_r+0x1e>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_read_r+0x1e>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20001cb0 	.word	0x20001cb0

08008838 <_init>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr

08008844 <_fini>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr
