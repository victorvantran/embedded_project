
hello_microsd_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d274  0800d274  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d274  0800d274  0001d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d27c  0800d27c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d27c  0800d27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d280  0800d280  0001d280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dca4  2000008c  0800d310  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd30  0800d310  0002dd30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278fc  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6a  00000000  00000000  000479b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0004c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb8  00000000  00000000  0004e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfda  00000000  00000000  0004ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e46  00000000  00000000  0007bf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103e86  00000000  00000000  0009eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f8  00000000  00000000  001a2c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca64 	.word	0x0800ca64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800ca64 	.word	0x0800ca64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <SELECT+0x18>)
 8000582:	f001 fddf 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f001 fb2c 	bl	8001be4 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400

08000594 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <DESELECT+0x18>)
 800059e:	f001 fdd1 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fb1e 	bl	8001be4 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400

080005b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SPI_TxByte+0x30>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d1f8      	bne.n	80005bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SPI_TxByte+0x30>)
 80005d2:	f003 f9b0 	bl	8003936 <HAL_SPI_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000ab00 	.word	0x2000ab00

080005e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxBuffer+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d1f8      	bne.n	80005f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxBuffer+0x30>)
 8000608:	f003 f995 	bl	8003936 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000ab00 	.word	0x2000ab00

08000618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000622:	bf00      	nop
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <SPI_RxByte+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	d1f8      	bne.n	8000624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000632:	1dba      	adds	r2, r7, #6
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_RxByte+0x34>)
 800063e:	f003 fae8 	bl	8003c12 <HAL_SPI_TransmitReceive>

	return data;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000ab00 	.word	0x2000ab00

08000650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000658:	f7ff ffde 	bl	8000618 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SD_ReadyWait+0x30>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800067a:	f7ff ffcd 	bl	8000618 <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2bff      	cmp	r3, #255	; 0xff
 8000686:	d003      	beq.n	8000690 <SD_ReadyWait+0x24>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SD_ReadyWait+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <SD_ReadyWait+0xe>

	return res;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200019b4 	.word	0x200019b4

080006a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006ac:	f7ff ff72 	bl	8000594 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e005      	b.n	80006c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f7ff ff7a 	bl	80005b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	ddf6      	ble.n	80006b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006c8:	f7ff ff56 	bl	8000578 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e0:	2395      	movs	r3, #149	; 0x95
 80006e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7b 	bl	80005e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006ee:	e002      	b.n	80006f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	f7ff ff8f 	bl	8000618 <SPI_RxByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d002      	beq.n	8000706 <SD_PowerOn+0x66>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000706:	f7ff ff45 	bl	8000594 <DESELECT>
	SPI_TxByte(0XFF);
 800070a:	20ff      	movs	r0, #255	; 0xff
 800070c:	f7ff ff50 	bl	80005b0 <SPI_TxByte>

	PowerFlag = 1;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SD_PowerOn+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000a9 	.word	0x200000a9

08000724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SD_PowerOff+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	200000a9 	.word	0x200000a9

0800073c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_CheckPower+0x14>)
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000a9 	.word	0x200000a9

08000754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SD_RxDataBlock+0x58>)
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000764:	f7ff ff58 	bl	8000618 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d103      	bne.n	800077a <SD_RxDataBlock+0x26>
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <SD_RxDataBlock+0x58>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2bfe      	cmp	r3, #254	; 0xfe
 800077e:	d001      	beq.n	8000784 <SD_RxDataBlock+0x30>
 8000780:	2300      	movs	r3, #0
 8000782:	e00f      	b.n	80007a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff60 	bl	8000650 <SPI_RxBytePtr>
	} while(len--);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	603a      	str	r2, [r7, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800079a:	f7ff ff3d 	bl	8000618 <SPI_RxByte>
	SPI_RxByte();
 800079e:	f7ff ff3b 	bl	8000618 <SPI_RxByte>

	return TRUE;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200019b6 	.word	0x200019b6

080007b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c0:	f7ff ff54 	bl	800066c <SD_ReadyWait>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d001      	beq.n	80007ce <SD_TxDataBlock+0x1e>
 80007ca:	2300      	movs	r3, #0
 80007cc:	e02f      	b.n	800082e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feed 	bl	80005b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2bfd      	cmp	r3, #253	; 0xfd
 80007da:	d020      	beq.n	800081e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff feff 	bl	80005e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007e6:	f7ff ff17 	bl	8000618 <SPI_RxByte>
		SPI_RxByte();
 80007ea:	f7ff ff15 	bl	8000618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007ee:	e00b      	b.n	8000808 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f0:	f7ff ff12 	bl	8000618 <SPI_RxByte>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d006      	beq.n	8000810 <SD_TxDataBlock+0x60>
			i++;
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b40      	cmp	r3, #64	; 0x40
 800080c:	d9f0      	bls.n	80007f0 <SD_TxDataBlock+0x40>
 800080e:	e000      	b.n	8000812 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000810:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000812:	bf00      	nop
 8000814:	f7ff ff00 	bl	8000618 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2b05      	cmp	r3, #5
 8000826:	d101      	bne.n	800082c <SD_TxDataBlock+0x7c>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <SD_TxDataBlock+0x7e>

	return FALSE;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	6039      	str	r1, [r7, #0]
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000842:	f7ff ff13 	bl	800066c <SD_ReadyWait>
 8000846:	4603      	mov	r3, r0
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d001      	beq.n	8000850 <SD_SendCmd+0x1a>
 800084c:	23ff      	movs	r3, #255	; 0xff
 800084e:	e042      	b.n	80008d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feac 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fea6 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea0 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe9a 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe95 	bl	80005b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b40      	cmp	r3, #64	; 0x40
 800088a:	d102      	bne.n	8000892 <SD_SendCmd+0x5c>
 800088c:	2395      	movs	r3, #149	; 0x95
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e007      	b.n	80008a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b48      	cmp	r3, #72	; 0x48
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x68>
 8000898:	2387      	movs	r3, #135	; 0x87
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e001      	b.n	80008a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe83 	bl	80005b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b4c      	cmp	r3, #76	; 0x4c
 80008ae:	d101      	bne.n	80008b4 <SD_SendCmd+0x7e>
 80008b0:	f7ff feb2 	bl	8000618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008b4:	230a      	movs	r3, #10
 80008b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008b8:	f7ff feae 	bl	8000618 <SPI_RxByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da05      	bge.n	80008d4 <SD_SendCmd+0x9e>
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <SD_SendCmd+0x82>

	return res;
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SD_disk_initialize+0x14>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0d1      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SD_disk_initialize+0x2a>
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	e0c6      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800090a:	f7ff fec9 	bl	80006a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800090e:	f7ff fe33 	bl	8000578 <SELECT>

	/* check disk type */
	type = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000916:	2100      	movs	r1, #0
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	f7ff ff8c 	bl	8000836 <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 80a1 	bne.w	8000a68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000932:	2048      	movs	r0, #72	; 0x48
 8000934:	f7ff ff7f 	bl	8000836 <SD_SendCmd>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d155      	bne.n	80009ea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e00c      	b.n	800095e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000944:	7bfc      	ldrb	r4, [r7, #15]
 8000946:	f7ff fe67 	bl	8000618 <SPI_RxByte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4423      	add	r3, r4
 8000954:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d9ef      	bls.n	8000944 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000964:	7abb      	ldrb	r3, [r7, #10]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d17e      	bne.n	8000a68 <SD_disk_initialize+0x188>
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2baa      	cmp	r3, #170	; 0xaa
 800096e:	d17b      	bne.n	8000a68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff5f 	bl	8000836 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d807      	bhi.n	800098e <SD_disk_initialize+0xae>
 800097e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff57 	bl	8000836 <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1ec      	bne.n	8000970 <SD_disk_initialize+0x90>
 8000996:	e000      	b.n	800099a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000998:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d062      	beq.n	8000a68 <SD_disk_initialize+0x188>
 80009a2:	2100      	movs	r1, #0
 80009a4:	207a      	movs	r0, #122	; 0x7a
 80009a6:	f7ff ff46 	bl	8000836 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15b      	bne.n	8000a68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e00c      	b.n	80009d0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	f7ff fe2e 	bl	8000618 <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4423      	add	r3, r4
 80009c6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d9ef      	bls.n	80009b6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x104>
 80009e0:	230c      	movs	r3, #12
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0x106>
 80009e4:	2304      	movs	r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	e03e      	b.n	8000a68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009ea:	2100      	movs	r1, #0
 80009ec:	2077      	movs	r0, #119	; 0x77
 80009ee:	f7ff ff22 	bl	8000836 <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d808      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 80009f8:	2100      	movs	r1, #0
 80009fa:	2069      	movs	r0, #105	; 0x69
 80009fc:	f7ff ff1b 	bl	8000836 <SD_SendCmd>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d801      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x12c>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d10e      	bne.n	8000a32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a14:	2100      	movs	r1, #0
 8000a16:	2077      	movs	r0, #119	; 0x77
 8000a18:	f7ff ff0d 	bl	8000836 <SD_SendCmd>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d80e      	bhi.n	8000a40 <SD_disk_initialize+0x160>
 8000a22:	2100      	movs	r1, #0
 8000a24:	2069      	movs	r0, #105	; 0x69
 8000a26:	f7ff ff06 	bl	8000836 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <SD_disk_initialize+0x160>
 8000a30:	e00c      	b.n	8000a4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2041      	movs	r0, #65	; 0x41
 8000a36:	f7ff fefe 	bl	8000836 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e2      	bne.n	8000a0e <SD_disk_initialize+0x12e>
 8000a48:	e000      	b.n	8000a4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <SD_disk_initialize+0x184>
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	2050      	movs	r0, #80	; 0x50
 8000a5a:	f7ff feec 	bl	8000836 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x188>
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a6e:	f7ff fd91 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000a72:	f7ff fdd1 	bl	8000618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e001      	b.n	8000a92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a8e:	f7ff fe49 	bl	8000724 <SD_PowerOff>
	}

	return Stat;
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200019b6 	.word	0x200019b6
 8000aa8:	200000a8 	.word	0x200000a8

08000aac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SD_disk_status+0x14>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e002      	b.n	8000ac6 <SD_disk_status+0x1a>
	return Stat;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SD_disk_status+0x28>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <SD_disk_read+0x1c>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <SD_disk_read+0x20>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e051      	b.n	8000b9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SD_disk_read+0xcc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SD_disk_read+0x32>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e048      	b.n	8000b9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <SD_disk_read+0xd0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <SD_disk_read+0x44>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b1c:	f7ff fd2c 	bl	8000578 <SELECT>

	if (count == 1)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d111      	bne.n	8000b4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2051      	movs	r0, #81	; 0x51
 8000b2a:	f7ff fe84 	bl	8000836 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d129      	bne.n	8000b88 <SD_disk_read+0xb0>
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f7ff fe0b 	bl	8000754 <SD_RxDataBlock>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <SD_disk_read+0xb0>
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	e01e      	b.n	8000b88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2052      	movs	r0, #82	; 0x52
 8000b4e:	f7ff fe72 	bl	8000836 <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d117      	bne.n	8000b88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdf9 	bl	8000754 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00a      	beq.n	8000b7e <SD_disk_read+0xa6>
				buff += 512;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1ed      	bne.n	8000b58 <SD_disk_read+0x80>
 8000b7c:	e000      	b.n	8000b80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	204c      	movs	r0, #76	; 0x4c
 8000b84:	f7ff fe57 	bl	8000836 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b88:	f7ff fd04 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000b8c:	f7ff fd44 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	200000a8 	.word	0x200000a8

08000bac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <SD_disk_write+0x1c>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <SD_disk_write+0x20>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e06b      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <SD_disk_write+0x100>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SD_disk_write+0x32>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e062      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <SD_disk_write+0x100>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SD_disk_write+0x44>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e059      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SD_disk_write+0x104>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <SD_disk_write+0x56>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c02:	f7ff fcb9 	bl	8000578 <SELECT>

	if (count == 1)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d110      	bne.n	8000c2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2058      	movs	r0, #88	; 0x58
 8000c10:	f7ff fe11 	bl	8000836 <SD_SendCmd>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13a      	bne.n	8000c90 <SD_disk_write+0xe4>
 8000c1a:	21fe      	movs	r1, #254	; 0xfe
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f7ff fdc7 	bl	80007b0 <SD_TxDataBlock>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d033      	beq.n	8000c90 <SD_disk_write+0xe4>
			count = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	e030      	b.n	8000c90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SD_disk_write+0x104>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2077      	movs	r0, #119	; 0x77
 8000c3e:	f7ff fdfa 	bl	8000836 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	2057      	movs	r0, #87	; 0x57
 8000c46:	f7ff fdf6 	bl	8000836 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2059      	movs	r0, #89	; 0x59
 8000c4e:	f7ff fdf2 	bl	8000836 <SD_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11b      	bne.n	8000c90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c58:	21fc      	movs	r1, #252	; 0xfc
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fda8 	bl	80007b0 <SD_TxDataBlock>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00a      	beq.n	8000c7c <SD_disk_write+0xd0>
				buff += 512;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1ee      	bne.n	8000c58 <SD_disk_write+0xac>
 8000c7a:	e000      	b.n	8000c7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c7e:	21fd      	movs	r1, #253	; 0xfd
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fd95 	bl	80007b0 <SD_TxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c90:	f7ff fc80 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000c94:	f7ff fcc0 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	200000a8 	.word	0x200000a8

08000cb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SD_disk_ioctl+0x1e>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e115      	b.n	8000efe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d124      	bne.n	8000d28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d012      	beq.n	8000d0c <SD_disk_ioctl+0x58>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dc1a      	bgt.n	8000d20 <SD_disk_ioctl+0x6c>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <SD_disk_ioctl+0x40>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d006      	beq.n	8000d00 <SD_disk_ioctl+0x4c>
 8000cf2:	e015      	b.n	8000d20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cf4:	f7ff fd16 	bl	8000724 <SD_PowerOff>
			res = RES_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfe:	e0fc      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d00:	f7ff fcce 	bl	80006a0 <SD_PowerOn>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e0f6      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	1c5c      	adds	r4, r3, #1
 8000d10:	f7ff fd14 	bl	800073c <SD_CheckPower>
 8000d14:	4603      	mov	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1e:	e0ec      	b.n	8000efa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d20:	2304      	movs	r3, #4
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d26:	e0e8      	b.n	8000efa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d28:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <SD_disk_ioctl+0x254>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SD_disk_ioctl+0x86>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e1      	b.n	8000efe <SD_disk_ioctl+0x24a>

		SELECT();
 8000d3a:	f7ff fc1d 	bl	8000578 <SELECT>

		switch (ctrl)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	f200 80cb 	bhi.w	8000edc <SD_disk_ioctl+0x228>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <SD_disk_ioctl+0x98>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000e47 	.word	0x08000e47
 8000d50:	08000d85 	.word	0x08000d85
 8000d54:	08000e37 	.word	0x08000e37
 8000d58:	08000edd 	.word	0x08000edd
 8000d5c:	08000edd 	.word	0x08000edd
 8000d60:	08000edd 	.word	0x08000edd
 8000d64:	08000edd 	.word	0x08000edd
 8000d68:	08000edd 	.word	0x08000edd
 8000d6c:	08000edd 	.word	0x08000edd
 8000d70:	08000edd 	.word	0x08000edd
 8000d74:	08000edd 	.word	0x08000edd
 8000d78:	08000e59 	.word	0x08000e59
 8000d7c:	08000e7d 	.word	0x08000e7d
 8000d80:	08000ea1 	.word	0x08000ea1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d84:	2100      	movs	r1, #0
 8000d86:	2049      	movs	r0, #73	; 0x49
 8000d88:	f7ff fd55 	bl	8000836 <SD_SendCmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80a8 	bne.w	8000ee4 <SD_disk_ioctl+0x230>
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fcda 	bl	8000754 <SD_RxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809e 	beq.w	8000ee4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10e      	bne.n	8000dd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc6:	8bfb      	ldrh	r3, [r7, #30]
 8000dc8:	029a      	lsls	r2, r3, #10
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e02e      	b.n	8000e2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd0:	7c7b      	ldrb	r3, [r7, #17]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7dbb      	ldrb	r3, [r7, #22]
 8000dda:	09db      	lsrs	r3, r3, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0306 	and.w	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	099b      	lsrs	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cbb      	ldrb	r3, [r7, #18]
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e20:	8bfa      	ldrh	r2, [r7, #30]
 8000e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e26:	3b09      	subs	r3, #9
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e34:	e056      	b.n	8000ee4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e44:	e055      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e46:	f7ff fc11 	bl	800066c <SD_ReadyWait>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d14b      	bne.n	8000ee8 <SD_disk_ioctl+0x234>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e56:	e047      	b.n	8000ee8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2049      	movs	r0, #73	; 0x49
 8000e5c:	f7ff fceb 	bl	8000836 <SD_SendCmd>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d142      	bne.n	8000eec <SD_disk_ioctl+0x238>
 8000e66:	2110      	movs	r1, #16
 8000e68:	6a38      	ldr	r0, [r7, #32]
 8000e6a:	f7ff fc73 	bl	8000754 <SD_RxDataBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d03b      	beq.n	8000eec <SD_disk_ioctl+0x238>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e037      	b.n	8000eec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	204a      	movs	r0, #74	; 0x4a
 8000e80:	f7ff fcd9 	bl	8000836 <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d132      	bne.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc61 	bl	8000754 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e027      	b.n	8000ef0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	207a      	movs	r0, #122	; 0x7a
 8000ea4:	f7ff fcc7 	bl	8000836 <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb4:	e00b      	b.n	8000ece <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eb6:	6a3c      	ldr	r4, [r7, #32]
 8000eb8:	1c63      	adds	r3, r4, #1
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	f7ff fbac 	bl	8000618 <SPI_RxByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9ef      	bls.n	8000eb6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee2:	e006      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ef0:	bf00      	nop
		}

		DESELECT();
 8000ef2:	f7ff fb4f 	bl	8000594 <DESELECT>
		SPI_RxByte();
 8000ef6:	f7ff fb8f 	bl	8000618 <SPI_RxByte>
	}

	return res;
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000

08000f0c <__io_putchar>:
PieceHandle_t xPiece;


// sending to UART
PUTCHAR_PROTOTYPE
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <__io_putchar+0x20>)
 8000f1e:	f003 fd0b 	bl	8004938 <HAL_UART_Transmit>
	return ch;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000ab64 	.word	0x2000ab64

08000f30 <transmit_uart>:


void transmit_uart(char *string) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f949 	bl	80001d0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	23c8      	movs	r3, #200	; 0xc8
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <transmit_uart+0x28>)
 8000f4c:	f003 fcf4 	bl	8004938 <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000ab64 	.word	0x2000ab64

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fe00 	bl	8001b64 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f81c 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f8fe 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 f8cc 	bl	8001108 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f70:	f000 f88c 	bl	800108c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f74:	f004 f966 	bl	8005244 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f78:	f007 fab4 	bl	80084e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <main+0x38>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <main+0x3c>)
 8000f82:	f007 faf9 	bl	8008578 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <main+0x40>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f8c:	f007 face 	bl	800852c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x34>
 8000f92:	bf00      	nop
 8000f94:	0800cd30 	.word	0x0800cd30
 8000f98:	08001215 	.word	0x08001215
 8000f9c:	200019bc 	.word	0x200019bc

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0b8      	sub	sp, #224	; 0xe0
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000faa:	2244      	movs	r2, #68	; 0x44
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00a fd84 	bl	800babc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2288      	movs	r2, #136	; 0x88
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00a fd76 	bl	800babc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f912 	bl	800223c <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800101e:	f000 f999 	bl	8001354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001040:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001044:	2104      	movs	r1, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fcde 	bl	8002a08 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001052:	f000 f97f 	bl	8001354 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001056:	2302      	movs	r3, #2
 8001058:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff09 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800106c:	f000 f972 	bl	8001354 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001070:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001074:	f001 f88c 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800107e:	f000 f969 	bl	8001354 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	37e0      	adds	r7, #224	; 0xe0
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_SPI1_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_SPI1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_SPI1_Init+0x74>)
 8001098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_SPI1_Init+0x74>)
 80010a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_SPI1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_SPI1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SPI1_Init+0x74>)
 80010ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_SPI1_Init+0x74>)
 80010c2:	2228      	movs	r2, #40	; 0x28
 80010c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_SPI1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_SPI1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_SPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_SPI1_Init+0x74>)
 80010da:	2207      	movs	r2, #7
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_SPI1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_SPI1_Init+0x74>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_SPI1_Init+0x74>)
 80010ec:	f002 fb80 	bl	80037f0 <HAL_SPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 f92d 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000ab00 	.word	0x2000ab00
 8001104:	40013000 	.word	0x40013000

08001108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART2_UART_Init+0x58>)
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <MX_USART2_UART_Init+0x5c>)
 8001110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x58>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x58>)
 800114c:	f003 fba6 	bl	800489c <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001156:	f000 f8fd 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000ab64 	.word	0x2000ab64
 8001164:	40004400 	.word	0x40004400

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_GPIO_Init+0xa4>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <MX_GPIO_Init+0xa4>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_GPIO_Init+0xa4>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_GPIO_Init+0xa4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_GPIO_Init+0xa4>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_GPIO_Init+0xa4>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_GPIO_Init+0xa4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <MX_GPIO_Init+0xa4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_GPIO_Init+0xa4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_GPIO_Init+0xa4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <MX_GPIO_Init+0xa4>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_GPIO_Init+0xa4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <MX_GPIO_Init+0xa8>)
 80011e4:	f000 ffae 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0xa8>)
 8001200:	f000 fdf6 	bl	8001df0 <HAL_GPIO_Init>

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
		*/

  /* Infinite loop */
  for(;;)
  {
  	osDelay(2000);
 800121c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001220:	f007 fa3c 	bl	800869c <osDelay>


  	// Mount
 		fres = f_mount(&fs, "", 0);
 8001224:	2200      	movs	r2, #0
 8001226:	4934      	ldr	r1, [pc, #208]	; (80012f8 <StartDefaultTask+0xe4>)
 8001228:	4834      	ldr	r0, [pc, #208]	; (80012fc <StartDefaultTask+0xe8>)
 800122a:	f006 fa9f 	bl	800776c <f_mount>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <StartDefaultTask+0xec>)
 8001234:	701a      	strb	r2, [r3, #0]
 		if (fres == FR_OK) {
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <StartDefaultTask+0xec>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <StartDefaultTask+0x32>
 			transmit_uart("Micro SD card is mounted successfully!\n");
 800123e:	4831      	ldr	r0, [pc, #196]	; (8001304 <StartDefaultTask+0xf0>)
 8001240:	f7ff fe76 	bl	8000f30 <transmit_uart>
 8001244:	e006      	b.n	8001254 <StartDefaultTask+0x40>
 		} else if (fres != FR_OK) {
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <StartDefaultTask+0xec>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <StartDefaultTask+0x40>
 			transmit_uart("Micro SD card's mount error!\n");
 800124e:	482e      	ldr	r0, [pc, #184]	; (8001308 <StartDefaultTask+0xf4>)
 8001250:	f7ff fe6e 	bl	8000f30 <transmit_uart>
 			sprintf(mRd, "%s", buffer);
 			transmit_uart(mRd);
 		}
 		*/

 		fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
 8001254:	2201      	movs	r2, #1
 8001256:	492d      	ldr	r1, [pc, #180]	; (800130c <StartDefaultTask+0xf8>)
 8001258:	482d      	ldr	r0, [pc, #180]	; (8001310 <StartDefaultTask+0xfc>)
 800125a:	f006 faeb 	bl	8007834 <f_open>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b27      	ldr	r3, [pc, #156]	; (8001300 <StartDefaultTask+0xec>)
 8001264:	701a      	strb	r2, [r3, #0]
 		if (fres == FR_OK) {
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <StartDefaultTask+0xec>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <StartDefaultTask+0x62>
 			transmit_uart("File opened for reading.\n");
 800126e:	4829      	ldr	r0, [pc, #164]	; (8001314 <StartDefaultTask+0x100>)
 8001270:	f7ff fe5e 	bl	8000f30 <transmit_uart>
 8001274:	e006      	b.n	8001284 <StartDefaultTask+0x70>
 		} else if (fres != FR_OK) {
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <StartDefaultTask+0xec>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <StartDefaultTask+0x70>
 			transmit_uart("File was not opened for reading!\n");
 800127e:	4826      	ldr	r0, [pc, #152]	; (8001318 <StartDefaultTask+0x104>)
 8001280:	f7ff fe56 	bl	8000f30 <transmit_uart>
 		f_read(&fil, &ulCompositionSize, sizeof(ulCompositionSize), &usNumBytesRead);
 	 	printf("Composition Size: %lu\r\n", ulCompositionSize);
		*/


 		Piece_vInit(&xPiece, &fil);
 8001284:	4922      	ldr	r1, [pc, #136]	; (8001310 <StartDefaultTask+0xfc>)
 8001286:	4825      	ldr	r0, [pc, #148]	; (800131c <StartDefaultTask+0x108>)
 8001288:	f000 f86a 	bl	8001360 <Piece_vInit>
 		Piece_vSetComposition(&xPiece, &fil);
 800128c:	4920      	ldr	r1, [pc, #128]	; (8001310 <StartDefaultTask+0xfc>)
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <StartDefaultTask+0x108>)
 8001290:	f000 f89c 	bl	80013cc <Piece_vSetComposition>

 		// Initial Command
 		Piece_vParseCommand(&xPiece);
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <StartDefaultTask+0x108>)
 8001296:	f000 f8bb 	bl	8001410 <Piece_vParseCommand>
 			transmit_uart(mRd);
 		}
 		*/

 		/* Close file */
 		fres = f_close(&fil);
 800129a:	481d      	ldr	r0, [pc, #116]	; (8001310 <StartDefaultTask+0xfc>)
 800129c:	f006 ff44 	bl	8008128 <f_close>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <StartDefaultTask+0xec>)
 80012a6:	701a      	strb	r2, [r3, #0]
 		if (fres == FR_OK) {
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <StartDefaultTask+0xec>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d103      	bne.n	80012b8 <StartDefaultTask+0xa4>
 			transmit_uart("The file is closed.\n");
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <StartDefaultTask+0x10c>)
 80012b2:	f7ff fe3d 	bl	8000f30 <transmit_uart>
 80012b6:	e006      	b.n	80012c6 <StartDefaultTask+0xb2>
 		} else if (fres != FR_OK) {
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <StartDefaultTask+0xec>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <StartDefaultTask+0xb2>
 			transmit_uart("The file was not closed.\n");
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <StartDefaultTask+0x110>)
 80012c2:	f7ff fe35 	bl	8000f30 <transmit_uart>
 		}

 		f_mount(NULL, "", 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	490b      	ldr	r1, [pc, #44]	; (80012f8 <StartDefaultTask+0xe4>)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f006 fa4e 	bl	800776c <f_mount>
 		if (fres == FR_OK) {
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <StartDefaultTask+0xec>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <StartDefaultTask+0xcc>
 			transmit_uart("The Micro SD card is unmounted!\n");
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <StartDefaultTask+0x114>)
 80012da:	f7ff fe29 	bl	8000f30 <transmit_uart>
 80012de:	e006      	b.n	80012ee <StartDefaultTask+0xda>
 		} else if (fres != FR_OK) {
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <StartDefaultTask+0xec>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <StartDefaultTask+0xda>
 			transmit_uart("The Micro SD was not unmounted!");
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <StartDefaultTask+0x118>)
 80012ea:	f7ff fe21 	bl	8000f30 <transmit_uart>





    osDelay(2000);
 80012ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f2:	f007 f9d3 	bl	800869c <osDelay>
  	osDelay(2000);
 80012f6:	e791      	b.n	800121c <StartDefaultTask+0x8>
 80012f8:	0800ca88 	.word	0x0800ca88
 80012fc:	200019c0 	.word	0x200019c0
 8001300:	2000abe8 	.word	0x2000abe8
 8001304:	0800ca8c 	.word	0x0800ca8c
 8001308:	0800cab4 	.word	0x0800cab4
 800130c:	0800cad4 	.word	0x0800cad4
 8001310:	2000abec 	.word	0x2000abec
 8001314:	0800caf4 	.word	0x0800caf4
 8001318:	0800cb10 	.word	0x0800cb10
 800131c:	20002a64 	.word	0x20002a64
 8001320:	0800cb34 	.word	0x0800cb34
 8001324:	0800cb4c 	.word	0x0800cb4c
 8001328:	0800cb68 	.word	0x0800cb68
 800132c:	0800cb8c 	.word	0x0800cb8c

08001330 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001342:	f000 fc2f 	bl	8001ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40001000 	.word	0x40001000

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>
	...

08001360 <Piece_vInit>:

#include "piece.h"


void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f103 0108 	add.w	r1, r3, #8
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f006 fcbf 	bl	8007cfa <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3308      	adds	r3, #8
 8001380:	4619      	mov	r1, r3
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <Piece_vInit+0x30>)
 8001384:	f00a fba2 	bl	800bacc <iprintf>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	0800cbac 	.word	0x0800cbac

08001394 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2204      	movs	r2, #4
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f006 fca5 	bl	8007cfa <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	4619      	mov	r1, r3
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <Piece_vSetCompositionByteSize+0x34>)
 80013ba:	f00a fb87 	bl	800bacc <iprintf>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800cbb8 	.word	0x0800cbb8

080013cc <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffdb 	bl	8001394 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ee:	bf28      	it	cs
 80013f0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80013f4:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f006 fc7d 	bl	8007cfa <f_read>
			&ulNumBytesRead);

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	440a      	add	r2, r1
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += 1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]

	printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	4619      	mov	r1, r3
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <Piece_vParseCommand+0x90>)
 800143e:	f00a fb45 	bl	800bacc <iprintf>

	switch (pxPiece->xPieceInstruction.usCommand)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <Piece_vParseCommand+0x40>
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d004      	beq.n	8001458 <Piece_vParseCommand+0x48>
 800144e:	e007      	b.n	8001460 <Piece_vParseCommand+0x50>
	{
	case 0b00000000:
		printf("END OF COMPOSITION\r\n");
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <Piece_vParseCommand+0x94>)
 8001452:	f00a fbc1 	bl	800bbd8 <puts>
		return;
 8001456:	e01f      	b.n	8001498 <Piece_vParseCommand+0x88>
	case 0b01111111:
		Piece_vConfigureAll(pxPiece);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f86f 	bl	800153c <Piece_vConfigureAll>
		break;
 800145e:	e018      	b.n	8001492 <Piece_vParseCommand+0x82>
	default:
		if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f933 	bl	80016d0 <bIsPlayCommand>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00c      	beq.n	800148a <Piece_vParseCommand+0x7a>
		{
			uint8_t usNumNotes = (uint8_t)((0x03) & (pxPiece->xPieceInstruction.usCommand) + 1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	3301      	adds	r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	73fb      	strb	r3, [r7, #15]
			Piece_vPlayNotes(pxPiece, usNumNotes);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f8fc 	bl	8001680 <Piece_vPlayNotes>
		}
		else
		{
			printf("UNKNOWN COMMAND\r\n");
		}
		break;
 8001488:	e002      	b.n	8001490 <Piece_vParseCommand+0x80>
			printf("UNKNOWN COMMAND\r\n");
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <Piece_vParseCommand+0x98>)
 800148c:	f00a fba4 	bl	800bbd8 <puts>
		break;
 8001490:	bf00      	nop
	}

	Piece_vParseCommand(pxPiece);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffbc 	bl	8001410 <Piece_vParseCommand>
}
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800cbd0 	.word	0x0800cbd0
 80014a4:	0800cbe0 	.word	0x0800cbe0
 80014a8:	0800cbf4 	.word	0x0800cbf4

080014ac <Piece_vSetMovement>:




void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	78fa      	ldrb	r2, [r7, #3]
 80014bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80014c6:	4619      	mov	r1, r3
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <Piece_vSetMovement+0x2c>)
 80014ca:	f00a faff 	bl	800bacc <iprintf>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800cc08 	.word	0x0800cc08

080014dc <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80014f6:	4619      	mov	r1, r3
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <Piece_vSetBPM+0x2c>)
 80014fa:	f00a fae7 	bl	800bacc <iprintf>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	0800cc18 	.word	0x0800cc18

0800150c <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001526:	4619      	mov	r1, r3
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <Piece_vSetDynamic+0x2c>)
 800152a:	f00a facf 	bl	800bacc <iprintf>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	0800cc24 	.word	0x0800cc24

0800153c <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8001544:	481e      	ldr	r0, [pc, #120]	; (80015c0 <Piece_vConfigureAll+0x84>)
 8001546:	f00a fb47 	bl	800bbd8 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1c9a      	adds	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff84 	bl	80014ac <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 80015a4:	89bb      	ldrh	r3, [r7, #12]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff97 	bl	80014dc <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffaa 	bl	800150c <Piece_vSetDynamic>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800cc34 	.word	0x0800cc34

080015c4 <Piece_vPlayNote>:


void Piece_vPlayNote(PieceHandle_t *pxPiece, uint8_t *pusMaxBeatValue)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3306      	adds	r3, #6
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	440a      	add	r2, r1
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	b292      	uxth	r2, r2
 80015e2:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1c9a      	adds	r2, r3, #2
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]

	uint8_t usTechnique = (uint8_t)(((0xF000) & (pxPiece->xPieceInstruction.uPlay)) >> 12);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	88db      	ldrh	r3, [r3, #6]
 80015f2:	0b1b      	lsrs	r3, r3, #12
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	73fb      	strb	r3, [r7, #15]
	uint8_t usBeatValue = (uint8_t)(((0x0F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	88db      	ldrh	r3, [r3, #6]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	73bb      	strb	r3, [r7, #14]
	uint8_t usNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	88db      	ldrh	r3, [r3, #6]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	b29b      	uxth	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	737b      	strb	r3, [r7, #13]
	uint8_t usNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	88db      	ldrh	r3, [r3, #6]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001622:	733b      	strb	r3, [r7, #12]

	printf("Play note:\r\n");
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <Piece_vPlayNote+0xa8>)
 8001626:	f00a fad7 	bl	800bbd8 <puts>
	printf("	Technique: %u\r\n", usTechnique);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4619      	mov	r1, r3
 800162e:	4810      	ldr	r0, [pc, #64]	; (8001670 <Piece_vPlayNote+0xac>)
 8001630:	f00a fa4c 	bl	800bacc <iprintf>
	printf("	Beat Value: %u\r\n", usBeatValue);
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	4619      	mov	r1, r3
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <Piece_vPlayNote+0xb0>)
 800163a:	f00a fa47 	bl	800bacc <iprintf>
	printf("	Note Base: %u\r\n", usNoteBase);
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <Piece_vPlayNote+0xb4>)
 8001644:	f00a fa42 	bl	800bacc <iprintf>
	printf("	Note Offset: %u\r\n", usNoteOffset);
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <Piece_vPlayNote+0xb8>)
 800164e:	f00a fa3d 	bl	800bacc <iprintf>

	if (usBeatValue < *pusMaxBeatValue)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	7bba      	ldrb	r2, [r7, #14]
 8001658:	429a      	cmp	r2, r3
 800165a:	d202      	bcs.n	8001662 <Piece_vPlayNote+0x9e>
	{
		*pusMaxBeatValue = usBeatValue;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7bba      	ldrb	r2, [r7, #14]
 8001660:	701a      	strb	r2, [r3, #0]
	}
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800cc50 	.word	0x0800cc50
 8001670:	0800cc5c 	.word	0x0800cc5c
 8001674:	0800cc70 	.word	0x0800cc70
 8001678:	0800cc84 	.word	0x0800cc84
 800167c:	0800cc98 	.word	0x0800cc98

08001680 <Piece_vPlayNotes>:


void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t usNumNotes)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
	printf("Play Notes: %u\r\n", usNumNotes);
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	4619      	mov	r1, r3
 8001690:	480e      	ldr	r0, [pc, #56]	; (80016cc <Piece_vPlayNotes+0x4c>)
 8001692:	f00a fa1b 	bl	800bacc <iprintf>

	uint8_t usMaxBeatValue = 0xFF; // lower value means longer beat
 8001696:	23ff      	movs	r3, #255	; 0xff
 8001698:	737b      	strb	r3, [r7, #13]
	for (int16_t i = 0; i < usNumNotes; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	81fb      	strh	r3, [r7, #14]
 800169e:	e00b      	b.n	80016b8 <Piece_vPlayNotes+0x38>
	{
		Piece_vPlayNote(pxPiece, &usMaxBeatValue);
 80016a0:	f107 030d 	add.w	r3, r7, #13
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff8c 	bl	80015c4 <Piece_vPlayNote>
	for (int16_t i = 0; i < usNumNotes; i++)
 80016ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	81fb      	strh	r3, [r7, #14]
 80016b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbee      	blt.n	80016a0 <Piece_vPlayNotes+0x20>
	}

	// osDelay
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800ccac 	.word	0x0800ccac

080016d0 <bIsPlayCommand>:




uint8_t bIsPlayCommand(uint8_t usCommand)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	09db      	lsrs	r3, r3, #7
 80016e2:	b2db      	uxtb	r3, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_MspInit+0x4c>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_MspInit+0x4c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	; 0x60
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_MspInit+0x4c>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_MspInit+0x4c>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_MspInit+0x4c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_MspInit+0x4c>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 fb35 	bl	8001d9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_SPI_MspInit+0x7c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d128      	bne.n	80017b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176c:	6613      	str	r3, [r2, #96]	; 0x60
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_SPI_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23e0      	movs	r3, #224	; 0xe0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 fb1e 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x7c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d128      	bne.n	8001838 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_UART_MspInit+0x80>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <HAL_UART_MspInit+0x80>)
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x80>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x80>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0x80>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0x80>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001816:	230c      	movs	r3, #12
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001826:	2307      	movs	r3, #7
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f000 fadc 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004400 	.word	0x40004400
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2036      	movs	r0, #54	; 0x36
 800185e:	f000 fa9d 	bl	8001d9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001862:	2036      	movs	r0, #54	; 0x36
 8001864:	f000 fab6 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_InitTick+0x9c>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_InitTick+0x9c>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_InitTick+0x9c>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001880:	f107 0210 	add.w	r2, r7, #16
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fa62 	bl	8002d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001890:	f001 fa34 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8001894:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_InitTick+0xa0>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	3b01      	subs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_InitTick+0xa4>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_InitTick+0xa8>)
 80018a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_InitTick+0xa4>)
 80018ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_InitTick+0xa4>)
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_InitTick+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_InitTick+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <HAL_InitTick+0xa4>)
 80018c6:	f002 fd17 	bl	80042f8 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <HAL_InitTick+0xa4>)
 80018d2:	f002 fd73 	bl	80043bc <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3730      	adds	r7, #48	; 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	2000bc1c 	.word	0x2000bc1c
 80018f0:	40001000 	.word	0x40001000

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <TIM6_DAC_IRQHandler+0x38>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <TIM6_DAC_IRQHandler+0x38>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <TIM6_DAC_IRQHandler+0x38>)
 8001936:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <TIM6_DAC_IRQHandler+0x3c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <TIM6_DAC_IRQHandler+0x3c>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <TIM6_DAC_IRQHandler+0x3c>)
 800194a:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <TIM6_DAC_IRQHandler+0x40>)
 800194e:	f002 fda5 	bl	800449c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_SYSTICK_IRQHandler();
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200019b6 	.word	0x200019b6
 800195c:	200019b4 	.word	0x200019b4
 8001960:	2000bc1c 	.word	0x2000bc1c

08001964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
	}

return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff faa7 	bl	8000f0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
	}
	return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f009 ffec 	bl	800ba4c <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20018000 	.word	0x20018000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	200000ac 	.word	0x200000ac
 8001aa8:	2000dd30 	.word	0x2000dd30

08001aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <SystemInit+0x5c>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <SystemInit+0x5c>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <SystemInit+0x60>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <SystemInit+0x60>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <SystemInit+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <SystemInit+0x60>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <SystemInit+0x60>)
 8001ad8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001adc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <SystemInit+0x60>)
 8001ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <SystemInit+0x60>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <SystemInit+0x60>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SystemInit+0x60>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	40021000 	.word	0x40021000

08001b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff ffca 	bl	8001aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
	ldr	r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <LoopForever+0x16>)
	cmp	r2, r3
 8001b3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f009 ff8b 	bl	800ba58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b42:	f7ff fa0b 	bl	8000f5c <main>

08001b46 <LoopForever>:

LoopForever:
    b LoopForever
 8001b46:	e7fe      	b.n	8001b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b4c:	0800d284 	.word	0x0800d284
	ldr	r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b54:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8001b58:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8001b5c:	2000dd30 	.word	0x2000dd30

08001b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC1_2_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_Init+0x3c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_Init+0x3c>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f000 f903 	bl	8001d86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fe61 	bl	8001848 <HAL_InitTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	e001      	b.n	8001b96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b92:	f7ff fdad 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	2000bc68 	.word	0x2000bc68

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000bc68 	.word	0x2000bc68

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000000c 	.word	0x2000000c

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff4c 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dae:	f7ff ff61 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7ff ffb1 	bl	8001d20 <NVIC_EncodePriority>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff80 	bl	8001ccc <__NVIC_SetPriority>
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff54 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	e17f      	b.n	8002100 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2101      	movs	r1, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8171 	beq.w	80020fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d00b      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2c:	2b11      	cmp	r3, #17
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d118      	bne.n	8001ed8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x128>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	6939      	ldr	r1, [r7, #16]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ac 	beq.w	80020fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_GPIO_Init+0x330>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	4a5e      	ldr	r2, [pc, #376]	; (8002120 <HAL_GPIO_Init+0x330>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	; 0x60
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_GPIO_Init+0x330>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fba:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_GPIO_Init+0x334>)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe4:	d025      	beq.n	8002032 <HAL_GPIO_Init+0x242>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x338>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <HAL_GPIO_Init+0x23e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x33c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x23a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x340>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x236>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x344>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x232>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x348>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x22e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_GPIO_Init+0x34c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x22a>
 8002016:	2306      	movs	r3, #6
 8002018:	e00c      	b.n	8002034 <HAL_GPIO_Init+0x244>
 800201a:	2307      	movs	r3, #7
 800201c:	e00a      	b.n	8002034 <HAL_GPIO_Init+0x244>
 800201e:	2305      	movs	r3, #5
 8002020:	e008      	b.n	8002034 <HAL_GPIO_Init+0x244>
 8002022:	2304      	movs	r3, #4
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x244>
 8002026:	2303      	movs	r3, #3
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x244>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x244>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x244>
 8002032:	2300      	movs	r3, #0
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	f002 0203 	and.w	r2, r2, #3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_GPIO_Init+0x334>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_GPIO_Init+0x350>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002076:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_GPIO_Init+0x350>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_GPIO_Init+0x350>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_GPIO_Init+0x350>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x350>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_GPIO_Init+0x350>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x350>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_GPIO_Init+0x350>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f ae78 	bne.w	8001e00 <HAL_GPIO_Init+0x10>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	48000400 	.word	0x48000400
 800212c:	48000800 	.word	0x48000800
 8002130:	48000c00 	.word	0x48000c00
 8002134:	48001000 	.word	0x48001000
 8002138:	48001400 	.word	0x48001400
 800213c:	48001800 	.word	0x48001800
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002160:	e002      	b.n	8002168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	; 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000004 	.word	0x20000004
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e3d4      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224e:	4ba1      	ldr	r3, [pc, #644]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002258:	4b9e      	ldr	r3, [pc, #632]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80e4 	beq.w	8002438 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_RCC_OscConfig+0x4a>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	f040 808b 	bne.w	8002394 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 8087 	bne.w	8002394 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002286:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x62>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e3ac      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_RCC_OscConfig+0x7c>
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_OscConfig+0x88>
 80022b8:	4b86      	ldr	r3, [pc, #536]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d223      	bcs.n	8002310 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fd73 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e38d      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022dc:	4b7d      	ldr	r3, [pc, #500]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7c      	ldr	r2, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b7a      	ldr	r3, [pc, #488]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4977      	ldr	r1, [pc, #476]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	4972      	ldr	r1, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	e025      	b.n	800235c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002310:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6f      	ldr	r2, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002316:	f043 0308 	orr.w	r3, r3, #8
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	496a      	ldr	r1, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232e:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	4965      	ldr	r1, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd33 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e34d      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800235c:	f000 fc36 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	495a      	ldr	r1, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x29c>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x2a0>)
 800237a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800237c:	4b58      	ldr	r3, [pc, #352]	; (80024e0 <HAL_RCC_OscConfig+0x2a4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fa61 	bl	8001848 <HAL_InitTick>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d052      	beq.n	8002436 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	e331      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d032      	beq.n	8002402 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fc10 	bl	8001bcc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b0:	f7ff fc0c 	bl	8001bcc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e31a      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	493b      	ldr	r1, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
 8002400:	e01a      	b.n	8002438 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002402:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a33      	ldr	r2, [pc, #204]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800240e:	f7ff fbdd 	bl	8001bcc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002416:	f7ff fbd9 	bl	8001bcc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e2e7      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x1da>
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002436:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d074      	beq.n	800252e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d005      	beq.n	8002456 <HAL_RCC_OscConfig+0x21a>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d10e      	bne.n	800246e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d064      	beq.n	800252c <HAL_RCC_OscConfig+0x2f0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d160      	bne.n	800252c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e2c4      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x24a>
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e01d      	b.n	80024c2 <HAL_RCC_OscConfig+0x286>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x26e>
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x286>
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x298>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01c      	beq.n	8002504 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7ff fb7f 	bl	8001bcc <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d0:	e011      	b.n	80024f6 <HAL_RCC_OscConfig+0x2ba>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800cd54 	.word	0x0800cd54
 80024dc:	20000004 	.word	0x20000004
 80024e0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fb72 	bl	8001bcc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e280      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2a8>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fb62 	bl	8001bcc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff fb5e 	bl	8001bcc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e26c      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	4ba5      	ldr	r3, [pc, #660]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x2d0>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d060      	beq.n	80025fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x310>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d119      	bne.n	800257a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d116      	bne.n	800257a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x328>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e249      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	4990      	ldr	r1, [pc, #576]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	e040      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d023      	beq.n	80025ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002582:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8b      	ldr	r2, [pc, #556]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7ff fb1d 	bl	8001bcc <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff fb19 	bl	8001bcc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e227      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	4b82      	ldr	r3, [pc, #520]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	497c      	ldr	r1, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b7a      	ldr	r3, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a79      	ldr	r2, [pc, #484]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff faf9 	bl	8001bcc <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff faf5 	bl	8001bcc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e203      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01c      	beq.n	800264a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff fad4 	bl	8001bcc <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fad0 	bl	8001bcc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1de      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800263c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x3ec>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7ff fab7 	bl	8001bcc <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff fab3 	bl	8001bcc <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1c1      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a6 	beq.w	80027dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002694:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a43      	ldr	r2, [pc, #268]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCC_OscConfig+0x57c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_RCC_OscConfig+0x57c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_RCC_OscConfig+0x57c>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d4:	f7ff fa7a 	bl	8001bcc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7ff fa76 	bl	8001bcc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e184      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x57c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_RCC_OscConfig+0x4d8>
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002712:	e024      	b.n	800275e <HAL_RCC_OscConfig+0x522>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d110      	bne.n	800273e <HAL_RCC_OscConfig+0x502>
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273c:	e00f      	b.n	800275e <HAL_RCC_OscConfig+0x522>
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa31 	bl	8001bcc <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fa2d 	bl	8001bcc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e139      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x578>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ed      	beq.n	800276e <HAL_RCC_OscConfig+0x532>
 8002792:	e01a      	b.n	80027ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7ff fa1a 	bl	8001bcc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279a:	e00f      	b.n	80027bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7ff fa16 	bl	8001bcc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d906      	bls.n	80027bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e122      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027bc:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e8      	bne.n	800279c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a8a      	ldr	r2, [pc, #552]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8108 	beq.w	80029f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f040 80d0 	bne.w	8002990 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027f0:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	429a      	cmp	r2, r3
 8002802:	d130      	bne.n	8002866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d127      	bne.n	8002866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11f      	bne.n	8002866 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002830:	2a07      	cmp	r2, #7
 8002832:	bf14      	ite	ne
 8002834:	2201      	movne	r2, #1
 8002836:	2200      	moveq	r2, #0
 8002838:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d109      	bne.n	8002866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d06e      	beq.n	8002944 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d069      	beq.n	8002940 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b7      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002888:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002892:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002894:	f7ff f99a 	bl	8001bcc <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7ff f996 	bl	8001bcc <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0a4      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCC_OscConfig+0x7c8>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d4:	0212      	lsls	r2, r2, #8
 80028d6:	4311      	orrs	r1, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028dc:	0852      	lsrs	r2, r2, #1
 80028de:	3a01      	subs	r2, #1
 80028e0:	0552      	lsls	r2, r2, #21
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0652      	lsls	r2, r2, #25
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f4:	0912      	lsrs	r2, r2, #4
 80028f6:	0452      	lsls	r2, r2, #17
 80028f8:	430a      	orrs	r2, r1
 80028fa:	4941      	ldr	r1, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3e      	ldr	r2, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a3b      	ldr	r2, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002918:	f7ff f958 	bl	8001bcc <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f954 	bl	8001bcc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e062      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800293e:	e05a      	b.n	80029f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e059      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002944:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d152      	bne.n	80029f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002968:	f7ff f930 	bl	8001bcc <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f92c 	bl	8001bcc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e03a      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x734>
 800298e:	e032      	b.n	80029f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d02d      	beq.n	80029f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 800299c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029b4:	f023 0303 	bic.w	r3, r3, #3
 80029b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f8ff 	bl	8001bcc <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7ff f8fb 	bl	8001bcc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e009      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x7c4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x796>
 80029f0:	e001      	b.n	80029f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	f99d808c 	.word	0xf99d808c

08002a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0c8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d910      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4961      	ldr	r1, [pc, #388]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b0      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d04c      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d121      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e09e      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d115      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e092      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a90:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e086      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e07e      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 0203 	bic.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	493f      	ldr	r1, [pc, #252]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac2:	f7ff f883 	bl	8001bcc <HAL_GetTick>
 8002ac6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aca:	f7ff f87f 	bl	8001bcc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e066      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae0:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 020c 	and.w	r2, r3, #12
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d1eb      	bne.n	8002aca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	492c      	ldr	r1, [pc, #176]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d210      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	4924      	ldr	r1, [pc, #144]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e036      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4918      	ldr	r1, [pc, #96]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b7e:	f000 f825 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_ClockConfig+0x1b4>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fe50 	bl	8001848 <HAL_InitTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	0800cd54 	.word	0x0800cd54
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d121      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11e      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	e004      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d134      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
 8002c70:	e005      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7a:	617b      	str	r3, [r7, #20]
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	3301      	adds	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	0800cd6c 	.word	0x0800cd6c
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	0800cd64 	.word	0x0800cd64

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d2c:	f7ff ffda 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0adb      	lsrs	r3, r3, #11
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	0800cd64 	.word	0x0800cd64

08002d54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	220f      	movs	r2, #15
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_GetClockConfig+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40022000 	.word	0x40022000

08002db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd0:	f7ff f9d0 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f9c0 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d10b      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d919      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2ba0      	cmp	r3, #160	; 0xa0
 8002e14:	d902      	bls.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e16:	2302      	movs	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e013      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e010      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d902      	bls.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e28:	2303      	movs	r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	e00a      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d102      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e34:	2302      	movs	r3, #2
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e004      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d101      	bne.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 0207 	bic.w	r2, r3, #7
 8002e4c:	4909      	ldr	r1, [pc, #36]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d041      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e9c:	d02a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ea2:	d824      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eae:	d81e      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d010      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eba:	e018      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a85      	ldr	r2, [pc, #532]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fabb 	bl	800344c <RCCEx_PLLSAI1_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3320      	adds	r3, #32
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fba6 	bl	8003634 <RCCEx_PLLSAI2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	4973      	ldr	r1, [pc, #460]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f12:	e001      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d041      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f2c:	d02a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f32:	d824      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3e:	d81e      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d010      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f4a:	e018      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f58:	e015      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fa73 	bl	800344c <RCCEx_PLLSAI1_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3320      	adds	r3, #32
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fb5e 	bl	8003634 <RCCEx_PLLSAI2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	74fb      	strb	r3, [r7, #19]
      break;
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f8c:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9a:	494f      	ldr	r1, [pc, #316]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fa2:	e001      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a0 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fde8 	bl	8001bcc <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ffe:	e009      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe fde4 	bl	8001bcc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	74fb      	strb	r3, [r7, #19]
        break;
 8003012:	e005      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d15c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01f      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d019      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fda3 	bl	8001bcc <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003088:	e00b      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe fd9f 	bl	8001bcc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d902      	bls.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	74fb      	strb	r3, [r7, #19]
            break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ec      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ce:	e009      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7c7b      	ldrb	r3, [r7, #17]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	4a9d      	ldr	r2, [pc, #628]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003102:	4b98      	ldr	r3, [pc, #608]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	4994      	ldr	r1, [pc, #592]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003124:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 020c 	bic.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	498c      	ldr	r1, [pc, #560]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4b87      	ldr	r3, [pc, #540]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4983      	ldr	r1, [pc, #524]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003168:	4b7e      	ldr	r3, [pc, #504]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	4972      	ldr	r1, [pc, #456]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	496a      	ldr	r1, [pc, #424]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	4961      	ldr	r1, [pc, #388]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f0:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	4959      	ldr	r1, [pc, #356]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003212:	4b54      	ldr	r3, [pc, #336]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	4950      	ldr	r1, [pc, #320]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	4948      	ldr	r1, [pc, #288]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	493f      	ldr	r1, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d028      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003278:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003286:	4937      	ldr	r1, [pc, #220]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003296:	d106      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a2:	60d3      	str	r3, [r2, #12]
 80032a4:	e011      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ae:	d10c      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f8c8 	bl	800344c <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	491f      	ldr	r1, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f4:	d106      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003300:	60d3      	str	r3, [r2, #12]
 8003302:	e011      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330c:	d10c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f899 	bl	800344c <RCCEx_PLLSAI1_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02b      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4908      	ldr	r1, [pc, #32]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003352:	d109      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a02      	ldr	r2, [pc, #8]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335e:	60d3      	str	r3, [r2, #12]
 8003360:	e014      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f867 	bl	800344c <RCCEx_PLLSAI1_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a6:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f844 	bl	800344c <RCCEx_PLLSAI1_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	74bb      	strb	r3, [r7, #18]
 80033d2:	e011      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3320      	adds	r3, #32
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f925 	bl	8003634 <RCCEx_PLLSAI2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003412:	490d      	ldr	r1, [pc, #52]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800343e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800345a:	4b75      	ldr	r3, [pc, #468]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d018      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003466:	4b72      	ldr	r3, [pc, #456]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d10d      	bne.n	8003492 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
       ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800347e:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
       ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d047      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e044      	b.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d018      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x86>
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d825      	bhi.n	80034f0 <RCCEx_PLLSAI1_Config+0xa4>
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d002      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x62>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d009      	beq.n	80034c0 <RCCEx_PLLSAI1_Config+0x74>
 80034ac:	e020      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ae:	4b60      	ldr	r3, [pc, #384]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034be:	e01a      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c0:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d116      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e013      	b.n	80034fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d2:	4b57      	ldr	r3, [pc, #348]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034de:	4b54      	ldr	r3, [pc, #336]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ee:	e006      	b.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e004      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003506:	4b4a      	ldr	r3, [pc, #296]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	430b      	orrs	r3, r1
 800351c:	4944      	ldr	r1, [pc, #272]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d17d      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a40      	ldr	r2, [pc, #256]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fe fb4a 	bl	8001bcc <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fe fb46 	bl	8001bcc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
        break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ef      	bne.n	800353c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d160      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d111      	bne.n	800358c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003568:	4b31      	ldr	r3, [pc, #196]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6892      	ldr	r2, [r2, #8]
 8003578:	0211      	lsls	r1, r2, #8
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	0912      	lsrs	r2, r2, #4
 8003580:	0452      	lsls	r2, r2, #17
 8003582:	430a      	orrs	r2, r1
 8003584:	492a      	ldr	r1, [pc, #168]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
 800358a:	e027      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d112      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800359a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	0211      	lsls	r1, r2, #8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6912      	ldr	r2, [r2, #16]
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0552      	lsls	r2, r2, #21
 80035ae:	430a      	orrs	r2, r1
 80035b0:	491f      	ldr	r1, [pc, #124]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]
 80035b6:	e011      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6952      	ldr	r2, [r2, #20]
 80035ce:	0852      	lsrs	r2, r2, #1
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0652      	lsls	r2, r2, #25
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4916      	ldr	r1, [pc, #88]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe faf0 	bl	8001bcc <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f0:	f7fe faec 	bl	8001bcc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
          break;
 8003602:	e005      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	4904      	ldr	r1, [pc, #16]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000

08003634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003642:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d018      	beq.n	8003680 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0203 	and.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d10d      	bne.n	800367a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
       ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003666:	4b61      	ldr	r3, [pc, #388]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
       ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d047      	beq.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e044      	b.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d018      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x86>
 8003688:	2b03      	cmp	r3, #3
 800368a:	d825      	bhi.n	80036d8 <RCCEx_PLLSAI2_Config+0xa4>
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0x62>
 8003690:	2b02      	cmp	r3, #2
 8003692:	d009      	beq.n	80036a8 <RCCEx_PLLSAI2_Config+0x74>
 8003694:	e020      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003696:	4b55      	ldr	r3, [pc, #340]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a6:	e01a      	b.n	80036de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e013      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d6:	e006      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e004      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	430b      	orrs	r3, r1
 8003704:	4939      	ldr	r1, [pc, #228]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d167      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a35      	ldr	r2, [pc, #212]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe fa56 	bl	8001bcc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fe fa52 	bl	8001bcc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
        break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14a      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d111      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	0912      	lsrs	r2, r2, #4
 8003768:	0452      	lsls	r2, r2, #17
 800376a:	430a      	orrs	r2, r1
 800376c:	491f      	ldr	r1, [pc, #124]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	614b      	str	r3, [r1, #20]
 8003772:	e011      	b.n	8003798 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800377c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	430a      	orrs	r2, r1
 8003792:	4916      	ldr	r1, [pc, #88]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fa12 	bl	8001bcc <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ac:	f7fe fa0e 	bl	8001bcc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
          break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4904      	ldr	r1, [pc, #16]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e095      	b.n	800392e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003812:	d009      	beq.n	8003828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
 800381a:	e005      	b.n	8003828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd ff7c 	bl	8001740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003868:	d902      	bls.n	8003870 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e002      	b.n	8003876 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003874:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800387e:	d007      	beq.n	8003890 <HAL_SPI_Init+0xa0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	ea42 0103 	orr.w	r1, r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	f003 0204 	and.w	r2, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800390c:	ea42 0103 	orr.w	r1, r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b088      	sub	sp, #32
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_SPI_Transmit+0x22>
 8003954:	2302      	movs	r3, #2
 8003956:	e158      	b.n	8003c0a <HAL_SPI_Transmit+0x2d4>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003960:	f7fe f934 	bl	8001bcc <HAL_GetTick>
 8003964:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	77fb      	strb	r3, [r7, #31]
    goto error;
 800397a:	e13d      	b.n	8003bf8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Transmit+0x52>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800398c:	e134      	b.n	8003bf8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2203      	movs	r2, #3
 8003992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	d10f      	bne.n	80039fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d007      	beq.n	8003a18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a20:	d94b      	bls.n	8003aba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Transmit+0xfa>
 8003a2a:	8afb      	ldrh	r3, [r7, #22]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d13e      	bne.n	8003aae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a54:	e02b      	b.n	8003aae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d112      	bne.n	8003a8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a88:	e011      	b.n	8003aae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8a:	f7fe f89f 	bl	8001bcc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d803      	bhi.n	8003aa2 <HAL_SPI_Transmit+0x16c>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_Transmit+0x172>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aac:	e0a4      	b.n	8003bf8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ce      	bne.n	8003a56 <HAL_SPI_Transmit+0x120>
 8003ab8:	e07c      	b.n	8003bb4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Transmit+0x192>
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d170      	bne.n	8003baa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d912      	bls.n	8003af8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b02      	subs	r3, #2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af6:	e058      	b.n	8003baa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b1e:	e044      	b.n	8003baa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d12b      	bne.n	8003b86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d912      	bls.n	8003b5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b02      	subs	r3, #2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b5c:	e025      	b.n	8003baa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	7812      	ldrb	r2, [r2, #0]
 8003b6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b84:	e011      	b.n	8003baa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b86:	f7fe f821 	bl	8001bcc <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d803      	bhi.n	8003b9e <HAL_SPI_Transmit+0x268>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9c:	d102      	bne.n	8003ba4 <HAL_SPI_Transmit+0x26e>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ba8:	e026      	b.n	8003bf8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1b5      	bne.n	8003b20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fb57 	bl	800426c <SPI_EndRxTxTransaction>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e000      	b.n	8003bf8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003bf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c20:	2301      	movs	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x26>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e1fb      	b.n	8004030 <HAL_SPI_TransmitReceive+0x41e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c40:	f7fd ffc4 	bl	8001bcc <HAL_GetTick>
 8003c44:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c4c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c5c:	7efb      	ldrb	r3, [r7, #27]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00e      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x6e>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c68:	d106      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x66>
 8003c72:	7efb      	ldrb	r3, [r7, #27]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d003      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c7e:	e1cd      	b.n	800401c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x80>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x80>
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c98:	e1c0      	b.n	800401c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2205      	movs	r2, #5
 8003caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	887a      	ldrh	r2, [r7, #2]
 8003cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cf0:	d802      	bhi.n	8003cf8 <HAL_SPI_TransmitReceive+0xe6>
 8003cf2:	8a3b      	ldrh	r3, [r7, #16]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d908      	bls.n	8003d0a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	e007      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d007      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d40:	d97c      	bls.n	8003e3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x13e>
 8003d4a:	8a7b      	ldrh	r3, [r7, #18]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d169      	bne.n	8003e24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d74:	e056      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x1aa>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x1aa>
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d113      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d11c      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x1f2>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	b292      	uxth	r2, r2
 8003de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e04:	f7fd fee2 	bl	8001bcc <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d807      	bhi.n	8003e24 <HAL_SPI_TransmitReceive+0x212>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1a:	d003      	beq.n	8003e24 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e22:	e0fb      	b.n	800401c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1a3      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x164>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d19d      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x164>
 8003e3a:	e0df      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x23a>
 8003e44:	8a7b      	ldrh	r3, [r7, #18]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	f040 80cb 	bne.w	8003fe2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d912      	bls.n	8003e7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b02      	subs	r3, #2
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e7a:	e0b2      	b.n	8003fe2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea2:	e09e      	b.n	8003fe2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d134      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x30a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02f      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x30a>
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d12c      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d912      	bls.n	8003ef2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	881a      	ldrh	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	1c9a      	adds	r2, r3, #2
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b02      	subs	r3, #2
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef0:	e012      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d148      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x3aa>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d042      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d923      	bls.n	8003f8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	b292      	uxth	r2, r2
 8003f4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b02      	subs	r3, #2
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d81f      	bhi.n	8003fb8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	e016      	b.n	8003fb8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f103 020c 	add.w	r2, r3, #12
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fbc:	f7fd fe06 	bl	8001bcc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d803      	bhi.n	8003fd4 <HAL_SPI_TransmitReceive+0x3c2>
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_TransmitReceive+0x3c8>
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003fe0:	e01c      	b.n	800401c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af5b 	bne.w	8003ea4 <HAL_SPI_TransmitReceive+0x292>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f af54 	bne.w	8003ea4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f933 	bl	800426c <SPI_EndRxTxTransaction>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	661a      	str	r2, [r3, #96]	; 0x60
 8004018:	e000      	b.n	800401c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800401a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800402c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004030:	4618      	mov	r0, r3
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004048:	f7fd fdc0 	bl	8001bcc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004058:	f7fd fdb8 	bl	8001bcc <HAL_GetTick>
 800405c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	015b      	lsls	r3, r3, #5
 8004064:	0d1b      	lsrs	r3, r3, #20
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800406e:	e054      	b.n	800411a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d050      	beq.n	800411a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004078:	f7fd fda8 	bl	8001bcc <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	429a      	cmp	r2, r3
 8004086:	d902      	bls.n	800408e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d13d      	bne.n	800410a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800409c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a6:	d111      	bne.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b0:	d004      	beq.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ba:	d107      	bne.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d4:	d10f      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e017      	b.n	800413a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3b01      	subs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d19b      	bne.n	8004070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000004 	.word	0x20000004

08004148 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004156:	f7fd fd39 	bl	8001bcc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4413      	add	r3, r2
 8004164:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004166:	f7fd fd31 	bl	8001bcc <HAL_GetTick>
 800416a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800416c:	4b3e      	ldr	r3, [pc, #248]	; (8004268 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00da      	lsls	r2, r3, #3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	0d1b      	lsrs	r3, r3, #20
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004184:	e062      	b.n	800424c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800418c:	d109      	bne.n	80041a2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80041a0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a8:	d050      	beq.n	800424c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041aa:	f7fd fd0f 	bl	8001bcc <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d902      	bls.n	80041c0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d13d      	bne.n	800423c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d8:	d111      	bne.n	80041fe <SPI_WaitFifoStateUntilTimeout+0xb6>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e2:	d004      	beq.n	80041ee <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ec:	d107      	bne.n	80041fe <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d10f      	bne.n	8004228 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e010      	b.n	800425e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3b01      	subs	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d194      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000004 	.word	0x20000004

0800426c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ff5f 	bl	8004148 <SPI_WaitFifoStateUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e027      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fec4 	bl	8004038 <SPI_WaitFlagStateUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e014      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff38 	bl	8004148 <SPI_WaitFifoStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e000      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e049      	b.n	800439e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f841 	bl	80043a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 f9f8 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04f      	b.n	8004474 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	; (8004480 <HAL_TIM_Base_Start_IT+0xc4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01d      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d018      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <HAL_TIM_Base_Start_IT+0xc8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIM_Base_Start_IT+0xcc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <HAL_TIM_Base_Start_IT+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_TIM_Base_Start_IT+0xd4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x76>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_TIM_Base_Start_IT+0xd8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d115      	bne.n	800445e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_TIM_Base_Start_IT+0xdc>)
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d015      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d011      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e008      	b.n	8004470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e000      	b.n	8004472 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40013400 	.word	0x40013400
 8004494:	40014000 	.word	0x40014000
 8004498:	00010007 	.word	0x00010007

0800449c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f905 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f8f7 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f908 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0204 	mvn.w	r2, #4
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8db 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8cd 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8de 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b08      	cmp	r3, #8
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0208 	mvn.w	r2, #8
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8b1 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8a3 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8b4 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0210 	mvn.w	r2, #16
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2208      	movs	r2, #8
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f887 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f879 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f88a 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0201 	mvn.w	r2, #1
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fe88 	bl	8001330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f914 	bl	8004874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f907 	bl	8004888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d10e      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f838 	bl	8004716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d10e      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0220 	mvn.w	r2, #32
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8c7 	bl	8004860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a40      	ldr	r2, [pc, #256]	; (8004840 <TIM_Base_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d00f      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3d      	ldr	r2, [pc, #244]	; (8004844 <TIM_Base_SetConfig+0x118>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <TIM_Base_SetConfig+0x11c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3b      	ldr	r2, [pc, #236]	; (800484c <TIM_Base_SetConfig+0x120>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <TIM_Base_SetConfig+0x114>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01f      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d01b      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2c      	ldr	r2, [pc, #176]	; (8004844 <TIM_Base_SetConfig+0x118>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d017      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <TIM_Base_SetConfig+0x11c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2a      	ldr	r2, [pc, #168]	; (800484c <TIM_Base_SetConfig+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a29      	ldr	r2, [pc, #164]	; (8004850 <TIM_Base_SetConfig+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a28      	ldr	r2, [pc, #160]	; (8004854 <TIM_Base_SetConfig+0x128>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a27      	ldr	r2, [pc, #156]	; (8004858 <TIM_Base_SetConfig+0x12c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <TIM_Base_SetConfig+0x130>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <TIM_Base_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a12      	ldr	r2, [pc, #72]	; (8004850 <TIM_Base_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <TIM_Base_SetConfig+0x128>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0xf8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a10      	ldr	r2, [pc, #64]	; (8004858 <TIM_Base_SetConfig+0x12c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0xf8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <TIM_Base_SetConfig+0x130>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	615a      	str	r2, [r3, #20]
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40013400 	.word	0x40013400
 8004854:	40014000 	.word	0x40014000
 8004858:	40014400 	.word	0x40014400
 800485c:	40014800 	.word	0x40014800

08004860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e040      	b.n	8004930 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc ff80 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8c0 	bl	8004a60 <UART_SetConfig>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e022      	b.n	8004930 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fb3e 	bl	8004f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fbc5 	bl	80050b8 <UART_CheckIdleState>
 800492e:	4603      	mov	r3, r0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800494c:	2b20      	cmp	r3, #32
 800494e:	f040 8082 	bne.w	8004a56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_Transmit+0x26>
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07a      	b.n	8004a58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_UART_Transmit+0x38>
 800496c:	2302      	movs	r3, #2
 800496e:	e073      	b.n	8004a58 <HAL_UART_Transmit+0x120>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2221      	movs	r2, #33	; 0x21
 8004984:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004986:	f7fd f921 	bl	8001bcc <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x80>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049c8:	e02d      	b.n	8004a26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fbb8 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e039      	b.n	8004a58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	881a      	ldrh	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f6:	b292      	uxth	r2, r2
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3302      	adds	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e008      	b.n	8004a14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1cb      	bne.n	80049ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fb84 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e005      	b.n	8004a58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b5b0      	push	{r4, r5, r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4bad      	ldr	r3, [pc, #692]	; (8004d40 <UART_SetConfig+0x2e0>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	69f9      	ldr	r1, [r7, #28]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4aa2      	ldr	r2, [pc, #648]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a99      	ldr	r2, [pc, #612]	; (8004d48 <UART_SetConfig+0x2e8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d121      	bne.n	8004b2a <UART_SetConfig+0xca>
 8004ae6:	4b99      	ldr	r3, [pc, #612]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d817      	bhi.n	8004b24 <UART_SetConfig+0xc4>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x9c>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b19 	.word	0x08004b19
 8004b04:	08004b13 	.word	0x08004b13
 8004b08:	08004b1f 	.word	0x08004b1f
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	76fb      	strb	r3, [r7, #27]
 8004b10:	e0e7      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b12:	2302      	movs	r3, #2
 8004b14:	76fb      	strb	r3, [r7, #27]
 8004b16:	e0e4      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	76fb      	strb	r3, [r7, #27]
 8004b1c:	e0e1      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	76fb      	strb	r3, [r7, #27]
 8004b22:	e0de      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b24:	2310      	movs	r3, #16
 8004b26:	76fb      	strb	r3, [r7, #27]
 8004b28:	e0db      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a88      	ldr	r2, [pc, #544]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d132      	bne.n	8004b9a <UART_SetConfig+0x13a>
 8004b34:	4b85      	ldr	r3, [pc, #532]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d828      	bhi.n	8004b94 <UART_SetConfig+0x134>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0xe8>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004b95 	.word	0x08004b95
 8004b50:	08004b95 	.word	0x08004b95
 8004b54:	08004b95 	.word	0x08004b95
 8004b58:	08004b89 	.word	0x08004b89
 8004b5c:	08004b95 	.word	0x08004b95
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004b83 	.word	0x08004b83
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004b95 	.word	0x08004b95
 8004b78:	08004b8f 	.word	0x08004b8f
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	76fb      	strb	r3, [r7, #27]
 8004b80:	e0af      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b82:	2302      	movs	r3, #2
 8004b84:	76fb      	strb	r3, [r7, #27]
 8004b86:	e0ac      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	76fb      	strb	r3, [r7, #27]
 8004b8c:	e0a9      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	76fb      	strb	r3, [r7, #27]
 8004b92:	e0a6      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b94:	2310      	movs	r3, #16
 8004b96:	76fb      	strb	r3, [r7, #27]
 8004b98:	e0a3      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6d      	ldr	r2, [pc, #436]	; (8004d54 <UART_SetConfig+0x2f4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d120      	bne.n	8004be6 <UART_SetConfig+0x186>
 8004ba4:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d013      	beq.n	8004bda <UART_SetConfig+0x17a>
 8004bb2:	2b30      	cmp	r3, #48	; 0x30
 8004bb4:	d814      	bhi.n	8004be0 <UART_SetConfig+0x180>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x16e>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d810      	bhi.n	8004be0 <UART_SetConfig+0x180>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <UART_SetConfig+0x168>
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d006      	beq.n	8004bd4 <UART_SetConfig+0x174>
 8004bc6:	e00b      	b.n	8004be0 <UART_SetConfig+0x180>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e089      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e086      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e083      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	76fb      	strb	r3, [r7, #27]
 8004bde:	e080      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004be0:	2310      	movs	r3, #16
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e07d      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a5b      	ldr	r2, [pc, #364]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d120      	bne.n	8004c32 <UART_SetConfig+0x1d2>
 8004bf0:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfc:	d013      	beq.n	8004c26 <UART_SetConfig+0x1c6>
 8004bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004c00:	d814      	bhi.n	8004c2c <UART_SetConfig+0x1cc>
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d009      	beq.n	8004c1a <UART_SetConfig+0x1ba>
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d810      	bhi.n	8004c2c <UART_SetConfig+0x1cc>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <UART_SetConfig+0x1b4>
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d006      	beq.n	8004c20 <UART_SetConfig+0x1c0>
 8004c12:	e00b      	b.n	8004c2c <UART_SetConfig+0x1cc>
 8004c14:	2300      	movs	r3, #0
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e063      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	76fb      	strb	r3, [r7, #27]
 8004c1e:	e060      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c20:	2304      	movs	r3, #4
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e05d      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c26:	2308      	movs	r3, #8
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e05a      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e057      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a49      	ldr	r2, [pc, #292]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d125      	bne.n	8004c88 <UART_SetConfig+0x228>
 8004c3c:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	d017      	beq.n	8004c7c <UART_SetConfig+0x21c>
 8004c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c50:	d817      	bhi.n	8004c82 <UART_SetConfig+0x222>
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c56:	d00b      	beq.n	8004c70 <UART_SetConfig+0x210>
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d811      	bhi.n	8004c82 <UART_SetConfig+0x222>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <UART_SetConfig+0x20a>
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d006      	beq.n	8004c76 <UART_SetConfig+0x216>
 8004c68:	e00b      	b.n	8004c82 <UART_SetConfig+0x222>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e038      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c70:	2302      	movs	r3, #2
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e035      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c76:	2304      	movs	r3, #4
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e032      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	e02f      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c82:	2310      	movs	r3, #16
 8004c84:	76fb      	strb	r3, [r7, #27]
 8004c86:	e02c      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d125      	bne.n	8004cde <UART_SetConfig+0x27e>
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca0:	d017      	beq.n	8004cd2 <UART_SetConfig+0x272>
 8004ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca6:	d817      	bhi.n	8004cd8 <UART_SetConfig+0x278>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cac:	d00b      	beq.n	8004cc6 <UART_SetConfig+0x266>
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d811      	bhi.n	8004cd8 <UART_SetConfig+0x278>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <UART_SetConfig+0x260>
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d006      	beq.n	8004ccc <UART_SetConfig+0x26c>
 8004cbe:	e00b      	b.n	8004cd8 <UART_SetConfig+0x278>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e00d      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e00a      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	76fb      	strb	r3, [r7, #27]
 8004cd0:	e007      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	76fb      	strb	r3, [r7, #27]
 8004cd6:	e004      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	e001      	b.n	8004ce2 <UART_SetConfig+0x282>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	f040 8087 	bne.w	8004dfc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cee:	7efb      	ldrb	r3, [r7, #27]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d837      	bhi.n	8004d64 <UART_SetConfig+0x304>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x29c>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d65 	.word	0x08004d65
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d65 	.word	0x08004d65
 8004d0c:	08004d2f 	.word	0x08004d2f
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fd ffec 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004d24:	6178      	str	r0, [r7, #20]
        break;
 8004d26:	e022      	b.n	8004d6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <UART_SetConfig+0x300>)
 8004d2a:	617b      	str	r3, [r7, #20]
        break;
 8004d2c:	e01f      	b.n	8004d6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fd ff4d 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004d32:	6178      	str	r0, [r7, #20]
        break;
 8004d34:	e01b      	b.n	8004d6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3a:	617b      	str	r3, [r7, #20]
        break;
 8004d3c:	e017      	b.n	8004d6e <UART_SetConfig+0x30e>
 8004d3e:	bf00      	nop
 8004d40:	efff69f3 	.word	0xefff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40004400 	.word	0x40004400
 8004d54:	40004800 	.word	0x40004800
 8004d58:	40004c00 	.word	0x40004c00
 8004d5c:	40005000 	.word	0x40005000
 8004d60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	76bb      	strb	r3, [r7, #26]
        break;
 8004d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80f1 	beq.w	8004f58 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d305      	bcc.n	8004d92 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d902      	bls.n	8004d98 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	76bb      	strb	r3, [r7, #26]
 8004d96:	e0df      	b.n	8004f58 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	020b      	lsls	r3, r1, #8
 8004daa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dae:	0202      	lsls	r2, r0, #8
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	6849      	ldr	r1, [r1, #4]
 8004db4:	0849      	lsrs	r1, r1, #1
 8004db6:	4608      	mov	r0, r1
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	1814      	adds	r4, r2, r0
 8004dbe:	eb43 0501 	adc.w	r5, r3, r1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb fa56 	bl	8000280 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d308      	bcc.n	8004df6 <UART_SetConfig+0x396>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dea:	d204      	bcs.n	8004df6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	60da      	str	r2, [r3, #12]
 8004df4:	e0b0      	b.n	8004f58 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	76bb      	strb	r3, [r7, #26]
 8004dfa:	e0ad      	b.n	8004f58 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	d15c      	bne.n	8004ec0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e06:	7efb      	ldrb	r3, [r7, #27]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d828      	bhi.n	8004e5e <UART_SetConfig+0x3fe>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x3b4>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7fd ff60 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004e3c:	6178      	str	r0, [r7, #20]
        break;
 8004e3e:	e013      	b.n	8004e68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fd ff72 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004e44:	6178      	str	r0, [r7, #20]
        break;
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <UART_SetConfig+0x510>)
 8004e4a:	617b      	str	r3, [r7, #20]
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7fd febd 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004e52:	6178      	str	r0, [r7, #20]
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	617b      	str	r3, [r7, #20]
        break;
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	76bb      	strb	r3, [r7, #26]
        break;
 8004e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d074      	beq.n	8004f58 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b0f      	cmp	r3, #15
 8004e8a:	d916      	bls.n	8004eba <UART_SetConfig+0x45a>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d212      	bcs.n	8004eba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f023 030f 	bic.w	r3, r3, #15
 8004e9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	89fa      	ldrh	r2, [r7, #14]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	e04e      	b.n	8004f58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	76bb      	strb	r3, [r7, #26]
 8004ebe:	e04b      	b.n	8004f58 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec0:	7efb      	ldrb	r3, [r7, #27]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d827      	bhi.n	8004f16 <UART_SetConfig+0x4b6>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x46c>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fd ff04 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004ef4:	6178      	str	r0, [r7, #20]
        break;
 8004ef6:	e013      	b.n	8004f20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fd ff16 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004efc:	6178      	str	r0, [r7, #20]
        break;
 8004efe:	e00f      	b.n	8004f20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <UART_SetConfig+0x510>)
 8004f02:	617b      	str	r3, [r7, #20]
        break;
 8004f04:	e00c      	b.n	8004f20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7fd fe61 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004f0a:	6178      	str	r0, [r7, #20]
        break;
 8004f0c:	e008      	b.n	8004f20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	617b      	str	r3, [r7, #20]
        break;
 8004f14:	e004      	b.n	8004f20 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	76bb      	strb	r3, [r7, #26]
        break;
 8004f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085a      	lsrs	r2, r3, #1
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	d908      	bls.n	8004f54 <UART_SetConfig+0x4f4>
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f48:	d204      	bcs.n	8004f54 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e001      	b.n	8004f58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f64:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	00f42400 	.word	0x00f42400

08004f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01a      	beq.n	800508a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	d10a      	bne.n	800508a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af02      	add	r7, sp, #8
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c8:	f7fc fd80 	bl	8001bcc <HAL_GetTick>
 80050cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d10e      	bne.n	80050fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f82d 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e023      	b.n	8005142 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d10e      	bne.n	8005126 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f817 	bl	800514a <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e00d      	b.n	8005142 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515a:	e05e      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005162:	d05a      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005164:	f7fc fd32 	bl	8001bcc <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <UART_WaitOnFlagUntilTimeout+0x30>
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11b      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005188:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e043      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02c      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ce:	d124      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e00f      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d091      	beq.n	800515c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005248:	4904      	ldr	r1, [pc, #16]	; (800525c <MX_FATFS_Init+0x18>)
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <MX_FATFS_Init+0x1c>)
 800524c:	f002 ffe8 	bl	8008220 <FATFS_LinkDriver>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <MX_FATFS_Init+0x20>)
 8005256:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	2000bc6c 	.word	0x2000bc6c
 8005260:	20000010 	.word	0x20000010
 8005264:	2000bc70 	.word	0x2000bc70

08005268 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800526c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fb fb2b 	bl	80008e0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800528a:	bf00      	nop
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fb fc03 	bl	8000aac <SD_disk_status>
  /* USER CODE END STATUS */
}
 80052a6:	bf00      	nop
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 80052c0:	7bf8      	ldrb	r0, [r7, #15]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	f7fb fc06 	bl	8000ad8 <SD_disk_read>
  /* USER CODE END READ */
}
 80052cc:	bf00      	nop
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 80052e6:	7bf8      	ldrb	r0, [r7, #15]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	f7fb fc5d 	bl	8000bac <SD_disk_write>
  /* USER CODE END WRITE */
}
 80052f2:	bf00      	nop
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	603a      	str	r2, [r7, #0]
 8005306:	71fb      	strb	r3, [r7, #7]
 8005308:	460b      	mov	r3, r1
 800530a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	79b9      	ldrb	r1, [r7, #6]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fb fcce 	bl	8000cb4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8005318:	bf00      	nop
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <disk_status+0x30>)
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	79fa      	ldrb	r2, [r7, #7]
 800533c:	4905      	ldr	r1, [pc, #20]	; (8005354 <disk_status+0x30>)
 800533e:	440a      	add	r2, r1
 8005340:	7a12      	ldrb	r2, [r2, #8]
 8005342:	4610      	mov	r0, r2
 8005344:	4798      	blx	r3
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
  return stat;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200000d8 	.word	0x200000d8

08005358 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <disk_initialize+0x48>)
 800536a:	5cd3      	ldrb	r3, [r2, r3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d111      	bne.n	8005394 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <disk_initialize+0x48>)
 8005374:	2101      	movs	r1, #1
 8005376:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <disk_initialize+0x48>)
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	79fa      	ldrb	r2, [r7, #7]
 8005386:	4906      	ldr	r1, [pc, #24]	; (80053a0 <disk_initialize+0x48>)
 8005388:	440a      	add	r2, r1
 800538a:	7a12      	ldrb	r2, [r2, #8]
 800538c:	4610      	mov	r0, r2
 800538e:	4798      	blx	r3
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200000d8 	.word	0x200000d8

080053a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <disk_read+0x3c>)
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	689c      	ldr	r4, [r3, #8]
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <disk_read+0x3c>)
 80053c4:	4413      	add	r3, r2
 80053c6:	7a18      	ldrb	r0, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	47a0      	blx	r4
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}
 80053de:	bf00      	nop
 80053e0:	200000d8 	.word	0x200000d8

080053e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <disk_write+0x3c>)
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68dc      	ldr	r4, [r3, #12]
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <disk_write+0x3c>)
 8005404:	4413      	add	r3, r2
 8005406:	7a18      	ldrb	r0, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	47a0      	blx	r4
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]
  return res;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd90      	pop	{r4, r7, pc}
 800541e:	bf00      	nop
 8005420:	200000d8 	.word	0x200000d8

08005424 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	603a      	str	r2, [r7, #0]
 800542e:	71fb      	strb	r3, [r7, #7]
 8005430:	460b      	mov	r3, r1
 8005432:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <disk_ioctl+0x38>)
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	4906      	ldr	r1, [pc, #24]	; (800545c <disk_ioctl+0x38>)
 8005444:	440a      	add	r2, r1
 8005446:	7a10      	ldrb	r0, [r2, #8]
 8005448:	79b9      	ldrb	r1, [r7, #6]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4798      	blx	r3
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
  return res;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200000d8 	.word	0x200000d8

08005460 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3301      	adds	r3, #1
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005470:	89fb      	ldrh	r3, [r7, #14]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	b21a      	sxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b21b      	sxth	r3, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	b21b      	sxth	r3, r3
 8005480:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005482:	89fb      	ldrh	r3, [r7, #14]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3303      	adds	r3, #3
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	3202      	adds	r2, #2
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	3201      	adds	r2, #1
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80054c8:	68fb      	ldr	r3, [r7, #12]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	887a      	ldrh	r2, [r7, #2]
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00d      	beq.n	800559a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	1c53      	adds	r3, r2, #1
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	6179      	str	r1, [r7, #20]
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3b01      	subs	r3, #1
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f1      	bne.n	800557e <mem_cpy+0x1a>
	}
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80055a6:	b480      	push	{r7}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	617a      	str	r2, [r7, #20]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f3      	bne.n	80055b6 <mem_set+0x10>
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	4619      	mov	r1, r3
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	61ba      	str	r2, [r7, #24]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3b01      	subs	r3, #1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <mem_cmp+0x40>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0eb      	beq.n	80055f4 <mem_cmp+0x18>

	return r;
 800561c:	697b      	ldr	r3, [r7, #20]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3724      	adds	r7, #36	; 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005634:	e002      	b.n	800563c <chk_chr+0x12>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3301      	adds	r3, #1
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <chk_chr+0x26>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4293      	cmp	r3, r2
 800564e:	d1f2      	bne.n	8005636 <chk_chr+0xc>
	return *str;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	781b      	ldrb	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <lock_fs+0x22>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	4618      	mov	r0, r3
 8005674:	f002 fed1 	bl	800841a <ff_req_grant>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <lock_fs+0x22>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <lock_fs+0x24>
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <unlock_fs+0x2e>
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d00a      	beq.n	80056ba <unlock_fs+0x2e>
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b0b      	cmp	r3, #11
 80056a8:	d007      	beq.n	80056ba <unlock_fs+0x2e>
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b0f      	cmp	r3, #15
 80056ae:	d004      	beq.n	80056ba <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 fec5 	bl	8008444 <ff_rel_grant>
	}
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e029      	b.n	800572c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80056d8:	4a27      	ldr	r2, [pc, #156]	; (8005778 <chk_lock+0xb4>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	4413      	add	r3, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01d      	beq.n	8005722 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80056e6:	4a24      	ldr	r2, [pc, #144]	; (8005778 <chk_lock+0xb4>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d116      	bne.n	8005726 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80056f8:	4a1f      	ldr	r2, [pc, #124]	; (8005778 <chk_lock+0xb4>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	4413      	add	r3, r2
 8005700:	3304      	adds	r3, #4
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005708:	429a      	cmp	r2, r3
 800570a:	d10c      	bne.n	8005726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800570c:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <chk_lock+0xb4>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4413      	add	r3, r2
 8005714:	3308      	adds	r3, #8
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800571c:	429a      	cmp	r2, r3
 800571e:	d102      	bne.n	8005726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005720:	e007      	b.n	8005732 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005722:	2301      	movs	r3, #1
 8005724:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d9d2      	bls.n	80056d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d109      	bne.n	800574c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <chk_lock+0x80>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d101      	bne.n	8005748 <chk_lock+0x84>
 8005744:	2300      	movs	r3, #0
 8005746:	e010      	b.n	800576a <chk_lock+0xa6>
 8005748:	2312      	movs	r3, #18
 800574a:	e00e      	b.n	800576a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <chk_lock+0xa0>
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <chk_lock+0xb4>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	4413      	add	r3, r2
 800575a:	330c      	adds	r3, #12
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005762:	d101      	bne.n	8005768 <chk_lock+0xa4>
 8005764:	2310      	movs	r3, #16
 8005766:	e000      	b.n	800576a <chk_lock+0xa6>
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	200000b8 	.word	0x200000b8

0800577c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	e002      	b.n	800578e <enq_lock+0x12>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3301      	adds	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d806      	bhi.n	80057a2 <enq_lock+0x26>
 8005794:	4a09      	ldr	r2, [pc, #36]	; (80057bc <enq_lock+0x40>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	4413      	add	r3, r2
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f2      	bne.n	8005788 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	200000b8 	.word	0x200000b8

080057c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e01f      	b.n	8005810 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80057d0:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <inc_lock+0x118>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	4413      	add	r3, r2
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d113      	bne.n	800580a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80057e2:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <inc_lock+0x118>)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	4413      	add	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d109      	bne.n	800580a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80057f6:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <inc_lock+0x118>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	3308      	adds	r3, #8
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005806:	429a      	cmp	r2, r3
 8005808:	d006      	beq.n	8005818 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d9dc      	bls.n	80057d0 <inc_lock+0x10>
 8005816:	e000      	b.n	800581a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005818:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d132      	bne.n	8005886 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e002      	b.n	800582c <inc_lock+0x6c>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d806      	bhi.n	8005840 <inc_lock+0x80>
 8005832:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <inc_lock+0x118>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	4413      	add	r3, r2
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f2      	bne.n	8005826 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d101      	bne.n	800584a <inc_lock+0x8a>
 8005846:	2300      	movs	r3, #0
 8005848:	e040      	b.n	80058cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4922      	ldr	r1, [pc, #136]	; (80058d8 <inc_lock+0x118>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	440b      	add	r3, r1
 8005856:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	491e      	ldr	r1, [pc, #120]	; (80058d8 <inc_lock+0x118>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	440b      	add	r3, r1
 8005864:	3304      	adds	r3, #4
 8005866:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	491a      	ldr	r1, [pc, #104]	; (80058d8 <inc_lock+0x118>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	440b      	add	r3, r1
 8005874:	3308      	adds	r3, #8
 8005876:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <inc_lock+0x118>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	4413      	add	r3, r2
 8005880:	330c      	adds	r3, #12
 8005882:	2200      	movs	r2, #0
 8005884:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <inc_lock+0xe0>
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <inc_lock+0x118>)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	4413      	add	r3, r2
 8005894:	330c      	adds	r3, #12
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <inc_lock+0xe0>
 800589c:	2300      	movs	r3, #0
 800589e:	e015      	b.n	80058cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <inc_lock+0xf8>
 80058a6:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <inc_lock+0x118>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4413      	add	r3, r2
 80058ae:	330c      	adds	r3, #12
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	e001      	b.n	80058bc <inc_lock+0xfc>
 80058b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058bc:	4906      	ldr	r1, [pc, #24]	; (80058d8 <inc_lock+0x118>)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	440b      	add	r3, r1
 80058c4:	330c      	adds	r3, #12
 80058c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	200000b8 	.word	0x200000b8

080058dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d825      	bhi.n	800593c <dec_lock+0x60>
		n = Files[i].ctr;
 80058f0:	4a17      	ldr	r2, [pc, #92]	; (8005950 <dec_lock+0x74>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	4413      	add	r3, r2
 80058f8:	330c      	adds	r3, #12
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005904:	d101      	bne.n	800590a <dec_lock+0x2e>
 8005906:	2300      	movs	r3, #0
 8005908:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <dec_lock+0x3a>
 8005910:	89fb      	ldrh	r3, [r7, #14]
 8005912:	3b01      	subs	r3, #1
 8005914:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005916:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <dec_lock+0x74>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	4413      	add	r3, r2
 800591e:	330c      	adds	r3, #12
 8005920:	89fa      	ldrh	r2, [r7, #14]
 8005922:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <dec_lock+0x5a>
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <dec_lock+0x74>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	4413      	add	r3, r2
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	737b      	strb	r3, [r7, #13]
 800593a:	e001      	b.n	8005940 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800593c:	2302      	movs	r3, #2
 800593e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005940:	7b7b      	ldrb	r3, [r7, #13]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200000b8 	.word	0x200000b8

08005954 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e010      	b.n	8005984 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005962:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <clear_lock+0x44>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	4413      	add	r3, r2
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d105      	bne.n	800597e <clear_lock+0x2a>
 8005972:	4a09      	ldr	r2, [pc, #36]	; (8005998 <clear_lock+0x44>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	4413      	add	r3, r2
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d9eb      	bls.n	8005962 <clear_lock+0xe>
	}
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	200000b8 	.word	0x200000b8

0800599c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d034      	beq.n	8005a1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7858      	ldrb	r0, [r3, #1]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80059c0:	2301      	movs	r3, #1
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	f7ff fd0e 	bl	80053e4 <disk_write>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
 80059d2:	e022      	b.n	8005a1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d217      	bcs.n	8005a1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e010      	b.n	8005a14 <sync_window+0x78>
					wsect += fs->fsize;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7858      	ldrb	r0, [r3, #1]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005a06:	2301      	movs	r3, #1
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	f7ff fceb 	bl	80053e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d8eb      	bhi.n	80059f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d01b      	beq.n	8005a74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ffad 	bl	800599c <sync_window>
 8005a42:	4603      	mov	r3, r0
 8005a44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d113      	bne.n	8005a74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7858      	ldrb	r0, [r3, #1]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005a56:	2301      	movs	r3, #1
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	f7ff fca3 	bl	80053a4 <disk_read>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff ff87 	bl	800599c <sync_window>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d159      	bne.n	8005b4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d149      	bne.n	8005b34 <sync_fs+0xb4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d145      	bne.n	8005b34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	899b      	ldrh	r3, [r3, #12]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f7ff fd76 	bl	80055a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	333c      	adds	r3, #60	; 0x3c
 8005abe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ac2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fd05 	bl	80054d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	333c      	adds	r3, #60	; 0x3c
 8005ad0:	4921      	ldr	r1, [pc, #132]	; (8005b58 <sync_fs+0xd8>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fd1a 	bl	800550c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	333c      	adds	r3, #60	; 0x3c
 8005adc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ae0:	491e      	ldr	r1, [pc, #120]	; (8005b5c <sync_fs+0xdc>)
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fd12 	bl	800550c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	333c      	adds	r3, #60	; 0x3c
 8005aec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7ff fd08 	bl	800550c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	333c      	adds	r3, #60	; 0x3c
 8005b00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7ff fcfe 	bl	800550c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7858      	ldrb	r0, [r3, #1]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f7ff fc5b 	bl	80053e4 <disk_write>
			fs->fsi_flag = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fc71 	bl	8005424 <disk_ioctl>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <sync_fs+0xcc>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	41615252 	.word	0x41615252
 8005b5c:	61417272 	.word	0x61417272

08005b60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	3b02      	subs	r3, #2
 8005b6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	3b02      	subs	r3, #2
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d301      	bcc.n	8005b80 <clust2sect+0x20>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e008      	b.n	8005b92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	895b      	ldrh	r3, [r3, #10]
 8005b84:	461a      	mov	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	fb03 f202 	mul.w	r2, r3, r2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	4413      	add	r3, r2
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d904      	bls.n	8005bbe <get_fat+0x20>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e0bb      	b.n	8005d3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	f000 8083 	beq.w	8005cda <get_fat+0x13c>
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	f300 80a7 	bgt.w	8005d28 <get_fat+0x18a>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d002      	beq.n	8005be4 <get_fat+0x46>
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d056      	beq.n	8005c90 <get_fat+0xf2>
 8005be2:	e0a1      	b.n	8005d28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	899b      	ldrh	r3, [r3, #12]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c02:	4413      	add	r3, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	6938      	ldr	r0, [r7, #16]
 8005c08:	f7ff ff0c 	bl	8005a24 <move_window>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 808d 	bne.w	8005d2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	60fa      	str	r2, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	8992      	ldrh	r2, [r2, #12]
 8005c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c22:	fb02 f201 	mul.w	r2, r2, r1
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	899b      	ldrh	r3, [r3, #12]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c42:	4413      	add	r3, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f7ff feec 	bl	8005a24 <move_window>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d16f      	bne.n	8005d32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	899b      	ldrh	r3, [r3, #12]
 8005c56:	461a      	mov	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c5e:	fb02 f201 	mul.w	r2, r2, r1
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <get_fat+0xe8>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	e002      	b.n	8005c8c <get_fat+0xee>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8c:	617b      	str	r3, [r7, #20]
			break;
 8005c8e:	e055      	b.n	8005d3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	899b      	ldrh	r3, [r3, #12]
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6938      	ldr	r0, [r7, #16]
 8005caa:	f7ff febb 	bl	8005a24 <move_window>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d140      	bne.n	8005d36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	8992      	ldrh	r2, [r2, #12]
 8005cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc6:	fb02 f200 	mul.w	r2, r2, r0
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	440b      	add	r3, r1
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fbc6 	bl	8005460 <ld_word>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	617b      	str	r3, [r7, #20]
			break;
 8005cd8:	e030      	b.n	8005d3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	899b      	ldrh	r3, [r3, #12]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cee:	4413      	add	r3, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6938      	ldr	r0, [r7, #16]
 8005cf4:	f7ff fe96 	bl	8005a24 <move_window>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11d      	bne.n	8005d3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	8992      	ldrh	r2, [r2, #12]
 8005d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d10:	fb02 f200 	mul.w	r2, r2, r0
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fbb9 	bl	8005490 <ld_dword>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d24:	617b      	str	r3, [r7, #20]
			break;
 8005d26:	e009      	b.n	8005d3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e006      	b.n	8005d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d2e:	bf00      	nop
 8005d30:	e004      	b.n	8005d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d32:	bf00      	nop
 8005d34:	e002      	b.n	8005d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d3a:	bf00      	nop
		}
	}

	return val;
 8005d3c:	697b      	ldr	r3, [r7, #20]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d46:	b590      	push	{r4, r7, lr}
 8005d48:	b089      	sub	sp, #36	; 0x24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d52:	2302      	movs	r3, #2
 8005d54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	f240 8102 	bls.w	8005f62 <put_fat+0x21c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	f080 80fc 	bcs.w	8005f62 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	f000 80b6 	beq.w	8005ee0 <put_fat+0x19a>
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	f300 80fd 	bgt.w	8005f74 <put_fat+0x22e>
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d003      	beq.n	8005d86 <put_fat+0x40>
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	f000 8083 	beq.w	8005e8a <put_fat+0x144>
 8005d84:	e0f6      	b.n	8005f74 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	899b      	ldrh	r3, [r3, #12]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da4:	4413      	add	r3, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fe3b 	bl	8005a24 <move_window>
 8005dae:	4603      	mov	r3, r0
 8005db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 80d6 	bne.w	8005f66 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	61ba      	str	r2, [r7, #24]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	8992      	ldrh	r2, [r2, #12]
 8005dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dce:	fb02 f200 	mul.w	r2, r2, r0
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <put_fat+0xb8>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	b25a      	sxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	4313      	orrs	r3, r2
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e001      	b.n	8005e02 <put_fat+0xbc>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	899b      	ldrh	r3, [r3, #12]
 8005e14:	4619      	mov	r1, r3
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7ff fdff 	bl	8005a24 <move_window>
 8005e26:	4603      	mov	r3, r0
 8005e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e2a:	7ffb      	ldrb	r3, [r7, #31]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 809c 	bne.w	8005f6a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	899b      	ldrh	r3, [r3, #12]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e44:	fb02 f200 	mul.w	r2, r2, r0
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <put_fat+0x11a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e00e      	b.n	8005e7e <put_fat+0x138>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f023 030f 	bic.w	r3, r3, #15
 8005e6a:	b25a      	sxtb	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	70da      	strb	r2, [r3, #3]
			break;
 8005e88:	e074      	b.n	8005f74 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	899b      	ldrh	r3, [r3, #12]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	4619      	mov	r1, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fdbe 	bl	8005a24 <move_window>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d15d      	bne.n	8005f6e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	8992      	ldrh	r2, [r2, #12]
 8005ec0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ec4:	fb02 f200 	mul.w	r2, r2, r0
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	440b      	add	r3, r1
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff faff 	bl	80054d6 <st_word>
			fs->wflag = 1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	70da      	strb	r2, [r3, #3]
			break;
 8005ede:	e049      	b.n	8005f74 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	899b      	ldrh	r3, [r3, #12]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4619      	mov	r1, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fd93 	bl	8005a24 <move_window>
 8005efe:	4603      	mov	r3, r0
 8005f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f02:	7ffb      	ldrb	r3, [r7, #31]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d134      	bne.n	8005f72 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	8992      	ldrh	r2, [r2, #12]
 8005f1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f20:	fb02 f200 	mul.w	r2, r2, r0
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	440b      	add	r3, r1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fab1 	bl	8005490 <ld_dword>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f34:	4323      	orrs	r3, r4
 8005f36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	8992      	ldrh	r2, [r2, #12]
 8005f46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f4a:	fb02 f200 	mul.w	r2, r2, r0
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	440b      	add	r3, r1
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fad9 	bl	800550c <st_dword>
			fs->wflag = 1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	70da      	strb	r2, [r3, #3]
			break;
 8005f60:	e008      	b.n	8005f74 <put_fat+0x22e>
		}
	}
 8005f62:	bf00      	nop
 8005f64:	e006      	b.n	8005f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f66:	bf00      	nop
 8005f68:	e004      	b.n	8005f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f72:	bf00      	nop
	return res;
 8005f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}

08005f7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b088      	sub	sp, #32
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d904      	bls.n	8005fa4 <remove_chain+0x26>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d301      	bcc.n	8005fa8 <remove_chain+0x2a>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e04b      	b.n	8006040 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	69b8      	ldr	r0, [r7, #24]
 8005fb6:	f7ff fec6 	bl	8005d46 <put_fat>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <remove_chain+0x4a>
 8005fc4:	7ffb      	ldrb	r3, [r7, #31]
 8005fc6:	e03b      	b.n	8006040 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff fde7 	bl	8005b9e <get_fat>
 8005fd0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d031      	beq.n	800603c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <remove_chain+0x64>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e02e      	b.n	8006040 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d101      	bne.n	8005fee <remove_chain+0x70>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e028      	b.n	8006040 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005fee:	2200      	movs	r2, #0
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f7ff fea7 	bl	8005d46 <put_fat>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ffc:	7ffb      	ldrb	r3, [r7, #31]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <remove_chain+0x88>
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	e01c      	b.n	8006040 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	3b02      	subs	r3, #2
 8006010:	429a      	cmp	r2, r3
 8006012:	d20b      	bcs.n	800602c <remove_chain+0xae>
			fs->free_clst++;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	791b      	ldrb	r3, [r3, #4]
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	b2da      	uxtb	r2, r3
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3c6      	bcc.n	8005fc8 <remove_chain+0x4a>
 800603a:	e000      	b.n	800603e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800603c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <create_chain+0x2c>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	429a      	cmp	r2, r3
 8006072:	d31b      	bcc.n	80060ac <create_chain+0x64>
 8006074:	2301      	movs	r3, #1
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e018      	b.n	80060ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fd8e 	bl	8005b9e <get_fat>
 8006082:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d801      	bhi.n	800608e <create_chain+0x46>
 800608a:	2301      	movs	r3, #1
 800608c:	e070      	b.n	8006170 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006094:	d101      	bne.n	800609a <create_chain+0x52>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	e06a      	b.n	8006170 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d201      	bcs.n	80060a8 <create_chain+0x60>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	e063      	b.n	8006170 <create_chain+0x128>
		scl = clst;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d307      	bcc.n	80060d0 <create_chain+0x88>
				ncl = 2;
 80060c0:	2302      	movs	r3, #2
 80060c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d901      	bls.n	80060d0 <create_chain+0x88>
 80060cc:	2300      	movs	r3, #0
 80060ce:	e04f      	b.n	8006170 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fd63 	bl	8005b9e <get_fat>
 80060d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00e      	beq.n	80060fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d003      	beq.n	80060ee <create_chain+0xa6>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ec:	d101      	bne.n	80060f2 <create_chain+0xaa>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	e03e      	b.n	8006170 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d1da      	bne.n	80060b0 <create_chain+0x68>
 80060fa:	2300      	movs	r3, #0
 80060fc:	e038      	b.n	8006170 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80060fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006104:	69f9      	ldr	r1, [r7, #28]
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f7ff fe1d 	bl	8005d46 <put_fat>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <create_chain+0xe2>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6938      	ldr	r0, [r7, #16]
 8006122:	f7ff fe10 	bl	8005d46 <put_fat>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d116      	bne.n	800615e <create_chain+0x116>
		fs->last_clst = ncl;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	3b02      	subs	r3, #2
 8006140:	429a      	cmp	r2, r3
 8006142:	d804      	bhi.n	800614e <create_chain+0x106>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	1e5a      	subs	r2, r3, #1
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	b2da      	uxtb	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	711a      	strb	r2, [r3, #4]
 800615c:	e007      	b.n	800616e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <create_chain+0x122>
 8006164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006168:	e000      	b.n	800616c <create_chain+0x124>
 800616a:	2301      	movs	r3, #1
 800616c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800616e:	69fb      	ldr	r3, [r7, #28]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	3304      	adds	r3, #4
 800618e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	899b      	ldrh	r3, [r3, #12]
 8006194:	461a      	mov	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	fbb3 f3f2 	udiv	r3, r3, r2
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	8952      	ldrh	r2, [r2, #10]
 80061a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	613a      	str	r2, [r7, #16]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <clmt_clust+0x42>
 80061b6:	2300      	movs	r3, #0
 80061b8:	e010      	b.n	80061dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d307      	bcc.n	80061d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3304      	adds	r3, #4
 80061ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061d0:	e7e9      	b.n	80061a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80061d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
}
 80061dc:	4618      	mov	r0, r3
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061fe:	d204      	bcs.n	800620a <dir_sdi+0x22>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <dir_sdi+0x26>
		return FR_INT_ERR;
 800620a:	2302      	movs	r3, #2
 800620c:	e071      	b.n	80062f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <dir_sdi+0x46>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d902      	bls.n	800622e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10c      	bne.n	800624e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	8912      	ldrh	r2, [r2, #8]
 800623c:	4293      	cmp	r3, r2
 800623e:	d301      	bcc.n	8006244 <dir_sdi+0x5c>
 8006240:	2302      	movs	r3, #2
 8006242:	e056      	b.n	80062f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61da      	str	r2, [r3, #28]
 800624c:	e02d      	b.n	80062aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	895b      	ldrh	r3, [r3, #10]
 8006252:	461a      	mov	r2, r3
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	899b      	ldrh	r3, [r3, #12]
 8006258:	fb03 f302 	mul.w	r3, r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800625e:	e019      	b.n	8006294 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6979      	ldr	r1, [r7, #20]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fc9a 	bl	8005b9e <get_fat>
 800626a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006272:	d101      	bne.n	8006278 <dir_sdi+0x90>
 8006274:	2301      	movs	r3, #1
 8006276:	e03c      	b.n	80062f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d904      	bls.n	8006288 <dir_sdi+0xa0>
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	429a      	cmp	r2, r3
 8006286:	d301      	bcc.n	800628c <dir_sdi+0xa4>
 8006288:	2302      	movs	r3, #2
 800628a:	e032      	b.n	80062f2 <dir_sdi+0x10a>
			ofs -= csz;
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	429a      	cmp	r2, r3
 800629a:	d2e1      	bcs.n	8006260 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800629c:	6979      	ldr	r1, [r7, #20]
 800629e:	6938      	ldr	r0, [r7, #16]
 80062a0:	f7ff fc5e 	bl	8005b60 <clust2sect>
 80062a4:	4602      	mov	r2, r0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <dir_sdi+0xd4>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e01a      	b.n	80062f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	899b      	ldrh	r3, [r3, #12]
 80062c4:	4619      	mov	r1, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	899b      	ldrh	r3, [r3, #12]
 80062dc:	461a      	mov	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80062e4:	fb02 f200 	mul.w	r2, r2, r0
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	18ca      	adds	r2, r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3320      	adds	r3, #32
 8006310:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <dir_next+0x28>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006320:	d301      	bcc.n	8006326 <dir_next+0x2c>
 8006322:	2304      	movs	r3, #4
 8006324:	e0bb      	b.n	800649e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	899b      	ldrh	r3, [r3, #12]
 800632a:	461a      	mov	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006332:	fb02 f201 	mul.w	r2, r2, r1
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	f040 809d 	bne.w	8006478 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	8912      	ldrh	r2, [r2, #8]
 8006358:	4293      	cmp	r3, r2
 800635a:	f0c0 808d 	bcc.w	8006478 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	61da      	str	r2, [r3, #28]
 8006364:	2304      	movs	r3, #4
 8006366:	e09a      	b.n	800649e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	899b      	ldrh	r3, [r3, #12]
 800636c:	461a      	mov	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	fbb3 f3f2 	udiv	r3, r3, r2
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	8952      	ldrh	r2, [r2, #10]
 8006378:	3a01      	subs	r2, #1
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d17b      	bne.n	8006478 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7ff fc08 	bl	8005b9e <get_fat>
 800638e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d801      	bhi.n	800639a <dir_next+0xa0>
 8006396:	2302      	movs	r3, #2
 8006398:	e081      	b.n	800649e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a0:	d101      	bne.n	80063a6 <dir_next+0xac>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07b      	b.n	800649e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d359      	bcc.n	8006464 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	61da      	str	r2, [r3, #28]
 80063bc:	2304      	movs	r3, #4
 80063be:	e06e      	b.n	800649e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7ff fe3d 	bl	8006048 <create_chain>
 80063ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <dir_next+0xe0>
 80063d6:	2307      	movs	r3, #7
 80063d8:	e061      	b.n	800649e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <dir_next+0xea>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e05c      	b.n	800649e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d101      	bne.n	80063f0 <dir_next+0xf6>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e056      	b.n	800649e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fad3 	bl	800599c <sync_window>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <dir_next+0x106>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e04e      	b.n	800649e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	899b      	ldrh	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	2100      	movs	r1, #0
 800640e:	f7ff f8ca 	bl	80055a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff fba1 	bl	8005b60 <clust2sect>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
 8006424:	e012      	b.n	800644c <dir_next+0x152>
						fs->wflag = 1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fab5 	bl	800599c <sync_window>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <dir_next+0x142>
 8006438:	2301      	movs	r3, #1
 800643a:	e030      	b.n	800649e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3301      	adds	r3, #1
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	895b      	ldrh	r3, [r3, #10]
 8006450:	461a      	mov	r2, r3
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4293      	cmp	r3, r2
 8006456:	d3e6      	bcc.n	8006426 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fb77 	bl	8005b60 <clust2sect>
 8006472:	4602      	mov	r2, r0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	899b      	ldrh	r3, [r3, #12]
 8006488:	461a      	mov	r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006490:	fb02 f200 	mul.w	r2, r2, r0
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	18ca      	adds	r2, r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064b6:	2100      	movs	r1, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fe95 	bl	80061e8 <dir_sdi>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d12b      	bne.n	8006520 <dir_alloc+0x7a>
		n = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff faa6 	bl	8005a24 <move_window>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d11d      	bne.n	800651e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2be5      	cmp	r3, #229	; 0xe5
 80064ea:	d004      	beq.n	80064f6 <dir_alloc+0x50>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d107      	bne.n	8006506 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d102      	bne.n	800650a <dir_alloc+0x64>
 8006504:	e00c      	b.n	8006520 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800650a:	2101      	movs	r1, #1
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fef4 	bl	80062fa <dir_next>
 8006512:	4603      	mov	r3, r0
 8006514:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0d7      	beq.n	80064cc <dir_alloc+0x26>
 800651c:	e000      	b.n	8006520 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800651e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d101      	bne.n	800652a <dir_alloc+0x84>
 8006526:	2307      	movs	r3, #7
 8006528:	75fb      	strb	r3, [r7, #23]
	return res;
 800652a:	7dfb      	ldrb	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	331a      	adds	r3, #26
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff8c 	bl	8005460 <ld_word>
 8006548:	4603      	mov	r3, r0
 800654a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d109      	bne.n	8006568 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe ff81 	bl	8005460 <ld_word>
 800655e:	4603      	mov	r3, r0
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	331a      	adds	r3, #26
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	b292      	uxth	r2, r2
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe ffa4 	bl	80054d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d109      	bne.n	80065aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f103 0214 	add.w	r2, r3, #20
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	4619      	mov	r1, r3
 80065a4:	4610      	mov	r0, r2
 80065a6:	f7fe ff96 	bl	80054d6 <st_word>
	}
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	331a      	adds	r3, #26
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe ff4c 	bl	8005460 <ld_word>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <cmp_lfn+0x1e>
 80065ce:	2300      	movs	r3, #0
 80065d0:	e059      	b.n	8006686 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80065e8:	2301      	movs	r3, #1
 80065ea:	81fb      	strh	r3, [r7, #14]
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e033      	b.n	800665a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80065f2:	4a27      	ldr	r2, [pc, #156]	; (8006690 <cmp_lfn+0xdc>)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4413      	add	r3, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe ff2d 	bl	8005460 <ld_word>
 8006606:	4603      	mov	r3, r0
 8006608:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01a      	beq.n	8006646 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2bfe      	cmp	r3, #254	; 0xfe
 8006614:	d812      	bhi.n	800663c <cmp_lfn+0x88>
 8006616:	89bb      	ldrh	r3, [r7, #12]
 8006618:	4618      	mov	r0, r3
 800661a:	f001 fe4d 	bl	80082b8 <ff_wtoupper>
 800661e:	4603      	mov	r3, r0
 8006620:	461c      	mov	r4, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	617a      	str	r2, [r7, #20]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fe41 	bl	80082b8 <ff_wtoupper>
 8006636:	4603      	mov	r3, r0
 8006638:	429c      	cmp	r4, r3
 800663a:	d001      	beq.n	8006640 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800663c:	2300      	movs	r3, #0
 800663e:	e022      	b.n	8006686 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006640:	89bb      	ldrh	r3, [r7, #12]
 8006642:	81fb      	strh	r3, [r7, #14]
 8006644:	e006      	b.n	8006654 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006646:	89bb      	ldrh	r3, [r7, #12]
 8006648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664c:	4293      	cmp	r3, r2
 800664e:	d001      	beq.n	8006654 <cmp_lfn+0xa0>
 8006650:	2300      	movs	r3, #0
 8006652:	e018      	b.n	8006686 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3301      	adds	r3, #1
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b0c      	cmp	r3, #12
 800665e:	d9c8      	bls.n	80065f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <cmp_lfn+0xd0>
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <cmp_lfn+0xd0>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <cmp_lfn+0xd0>
 8006680:	2300      	movs	r3, #0
 8006682:	e000      	b.n	8006686 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006684:	2301      	movs	r3, #1
}
 8006686:	4618      	mov	r0, r3
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	bd90      	pop	{r4, r7, pc}
 800668e:	bf00      	nop
 8006690:	0800ce1c 	.word	0x0800ce1c

08006694 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	460b      	mov	r3, r1
 80066a4:	71fb      	strb	r3, [r7, #7]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	330d      	adds	r3, #13
 80066ae:	79ba      	ldrb	r2, [r7, #6]
 80066b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	330b      	adds	r3, #11
 80066b6:	220f      	movs	r2, #15
 80066b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	330c      	adds	r3, #12
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	331a      	adds	r3, #26
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe ff04 	bl	80054d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	1e5a      	subs	r2, r3, #1
 80066d2:	4613      	mov	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	82fb      	strh	r3, [r7, #22]
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80066e6:	8afb      	ldrh	r3, [r7, #22]
 80066e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <put_lfn+0x6c>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	61fa      	str	r2, [r7, #28]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006700:	4a17      	ldr	r2, [pc, #92]	; (8006760 <put_lfn+0xcc>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	4413      	add	r3, r2
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	8afa      	ldrh	r2, [r7, #22]
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fedf 	bl	80054d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006718:	8afb      	ldrh	r3, [r7, #22]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <put_lfn+0x90>
 800671e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006722:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	3301      	adds	r3, #1
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d9da      	bls.n	80066e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006736:	4293      	cmp	r3, r2
 8006738:	d006      	beq.n	8006748 <put_lfn+0xb4>
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <put_lfn+0xbc>
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	79fa      	ldrb	r2, [r7, #7]
 8006754:	701a      	strb	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	0800ce1c 	.word	0x0800ce1c

08006764 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006772:	220b      	movs	r2, #11
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7fe fef4 	bl	8005564 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b05      	cmp	r3, #5
 8006780:	d92b      	bls.n	80067da <gen_numname+0x76>
		sr = seq;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006786:	e022      	b.n	80067ce <gen_numname+0x6a>
			wc = *lfn++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006792:	2300      	movs	r3, #0
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	e017      	b.n	80067c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	005a      	lsls	r2, r3, #1
 800679c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80067a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <gen_numname+0x5e>
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80067bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80067c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	3301      	adds	r3, #1
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d9e4      	bls.n	8006798 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d8      	bne.n	8006788 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80067da:	2307      	movs	r3, #7
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	3330      	adds	r3, #48	; 0x30
 80067ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80067ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067f2:	2b39      	cmp	r3, #57	; 0x39
 80067f4:	d904      	bls.n	8006800 <gen_numname+0x9c>
 80067f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067fa:	3307      	adds	r3, #7
 80067fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	1e5a      	subs	r2, r3, #1
 8006804:	62ba      	str	r2, [r7, #40]	; 0x28
 8006806:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800680a:	4413      	add	r3, r2
 800680c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006810:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	091b      	lsrs	r3, r3, #4
 8006818:	603b      	str	r3, [r7, #0]
	} while (seq);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1de      	bne.n	80067de <gen_numname+0x7a>
	ns[i] = '~';
 8006820:	f107 0214 	add.w	r2, r7, #20
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	4413      	add	r3, r2
 8006828:	227e      	movs	r2, #126	; 0x7e
 800682a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800682c:	2300      	movs	r3, #0
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	e002      	b.n	8006838 <gen_numname+0xd4>
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	3301      	adds	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
 8006838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	429a      	cmp	r2, r3
 800683e:	d205      	bcs.n	800684c <gen_numname+0xe8>
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	4413      	add	r3, r2
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b20      	cmp	r3, #32
 800684a:	d1f2      	bne.n	8006832 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	2b07      	cmp	r3, #7
 8006850:	d808      	bhi.n	8006864 <gen_numname+0x100>
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	62ba      	str	r2, [r7, #40]	; 0x28
 8006858:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800685c:	4413      	add	r3, r2
 800685e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006862:	e000      	b.n	8006866 <gen_numname+0x102>
 8006864:	2120      	movs	r1, #32
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	627a      	str	r2, [r7, #36]	; 0x24
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	460a      	mov	r2, r1
 8006872:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	2b07      	cmp	r3, #7
 8006878:	d9e8      	bls.n	800684c <gen_numname+0xe8>
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	3730      	adds	r7, #48	; 0x30
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006890:	230b      	movs	r3, #11
 8006892:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	0852      	lsrs	r2, r2, #1
 800689a:	01db      	lsls	r3, r3, #7
 800689c:	4313      	orrs	r3, r2
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	6079      	str	r1, [r7, #4]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1ed      	bne.n	8006894 <sum_sfn+0x10>
	return sum;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068d4:	2100      	movs	r1, #0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fc86 	bl	80061e8 <dir_sdi>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <dir_find+0x24>
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	e0a9      	b.n	8006a3e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80068ea:	23ff      	movs	r3, #255	; 0xff
 80068ec:	753b      	strb	r3, [r7, #20]
 80068ee:	7d3b      	ldrb	r3, [r7, #20]
 80068f0:	757b      	strb	r3, [r7, #21]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	4619      	mov	r1, r3
 8006900:	6938      	ldr	r0, [r7, #16]
 8006902:	f7ff f88f 	bl	8005a24 <move_window>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8090 	bne.w	8006a32 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800691a:	7dbb      	ldrb	r3, [r7, #22]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <dir_find+0x60>
 8006920:	2304      	movs	r3, #4
 8006922:	75fb      	strb	r3, [r7, #23]
 8006924:	e08a      	b.n	8006a3c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	330b      	adds	r3, #11
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006932:	73fb      	strb	r3, [r7, #15]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7bfa      	ldrb	r2, [r7, #15]
 8006938:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800693a:	7dbb      	ldrb	r3, [r7, #22]
 800693c:	2be5      	cmp	r3, #229	; 0xe5
 800693e:	d007      	beq.n	8006950 <dir_find+0x8a>
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <dir_find+0x98>
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b0f      	cmp	r3, #15
 800694e:	d006      	beq.n	800695e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006950:	23ff      	movs	r3, #255	; 0xff
 8006952:	757b      	strb	r3, [r7, #21]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
 800695c:	e05e      	b.n	8006a1c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d136      	bne.n	80069d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d154      	bne.n	8006a1c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006972:	7dbb      	ldrb	r3, [r7, #22]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00d      	beq.n	8006998 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	7b5b      	ldrb	r3, [r3, #13]
 8006982:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006984:	7dbb      	ldrb	r3, [r7, #22]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	75bb      	strb	r3, [r7, #22]
 800698c:	7dbb      	ldrb	r3, [r7, #22]
 800698e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006998:	7dba      	ldrb	r2, [r7, #22]
 800699a:	7d7b      	ldrb	r3, [r7, #21]
 800699c:	429a      	cmp	r2, r3
 800699e:	d115      	bne.n	80069cc <dir_find+0x106>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	330d      	adds	r3, #13
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	7d3a      	ldrb	r2, [r7, #20]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10e      	bne.n	80069cc <dir_find+0x106>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7ff fdfb 	bl	80065b4 <cmp_lfn>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <dir_find+0x106>
 80069c4:	7d7b      	ldrb	r3, [r7, #21]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	e000      	b.n	80069ce <dir_find+0x108>
 80069cc:	23ff      	movs	r3, #255	; 0xff
 80069ce:	757b      	strb	r3, [r7, #21]
 80069d0:	e024      	b.n	8006a1c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80069d2:	7d7b      	ldrb	r3, [r7, #21]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <dir_find+0x126>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ff51 	bl	8006884 <sum_sfn>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	7d3b      	ldrb	r3, [r7, #20]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d024      	beq.n	8006a36 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <dir_find+0x14a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a18      	ldr	r0, [r3, #32]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3324      	adds	r3, #36	; 0x24
 8006a02:	220b      	movs	r2, #11
 8006a04:	4619      	mov	r1, r3
 8006a06:	f7fe fde9 	bl	80055dc <mem_cmp>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d014      	beq.n	8006a3a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a10:	23ff      	movs	r3, #255	; 0xff
 8006a12:	757b      	strb	r3, [r7, #21]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fc6b 	bl	80062fa <dir_next>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f43f af65 	beq.w	80068fa <dir_find+0x34>
 8006a30:	e004      	b.n	8006a3c <dir_find+0x176>
		if (res != FR_OK) break;
 8006a32:	bf00      	nop
 8006a34:	e002      	b.n	8006a3c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a3a:	bf00      	nop

	return res;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08c      	sub	sp, #48	; 0x30
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <dir_register+0x20>
 8006a64:	2306      	movs	r3, #6
 8006a66:	e0e0      	b.n	8006c2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006a68:	2300      	movs	r3, #0
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e002      	b.n	8006a74 <dir_register+0x2c>
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3301      	adds	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f4      	bne.n	8006a6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	220c      	movs	r2, #12
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fd67 	bl	8005564 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d032      	beq.n	8006b06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aac:	e016      	b.n	8006adc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	f107 010c 	add.w	r1, r7, #12
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f7ff fe51 	bl	8006764 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff feff 	bl	80068c6 <dir_find>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	3301      	adds	r3, #1
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b63      	cmp	r3, #99	; 0x63
 8006ae0:	d9e5      	bls.n	8006aae <dir_register+0x66>
 8006ae2:	e000      	b.n	8006ae6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006ae4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2b64      	cmp	r3, #100	; 0x64
 8006aea:	d101      	bne.n	8006af0 <dir_register+0xa8>
 8006aec:	2307      	movs	r3, #7
 8006aee:	e09c      	b.n	8006c2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d002      	beq.n	8006afe <dir_register+0xb6>
 8006af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006afc:	e095      	b.n	8006c2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006afe:	7dfa      	ldrb	r2, [r7, #23]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <dir_register+0xd8>
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	330c      	adds	r3, #12
 8006b14:	4a47      	ldr	r2, [pc, #284]	; (8006c34 <dir_register+0x1ec>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	e000      	b.n	8006b22 <dir_register+0xda>
 8006b20:	2301      	movs	r3, #1
 8006b22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fcbd 	bl	80064a6 <dir_alloc>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d148      	bne.n	8006bcc <dir_register+0x184>
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d042      	beq.n	8006bcc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	015b      	lsls	r3, r3, #5
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fb48 	bl	80061e8 <dir_sdi>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d132      	bne.n	8006bcc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3324      	adds	r3, #36	; 0x24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fe8a 	bl	8006884 <sum_sfn>
 8006b70:	4603      	mov	r3, r0
 8006b72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	69f8      	ldr	r0, [r7, #28]
 8006b7c:	f7fe ff52 	bl	8005a24 <move_window>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11d      	bne.n	8006bca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a19      	ldr	r1, [r3, #32]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	7efb      	ldrb	r3, [r7, #27]
 8006b9c:	f7ff fd7a 	bl	8006694 <put_lfn>
				fs->wflag = 1;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff fba6 	bl	80062fa <dir_next>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d107      	bne.n	8006bcc <dir_register+0x184>
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	623b      	str	r3, [r7, #32]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1d5      	bne.n	8006b74 <dir_register+0x12c>
 8006bc8:	e000      	b.n	8006bcc <dir_register+0x184>
				if (res != FR_OK) break;
 8006bca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d128      	bne.n	8006c26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	69f8      	ldr	r0, [r7, #28]
 8006bdc:	f7fe ff22 	bl	8005a24 <move_window>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d11b      	bne.n	8006c26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fcd5 	bl	80055a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a18      	ldr	r0, [r3, #32]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3324      	adds	r3, #36	; 0x24
 8006c04:	220b      	movs	r2, #11
 8006c06:	4619      	mov	r1, r3
 8006c08:	f7fe fcac 	bl	8005564 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	330c      	adds	r3, #12
 8006c18:	f002 0218 	and.w	r2, r2, #24
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2201      	movs	r2, #1
 8006c24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3730      	adds	r7, #48	; 0x30
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	4ec4ec4f 	.word	0x4ec4ec4f

08006c38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	61ba      	str	r2, [r7, #24]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c68:	2b1f      	cmp	r3, #31
 8006c6a:	d940      	bls.n	8006cee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6e:	2b2f      	cmp	r3, #47	; 0x2f
 8006c70:	d006      	beq.n	8006c80 <create_name+0x48>
 8006c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c74:	2b5c      	cmp	r3, #92	; 0x5c
 8006c76:	d110      	bne.n	8006c9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c78:	e002      	b.n	8006c80 <create_name+0x48>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b2f      	cmp	r3, #47	; 0x2f
 8006c8a:	d0f6      	beq.n	8006c7a <create_name+0x42>
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4413      	add	r3, r2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b5c      	cmp	r3, #92	; 0x5c
 8006c96:	d0f0      	beq.n	8006c7a <create_name+0x42>
			break;
 8006c98:	e02a      	b.n	8006cf0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2bfe      	cmp	r3, #254	; 0xfe
 8006c9e:	d901      	bls.n	8006ca4 <create_name+0x6c>
 8006ca0:	2306      	movs	r3, #6
 8006ca2:	e177      	b.n	8006f94 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cac:	2101      	movs	r1, #1
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fac6 	bl	8008240 <ff_convert>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <create_name+0x8a>
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	e168      	b.n	8006f94 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc6:	d809      	bhi.n	8006cdc <create_name+0xa4>
 8006cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cca:	4619      	mov	r1, r3
 8006ccc:	48b3      	ldr	r0, [pc, #716]	; (8006f9c <create_name+0x364>)
 8006cce:	f7fe fcac 	bl	800562a <chk_chr>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <create_name+0xa4>
 8006cd8:	2306      	movs	r3, #6
 8006cda:	e15b      	b.n	8006f94 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	617a      	str	r2, [r7, #20]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006cec:	e7b4      	b.n	8006c58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006cee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfc:	2b1f      	cmp	r3, #31
 8006cfe:	d801      	bhi.n	8006d04 <create_name+0xcc>
 8006d00:	2304      	movs	r3, #4
 8006d02:	e000      	b.n	8006d06 <create_name+0xce>
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006d0a:	e011      	b.n	8006d30 <create_name+0xf8>
		w = lfn[di - 1];
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	3b01      	subs	r3, #1
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d002      	beq.n	8006d2a <create_name+0xf2>
 8006d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d26:	2b2e      	cmp	r3, #46	; 0x2e
 8006d28:	d106      	bne.n	8006d38 <create_name+0x100>
		di--;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1ea      	bne.n	8006d0c <create_name+0xd4>
 8006d36:	e000      	b.n	8006d3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006d38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <create_name+0x118>
 8006d4c:	2306      	movs	r3, #6
 8006d4e:	e121      	b.n	8006f94 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3324      	adds	r3, #36	; 0x24
 8006d54:	220b      	movs	r2, #11
 8006d56:	2120      	movs	r1, #32
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fc24 	bl	80055a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e002      	b.n	8006d6a <create_name+0x132>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d0f5      	beq.n	8006d64 <create_name+0x12c>
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	2b2e      	cmp	r3, #46	; 0x2e
 8006d84:	d0ee      	beq.n	8006d64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <create_name+0x168>
 8006d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d90:	f043 0303 	orr.w	r3, r3, #3
 8006d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006d98:	e002      	b.n	8006da0 <create_name+0x168>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <create_name+0x182>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	3b01      	subs	r3, #1
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	2b2e      	cmp	r3, #46	; 0x2e
 8006db8:	d1ef      	bne.n	8006d9a <create_name+0x162>

	i = b = 0; ni = 8;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	61ba      	str	r2, [r7, #24]
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8090 	beq.w	8006f00 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d006      	beq.n	8006df4 <create_name+0x1bc>
 8006de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dea:	d10a      	bne.n	8006e02 <create_name+0x1ca>
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d006      	beq.n	8006e02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df8:	f043 0303 	orr.w	r3, r3, #3
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e00:	e07d      	b.n	8006efe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d203      	bcs.n	8006e12 <create_name+0x1da>
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d123      	bne.n	8006e5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d106      	bne.n	8006e26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e1c:	f043 0303 	orr.w	r3, r3, #3
 8006e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e24:	e06f      	b.n	8006f06 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d005      	beq.n	8006e3a <create_name+0x202>
 8006e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e32:	f043 0303 	orr.w	r3, r3, #3
 8006e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d860      	bhi.n	8006f04 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	2308      	movs	r3, #8
 8006e48:	623b      	str	r3, [r7, #32]
 8006e4a:	230b      	movs	r3, #11
 8006e4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e58:	e051      	b.n	8006efe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e5e:	d914      	bls.n	8006e8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f9eb 	bl	8008240 <ff_convert>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <create_name+0x246>
 8006e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e76:	3b80      	subs	r3, #128	; 0x80
 8006e78:	4a49      	ldr	r2, [pc, #292]	; (8006fa0 <create_name+0x368>)
 8006e7a:	5cd3      	ldrb	r3, [r2, r3]
 8006e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <create_name+0x268>
 8006e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e92:	4619      	mov	r1, r3
 8006e94:	4843      	ldr	r0, [pc, #268]	; (8006fa4 <create_name+0x36c>)
 8006e96:	f7fe fbc8 	bl	800562a <chk_chr>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006ea0:	235f      	movs	r3, #95	; 0x5f
 8006ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea8:	f043 0303 	orr.w	r3, r3, #3
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006eb0:	e01b      	b.n	8006eea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eb4:	2b40      	cmp	r3, #64	; 0x40
 8006eb6:	d909      	bls.n	8006ecc <create_name+0x294>
 8006eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eba:	2b5a      	cmp	r3, #90	; 0x5a
 8006ebc:	d806      	bhi.n	8006ecc <create_name+0x294>
					b |= 2;
 8006ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ec2:	f043 0302 	orr.w	r3, r3, #2
 8006ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006eca:	e00e      	b.n	8006eea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ece:	2b60      	cmp	r3, #96	; 0x60
 8006ed0:	d90b      	bls.n	8006eea <create_name+0x2b2>
 8006ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed4:	2b7a      	cmp	r3, #122	; 0x7a
 8006ed6:	d808      	bhi.n	8006eea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee6:	3b20      	subs	r3, #32
 8006ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	623a      	str	r2, [r7, #32]
 8006ef0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ef2:	b2d1      	uxtb	r1, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	460a      	mov	r2, r1
 8006efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006efe:	e763      	b.n	8006dc8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006f04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f0c:	2be5      	cmp	r3, #229	; 0xe5
 8006f0e:	d103      	bne.n	8006f18 <create_name+0x2e0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2205      	movs	r2, #5
 8006f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d104      	bne.n	8006f28 <create_name+0x2f0>
 8006f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	d005      	beq.n	8006f40 <create_name+0x308>
 8006f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d105      	bne.n	8006f4c <create_name+0x314>
 8006f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d117      	bne.n	8006f88 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d105      	bne.n	8006f70 <create_name+0x338>
 8006f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f68:	f043 0310 	orr.w	r3, r3, #16
 8006f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f74:	f003 030c 	and.w	r3, r3, #12
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d105      	bne.n	8006f88 <create_name+0x350>
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f80:	f043 0308 	orr.w	r3, r3, #8
 8006f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006f92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	0800ccd0 	.word	0x0800ccd0
 8006fa0:	0800cd9c 	.word	0x0800cd9c
 8006fa4:	0800ccdc 	.word	0x0800ccdc

08006fa8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006fbc:	e002      	b.n	8006fc4 <follow_path+0x1c>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8006fca:	d0f8      	beq.n	8006fbe <follow_path+0x16>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b5c      	cmp	r3, #92	; 0x5c
 8006fd2:	d0f4      	beq.n	8006fbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b1f      	cmp	r3, #31
 8006fe0:	d80a      	bhi.n	8006ff8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006fea:	2100      	movs	r1, #0
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff f8fb 	bl	80061e8 <dir_sdi>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]
 8006ff6:	e048      	b.n	800708a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fe1b 	bl	8006c38 <create_name>
 8007002:	4603      	mov	r3, r0
 8007004:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d139      	bne.n	8007080 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fc5a 	bl	80068c6 <dir_find>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800701c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b04      	cmp	r3, #4
 8007028:	d12c      	bne.n	8007084 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d127      	bne.n	8007084 <follow_path+0xdc>
 8007034:	2305      	movs	r3, #5
 8007036:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007038:	e024      	b.n	8007084 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d121      	bne.n	8007088 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	799b      	ldrb	r3, [r3, #6]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007050:	2305      	movs	r3, #5
 8007052:	75fb      	strb	r3, [r7, #23]
 8007054:	e019      	b.n	800708a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	8992      	ldrh	r2, [r2, #12]
 8007064:	fbb3 f0f2 	udiv	r0, r3, r2
 8007068:	fb02 f200 	mul.w	r2, r2, r0
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	440b      	add	r3, r1
 8007070:	4619      	mov	r1, r3
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fa5e 	bl	8006534 <ld_clust>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800707e:	e7bb      	b.n	8006ff8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <follow_path+0xe2>
				break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007088:	bf00      	nop
			}
		}
	}

	return res;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800709c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d031      	beq.n	800710e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e002      	b.n	80070b8 <get_ldnumber+0x24>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3301      	adds	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b1f      	cmp	r3, #31
 80070be:	d903      	bls.n	80070c8 <get_ldnumber+0x34>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b3a      	cmp	r3, #58	; 0x3a
 80070c6:	d1f4      	bne.n	80070b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b3a      	cmp	r3, #58	; 0x3a
 80070ce:	d11c      	bne.n	800710a <get_ldnumber+0x76>
			tp = *path;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	60fa      	str	r2, [r7, #12]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b09      	cmp	r3, #9
 80070e6:	d80e      	bhi.n	8007106 <get_ldnumber+0x72>
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d10a      	bne.n	8007106 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d107      	bne.n	8007106 <get_ldnumber+0x72>
					vol = (int)i;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	3301      	adds	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	e002      	b.n	8007110 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800710e:	693b      	ldr	r3, [r7, #16]
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	70da      	strb	r2, [r3, #3]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fe fc74 	bl	8005a24 <move_window>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <check_fs+0x2a>
 8007142:	2304      	movs	r3, #4
 8007144:	e038      	b.n	80071b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	333c      	adds	r3, #60	; 0x3c
 800714a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe f986 	bl	8005460 <ld_word>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800715c:	429a      	cmp	r2, r3
 800715e:	d001      	beq.n	8007164 <check_fs+0x48>
 8007160:	2303      	movs	r3, #3
 8007162:	e029      	b.n	80071b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716a:	2be9      	cmp	r3, #233	; 0xe9
 800716c:	d009      	beq.n	8007182 <check_fs+0x66>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2beb      	cmp	r3, #235	; 0xeb
 8007176:	d11e      	bne.n	80071b6 <check_fs+0x9a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800717e:	2b90      	cmp	r3, #144	; 0x90
 8007180:	d119      	bne.n	80071b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	333c      	adds	r3, #60	; 0x3c
 8007186:	3336      	adds	r3, #54	; 0x36
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe f981 	bl	8005490 <ld_dword>
 800718e:	4603      	mov	r3, r0
 8007190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <check_fs+0xa4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d101      	bne.n	800719e <check_fs+0x82>
 800719a:	2300      	movs	r3, #0
 800719c:	e00c      	b.n	80071b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	333c      	adds	r3, #60	; 0x3c
 80071a2:	3352      	adds	r3, #82	; 0x52
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe f973 	bl	8005490 <ld_dword>
 80071aa:	4603      	mov	r3, r0
 80071ac:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <check_fs+0xa8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <check_fs+0x9a>
 80071b2:	2300      	movs	r3, #0
 80071b4:	e000      	b.n	80071b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071b6:	2302      	movs	r3, #2
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	00544146 	.word	0x00544146
 80071c4:	33544146 	.word	0x33544146

080071c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b096      	sub	sp, #88	; 0x58
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff59 	bl	8007094 <get_ldnumber>
 80071e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da01      	bge.n	80071ee <find_volume+0x26>
 80071ea:	230b      	movs	r3, #11
 80071ec:	e26c      	b.n	80076c8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071ee:	4aa4      	ldr	r2, [pc, #656]	; (8007480 <find_volume+0x2b8>)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <find_volume+0x3a>
 80071fe:	230c      	movs	r3, #12
 8007200:	e262      	b.n	80076c8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8007202:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007204:	f7fe fa2c 	bl	8005660 <lock_fs>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <find_volume+0x4a>
 800720e:	230f      	movs	r3, #15
 8007210:	e25a      	b.n	80076c8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007216:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01a      	beq.n	800725e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe f879 	bl	8005324 <disk_status>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <find_volume+0x92>
 800724a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007256:	230a      	movs	r3, #10
 8007258:	e236      	b.n	80076c8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800725a:	2300      	movs	r3, #0
 800725c:	e234      	b.n	80076c8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	b2da      	uxtb	r2, r3
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe f871 	bl	8005358 <disk_initialize>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800727c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007288:	2303      	movs	r3, #3
 800728a:	e21d      	b.n	80076c8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <find_volume+0xda>
 8007292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800729e:	230a      	movs	r3, #10
 80072a0:	e212      	b.n	80076c8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	7858      	ldrb	r0, [r3, #1]
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	330c      	adds	r3, #12
 80072aa:	461a      	mov	r2, r3
 80072ac:	2102      	movs	r1, #2
 80072ae:	f7fe f8b9 	bl	8005424 <disk_ioctl>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <find_volume+0xf4>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e205      	b.n	80076c8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	899b      	ldrh	r3, [r3, #12]
 80072c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c4:	d80d      	bhi.n	80072e2 <find_volume+0x11a>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	899b      	ldrh	r3, [r3, #12]
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d308      	bcc.n	80072e2 <find_volume+0x11a>
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	899b      	ldrh	r3, [r3, #12]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	899b      	ldrh	r3, [r3, #12]
 80072da:	3b01      	subs	r3, #1
 80072dc:	4013      	ands	r3, r2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <find_volume+0x11e>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e1f0      	b.n	80076c8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80072ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072ee:	f7ff ff15 	bl	800711c <check_fs>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d14b      	bne.n	8007398 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007300:	2300      	movs	r3, #0
 8007302:	643b      	str	r3, [r7, #64]	; 0x40
 8007304:	e01f      	b.n	8007346 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007314:	4413      	add	r3, r2
 8007316:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	3304      	adds	r3, #4
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d006      	beq.n	8007330 <find_volume+0x168>
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3308      	adds	r3, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe f8b2 	bl	8005490 <ld_dword>
 800732c:	4602      	mov	r2, r0
 800732e:	e000      	b.n	8007332 <find_volume+0x16a>
 8007330:	2200      	movs	r2, #0
 8007332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800733a:	440b      	add	r3, r1
 800733c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	3301      	adds	r3, #1
 8007344:	643b      	str	r3, [r7, #64]	; 0x40
 8007346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007348:	2b03      	cmp	r3, #3
 800734a:	d9dc      	bls.n	8007306 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800734c:	2300      	movs	r3, #0
 800734e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <find_volume+0x194>
 8007356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007358:	3b01      	subs	r3, #1
 800735a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007364:	4413      	add	r3, r2
 8007366:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800736a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800736c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <find_volume+0x1b6>
 8007372:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007376:	f7ff fed1 	bl	800711c <check_fs>
 800737a:	4603      	mov	r3, r0
 800737c:	e000      	b.n	8007380 <find_volume+0x1b8>
 800737e:	2303      	movs	r3, #3
 8007380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007388:	2b01      	cmp	r3, #1
 800738a:	d905      	bls.n	8007398 <find_volume+0x1d0>
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	3301      	adds	r3, #1
 8007390:	643b      	str	r3, [r7, #64]	; 0x40
 8007392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007394:	2b03      	cmp	r3, #3
 8007396:	d9e1      	bls.n	800735c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800739c:	2b04      	cmp	r3, #4
 800739e:	d101      	bne.n	80073a4 <find_volume+0x1dc>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e191      	b.n	80076c8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d901      	bls.n	80073b0 <find_volume+0x1e8>
 80073ac:	230d      	movs	r3, #13
 80073ae:	e18b      	b.n	80076c8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	333c      	adds	r3, #60	; 0x3c
 80073b4:	330b      	adds	r3, #11
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe f852 	bl	8005460 <ld_word>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	899b      	ldrh	r3, [r3, #12]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <find_volume+0x204>
 80073c8:	230d      	movs	r3, #13
 80073ca:	e17d      	b.n	80076c8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	333c      	adds	r3, #60	; 0x3c
 80073d0:	3316      	adds	r3, #22
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f844 	bl	8005460 <ld_word>
 80073d8:	4603      	mov	r3, r0
 80073da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <find_volume+0x228>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	333c      	adds	r3, #60	; 0x3c
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f851 	bl	8005490 <ld_dword>
 80073ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	789b      	ldrb	r3, [r3, #2]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d005      	beq.n	8007414 <find_volume+0x24c>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	789b      	ldrb	r3, [r3, #2]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d001      	beq.n	8007414 <find_volume+0x24c>
 8007410:	230d      	movs	r3, #13
 8007412:	e159      	b.n	80076c8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	789b      	ldrb	r3, [r3, #2]
 8007418:	461a      	mov	r2, r3
 800741a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741c:	fb02 f303 	mul.w	r3, r2, r3
 8007420:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007428:	b29a      	uxth	r2, r3
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	895b      	ldrh	r3, [r3, #10]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <find_volume+0x280>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	895b      	ldrh	r3, [r3, #10]
 800743a:	461a      	mov	r2, r3
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	895b      	ldrh	r3, [r3, #10]
 8007440:	3b01      	subs	r3, #1
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <find_volume+0x284>
 8007448:	230d      	movs	r3, #13
 800744a:	e13d      	b.n	80076c8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	333c      	adds	r3, #60	; 0x3c
 8007450:	3311      	adds	r3, #17
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe f804 	bl	8005460 <ld_word>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007466:	8992      	ldrh	r2, [r2, #12]
 8007468:	0952      	lsrs	r2, r2, #5
 800746a:	b292      	uxth	r2, r2
 800746c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007470:	fb02 f201 	mul.w	r2, r2, r1
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <find_volume+0x2bc>
 800747c:	230d      	movs	r3, #13
 800747e:	e123      	b.n	80076c8 <find_volume+0x500>
 8007480:	200000b0 	.word	0x200000b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	333c      	adds	r3, #60	; 0x3c
 8007488:	3313      	adds	r3, #19
 800748a:	4618      	mov	r0, r3
 800748c:	f7fd ffe8 	bl	8005460 <ld_word>
 8007490:	4603      	mov	r3, r0
 8007492:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <find_volume+0x2e0>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	333c      	adds	r3, #60	; 0x3c
 800749e:	3320      	adds	r3, #32
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd fff5 	bl	8005490 <ld_dword>
 80074a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	333c      	adds	r3, #60	; 0x3c
 80074ac:	330e      	adds	r3, #14
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd ffd6 	bl	8005460 <ld_word>
 80074b4:	4603      	mov	r3, r0
 80074b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80074b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <find_volume+0x2fa>
 80074be:	230d      	movs	r3, #13
 80074c0:	e102      	b.n	80076c8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c6:	4413      	add	r3, r2
 80074c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ca:	8911      	ldrh	r1, [r2, #8]
 80074cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ce:	8992      	ldrh	r2, [r2, #12]
 80074d0:	0952      	lsrs	r2, r2, #5
 80074d2:	b292      	uxth	r2, r2
 80074d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80074d8:	b292      	uxth	r2, r2
 80074da:	4413      	add	r3, r2
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80074de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d201      	bcs.n	80074ea <find_volume+0x322>
 80074e6:	230d      	movs	r3, #13
 80074e8:	e0ee      	b.n	80076c8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f2:	8952      	ldrh	r2, [r2, #10]
 80074f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <find_volume+0x33c>
 8007500:	230d      	movs	r3, #13
 8007502:	e0e1      	b.n	80076c8 <find_volume+0x500>
		fmt = FS_FAT32;
 8007504:	2303      	movs	r3, #3
 8007506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007510:	4293      	cmp	r3, r2
 8007512:	d802      	bhi.n	800751a <find_volume+0x352>
 8007514:	2302      	movs	r3, #2
 8007516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007520:	4293      	cmp	r3, r2
 8007522:	d802      	bhi.n	800752a <find_volume+0x362>
 8007524:	2301      	movs	r3, #1
 8007526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007536:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007538:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800753a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753c:	441a      	add	r2, r3
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	441a      	add	r2, r3
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800754c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007550:	2b03      	cmp	r3, #3
 8007552:	d11e      	bne.n	8007592 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	333c      	adds	r3, #60	; 0x3c
 8007558:	332a      	adds	r3, #42	; 0x2a
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd ff80 	bl	8005460 <ld_word>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <find_volume+0x3a2>
 8007566:	230d      	movs	r3, #13
 8007568:	e0ae      	b.n	80076c8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	891b      	ldrh	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <find_volume+0x3ae>
 8007572:	230d      	movs	r3, #13
 8007574:	e0a8      	b.n	80076c8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	333c      	adds	r3, #60	; 0x3c
 800757a:	332c      	adds	r3, #44	; 0x2c
 800757c:	4618      	mov	r0, r3
 800757e:	f7fd ff87 	bl	8005490 <ld_dword>
 8007582:	4602      	mov	r2, r0
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	647b      	str	r3, [r7, #68]	; 0x44
 8007590:	e01f      	b.n	80075d2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	891b      	ldrh	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <find_volume+0x3d6>
 800759a:	230d      	movs	r3, #13
 800759c:	e094      	b.n	80076c8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	441a      	add	r2, r3
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <find_volume+0x3f2>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	e00a      	b.n	80075d0 <find_volume+0x408>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	6a1a      	ldr	r2, [r3, #32]
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	085a      	lsrs	r2, r3, #1
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80075d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	4619      	mov	r1, r3
 80075dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075de:	440b      	add	r3, r1
 80075e0:	3b01      	subs	r3, #1
 80075e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075e4:	8989      	ldrh	r1, [r1, #12]
 80075e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d201      	bcs.n	80075f2 <find_volume+0x42a>
 80075ee:	230d      	movs	r3, #13
 80075f0:	e06a      	b.n	80076c8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f8:	61da      	str	r2, [r3, #28]
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	2280      	movs	r2, #128	; 0x80
 8007606:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800760c:	2b03      	cmp	r3, #3
 800760e:	d149      	bne.n	80076a4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	333c      	adds	r3, #60	; 0x3c
 8007614:	3330      	adds	r3, #48	; 0x30
 8007616:	4618      	mov	r0, r3
 8007618:	f7fd ff22 	bl	8005460 <ld_word>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d140      	bne.n	80076a4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007624:	3301      	adds	r3, #1
 8007626:	4619      	mov	r1, r3
 8007628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800762a:	f7fe f9fb 	bl	8005a24 <move_window>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d137      	bne.n	80076a4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2200      	movs	r2, #0
 8007638:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	333c      	adds	r3, #60	; 0x3c
 800763e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007642:	4618      	mov	r0, r3
 8007644:	f7fd ff0c 	bl	8005460 <ld_word>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007650:	429a      	cmp	r2, r3
 8007652:	d127      	bne.n	80076a4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	333c      	adds	r3, #60	; 0x3c
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd ff19 	bl	8005490 <ld_dword>
 800765e:	4603      	mov	r3, r0
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <find_volume+0x508>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d11e      	bne.n	80076a4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	333c      	adds	r3, #60	; 0x3c
 800766a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd ff0e 	bl	8005490 <ld_dword>
 8007674:	4603      	mov	r3, r0
 8007676:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <find_volume+0x50c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d113      	bne.n	80076a4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	333c      	adds	r3, #60	; 0x3c
 8007680:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007684:	4618      	mov	r0, r3
 8007686:	f7fd ff03 	bl	8005490 <ld_dword>
 800768a:	4602      	mov	r2, r0
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	333c      	adds	r3, #60	; 0x3c
 8007694:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007698:	4618      	mov	r0, r3
 800769a:	f7fd fef9 	bl	8005490 <ld_dword>
 800769e:	4602      	mov	r2, r0
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <find_volume+0x510>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <find_volume+0x510>)
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <find_volume+0x510>)
 80076ba:	881a      	ldrh	r2, [r3, #0]
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80076c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076c2:	f7fe f947 	bl	8005954 <clear_lock>
#endif
	return FR_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3758      	adds	r7, #88	; 0x58
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	41615252 	.word	0x41615252
 80076d4:	61417272 	.word	0x61417272
 80076d8:	200000b4 	.word	0x200000b4

080076dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80076e6:	2309      	movs	r3, #9
 80076e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02e      	beq.n	800774e <validate+0x72>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02a      	beq.n	800774e <validate+0x72>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d025      	beq.n	800774e <validate+0x72>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	889a      	ldrh	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	88db      	ldrh	r3, [r3, #6]
 800770c:	429a      	cmp	r2, r3
 800770e:	d11e      	bne.n	800774e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd ffa3 	bl	8005660 <lock_fs>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d014      	beq.n	800774a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd fdfc 	bl	8005324 <disk_status>
 800772c:	4603      	mov	r3, r0
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <validate+0x60>
				res = FR_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
 800773a:	e008      	b.n	800774e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f7fd ffa2 	bl	800568c <unlock_fs>
 8007748:	e001      	b.n	800774e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800774a:	230f      	movs	r3, #15
 800774c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <validate+0x7e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	e000      	b.n	800775c <validate+0x80>
 800775a:	2300      	movs	r3, #0
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	6013      	str	r3, [r2, #0]
	return res;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800777e:	f107 0310 	add.w	r3, r7, #16
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fc86 	bl	8007094 <get_ldnumber>
 8007788:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	da01      	bge.n	8007794 <f_mount+0x28>
 8007790:	230b      	movs	r3, #11
 8007792:	e048      	b.n	8007826 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007794:	4a26      	ldr	r2, [pc, #152]	; (8007830 <f_mount+0xc4>)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80077a4:	69b8      	ldr	r0, [r7, #24]
 80077a6:	f7fe f8d5 	bl	8005954 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe27 	bl	8008402 <ff_del_syncobj>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <f_mount+0x52>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e033      	b.n	8007826 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00f      	beq.n	80077ea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3314      	adds	r3, #20
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f000 fdf6 	bl	80083cc <ff_cre_syncobj>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <f_mount+0x7e>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e01d      	b.n	8007826 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4910      	ldr	r1, [pc, #64]	; (8007830 <f_mount+0xc4>)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <f_mount+0x94>
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d001      	beq.n	8007804 <f_mount+0x98>
 8007800:	2300      	movs	r3, #0
 8007802:	e010      	b.n	8007826 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007804:	f107 010c 	add.w	r1, r7, #12
 8007808:	f107 0308 	add.w	r3, r7, #8
 800780c:	2200      	movs	r2, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fcda 	bl	80071c8 <find_volume>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7dfa      	ldrb	r2, [r7, #23]
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fd ff34 	bl	800568c <unlock_fs>
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200000b0 	.word	0x200000b0

08007834 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800783a:	af00      	add	r7, sp, #0
 800783c:	f107 030c 	add.w	r3, r7, #12
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	6019      	str	r1, [r3, #0]
 8007848:	1dfb      	adds	r3, r7, #7
 800784a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800784c:	f107 030c 	add.w	r3, r7, #12
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <f_open+0x26>
 8007856:	2309      	movs	r3, #9
 8007858:	e24a      	b.n	8007cf0 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800785a:	1dfb      	adds	r3, r7, #7
 800785c:	1dfa      	adds	r2, r7, #7
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007864:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007866:	1dfb      	adds	r3, r7, #7
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fca8 	bl	80071c8 <find_volume>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800787e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 8221 	bne.w	8007cca <f_open+0x496>
		dj.obj.fs = fs;
 8007888:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800788c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007890:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007894:	f107 0214 	add.w	r2, r7, #20
 8007898:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800789a:	f107 0308 	add.w	r3, r7, #8
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80078a4:	4611      	mov	r1, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fb7e 	bl	8006fa8 <follow_path>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80078b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11b      	bne.n	80078f2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80078ba:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da03      	bge.n	80078cc <f_open+0x98>
				res = FR_INVALID_NAME;
 80078c4:	2306      	movs	r3, #6
 80078c6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80078ca:	e012      	b.n	80078f2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf14      	ite	ne
 80078d8:	2301      	movne	r3, #1
 80078da:	2300      	moveq	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd feec 	bl	80056c4 <chk_lock>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80078f2:	1dfb      	adds	r3, r7, #7
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	f003 031c 	and.w	r3, r3, #28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 809b 	beq.w	8007a36 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8007900:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007904:	2b00      	cmp	r3, #0
 8007906:	d019      	beq.n	800793c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007908:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800790c:	2b04      	cmp	r3, #4
 800790e:	d10e      	bne.n	800792e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007910:	f7fd ff34 	bl	800577c <enq_lock>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d006      	beq.n	8007928 <f_open+0xf4>
 800791a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f892 	bl	8006a48 <dir_register>
 8007924:	4603      	mov	r3, r0
 8007926:	e000      	b.n	800792a <f_open+0xf6>
 8007928:	2312      	movs	r3, #18
 800792a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800792e:	1dfb      	adds	r3, r7, #7
 8007930:	1dfa      	adds	r2, r7, #7
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	f042 0208 	orr.w	r2, r2, #8
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	e012      	b.n	8007962 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800793c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007940:	f003 0311 	and.w	r3, r3, #17
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <f_open+0x11c>
					res = FR_DENIED;
 8007948:	2307      	movs	r3, #7
 800794a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800794e:	e008      	b.n	8007962 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007950:	1dfb      	adds	r3, r7, #7
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <f_open+0x12e>
 800795c:	2308      	movs	r3, #8
 800795e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007962:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007966:	2b00      	cmp	r3, #0
 8007968:	f040 8082 	bne.w	8007a70 <f_open+0x23c>
 800796c:	1dfb      	adds	r3, r7, #7
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d07b      	beq.n	8007a70 <f_open+0x23c>
				dw = GET_FATTIME();
 8007978:	f7fd fc76 	bl	8005268 <get_fattime>
 800797c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007980:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007984:	330e      	adds	r3, #14
 8007986:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd fdbe 	bl	800550c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007990:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007994:	3316      	adds	r3, #22
 8007996:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800799a:	4618      	mov	r0, r3
 800799c:	f7fd fdb6 	bl	800550c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80079a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80079a4:	330b      	adds	r3, #11
 80079a6:	2220      	movs	r2, #32
 80079a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80079aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079ae:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fdbd 	bl	8006534 <ld_clust>
 80079ba:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80079be:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079c2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80079c6:	2200      	movs	r2, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fdd2 	bl	8006572 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80079ce:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80079d2:	331c      	adds	r3, #28
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd fd98 	bl	800550c <st_dword>
					fs->wflag = 1;
 80079dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079e0:	2201      	movs	r2, #1
 80079e2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80079e4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d041      	beq.n	8007a70 <f_open+0x23c>
						dw = fs->winsect;
 80079ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80079f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fabc 	bl	8005f7e <remove_chain>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007a0c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d12d      	bne.n	8007a70 <f_open+0x23c>
							res = move_window(fs, dw);
 8007a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007a18:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe f801 	bl	8005a24 <move_window>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007a2c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007a30:	3a01      	subs	r2, #1
 8007a32:	619a      	str	r2, [r3, #24]
 8007a34:	e01c      	b.n	8007a70 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a36:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d118      	bne.n	8007a70 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a3e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <f_open+0x21e>
					res = FR_NO_FILE;
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007a50:	e00e      	b.n	8007a70 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a52:	1dfb      	adds	r3, r7, #7
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <f_open+0x23c>
 8007a5e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <f_open+0x23c>
						res = FR_DENIED;
 8007a6a:	2307      	movs	r3, #7
 8007a6c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a70:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d136      	bne.n	8007ae6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a78:	1dfb      	adds	r3, r7, #7
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8007a84:	1dfb      	adds	r3, r7, #7
 8007a86:	1dfa      	adds	r2, r7, #7
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a96:	f107 030c 	add.w	r3, r7, #12
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007a9e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007aa2:	f107 030c 	add.w	r3, r7, #12
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007aaa:	1dfb      	adds	r3, r7, #7
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bf14      	ite	ne
 8007ab6:	2301      	movne	r3, #1
 8007ab8:	2300      	moveq	r3, #0
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fe7b 	bl	80057c0 <inc_lock>
 8007aca:	4602      	mov	r2, r0
 8007acc:	f107 030c 	add.w	r3, r7, #12
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ad4:	f107 030c 	add.w	r3, r7, #12
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <f_open+0x2b2>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ae6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80ed 	bne.w	8007cca <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007af0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007af4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fd1a 	bl	8006534 <ld_clust>
 8007b00:	4602      	mov	r2, r0
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b0a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007b0e:	331c      	adds	r3, #28
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fd fcbd 	bl	8005490 <ld_dword>
 8007b16:	4602      	mov	r2, r0
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b2a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b3a:	88da      	ldrh	r2, [r3, #6]
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	1dfa      	adds	r2, r7, #7
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b50:	f107 030c 	add.w	r3, r7, #12
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2200      	movs	r2, #0
 8007b62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b6e:	f107 030c 	add.w	r3, r7, #12
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3330      	adds	r3, #48	; 0x30
 8007b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fd fd12 	bl	80055a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b82:	1dfb      	adds	r3, r7, #7
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 809d 	beq.w	8007cca <f_open+0x496>
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8096 	beq.w	8007cca <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007bae:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007bb2:	895b      	ldrh	r3, [r3, #10]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	fb03 f302 	mul.w	r3, r3, r2
 8007bc0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007bc4:	f107 030c 	add.w	r3, r7, #12
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bd0:	f107 030c 	add.w	r3, r7, #12
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007bdc:	e01f      	b.n	8007c1e <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fd ffd8 	bl	8005b9e <get_fat>
 8007bee:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007bf2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d802      	bhi.n	8007c00 <f_open+0x3cc>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c00:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c08:	d102      	bne.n	8007c10 <f_open+0x3dc>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c10:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007c14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007c1e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <f_open+0x3fe>
 8007c26:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007c2a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d8d5      	bhi.n	8007bde <f_open+0x3aa>
				}
				fp->clust = clst;
 8007c32:	f107 030c 	add.w	r3, r7, #12
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007c3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d141      	bne.n	8007cca <f_open+0x496>
 8007c46:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c4a:	899b      	ldrh	r3, [r3, #12]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c56:	fb02 f201 	mul.w	r2, r2, r1
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d034      	beq.n	8007cca <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c64:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd ff79 	bl	8005b60 <clust2sect>
 8007c6e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007c72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <f_open+0x44e>
						res = FR_INT_ERR;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007c80:	e023      	b.n	8007cca <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007c86:	899b      	ldrh	r3, [r3, #12]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c96:	441a      	add	r2, r3
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007ca0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ca4:	7858      	ldrb	r0, [r3, #1]
 8007ca6:	f107 030c 	add.w	r3, r7, #12
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f7fd fb73 	bl	80053a4 <disk_read>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <f_open+0x496>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007cca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <f_open+0x4a8>
 8007cd2:	f107 030c 	add.w	r3, r7, #12
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007cdc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ce0:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fd fcd0 	bl	800568c <unlock_fs>
 8007cec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b08e      	sub	sp, #56	; 0x38
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f107 0214 	add.w	r2, r7, #20
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fcde 	bl	80076dc <validate>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d107      	bne.n	8007d3e <f_read+0x44>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	7d5b      	ldrb	r3, [r3, #21]
 8007d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <f_read+0x58>
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd fca0 	bl	800568c <unlock_fs>
 8007d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d50:	e15d      	b.n	800800e <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	7d1b      	ldrb	r3, [r3, #20]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <f_read+0x72>
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2107      	movs	r1, #7
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fc92 	bl	800568c <unlock_fs>
 8007d68:	2307      	movs	r3, #7
 8007d6a:	e150      	b.n	800800e <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	f240 813c 	bls.w	8007ffa <f_read+0x300>
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007d86:	e138      	b.n	8007ffa <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	8992      	ldrh	r2, [r2, #12]
 8007d90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d94:	fb02 f201 	mul.w	r2, r2, r1
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 80f3 	bne.w	8007f86 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	8992      	ldrh	r2, [r2, #12]
 8007da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	8952      	ldrh	r2, [r2, #10]
 8007db0:	3a01      	subs	r2, #1
 8007db2:	4013      	ands	r3, r2
 8007db4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d139      	bne.n	8007e30 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d103      	bne.n	8007dcc <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dca:	e013      	b.n	8007df4 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7fe f9cc 	bl	8006178 <clmt_clust>
 8007de0:	6338      	str	r0, [r7, #48]	; 0x30
 8007de2:	e007      	b.n	8007df4 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fd fed6 	bl	8005b9e <get_fat>
 8007df2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d809      	bhi.n	8007e0e <f_read+0x114>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	755a      	strb	r2, [r3, #21]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2102      	movs	r1, #2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd fc41 	bl	800568c <unlock_fs>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0ff      	b.n	800800e <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e14:	d109      	bne.n	8007e2a <f_read+0x130>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	755a      	strb	r2, [r3, #21]
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd fc33 	bl	800568c <unlock_fs>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0f1      	b.n	800800e <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fd fe91 	bl	8005b60 <clust2sect>
 8007e3e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <f_read+0x160>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	755a      	strb	r2, [r3, #21]
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2102      	movs	r1, #2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fd fc1b 	bl	800568c <unlock_fs>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e0d9      	b.n	800800e <f_read+0x314>
			sect += csect;
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	4413      	add	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	899b      	ldrh	r3, [r3, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d046      	beq.n	8007f04 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	4413      	add	r3, r2
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	8952      	ldrh	r2, [r2, #10]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d905      	bls.n	8007e90 <f_read+0x196>
					cc = fs->csize - csect;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	895b      	ldrh	r3, [r3, #10]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	7858      	ldrb	r0, [r3, #1]
 8007e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e9a:	f7fd fa83 	bl	80053a4 <disk_read>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <f_read+0x1be>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	755a      	strb	r2, [r3, #21]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd fbec 	bl	800568c <unlock_fs>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e0aa      	b.n	800800e <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da18      	bge.n	8007ef4 <f_read+0x1fa>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a1a      	ldr	r2, [r3, #32]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d911      	bls.n	8007ef4 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	8992      	ldrh	r2, [r2, #12]
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	18d0      	adds	r0, r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	899b      	ldrh	r3, [r3, #12]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7fd fb38 	bl	8005564 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	899b      	ldrh	r3, [r3, #12]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	fb02 f303 	mul.w	r3, r2, r3
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007f02:	e066      	b.n	8007fd2 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d038      	beq.n	8007f80 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	7d1b      	ldrb	r3, [r3, #20]
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	da1d      	bge.n	8007f54 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	7858      	ldrb	r0, [r3, #1]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	2301      	movs	r3, #1
 8007f28:	f7fd fa5c 	bl	80053e4 <disk_write>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <f_read+0x24c>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	755a      	strb	r2, [r3, #21]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd fba5 	bl	800568c <unlock_fs>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e063      	b.n	800800e <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	7d1b      	ldrb	r3, [r3, #20]
 8007f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	7858      	ldrb	r0, [r3, #1]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f5e:	2301      	movs	r3, #1
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	f7fd fa1f 	bl	80053a4 <disk_read>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <f_read+0x286>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	755a      	strb	r2, [r3, #21]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2101      	movs	r1, #1
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd fb88 	bl	800568c <unlock_fs>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e046      	b.n	800800e <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	899b      	ldrh	r3, [r3, #12]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	8992      	ldrh	r2, [r2, #12]
 8007f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f98:	fb02 f201 	mul.w	r2, r2, r1
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	1ac3      	subs	r3, r0, r3
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d901      	bls.n	8007fae <f_read+0x2b4>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	8992      	ldrh	r2, [r2, #12]
 8007fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fc0:	fb02 f200 	mul.w	r2, r2, r0
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fce:	f7fd fac9 	bl	8005564 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	4413      	add	r3, r2
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	619a      	str	r2, [r3, #24]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	441a      	add	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f47f aec3 	bne.w	8007d88 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd fb40 	bl	800568c <unlock_fs>
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3738      	adds	r7, #56	; 0x38
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f107 0208 	add.w	r2, r7, #8
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fb58 	bl	80076dc <validate>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d16d      	bne.n	8008112 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7d1b      	ldrb	r3, [r3, #20]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d067      	beq.n	8008112 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7d1b      	ldrb	r3, [r3, #20]
 8008046:	b25b      	sxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	da1a      	bge.n	8008082 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	7858      	ldrb	r0, [r3, #1]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	2301      	movs	r3, #1
 800805c:	f7fd f9c2 	bl	80053e4 <disk_write>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d006      	beq.n	8008074 <f_sync+0x5e>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2101      	movs	r1, #1
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd fb0e 	bl	800568c <unlock_fs>
 8008070:	2301      	movs	r3, #1
 8008072:	e055      	b.n	8008120 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7d1b      	ldrb	r3, [r3, #20]
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008082:	f7fd f8f1 	bl	8005268 <get_fattime>
 8008086:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7fd fcc7 	bl	8005a24 <move_window>
 8008096:	4603      	mov	r3, r0
 8008098:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d138      	bne.n	8008112 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	330b      	adds	r3, #11
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	330b      	adds	r3, #11
 80080b0:	f042 0220 	orr.w	r2, r2, #32
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	461a      	mov	r2, r3
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	f7fe fa55 	bl	8006572 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f103 021c 	add.w	r2, r3, #28
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7fd fa19 	bl	800550c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3316      	adds	r3, #22
 80080de:	6939      	ldr	r1, [r7, #16]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd fa13 	bl	800550c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3312      	adds	r3, #18
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fd f9f2 	bl	80054d6 <st_word>
					fs->wflag = 1;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2201      	movs	r2, #1
 80080f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fd fcc0 	bl	8005a80 <sync_fs>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810c:	b2da      	uxtb	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	7dfa      	ldrb	r2, [r7, #23]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd fab7 	bl	800568c <unlock_fs>
 800811e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ff70 	bl	8008016 <f_sync>
 8008136:	4603      	mov	r3, r0
 8008138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d11d      	bne.n	800817c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f107 0208 	add.w	r2, r7, #8
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fac7 	bl	80076dc <validate>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d111      	bne.n	800817c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fbbd 	bl	80058dc <dec_lock>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd fa88 	bl	800568c <unlock_fs>
#endif
		}
	}
	return res;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800819e:	4b1f      	ldr	r3, [pc, #124]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081a0:	7a5b      	ldrb	r3, [r3, #9]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d131      	bne.n	800820c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80081a8:	4b1c      	ldr	r3, [pc, #112]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081aa:	7a5b      	ldrb	r3, [r3, #9]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	461a      	mov	r2, r3
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081b2:	2100      	movs	r1, #0
 80081b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80081b6:	4b19      	ldr	r3, [pc, #100]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081b8:	7a5b      	ldrb	r3, [r3, #9]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	4a17      	ldr	r2, [pc, #92]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081c8:	7a5b      	ldrb	r3, [r3, #9]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b13      	ldr	r3, [pc, #76]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081d0:	4413      	add	r3, r2
 80081d2:	79fa      	ldrb	r2, [r7, #7]
 80081d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081d8:	7a5b      	ldrb	r3, [r3, #9]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	b2d1      	uxtb	r1, r2
 80081e0:	4a0e      	ldr	r2, [pc, #56]	; (800821c <FATFS_LinkDriverEx+0x94>)
 80081e2:	7251      	strb	r1, [r2, #9]
 80081e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80081e6:	7dbb      	ldrb	r3, [r7, #22]
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3301      	adds	r3, #1
 80081f4:	223a      	movs	r2, #58	; 0x3a
 80081f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3302      	adds	r3, #2
 80081fc:	222f      	movs	r2, #47	; 0x2f
 80081fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3303      	adds	r3, #3
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
}
 800820e:	4618      	mov	r0, r3
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	200000d8 	.word	0x200000d8

08008220 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800822a:	2200      	movs	r2, #0
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ffaa 	bl	8008188 <FATFS_LinkDriverEx>
 8008234:	4603      	mov	r3, r0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	2b7f      	cmp	r3, #127	; 0x7f
 8008250:	d802      	bhi.n	8008258 <ff_convert+0x18>
		c = chr;
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	81fb      	strh	r3, [r7, #14]
 8008256:	e025      	b.n	80082a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00b      	beq.n	8008276 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	2bff      	cmp	r3, #255	; 0xff
 8008262:	d805      	bhi.n	8008270 <ff_convert+0x30>
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	3b80      	subs	r3, #128	; 0x80
 8008268:	4a12      	ldr	r2, [pc, #72]	; (80082b4 <ff_convert+0x74>)
 800826a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800826e:	e000      	b.n	8008272 <ff_convert+0x32>
 8008270:	2300      	movs	r3, #0
 8008272:	81fb      	strh	r3, [r7, #14]
 8008274:	e016      	b.n	80082a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008276:	2300      	movs	r3, #0
 8008278:	81fb      	strh	r3, [r7, #14]
 800827a:	e009      	b.n	8008290 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	4a0d      	ldr	r2, [pc, #52]	; (80082b4 <ff_convert+0x74>)
 8008280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008284:	88fa      	ldrh	r2, [r7, #6]
 8008286:	429a      	cmp	r2, r3
 8008288:	d006      	beq.n	8008298 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800828a:	89fb      	ldrh	r3, [r7, #14]
 800828c:	3301      	adds	r3, #1
 800828e:	81fb      	strh	r3, [r7, #14]
 8008290:	89fb      	ldrh	r3, [r7, #14]
 8008292:	2b7f      	cmp	r3, #127	; 0x7f
 8008294:	d9f2      	bls.n	800827c <ff_convert+0x3c>
 8008296:	e000      	b.n	800829a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008298:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800829a:	89fb      	ldrh	r3, [r7, #14]
 800829c:	3380      	adds	r3, #128	; 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80082a4:	89fb      	ldrh	r3, [r7, #14]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	0800ce2c 	.word	0x0800ce2c

080082b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c8:	d201      	bcs.n	80082ce <ff_wtoupper+0x16>
 80082ca:	4b3e      	ldr	r3, [pc, #248]	; (80083c4 <ff_wtoupper+0x10c>)
 80082cc:	e000      	b.n	80082d0 <ff_wtoupper+0x18>
 80082ce:	4b3e      	ldr	r3, [pc, #248]	; (80083c8 <ff_wtoupper+0x110>)
 80082d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	617a      	str	r2, [r7, #20]
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80082dc:	8a7b      	ldrh	r3, [r7, #18]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d068      	beq.n	80083b4 <ff_wtoupper+0xfc>
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	8a7b      	ldrh	r3, [r7, #18]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d364      	bcc.n	80083b4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	1c9a      	adds	r2, r3, #2
 80082ee:	617a      	str	r2, [r7, #20]
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	823b      	strh	r3, [r7, #16]
 80082f4:	8a3b      	ldrh	r3, [r7, #16]
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	81fb      	strh	r3, [r7, #14]
 80082fa:	8a3b      	ldrh	r3, [r7, #16]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	8a79      	ldrh	r1, [r7, #18]
 8008304:	8a3b      	ldrh	r3, [r7, #16]
 8008306:	440b      	add	r3, r1
 8008308:	429a      	cmp	r2, r3
 800830a:	da49      	bge.n	80083a0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800830c:	89fb      	ldrh	r3, [r7, #14]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d84f      	bhi.n	80083b2 <ff_wtoupper+0xfa>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <ff_wtoupper+0x60>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800833d 	.word	0x0800833d
 800831c:	0800834f 	.word	0x0800834f
 8008320:	08008365 	.word	0x08008365
 8008324:	0800836d 	.word	0x0800836d
 8008328:	08008375 	.word	0x08008375
 800832c:	0800837d 	.word	0x0800837d
 8008330:	08008385 	.word	0x08008385
 8008334:	0800838d 	.word	0x0800838d
 8008338:	08008395 	.word	0x08008395
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	8a7b      	ldrh	r3, [r7, #18]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	80fb      	strh	r3, [r7, #6]
 800834c:	e027      	b.n	800839e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800834e:	88fa      	ldrh	r2, [r7, #6]
 8008350:	8a7b      	ldrh	r3, [r7, #18]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	b29b      	uxth	r3, r3
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	80fb      	strh	r3, [r7, #6]
 8008362:	e01c      	b.n	800839e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	3b10      	subs	r3, #16
 8008368:	80fb      	strh	r3, [r7, #6]
 800836a:	e018      	b.n	800839e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	3b20      	subs	r3, #32
 8008370:	80fb      	strh	r3, [r7, #6]
 8008372:	e014      	b.n	800839e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	3b30      	subs	r3, #48	; 0x30
 8008378:	80fb      	strh	r3, [r7, #6]
 800837a:	e010      	b.n	800839e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	3b1a      	subs	r3, #26
 8008380:	80fb      	strh	r3, [r7, #6]
 8008382:	e00c      	b.n	800839e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	3308      	adds	r3, #8
 8008388:	80fb      	strh	r3, [r7, #6]
 800838a:	e008      	b.n	800839e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	3b50      	subs	r3, #80	; 0x50
 8008390:	80fb      	strh	r3, [r7, #6]
 8008392:	e004      	b.n	800839e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800839a:	80fb      	strh	r3, [r7, #6]
 800839c:	bf00      	nop
			}
			break;
 800839e:	e008      	b.n	80083b2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80083a0:	89fb      	ldrh	r3, [r7, #14]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d195      	bne.n	80082d2 <ff_wtoupper+0x1a>
 80083a6:	8a3b      	ldrh	r3, [r7, #16]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4413      	add	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80083b0:	e78f      	b.n	80082d2 <ff_wtoupper+0x1a>
			break;
 80083b2:	bf00      	nop
	}

	return chr;
 80083b4:	88fb      	ldrh	r3, [r7, #6]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	0800cf2c 	.word	0x0800cf2c
 80083c8:	0800d120 	.word	0x0800d120

080083cc <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80083d8:	2200      	movs	r2, #0
 80083da:	2101      	movs	r1, #1
 80083dc:	2001      	movs	r0, #1
 80083de:	f000 f978 	bl	80086d2 <osSemaphoreNew>
 80083e2:	4602      	mov	r2, r0
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bf14      	ite	ne
 80083f0:	2301      	movne	r3, #1
 80083f2:	2300      	moveq	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	60fb      	str	r3, [r7, #12]

    return ret;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa80 	bl	8008910 <osSemaphoreDelete>
#endif
    return 1;
 8008410:	2301      	movs	r3, #1
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008426:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9da 	bl	80087e4 <osSemaphoreAcquire>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008436:	2301      	movs	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800843a:	68fb      	ldr	r3, [r7, #12]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa1b 	bl	8008888 <osSemaphoreRelease>
#endif
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <__NVIC_SetPriority>:
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846c:	2b00      	cmp	r3, #0
 800846e:	db0a      	blt.n	8008486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	b2da      	uxtb	r2, r3
 8008474:	490c      	ldr	r1, [pc, #48]	; (80084a8 <__NVIC_SetPriority+0x4c>)
 8008476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847a:	0112      	lsls	r2, r2, #4
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	440b      	add	r3, r1
 8008480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008484:	e00a      	b.n	800849c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	b2da      	uxtb	r2, r3
 800848a:	4908      	ldr	r1, [pc, #32]	; (80084ac <__NVIC_SetPriority+0x50>)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	3b04      	subs	r3, #4
 8008494:	0112      	lsls	r2, r2, #4
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	440b      	add	r3, r1
 800849a:	761a      	strb	r2, [r3, #24]
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	e000e100 	.word	0xe000e100
 80084ac:	e000ed00 	.word	0xe000ed00

080084b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <SysTick_Handler+0x1c>)
 80084b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084b8:	f002 f962 	bl	800a780 <xTaskGetSchedulerState>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d001      	beq.n	80084c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084c2:	f003 f849 	bl	800b558 <xPortSysTickHandler>
  }
}
 80084c6:	bf00      	nop
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	e000e010 	.word	0xe000e010

080084d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084d4:	2100      	movs	r1, #0
 80084d6:	f06f 0004 	mvn.w	r0, #4
 80084da:	f7ff ffbf 	bl	800845c <__NVIC_SetPriority>
#endif
}
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ea:	f3ef 8305 	mrs	r3, IPSR
 80084ee:	603b      	str	r3, [r7, #0]
  return(result);
 80084f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084f6:	f06f 0305 	mvn.w	r3, #5
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	e00c      	b.n	8008518 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <osKernelInitialize+0x44>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <osKernelInitialize+0x44>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800850c:	2300      	movs	r3, #0
 800850e:	607b      	str	r3, [r7, #4]
 8008510:	e002      	b.n	8008518 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008516:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008518:	687b      	ldr	r3, [r7, #4]
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	200000e4 	.word	0x200000e4

0800852c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008532:	f3ef 8305 	mrs	r3, IPSR
 8008536:	603b      	str	r3, [r7, #0]
  return(result);
 8008538:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <osKernelStart+0x1a>
    stat = osErrorISR;
 800853e:	f06f 0305 	mvn.w	r3, #5
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e010      	b.n	8008568 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008546:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <osKernelStart+0x48>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d109      	bne.n	8008562 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800854e:	f7ff ffbf 	bl	80084d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008552:	4b08      	ldr	r3, [pc, #32]	; (8008574 <osKernelStart+0x48>)
 8008554:	2202      	movs	r2, #2
 8008556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008558:	f001 fcca 	bl	8009ef0 <vTaskStartScheduler>
      stat = osOK;
 800855c:	2300      	movs	r3, #0
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	e002      	b.n	8008568 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008568:	687b      	ldr	r3, [r7, #4]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	200000e4 	.word	0x200000e4

08008578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b08e      	sub	sp, #56	; 0x38
 800857c:	af04      	add	r7, sp, #16
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008588:	f3ef 8305 	mrs	r3, IPSR
 800858c:	617b      	str	r3, [r7, #20]
  return(result);
 800858e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008590:	2b00      	cmp	r3, #0
 8008592:	d17e      	bne.n	8008692 <osThreadNew+0x11a>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d07b      	beq.n	8008692 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800859a:	2380      	movs	r3, #128	; 0x80
 800859c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800859e:	2318      	movs	r3, #24
 80085a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d045      	beq.n	800863e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <osThreadNew+0x48>
        name = attr->name;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <osThreadNew+0x6e>
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b38      	cmp	r3, #56	; 0x38
 80085d8:	d805      	bhi.n	80085e6 <osThreadNew+0x6e>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <osThreadNew+0x72>
        return (NULL);
 80085e6:	2300      	movs	r3, #0
 80085e8:	e054      	b.n	8008694 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	089b      	lsrs	r3, r3, #2
 80085f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00e      	beq.n	8008620 <osThreadNew+0xa8>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b5b      	cmp	r3, #91	; 0x5b
 8008608:	d90a      	bls.n	8008620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800860e:	2b00      	cmp	r3, #0
 8008610:	d006      	beq.n	8008620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <osThreadNew+0xa8>
        mem = 1;
 800861a:	2301      	movs	r3, #1
 800861c:	61bb      	str	r3, [r7, #24]
 800861e:	e010      	b.n	8008642 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10c      	bne.n	8008642 <osThreadNew+0xca>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d108      	bne.n	8008642 <osThreadNew+0xca>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <osThreadNew+0xca>
          mem = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	e001      	b.n	8008642 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d110      	bne.n	800866a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008650:	9202      	str	r2, [sp, #8]
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6a3a      	ldr	r2, [r7, #32]
 800865c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f001 fa70 	bl	8009b44 <xTaskCreateStatic>
 8008664:	4603      	mov	r3, r0
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	e013      	b.n	8008692 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d110      	bne.n	8008692 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f107 0310 	add.w	r3, r7, #16
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f001 fabb 	bl	8009bfe <xTaskCreate>
 8008688:	4603      	mov	r3, r0
 800868a:	2b01      	cmp	r3, #1
 800868c:	d001      	beq.n	8008692 <osThreadNew+0x11a>
            hTask = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008692:	693b      	ldr	r3, [r7, #16]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3728      	adds	r7, #40	; 0x28
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a4:	f3ef 8305 	mrs	r3, IPSR
 80086a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80086aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <osDelay+0x1c>
    stat = osErrorISR;
 80086b0:	f06f 0305 	mvn.w	r3, #5
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e007      	b.n	80086c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fbe0 	bl	8009e88 <vTaskDelay>
    }
  }

  return (stat);
 80086c8:	68fb      	ldr	r3, [r7, #12]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08a      	sub	sp, #40	; 0x28
 80086d6:	af02      	add	r7, sp, #8
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086e2:	f3ef 8305 	mrs	r3, IPSR
 80086e6:	613b      	str	r3, [r7, #16]
  return(result);
 80086e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d175      	bne.n	80087da <osSemaphoreNew+0x108>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d072      	beq.n	80087da <osSemaphoreNew+0x108>
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d86e      	bhi.n	80087da <osSemaphoreNew+0x108>
    mem = -1;
 80086fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008700:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d015      	beq.n	8008734 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <osSemaphoreNew+0x4c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b4f      	cmp	r3, #79	; 0x4f
 8008716:	d902      	bls.n	800871e <osSemaphoreNew+0x4c>
        mem = 1;
 8008718:	2301      	movs	r3, #1
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	e00c      	b.n	8008738 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <osSemaphoreNew+0x66>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <osSemaphoreNew+0x66>
          mem = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e001      	b.n	8008738 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d04c      	beq.n	80087da <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d128      	bne.n	8008798 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10a      	bne.n	8008762 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2203      	movs	r2, #3
 8008752:	9200      	str	r2, [sp, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	2100      	movs	r1, #0
 8008758:	2001      	movs	r0, #1
 800875a:	f000 fa4d 	bl	8008bf8 <xQueueGenericCreateStatic>
 800875e:	61f8      	str	r0, [r7, #28]
 8008760:	e005      	b.n	800876e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008762:	2203      	movs	r2, #3
 8008764:	2100      	movs	r1, #0
 8008766:	2001      	movs	r0, #1
 8008768:	f000 fabe 	bl	8008ce8 <xQueueGenericCreate>
 800876c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d022      	beq.n	80087ba <osSemaphoreNew+0xe8>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01f      	beq.n	80087ba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	2100      	movs	r1, #0
 8008780:	69f8      	ldr	r0, [r7, #28]
 8008782:	f000 fb79 	bl	8008e78 <xQueueGenericSend>
 8008786:	4603      	mov	r3, r0
 8008788:	2b01      	cmp	r3, #1
 800878a:	d016      	beq.n	80087ba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800878c:	69f8      	ldr	r0, [r7, #28]
 800878e:	f001 f805 	bl	800979c <vQueueDelete>
            hSemaphore = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e010      	b.n	80087ba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d108      	bne.n	80087b0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	461a      	mov	r2, r3
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fafb 	bl	8008da2 <xQueueCreateCountingSemaphoreStatic>
 80087ac:	61f8      	str	r0, [r7, #28]
 80087ae:	e004      	b.n	80087ba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 fb2c 	bl	8008e10 <xQueueCreateCountingSemaphore>
 80087b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <osSemaphoreNew+0xfc>
          name = attr->name;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e001      	b.n	80087d2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	69f8      	ldr	r0, [r7, #28]
 80087d6:	f001 f92d 	bl	8009a34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80087da:	69fb      	ldr	r3, [r7, #28]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80087fc:	f06f 0303 	mvn.w	r3, #3
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e039      	b.n	8008878 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008804:	f3ef 8305 	mrs	r3, IPSR
 8008808:	60fb      	str	r3, [r7, #12]
  return(result);
 800880a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800880c:	2b00      	cmp	r3, #0
 800880e:	d022      	beq.n	8008856 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008816:	f06f 0303 	mvn.w	r3, #3
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e02c      	b.n	8008878 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	461a      	mov	r2, r3
 8008828:	2100      	movs	r1, #0
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f000 ff36 	bl	800969c <xQueueReceiveFromISR>
 8008830:	4603      	mov	r3, r0
 8008832:	2b01      	cmp	r3, #1
 8008834:	d003      	beq.n	800883e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008836:	f06f 0302 	mvn.w	r3, #2
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e01c      	b.n	8008878 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <osSemaphoreAcquire+0x94>
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <osSemaphoreAcquire+0xa0>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	e010      	b.n	8008878 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6938      	ldr	r0, [r7, #16]
 800885a:	f000 fe13 	bl	8009484 <xQueueSemaphoreTake>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d009      	beq.n	8008878 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800886a:	f06f 0301 	mvn.w	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e002      	b.n	8008878 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008878:	697b      	ldr	r3, [r7, #20]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800889e:	f06f 0303 	mvn.w	r3, #3
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e02c      	b.n	8008900 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a6:	f3ef 8305 	mrs	r3, IPSR
 80088aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01a      	beq.n	80088e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088b6:	f107 0308 	add.w	r3, r7, #8
 80088ba:	4619      	mov	r1, r3
 80088bc:	6938      	ldr	r0, [r7, #16]
 80088be:	f000 fc74 	bl	80091aa <xQueueGiveFromISR>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d003      	beq.n	80088d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80088c8:	f06f 0302 	mvn.w	r3, #2
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e017      	b.n	8008900 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d014      	beq.n	8008900 <osSemaphoreRelease+0x78>
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <osSemaphoreRelease+0x84>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e00b      	b.n	8008900 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088e8:	2300      	movs	r3, #0
 80088ea:	2200      	movs	r2, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f000 fac2 	bl	8008e78 <xQueueGenericSend>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d002      	beq.n	8008900 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80088fa:	f06f 0302 	mvn.w	r3, #2
 80088fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008900:	697b      	ldr	r3, [r7, #20]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800891c:	f3ef 8305 	mrs	r3, IPSR
 8008920:	60fb      	str	r3, [r7, #12]
  return(result);
 8008922:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008928:	f06f 0305 	mvn.w	r3, #5
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	e00e      	b.n	800894e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008936:	f06f 0303 	mvn.w	r3, #3
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e007      	b.n	800894e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800893e:	6938      	ldr	r0, [r7, #16]
 8008940:	f001 f8a2 	bl	8009a88 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008948:	6938      	ldr	r0, [r7, #16]
 800894a:	f000 ff27 	bl	800979c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800894e:	697b      	ldr	r3, [r7, #20]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a07      	ldr	r2, [pc, #28]	; (8008984 <vApplicationGetIdleTaskMemory+0x2c>)
 8008968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a06      	ldr	r2, [pc, #24]	; (8008988 <vApplicationGetIdleTaskMemory+0x30>)
 800896e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	601a      	str	r2, [r3, #0]
}
 8008976:	bf00      	nop
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200000e8 	.word	0x200000e8
 8008988:	20000144 	.word	0x20000144

0800898c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800899c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4a06      	ldr	r2, [pc, #24]	; (80089bc <vApplicationGetTimerTaskMemory+0x30>)
 80089a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089aa:	601a      	str	r2, [r3, #0]
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	20000344 	.word	0x20000344
 80089bc:	200003a0 	.word	0x200003a0

080089c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f103 0208 	add.w	r2, r3, #8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f103 0208 	add.w	r2, r3, #8
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 0208 	add.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a78:	d103      	bne.n	8008a82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e00c      	b.n	8008a9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3308      	adds	r3, #8
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	e002      	b.n	8008a90 <vListInsert+0x2e>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d2f6      	bcs.n	8008a8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6892      	ldr	r2, [r2, #8]
 8008aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6852      	ldr	r2, [r2, #4]
 8008af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d103      	bne.n	8008b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	1e5a      	subs	r2, r3, #1
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b52:	f002 fc6f 	bl	800b434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	3b01      	subs	r3, #1
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	441a      	add	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	22ff      	movs	r2, #255	; 0xff
 8008b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	22ff      	movs	r2, #255	; 0xff
 8008b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d114      	bne.n	8008bd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01a      	beq.n	8008be6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 fc25 	bl	800a404 <xTaskRemoveFromEventList>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d012      	beq.n	8008be6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <xQueueGenericReset+0xcc>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	e009      	b.n	8008be6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3310      	adds	r3, #16
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fef2 	bl	80089c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3324      	adds	r3, #36	; 0x24
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff feed 	bl	80089c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008be6:	f002 fc55 	bl	800b494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bea:	2301      	movs	r3, #1
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <xQueueGenericCreateStatic+0x52>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <xQueueGenericCreateStatic+0x56>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <xQueueGenericCreateStatic+0x58>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	623b      	str	r3, [r7, #32]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <xQueueGenericCreateStatic+0x7e>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <xQueueGenericCreateStatic+0x82>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <xQueueGenericCreateStatic+0x84>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	61fb      	str	r3, [r7, #28]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c96:	2350      	movs	r3, #80	; 0x50
 8008c98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b50      	cmp	r3, #80	; 0x50
 8008c9e:	d00a      	beq.n	8008cb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	61bb      	str	r3, [r7, #24]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f83f 	bl	8008d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3730      	adds	r7, #48	; 0x30
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	; 0x28
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	613b      	str	r3, [r7, #16]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3350      	adds	r3, #80	; 0x50
 8008d20:	4618      	mov	r0, r3
 8008d22:	f002 fca9 	bl	800b678 <pvPortMalloc>
 8008d26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d011      	beq.n	8008d52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	3350      	adds	r3, #80	; 0x50
 8008d36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d40:	79fa      	ldrb	r2, [r7, #7]
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4613      	mov	r3, r2
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f805 	bl	8008d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d52:	69bb      	ldr	r3, [r7, #24]
	}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	69b8      	ldr	r0, [r7, #24]
 8008d8e:	f7ff fecb 	bl	8008b28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b08a      	sub	sp, #40	; 0x28
 8008da6:	af02      	add	r7, sp, #8
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	61bb      	str	r3, [r7, #24]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d90a      	bls.n	8008de8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	617b      	str	r3, [r7, #20]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008de8:	2302      	movs	r3, #2
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	2100      	movs	r1, #0
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7ff ff00 	bl	8008bf8 <xQueueGenericCreateStatic>
 8008df8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e06:	69fb      	ldr	r3, [r7, #28]
	}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d90a      	bls.n	8008e54 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60fb      	str	r3, [r7, #12]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e54:	2202      	movs	r2, #2
 8008e56:	2100      	movs	r1, #0
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff45 	bl	8008ce8 <xQueueGenericCreate>
 8008e5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e6c:	697b      	ldr	r3, [r7, #20]
	}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08e      	sub	sp, #56	; 0x38
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e86:	2300      	movs	r3, #0
 8008e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <xQueueGenericSend+0x32>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <xQueueGenericSend+0x40>
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <xQueueGenericSend+0x44>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <xQueueGenericSend+0x46>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d103      	bne.n	8008ee6 <xQueueGenericSend+0x6e>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <xQueueGenericSend+0x72>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <xQueueGenericSend+0x74>
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	623b      	str	r3, [r7, #32]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f06:	f001 fc3b 	bl	800a780 <xTaskGetSchedulerState>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <xQueueGenericSend+0x9e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <xQueueGenericSend+0xa2>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <xQueueGenericSend+0xa4>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	61fb      	str	r3, [r7, #28]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f36:	f002 fa7d 	bl	800b434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d302      	bcc.n	8008f4c <xQueueGenericSend+0xd4>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d129      	bne.n	8008fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f52:	f000 fc5e 	bl	8009812 <prvCopyDataToQueue>
 8008f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	3324      	adds	r3, #36	; 0x24
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 fa4d 	bl	800a404 <xTaskRemoveFromEventList>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d013      	beq.n	8008f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f70:	4b3f      	ldr	r3, [pc, #252]	; (8009070 <xQueueGenericSend+0x1f8>)
 8008f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	e00a      	b.n	8008f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d007      	beq.n	8008f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f88:	4b39      	ldr	r3, [pc, #228]	; (8009070 <xQueueGenericSend+0x1f8>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f98:	f002 fa7c 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e063      	b.n	8009068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d103      	bne.n	8008fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fa6:	f002 fa75 	bl	800b494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e05c      	b.n	8009068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fb4:	f107 0314 	add.w	r3, r7, #20
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fa87 	bl	800a4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fc2:	f002 fa67 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fc6:	f000 fff9 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fca:	f002 fa33 	bl	800b434 <vPortEnterCritical>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fda:	d103      	bne.n	8008fe4 <xQueueGenericSend+0x16c>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fea:	b25b      	sxtb	r3, r3
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff0:	d103      	bne.n	8008ffa <xQueueGenericSend+0x182>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ffa:	f002 fa4b 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ffe:	1d3a      	adds	r2, r7, #4
 8009000:	f107 0314 	add.w	r3, r7, #20
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f001 fa76 	bl	800a4f8 <xTaskCheckForTimeOut>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d124      	bne.n	800905c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009014:	f000 fcf5 	bl	8009a02 <prvIsQueueFull>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d018      	beq.n	8009050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	3310      	adds	r3, #16
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f99c 	bl	800a364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800902c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902e:	f000 fc80 	bl	8009932 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009032:	f000 ffd1 	bl	8009fd8 <xTaskResumeAll>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	f47f af7c 	bne.w	8008f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800903e:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <xQueueGenericSend+0x1f8>)
 8009040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	e772      	b.n	8008f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009052:	f000 fc6e 	bl	8009932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009056:	f000 ffbf 	bl	8009fd8 <xTaskResumeAll>
 800905a:	e76c      	b.n	8008f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800905c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800905e:	f000 fc68 	bl	8009932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009062:	f000 ffb9 	bl	8009fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009068:	4618      	mov	r0, r3
 800906a:	3738      	adds	r7, #56	; 0x38
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b090      	sub	sp, #64	; 0x40
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <xQueueGenericSendFromISR+0x3c>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <xQueueGenericSendFromISR+0x40>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <xQueueGenericSendFromISR+0x42>
 80090b4:	2300      	movs	r3, #0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d103      	bne.n	80090de <xQueueGenericSendFromISR+0x6a>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <xQueueGenericSendFromISR+0x6e>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueGenericSendFromISR+0x70>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	623b      	str	r3, [r7, #32]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090fe:	f002 fa7b 	bl	800b5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009102:	f3ef 8211 	mrs	r2, BASEPRI
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	61fa      	str	r2, [r7, #28]
 8009118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800911a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800911c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	429a      	cmp	r2, r3
 8009128:	d302      	bcc.n	8009130 <xQueueGenericSendFromISR+0xbc>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d12f      	bne.n	8009190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009146:	f000 fb64 	bl	8009812 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800914a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009152:	d112      	bne.n	800917a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d016      	beq.n	800918a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	3324      	adds	r3, #36	; 0x24
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f94f 	bl	800a404 <xTaskRemoveFromEventList>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00e      	beq.n	800918a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	e007      	b.n	800918a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800917a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800917e:	3301      	adds	r3, #1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	b25a      	sxtb	r2, r3
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800918a:	2301      	movs	r3, #1
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800918e:	e001      	b.n	8009194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009190:	2300      	movs	r3, #0
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800919e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3740      	adds	r7, #64	; 0x40
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b08e      	sub	sp, #56	; 0x38
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	623b      	str	r3, [r7, #32]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	61fb      	str	r3, [r7, #28]
}
 80091ee:	bf00      	nop
 80091f0:	e7fe      	b.n	80091f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <xQueueGiveFromISR+0x58>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <xQueueGiveFromISR+0x5c>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <xQueueGiveFromISR+0x5e>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xQueueGiveFromISR+0x78>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	61bb      	str	r3, [r7, #24]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009222:	f002 f9e9 	bl	800b5f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009226:	f3ef 8211 	mrs	r2, BASEPRI
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	617a      	str	r2, [r7, #20]
 800923c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800923e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800924e:	429a      	cmp	r2, r3
 8009250:	d22b      	bcs.n	80092aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800926c:	d112      	bne.n	8009294 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b00      	cmp	r3, #0
 8009274:	d016      	beq.n	80092a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	3324      	adds	r3, #36	; 0x24
 800927a:	4618      	mov	r0, r3
 800927c:	f001 f8c2 	bl	800a404 <xTaskRemoveFromEventList>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00e      	beq.n	80092a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e007      	b.n	80092a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009298:	3301      	adds	r3, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	b25a      	sxtb	r2, r3
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092a4:	2301      	movs	r3, #1
 80092a6:	637b      	str	r3, [r7, #52]	; 0x34
 80092a8:	e001      	b.n	80092ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f383 8811 	msr	BASEPRI, r3
}
 80092b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3738      	adds	r7, #56	; 0x38
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	; 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <xQueueReceive+0x30>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	623b      	str	r3, [r7, #32]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <xQueueReceive+0x3e>
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <xQueueReceive+0x42>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <xQueueReceive+0x44>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueReceive+0x5e>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	61fb      	str	r3, [r7, #28]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009322:	f001 fa2d 	bl	800a780 <xTaskGetSchedulerState>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <xQueueReceive+0x6e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueReceive+0x72>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueReceive+0x74>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xQueueReceive+0x8e>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61bb      	str	r3, [r7, #24]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009352:	f002 f86f 	bl	800b434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d01f      	beq.n	80093a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009366:	f000 fabe 	bl	80098e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	1e5a      	subs	r2, r3, #1
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00f      	beq.n	800939a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	3310      	adds	r3, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f001 f840 	bl	800a404 <xTaskRemoveFromEventList>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d007      	beq.n	800939a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800938a:	4b3d      	ldr	r3, [pc, #244]	; (8009480 <xQueueReceive+0x1bc>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800939a:	f002 f87b 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 800939e:	2301      	movs	r3, #1
 80093a0:	e069      	b.n	8009476 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093a8:	f002 f874 	bl	800b494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e062      	b.n	8009476 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b6:	f107 0310 	add.w	r3, r7, #16
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f886 	bl	800a4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c4:	f002 f866 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093c8:	f000 fdf8 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093cc:	f002 f832 	bl	800b434 <vPortEnterCritical>
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d6:	b25b      	sxtb	r3, r3
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093dc:	d103      	bne.n	80093e6 <xQueueReceive+0x122>
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f2:	d103      	bne.n	80093fc <xQueueReceive+0x138>
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fc:	f002 f84a 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009400:	1d3a      	adds	r2, r7, #4
 8009402:	f107 0310 	add.w	r3, r7, #16
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f875 	bl	800a4f8 <xTaskCheckForTimeOut>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d123      	bne.n	800945c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009416:	f000 fade 	bl	80099d6 <prvIsQueueEmpty>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d017      	beq.n	8009450 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	3324      	adds	r3, #36	; 0x24
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f000 ff9b 	bl	800a364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800942e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009430:	f000 fa7f 	bl	8009932 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009434:	f000 fdd0 	bl	8009fd8 <xTaskResumeAll>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d189      	bne.n	8009352 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800943e:	4b10      	ldr	r3, [pc, #64]	; (8009480 <xQueueReceive+0x1bc>)
 8009440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	e780      	b.n	8009352 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009452:	f000 fa6e 	bl	8009932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009456:	f000 fdbf 	bl	8009fd8 <xTaskResumeAll>
 800945a:	e77a      	b.n	8009352 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800945c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945e:	f000 fa68 	bl	8009932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009462:	f000 fdb9 	bl	8009fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009468:	f000 fab5 	bl	80099d6 <prvIsQueueEmpty>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	f43f af6f 	beq.w	8009352 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3730      	adds	r7, #48	; 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08e      	sub	sp, #56	; 0x38
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	623b      	str	r3, [r7, #32]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	61fb      	str	r3, [r7, #28]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094d4:	f001 f954 	bl	800a780 <xTaskGetSchedulerState>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <xQueueSemaphoreTake+0x60>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <xQueueSemaphoreTake+0x64>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e000      	b.n	80094ea <xQueueSemaphoreTake+0x66>
 80094e8:	2300      	movs	r3, #0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	61bb      	str	r3, [r7, #24]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009504:	f001 ff96 	bl	800b434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	2b00      	cmp	r3, #0
 8009512:	d024      	beq.n	800955e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	1e5a      	subs	r2, r3, #1
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009524:	f001 faa2 	bl	800aa6c <pvTaskIncrementMutexHeldCount>
 8009528:	4602      	mov	r2, r0
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00f      	beq.n	8009556 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	3310      	adds	r3, #16
 800953a:	4618      	mov	r0, r3
 800953c:	f000 ff62 	bl	800a404 <xTaskRemoveFromEventList>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d007      	beq.n	8009556 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009546:	4b54      	ldr	r3, [pc, #336]	; (8009698 <xQueueSemaphoreTake+0x214>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009556:	f001 ff9d 	bl	800b494 <vPortExitCritical>
				return pdPASS;
 800955a:	2301      	movs	r3, #1
 800955c:	e097      	b.n	800968e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d111      	bne.n	8009588 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	617b      	str	r3, [r7, #20]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009580:	f001 ff88 	bl	800b494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009584:	2300      	movs	r3, #0
 8009586:	e082      	b.n	800968e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800958e:	f107 030c 	add.w	r3, r7, #12
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff9a 	bl	800a4cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800959c:	f001 ff7a 	bl	800b494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095a0:	f000 fd0c 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095a4:	f001 ff46 	bl	800b434 <vPortEnterCritical>
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ae:	b25b      	sxtb	r3, r3
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b4:	d103      	bne.n	80095be <xQueueSemaphoreTake+0x13a>
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ca:	d103      	bne.n	80095d4 <xQueueSemaphoreTake+0x150>
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d4:	f001 ff5e 	bl	800b494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d8:	463a      	mov	r2, r7
 80095da:	f107 030c 	add.w	r3, r7, #12
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 ff89 	bl	800a4f8 <xTaskCheckForTimeOut>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d132      	bne.n	8009652 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ee:	f000 f9f2 	bl	80099d6 <prvIsQueueEmpty>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d026      	beq.n	8009646 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009600:	f001 ff18 	bl	800b434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4618      	mov	r0, r3
 800960a:	f001 f8d7 	bl	800a7bc <xTaskPriorityInherit>
 800960e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009610:	f001 ff40 	bl	800b494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	3324      	adds	r3, #36	; 0x24
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fea1 	bl	800a364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009624:	f000 f985 	bl	8009932 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009628:	f000 fcd6 	bl	8009fd8 <xTaskResumeAll>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	f47f af68 	bne.w	8009504 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009634:	4b18      	ldr	r3, [pc, #96]	; (8009698 <xQueueSemaphoreTake+0x214>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	e75e      	b.n	8009504 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009648:	f000 f973 	bl	8009932 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964c:	f000 fcc4 	bl	8009fd8 <xTaskResumeAll>
 8009650:	e758      	b.n	8009504 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009654:	f000 f96d 	bl	8009932 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009658:	f000 fcbe 	bl	8009fd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800965e:	f000 f9ba 	bl	80099d6 <prvIsQueueEmpty>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	f43f af4d 	beq.w	8009504 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009670:	f001 fee0 	bl	800b434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009676:	f000 f8b4 	bl	80097e2 <prvGetDisinheritPriorityAfterTimeout>
 800967a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f970 	bl	800a968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009688:	f001 ff04 	bl	800b494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800968c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800968e:	4618      	mov	r0, r3
 8009690:	3738      	adds	r7, #56	; 0x38
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08e      	sub	sp, #56	; 0x38
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10a      	bne.n	80096c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	623b      	str	r3, [r7, #32]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d103      	bne.n	80096d6 <xQueueReceiveFromISR+0x3a>
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <xQueueReceiveFromISR+0x3e>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e000      	b.n	80096dc <xQueueReceiveFromISR+0x40>
 80096da:	2300      	movs	r3, #0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	61fb      	str	r3, [r7, #28]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f6:	f001 ff7f 	bl	800b5f8 <vPortValidateInterruptPriority>
	__asm volatile
 80096fa:	f3ef 8211 	mrs	r2, BASEPRI
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	61ba      	str	r2, [r7, #24]
 8009710:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009712:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009714:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d02f      	beq.n	8009782 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009730:	f000 f8d9 	bl	80098e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	1e5a      	subs	r2, r3, #1
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800973c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009744:	d112      	bne.n	800976c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d016      	beq.n	800977c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	3310      	adds	r3, #16
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fe56 	bl	800a404 <xTaskRemoveFromEventList>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e007      	b.n	800977c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009770:	3301      	adds	r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	b25a      	sxtb	r2, r3
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800977c:	2301      	movs	r3, #1
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
 8009780:	e001      	b.n	8009786 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009782:	2300      	movs	r3, #0
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	613b      	str	r3, [r7, #16]
	__asm volatile
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f383 8811 	msr	BASEPRI, r3
}
 8009790:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009794:	4618      	mov	r0, r3
 8009796:	3738      	adds	r7, #56	; 0x38
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <vQueueDelete+0x28>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60bb      	str	r3, [r7, #8]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f95f 	bl	8009a88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f002 f81b 	bl	800b810 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d006      	beq.n	8009800 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e001      	b.n	8009804 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009804:	68fb      	ldr	r3, [r7, #12]
	}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10d      	bne.n	800984c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d14d      	bne.n	80098d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	4618      	mov	r0, r3
 800983e:	f001 f825 	bl	800a88c <xTaskPriorityDisinherit>
 8009842:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	609a      	str	r2, [r3, #8]
 800984a:	e043      	b.n	80098d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d119      	bne.n	8009886 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6858      	ldr	r0, [r3, #4]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	461a      	mov	r2, r3
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	f002 f91f 	bl	800baa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	441a      	add	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	429a      	cmp	r2, r3
 800987a:	d32b      	bcc.n	80098d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	605a      	str	r2, [r3, #4]
 8009884:	e026      	b.n	80098d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	68d8      	ldr	r0, [r3, #12]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	461a      	mov	r2, r3
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	f002 f905 	bl	800baa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989e:	425b      	negs	r3, r3
 80098a0:	441a      	add	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d207      	bcs.n	80098c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	425b      	negs	r3, r3
 80098bc:	441a      	add	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d105      	bne.n	80098d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80098dc:	697b      	ldr	r3, [r7, #20]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d018      	beq.n	800992a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	441a      	add	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	429a      	cmp	r2, r3
 8009910:	d303      	bcc.n	800991a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68d9      	ldr	r1, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	461a      	mov	r2, r3
 8009924:	6838      	ldr	r0, [r7, #0]
 8009926:	f002 f8bb 	bl	800baa0 <memcpy>
	}
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800993a:	f001 fd7b 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009944:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009946:	e011      	b.n	800996c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d012      	beq.n	8009976 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fd55 	bl	800a404 <xTaskRemoveFromEventList>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009960:	f000 fe2c 	bl	800a5bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	3b01      	subs	r3, #1
 8009968:	b2db      	uxtb	r3, r3
 800996a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800996c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009970:	2b00      	cmp	r3, #0
 8009972:	dce9      	bgt.n	8009948 <prvUnlockQueue+0x16>
 8009974:	e000      	b.n	8009978 <prvUnlockQueue+0x46>
					break;
 8009976:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009980:	f001 fd88 	bl	800b494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009984:	f001 fd56 	bl	800b434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800998e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009990:	e011      	b.n	80099b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d012      	beq.n	80099c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3310      	adds	r3, #16
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fd30 	bl	800a404 <xTaskRemoveFromEventList>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099aa:	f000 fe07 	bl	800a5bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dce9      	bgt.n	8009992 <prvUnlockQueue+0x60>
 80099be:	e000      	b.n	80099c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	22ff      	movs	r2, #255	; 0xff
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099ca:	f001 fd63 	bl	800b494 <vPortExitCritical>
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099de:	f001 fd29 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099ea:	2301      	movs	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e001      	b.n	80099f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099f4:	f001 fd4e 	bl	800b494 <vPortExitCritical>

	return xReturn;
 80099f8:	68fb      	ldr	r3, [r7, #12]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a0a:	f001 fd13 	bl	800b434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d102      	bne.n	8009a20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	e001      	b.n	8009a24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a24:	f001 fd36 	bl	800b494 <vPortExitCritical>

	return xReturn;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	e014      	b.n	8009a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a44:	4a0f      	ldr	r2, [pc, #60]	; (8009a84 <vQueueAddToRegistry+0x50>)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10b      	bne.n	8009a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a50:	490c      	ldr	r1, [pc, #48]	; (8009a84 <vQueueAddToRegistry+0x50>)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a5a:	4a0a      	ldr	r2, [pc, #40]	; (8009a84 <vQueueAddToRegistry+0x50>)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	4413      	add	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a66:	e006      	b.n	8009a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b07      	cmp	r3, #7
 8009a72:	d9e7      	bls.n	8009a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	2000dce0 	.word	0x2000dce0

08009a88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e016      	b.n	8009ac4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a96:	4a10      	ldr	r2, [pc, #64]	; (8009ad8 <vQueueUnregisterQueue+0x50>)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	4413      	add	r3, r2
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d10b      	bne.n	8009abe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009aa6:	4a0c      	ldr	r2, [pc, #48]	; (8009ad8 <vQueueUnregisterQueue+0x50>)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ab0:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <vQueueUnregisterQueue+0x50>)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	2200      	movs	r2, #0
 8009aba:	605a      	str	r2, [r3, #4]
				break;
 8009abc:	e006      	b.n	8009acc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b07      	cmp	r3, #7
 8009ac8:	d9e5      	bls.n	8009a96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	2000dce0 	.word	0x2000dce0

08009adc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009aec:	f001 fca2 	bl	800b434 <vPortEnterCritical>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009af6:	b25b      	sxtb	r3, r3
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009afc:	d103      	bne.n	8009b06 <vQueueWaitForMessageRestricted+0x2a>
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b12:	d103      	bne.n	8009b1c <vQueueWaitForMessageRestricted+0x40>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b1c:	f001 fcba 	bl	800b494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d106      	bne.n	8009b36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	3324      	adds	r3, #36	; 0x24
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fc3b 	bl	800a3ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b36:	6978      	ldr	r0, [r7, #20]
 8009b38:	f7ff fefb 	bl	8009932 <prvUnlockQueue>
	}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08e      	sub	sp, #56	; 0x38
 8009b48:	af04      	add	r7, sp, #16
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	623b      	str	r3, [r7, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskCreateStatic+0x46>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	61fb      	str	r3, [r7, #28]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b8a:	235c      	movs	r3, #92	; 0x5c
 8009b8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b5c      	cmp	r3, #92	; 0x5c
 8009b92:	d00a      	beq.n	8009baa <xTaskCreateStatic+0x66>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	61bb      	str	r3, [r7, #24]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009baa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d01e      	beq.n	8009bf0 <xTaskCreateStatic+0xac>
 8009bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01b      	beq.n	8009bf0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	9302      	str	r3, [sp, #8]
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f850 	bl	8009c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bea:	f000 f8dd 	bl	8009da8 <prvAddNewTaskToReadyList>
 8009bee:	e001      	b.n	8009bf4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bf4:	697b      	ldr	r3, [r7, #20]
	}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3728      	adds	r7, #40	; 0x28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b08c      	sub	sp, #48	; 0x30
 8009c02:	af04      	add	r7, sp, #16
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c0e:	88fb      	ldrh	r3, [r7, #6]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f001 fd30 	bl	800b678 <pvPortMalloc>
 8009c18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00e      	beq.n	8009c3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c20:	205c      	movs	r0, #92	; 0x5c
 8009c22:	f001 fd29 	bl	800b678 <pvPortMalloc>
 8009c26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	631a      	str	r2, [r3, #48]	; 0x30
 8009c34:	e005      	b.n	8009c42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f001 fdea 	bl	800b810 <vPortFree>
 8009c3c:	e001      	b.n	8009c42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d017      	beq.n	8009c78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c50:	88fa      	ldrh	r2, [r7, #6]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f80e 	bl	8009c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c6c:	69f8      	ldr	r0, [r7, #28]
 8009c6e:	f000 f89b 	bl	8009da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c72:	2301      	movs	r3, #1
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	e002      	b.n	8009c7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	21a5      	movs	r1, #165	; 0xa5
 8009ca2:	f001 ff0b 	bl	800babc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	617b      	str	r3, [r7, #20]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01f      	beq.n	8009d26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e012      	b.n	8009d12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	7819      	ldrb	r1, [r3, #0]
 8009cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	3334      	adds	r3, #52	; 0x34
 8009cfc:	460a      	mov	r2, r1
 8009cfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b0f      	cmp	r3, #15
 8009d16:	d9e9      	bls.n	8009cec <prvInitialiseNewTask+0x64>
 8009d18:	e000      	b.n	8009d1c <prvInitialiseNewTask+0x94>
			{
				break;
 8009d1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d24:	e003      	b.n	8009d2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	2b37      	cmp	r3, #55	; 0x37
 8009d32:	d901      	bls.n	8009d38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d34:	2337      	movs	r3, #55	; 0x37
 8009d36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	2200      	movs	r2, #0
 8009d48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe fe56 	bl	8008a00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	3318      	adds	r3, #24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fe51 	bl	8008a00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2200      	movs	r2, #0
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	68f9      	ldr	r1, [r7, #12]
 8009d86:	69b8      	ldr	r0, [r7, #24]
 8009d88:	f001 fa26 	bl	800b1d8 <pxPortInitialiseStack>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d9e:	bf00      	nop
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009db0:	f001 fb40 	bl	800b434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009db4:	4b2d      	ldr	r3, [pc, #180]	; (8009e6c <prvAddNewTaskToReadyList+0xc4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3301      	adds	r3, #1
 8009dba:	4a2c      	ldr	r2, [pc, #176]	; (8009e6c <prvAddNewTaskToReadyList+0xc4>)
 8009dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dbe:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <prvAddNewTaskToReadyList+0xc8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d109      	bne.n	8009dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dc6:	4a2a      	ldr	r2, [pc, #168]	; (8009e70 <prvAddNewTaskToReadyList+0xc8>)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dcc:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <prvAddNewTaskToReadyList+0xc4>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d110      	bne.n	8009df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dd4:	f000 fc16 	bl	800a604 <prvInitialiseTaskLists>
 8009dd8:	e00d      	b.n	8009df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009dda:	4b26      	ldr	r3, [pc, #152]	; (8009e74 <prvAddNewTaskToReadyList+0xcc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009de2:	4b23      	ldr	r3, [pc, #140]	; (8009e70 <prvAddNewTaskToReadyList+0xc8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d802      	bhi.n	8009df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009df0:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <prvAddNewTaskToReadyList+0xc8>)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009df6:	4b20      	ldr	r3, [pc, #128]	; (8009e78 <prvAddNewTaskToReadyList+0xd0>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <prvAddNewTaskToReadyList+0xd0>)
 8009dfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e00:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <prvAddNewTaskToReadyList+0xd0>)
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0c:	4b1b      	ldr	r3, [pc, #108]	; (8009e7c <prvAddNewTaskToReadyList+0xd4>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d903      	bls.n	8009e1c <prvAddNewTaskToReadyList+0x74>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <prvAddNewTaskToReadyList+0xd4>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <prvAddNewTaskToReadyList+0xd8>)
 8009e2a:	441a      	add	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7fe fdf1 	bl	8008a1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e38:	f001 fb2c 	bl	800b494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <prvAddNewTaskToReadyList+0xcc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00e      	beq.n	8009e62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvAddNewTaskToReadyList+0xc8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d207      	bcs.n	8009e62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e52:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <prvAddNewTaskToReadyList+0xdc>)
 8009e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20000c74 	.word	0x20000c74
 8009e70:	200007a0 	.word	0x200007a0
 8009e74:	20000c80 	.word	0x20000c80
 8009e78:	20000c90 	.word	0x20000c90
 8009e7c:	20000c7c 	.word	0x20000c7c
 8009e80:	200007a4 	.word	0x200007a4
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d017      	beq.n	8009eca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <vTaskDelay+0x60>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <vTaskDelay+0x30>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60bb      	str	r3, [r7, #8]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009eb8:	f000 f880 	bl	8009fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fde8 	bl	800aa94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ec4:	f000 f888 	bl	8009fd8 <xTaskResumeAll>
 8009ec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d107      	bne.n	8009ee0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <vTaskDelay+0x64>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000c9c 	.word	0x20000c9c
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009efe:	463a      	mov	r2, r7
 8009f00:	1d39      	adds	r1, r7, #4
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fd26 	bl	8008958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	9202      	str	r2, [sp, #8]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	460a      	mov	r2, r1
 8009f1e:	4921      	ldr	r1, [pc, #132]	; (8009fa4 <vTaskStartScheduler+0xb4>)
 8009f20:	4821      	ldr	r0, [pc, #132]	; (8009fa8 <vTaskStartScheduler+0xb8>)
 8009f22:	f7ff fe0f 	bl	8009b44 <xTaskCreateStatic>
 8009f26:	4603      	mov	r3, r0
 8009f28:	4a20      	ldr	r2, [pc, #128]	; (8009fac <vTaskStartScheduler+0xbc>)
 8009f2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f2c:	4b1f      	ldr	r3, [pc, #124]	; (8009fac <vTaskStartScheduler+0xbc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f34:	2301      	movs	r3, #1
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e001      	b.n	8009f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d102      	bne.n	8009f4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f44:	f000 fdfa 	bl	800ab3c <xTimerCreateTimerTask>
 8009f48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d116      	bne.n	8009f7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	613b      	str	r3, [r7, #16]
}
 8009f62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f64:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <vTaskStartScheduler+0xc0>)
 8009f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f6c:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <vTaskStartScheduler+0xc4>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f72:	4b11      	ldr	r3, [pc, #68]	; (8009fb8 <vTaskStartScheduler+0xc8>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f78:	f001 f9ba 	bl	800b2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f7c:	e00e      	b.n	8009f9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f84:	d10a      	bne.n	8009f9c <vTaskStartScheduler+0xac>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	60fb      	str	r3, [r7, #12]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <vTaskStartScheduler+0xaa>
}
 8009f9c:	bf00      	nop
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	0800cd18 	.word	0x0800cd18
 8009fa8:	0800a5d5 	.word	0x0800a5d5
 8009fac:	20000c98 	.word	0x20000c98
 8009fb0:	20000c94 	.word	0x20000c94
 8009fb4:	20000c80 	.word	0x20000c80
 8009fb8:	20000c78 	.word	0x20000c78

08009fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a03      	ldr	r2, [pc, #12]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009fca:	bf00      	nop
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	20000c9c 	.word	0x20000c9c

08009fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fe6:	4b42      	ldr	r3, [pc, #264]	; (800a0f0 <xTaskResumeAll+0x118>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <xTaskResumeAll+0x2c>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	603b      	str	r3, [r7, #0]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a004:	f001 fa16 	bl	800b434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a008:	4b39      	ldr	r3, [pc, #228]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	4a38      	ldr	r2, [pc, #224]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a012:	4b37      	ldr	r3, [pc, #220]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d162      	bne.n	800a0e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a01a:	4b36      	ldr	r3, [pc, #216]	; (800a0f4 <xTaskResumeAll+0x11c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d05e      	beq.n	800a0e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a022:	e02f      	b.n	800a084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	4b34      	ldr	r3, [pc, #208]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3318      	adds	r3, #24
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fd4f 	bl	8008ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3304      	adds	r3, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fd4a 	bl	8008ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4b2d      	ldr	r3, [pc, #180]	; (800a0fc <xTaskResumeAll+0x124>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d903      	bls.n	800a054 <xTaskResumeAll+0x7c>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4a2a      	ldr	r2, [pc, #168]	; (800a0fc <xTaskResumeAll+0x124>)
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4a27      	ldr	r2, [pc, #156]	; (800a100 <xTaskResumeAll+0x128>)
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7fe fcd5 	bl	8008a1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4b23      	ldr	r3, [pc, #140]	; (800a104 <xTaskResumeAll+0x12c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d302      	bcc.n	800a084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a07e:	4b22      	ldr	r3, [pc, #136]	; (800a108 <xTaskResumeAll+0x130>)
 800a080:	2201      	movs	r2, #1
 800a082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a084:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1cb      	bne.n	800a024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a092:	f000 fb55 	bl	800a740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <xTaskResumeAll+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d010      	beq.n	800a0c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0a2:	f000 f847 	bl	800a134 <xTaskIncrementTick>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <xTaskResumeAll+0x130>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f1      	bne.n	800a0a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0be:	4b13      	ldr	r3, [pc, #76]	; (800a10c <xTaskResumeAll+0x134>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0c4:	4b10      	ldr	r3, [pc, #64]	; (800a108 <xTaskResumeAll+0x130>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0d0:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <xTaskResumeAll+0x138>)
 800a0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0e0:	f001 f9d8 	bl	800b494 <vPortExitCritical>

	return xAlreadyYielded;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000c9c 	.word	0x20000c9c
 800a0f4:	20000c74 	.word	0x20000c74
 800a0f8:	20000c34 	.word	0x20000c34
 800a0fc:	20000c7c 	.word	0x20000c7c
 800a100:	200007a4 	.word	0x200007a4
 800a104:	200007a0 	.word	0x200007a0
 800a108:	20000c88 	.word	0x20000c88
 800a10c:	20000c84 	.word	0x20000c84
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <xTaskGetTickCount+0x1c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a120:	687b      	ldr	r3, [r7, #4]
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20000c78 	.word	0x20000c78

0800a134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a13e:	4b4f      	ldr	r3, [pc, #316]	; (800a27c <xTaskIncrementTick+0x148>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 808f 	bne.w	800a266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a148:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <xTaskIncrementTick+0x14c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3301      	adds	r3, #1
 800a14e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a150:	4a4b      	ldr	r2, [pc, #300]	; (800a280 <xTaskIncrementTick+0x14c>)
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d120      	bne.n	800a19e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a15c:	4b49      	ldr	r3, [pc, #292]	; (800a284 <xTaskIncrementTick+0x150>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <xTaskIncrementTick+0x48>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	603b      	str	r3, [r7, #0]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xTaskIncrementTick+0x46>
 800a17c:	4b41      	ldr	r3, [pc, #260]	; (800a284 <xTaskIncrementTick+0x150>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	4b41      	ldr	r3, [pc, #260]	; (800a288 <xTaskIncrementTick+0x154>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a3f      	ldr	r2, [pc, #252]	; (800a284 <xTaskIncrementTick+0x150>)
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	4a3f      	ldr	r2, [pc, #252]	; (800a288 <xTaskIncrementTick+0x154>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	4b3e      	ldr	r3, [pc, #248]	; (800a28c <xTaskIncrementTick+0x158>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3301      	adds	r3, #1
 800a196:	4a3d      	ldr	r2, [pc, #244]	; (800a28c <xTaskIncrementTick+0x158>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	f000 fad1 	bl	800a740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a19e:	4b3c      	ldr	r3, [pc, #240]	; (800a290 <xTaskIncrementTick+0x15c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d349      	bcc.n	800a23c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a8:	4b36      	ldr	r3, [pc, #216]	; (800a284 <xTaskIncrementTick+0x150>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d104      	bne.n	800a1bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1b2:	4b37      	ldr	r3, [pc, #220]	; (800a290 <xTaskIncrementTick+0x15c>)
 800a1b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1b8:	601a      	str	r2, [r3, #0]
					break;
 800a1ba:	e03f      	b.n	800a23c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1bc:	4b31      	ldr	r3, [pc, #196]	; (800a284 <xTaskIncrementTick+0x150>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d203      	bcs.n	800a1dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1d4:	4a2e      	ldr	r2, [pc, #184]	; (800a290 <xTaskIncrementTick+0x15c>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1da:	e02f      	b.n	800a23c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fc77 	bl	8008ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	3318      	adds	r3, #24
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fc6e 	bl	8008ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	4b25      	ldr	r3, [pc, #148]	; (800a294 <xTaskIncrementTick+0x160>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <xTaskIncrementTick+0xd8>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4a22      	ldr	r2, [pc, #136]	; (800a294 <xTaskIncrementTick+0x160>)
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <xTaskIncrementTick+0x164>)
 800a21a:	441a      	add	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fe fbf9 	bl	8008a1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <xTaskIncrementTick+0x168>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	429a      	cmp	r2, r3
 800a234:	d3b8      	bcc.n	800a1a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23a:	e7b5      	b.n	800a1a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a23c:	4b17      	ldr	r3, [pc, #92]	; (800a29c <xTaskIncrementTick+0x168>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a242:	4915      	ldr	r1, [pc, #84]	; (800a298 <xTaskIncrementTick+0x164>)
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d901      	bls.n	800a258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a258:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <xTaskIncrementTick+0x16c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d007      	beq.n	800a270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a260:	2301      	movs	r3, #1
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	e004      	b.n	800a270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a266:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <xTaskIncrementTick+0x170>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	4a0d      	ldr	r2, [pc, #52]	; (800a2a4 <xTaskIncrementTick+0x170>)
 800a26e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a270:	697b      	ldr	r3, [r7, #20]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000c9c 	.word	0x20000c9c
 800a280:	20000c78 	.word	0x20000c78
 800a284:	20000c2c 	.word	0x20000c2c
 800a288:	20000c30 	.word	0x20000c30
 800a28c:	20000c8c 	.word	0x20000c8c
 800a290:	20000c94 	.word	0x20000c94
 800a294:	20000c7c 	.word	0x20000c7c
 800a298:	200007a4 	.word	0x200007a4
 800a29c:	200007a0 	.word	0x200007a0
 800a2a0:	20000c88 	.word	0x20000c88
 800a2a4:	20000c84 	.word	0x20000c84

0800a2a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <vTaskSwitchContext+0xa8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2b6:	4b27      	ldr	r3, [pc, #156]	; (800a354 <vTaskSwitchContext+0xac>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2bc:	e041      	b.n	800a342 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a2be:	4b25      	ldr	r3, [pc, #148]	; (800a354 <vTaskSwitchContext+0xac>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c4:	4b24      	ldr	r3, [pc, #144]	; (800a358 <vTaskSwitchContext+0xb0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	e010      	b.n	800a2ee <vTaskSwitchContext+0x46>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	607b      	str	r3, [r7, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskSwitchContext+0x3e>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	491b      	ldr	r1, [pc, #108]	; (800a35c <vTaskSwitchContext+0xb4>)
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	440b      	add	r3, r1
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0e4      	beq.n	800a2cc <vTaskSwitchContext+0x24>
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <vTaskSwitchContext+0xb4>)
 800a30e:	4413      	add	r3, r2
 800a310:	60bb      	str	r3, [r7, #8]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	605a      	str	r2, [r3, #4]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	3308      	adds	r3, #8
 800a324:	429a      	cmp	r2, r3
 800a326:	d104      	bne.n	800a332 <vTaskSwitchContext+0x8a>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	4a09      	ldr	r2, [pc, #36]	; (800a360 <vTaskSwitchContext+0xb8>)
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	4a06      	ldr	r2, [pc, #24]	; (800a358 <vTaskSwitchContext+0xb0>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6013      	str	r3, [r2, #0]
}
 800a342:	bf00      	nop
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20000c9c 	.word	0x20000c9c
 800a354:	20000c88 	.word	0x20000c88
 800a358:	20000c7c 	.word	0x20000c7c
 800a35c:	200007a4 	.word	0x200007a4
 800a360:	200007a0 	.word	0x200007a0

0800a364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <vTaskPlaceOnEventList+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3318      	adds	r3, #24
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7fe fb65 	bl	8008a62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a398:	2101      	movs	r1, #1
 800a39a:	6838      	ldr	r0, [r7, #0]
 800a39c:	f000 fb7a 	bl	800aa94 <prvAddCurrentTaskToDelayedList>
}
 800a3a0:	bf00      	nop
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	200007a0 	.word	0x200007a0

0800a3ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	617b      	str	r3, [r7, #20]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <vTaskPlaceOnEventListRestricted+0x54>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3318      	adds	r3, #24
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fe fb1c 	bl	8008a1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f000 fb4f 	bl	800aa94 <prvAddCurrentTaskToDelayedList>
	}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200007a0 	.word	0x200007a0

0800a404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10a      	bne.n	800a430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	60fb      	str	r3, [r7, #12]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	3318      	adds	r3, #24
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fb4d 	bl	8008ad4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a43a:	4b1e      	ldr	r3, [pc, #120]	; (800a4b4 <xTaskRemoveFromEventList+0xb0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d11d      	bne.n	800a47e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	3304      	adds	r3, #4
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fb44 	bl	8008ad4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	4b19      	ldr	r3, [pc, #100]	; (800a4b8 <xTaskRemoveFromEventList+0xb4>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d903      	bls.n	800a460 <xTaskRemoveFromEventList+0x5c>
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	4a16      	ldr	r2, [pc, #88]	; (800a4b8 <xTaskRemoveFromEventList+0xb4>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4a13      	ldr	r2, [pc, #76]	; (800a4bc <xTaskRemoveFromEventList+0xb8>)
 800a46e:	441a      	add	r2, r3
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	3304      	adds	r3, #4
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f7fe facf 	bl	8008a1a <vListInsertEnd>
 800a47c:	e005      	b.n	800a48a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3318      	adds	r3, #24
 800a482:	4619      	mov	r1, r3
 800a484:	480e      	ldr	r0, [pc, #56]	; (800a4c0 <xTaskRemoveFromEventList+0xbc>)
 800a486:	f7fe fac8 	bl	8008a1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <xTaskRemoveFromEventList+0xc0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	429a      	cmp	r2, r3
 800a496:	d905      	bls.n	800a4a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <xTaskRemoveFromEventList+0xc4>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e001      	b.n	800a4a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000c9c 	.word	0x20000c9c
 800a4b8:	20000c7c 	.word	0x20000c7c
 800a4bc:	200007a4 	.word	0x200007a4
 800a4c0:	20000c34 	.word	0x20000c34
 800a4c4:	200007a0 	.word	0x200007a0
 800a4c8:	20000c88 	.word	0x20000c88

0800a4cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4d4:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <vTaskInternalSetTimeOutState+0x24>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4dc:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <vTaskInternalSetTimeOutState+0x28>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	605a      	str	r2, [r3, #4]
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20000c8c 	.word	0x20000c8c
 800a4f4:	20000c78 	.word	0x20000c78

0800a4f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	613b      	str	r3, [r7, #16]
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60fb      	str	r3, [r7, #12]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a53a:	f000 ff7b 	bl	800b434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a53e:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <xTaskCheckForTimeOut+0xbc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a556:	d102      	bne.n	800a55e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	e023      	b.n	800a5a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b15      	ldr	r3, [pc, #84]	; (800a5b8 <xTaskCheckForTimeOut+0xc0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d007      	beq.n	800a57a <xTaskCheckForTimeOut+0x82>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	61fb      	str	r3, [r7, #28]
 800a578:	e015      	b.n	800a5a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	429a      	cmp	r2, r3
 800a582:	d20b      	bcs.n	800a59c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ff9b 	bl	800a4cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a596:	2300      	movs	r3, #0
 800a598:	61fb      	str	r3, [r7, #28]
 800a59a:	e004      	b.n	800a5a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5a6:	f000 ff75 	bl	800b494 <vPortExitCritical>

	return xReturn;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000c78 	.word	0x20000c78
 800a5b8:	20000c8c 	.word	0x20000c8c

0800a5bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5c0:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <vTaskMissedYield+0x14>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]
}
 800a5c6:	bf00      	nop
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	20000c88 	.word	0x20000c88

0800a5d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5dc:	f000 f852 	bl	800a684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <prvIdleTask+0x28>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d9f9      	bls.n	800a5dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <prvIdleTask+0x2c>)
 800a5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5f8:	e7f0      	b.n	800a5dc <prvIdleTask+0x8>
 800a5fa:	bf00      	nop
 800a5fc:	200007a4 	.word	0x200007a4
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
 800a60e:	e00c      	b.n	800a62a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	4613      	mov	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4a12      	ldr	r2, [pc, #72]	; (800a664 <prvInitialiseTaskLists+0x60>)
 800a61c:	4413      	add	r3, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe f9ce 	bl	80089c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3301      	adds	r3, #1
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b37      	cmp	r3, #55	; 0x37
 800a62e:	d9ef      	bls.n	800a610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a630:	480d      	ldr	r0, [pc, #52]	; (800a668 <prvInitialiseTaskLists+0x64>)
 800a632:	f7fe f9c5 	bl	80089c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a636:	480d      	ldr	r0, [pc, #52]	; (800a66c <prvInitialiseTaskLists+0x68>)
 800a638:	f7fe f9c2 	bl	80089c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a63c:	480c      	ldr	r0, [pc, #48]	; (800a670 <prvInitialiseTaskLists+0x6c>)
 800a63e:	f7fe f9bf 	bl	80089c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a642:	480c      	ldr	r0, [pc, #48]	; (800a674 <prvInitialiseTaskLists+0x70>)
 800a644:	f7fe f9bc 	bl	80089c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a648:	480b      	ldr	r0, [pc, #44]	; (800a678 <prvInitialiseTaskLists+0x74>)
 800a64a:	f7fe f9b9 	bl	80089c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a64e:	4b0b      	ldr	r3, [pc, #44]	; (800a67c <prvInitialiseTaskLists+0x78>)
 800a650:	4a05      	ldr	r2, [pc, #20]	; (800a668 <prvInitialiseTaskLists+0x64>)
 800a652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a654:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <prvInitialiseTaskLists+0x7c>)
 800a656:	4a05      	ldr	r2, [pc, #20]	; (800a66c <prvInitialiseTaskLists+0x68>)
 800a658:	601a      	str	r2, [r3, #0]
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	200007a4 	.word	0x200007a4
 800a668:	20000c04 	.word	0x20000c04
 800a66c:	20000c18 	.word	0x20000c18
 800a670:	20000c34 	.word	0x20000c34
 800a674:	20000c48 	.word	0x20000c48
 800a678:	20000c60 	.word	0x20000c60
 800a67c:	20000c2c 	.word	0x20000c2c
 800a680:	20000c30 	.word	0x20000c30

0800a684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a68a:	e019      	b.n	800a6c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a68c:	f000 fed2 	bl	800b434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a690:	4b10      	ldr	r3, [pc, #64]	; (800a6d4 <prvCheckTasksWaitingTermination+0x50>)
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe fa19 	bl	8008ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <prvCheckTasksWaitingTermination+0x54>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	4a0b      	ldr	r2, [pc, #44]	; (800a6d8 <prvCheckTasksWaitingTermination+0x54>)
 800a6aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <prvCheckTasksWaitingTermination+0x58>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <prvCheckTasksWaitingTermination+0x58>)
 800a6b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6b6:	f000 feed 	bl	800b494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f810 	bl	800a6e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <prvCheckTasksWaitingTermination+0x58>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e1      	bne.n	800a68c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000c48 	.word	0x20000c48
 800a6d8:	20000c74 	.word	0x20000c74
 800a6dc:	20000c5c 	.word	0x20000c5c

0800a6e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d108      	bne.n	800a704 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 f88a 	bl	800b810 <vPortFree>
				vPortFree( pxTCB );
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f001 f887 	bl	800b810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a702:	e018      	b.n	800a736 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d103      	bne.n	800a716 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 f87e 	bl	800b810 <vPortFree>
	}
 800a714:	e00f      	b.n	800a736 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d00a      	beq.n	800a736 <prvDeleteTCB+0x56>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <prvDeleteTCB+0x54>
	}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvResetNextTaskUnblockTime+0x38>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <prvResetNextTaskUnblockTime+0x3c>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a758:	e008      	b.n	800a76c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75a:	4b07      	ldr	r3, [pc, #28]	; (800a778 <prvResetNextTaskUnblockTime+0x38>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4a04      	ldr	r2, [pc, #16]	; (800a77c <prvResetNextTaskUnblockTime+0x3c>)
 800a76a:	6013      	str	r3, [r2, #0]
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	20000c2c 	.word	0x20000c2c
 800a77c:	20000c94 	.word	0x20000c94

0800a780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a786:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <xTaskGetSchedulerState+0x34>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a78e:	2301      	movs	r3, #1
 800a790:	607b      	str	r3, [r7, #4]
 800a792:	e008      	b.n	800a7a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <xTaskGetSchedulerState+0x38>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a79c:	2302      	movs	r3, #2
 800a79e:	607b      	str	r3, [r7, #4]
 800a7a0:	e001      	b.n	800a7a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7a6:	687b      	ldr	r3, [r7, #4]
	}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20000c80 	.word	0x20000c80
 800a7b8:	20000c9c 	.word	0x20000c9c

0800a7bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d051      	beq.n	800a876 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d6:	4b2a      	ldr	r3, [pc, #168]	; (800a880 <xTaskPriorityInherit+0xc4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d241      	bcs.n	800a864 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	db06      	blt.n	800a7f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e8:	4b25      	ldr	r3, [pc, #148]	; (800a880 <xTaskPriorityInherit+0xc4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6959      	ldr	r1, [r3, #20]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <xTaskPriorityInherit+0xc8>)
 800a808:	4413      	add	r3, r2
 800a80a:	4299      	cmp	r1, r3
 800a80c:	d122      	bne.n	800a854 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe f95e 	bl	8008ad4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a818:	4b19      	ldr	r3, [pc, #100]	; (800a880 <xTaskPriorityInherit+0xc4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a826:	4b18      	ldr	r3, [pc, #96]	; (800a888 <xTaskPriorityInherit+0xcc>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d903      	bls.n	800a836 <xTaskPriorityInherit+0x7a>
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <xTaskPriorityInherit+0xcc>)
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4a10      	ldr	r2, [pc, #64]	; (800a884 <xTaskPriorityInherit+0xc8>)
 800a844:	441a      	add	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3304      	adds	r3, #4
 800a84a:	4619      	mov	r1, r3
 800a84c:	4610      	mov	r0, r2
 800a84e:	f7fe f8e4 	bl	8008a1a <vListInsertEnd>
 800a852:	e004      	b.n	800a85e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a854:	4b0a      	ldr	r3, [pc, #40]	; (800a880 <xTaskPriorityInherit+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a85e:	2301      	movs	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	e008      	b.n	800a876 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <xTaskPriorityInherit+0xc4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86e:	429a      	cmp	r2, r3
 800a870:	d201      	bcs.n	800a876 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a876:	68fb      	ldr	r3, [r7, #12]
	}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200007a0 	.word	0x200007a0
 800a884:	200007a4 	.word	0x200007a4
 800a888:	20000c7c 	.word	0x20000c7c

0800a88c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d056      	beq.n	800a950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8a2:	4b2e      	ldr	r3, [pc, #184]	; (800a95c <xTaskPriorityDisinherit+0xd0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d00a      	beq.n	800a8c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60fb      	str	r3, [r7, #12]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	60bb      	str	r3, [r7, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e4:	1e5a      	subs	r2, r3, #1
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d02c      	beq.n	800a950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d128      	bne.n	800a950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	3304      	adds	r3, #4
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe f8e6 	bl	8008ad4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a920:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <xTaskPriorityDisinherit+0xd4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	429a      	cmp	r2, r3
 800a926:	d903      	bls.n	800a930 <xTaskPriorityDisinherit+0xa4>
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <xTaskPriorityDisinherit+0xd4>)
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4a09      	ldr	r2, [pc, #36]	; (800a964 <xTaskPriorityDisinherit+0xd8>)
 800a93e:	441a      	add	r2, r3
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	3304      	adds	r3, #4
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f7fe f867 	bl	8008a1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a950:	697b      	ldr	r3, [r7, #20]
	}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	200007a0 	.word	0x200007a0
 800a960:	20000c7c 	.word	0x20000c7c
 800a964:	200007a4 	.word	0x200007a4

0800a968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a976:	2301      	movs	r3, #1
 800a978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d06a      	beq.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60fb      	str	r3, [r7, #12]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d902      	bls.n	800a9ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e002      	b.n	800a9b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	69fa      	ldr	r2, [r7, #28]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d04b      	beq.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d146      	bne.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a9c8:	4b25      	ldr	r3, [pc, #148]	; (800aa60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d10a      	bne.n	800a9e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	60bb      	str	r3, [r7, #8]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db04      	blt.n	800aa06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	6959      	ldr	r1, [r3, #20]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4a13      	ldr	r2, [pc, #76]	; (800aa64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa16:	4413      	add	r3, r2
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	d11c      	bne.n	800aa56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe f857 	bl	8008ad4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d903      	bls.n	800aa3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	4a0c      	ldr	r2, [pc, #48]	; (800aa68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3e:	4613      	mov	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4a07      	ldr	r2, [pc, #28]	; (800aa64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aa48:	441a      	add	r2, r3
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7fd ffe2 	bl	8008a1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa56:	bf00      	nop
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	200007a0 	.word	0x200007a0
 800aa64:	200007a4 	.word	0x200007a4
 800aa68:	20000c7c 	.word	0x20000c7c

0800aa6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aa78:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa7e:	3201      	adds	r2, #1
 800aa80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aa82:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa84:	681b      	ldr	r3, [r3, #0]
	}
 800aa86:	4618      	mov	r0, r3
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	200007a0 	.word	0x200007a0

0800aa94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa9e:	4b21      	ldr	r3, [pc, #132]	; (800ab24 <prvAddCurrentTaskToDelayedList+0x90>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa4:	4b20      	ldr	r3, [pc, #128]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe f812 	bl	8008ad4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab6:	d10a      	bne.n	800aace <prvAddCurrentTaskToDelayedList+0x3a>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aabe:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x94>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4619      	mov	r1, r3
 800aac6:	4819      	ldr	r0, [pc, #100]	; (800ab2c <prvAddCurrentTaskToDelayedList+0x98>)
 800aac8:	f7fd ffa7 	bl	8008a1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aacc:	e026      	b.n	800ab1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d209      	bcs.n	800aafa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fd ffb5 	bl	8008a62 <vListInsert>
}
 800aaf8:	e010      	b.n	800ab1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4b0a      	ldr	r3, [pc, #40]	; (800ab28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7fd ffab 	bl	8008a62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d202      	bcs.n	800ab1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab16:	4a08      	ldr	r2, [pc, #32]	; (800ab38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6013      	str	r3, [r2, #0]
}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000c78 	.word	0x20000c78
 800ab28:	200007a0 	.word	0x200007a0
 800ab2c:	20000c60 	.word	0x20000c60
 800ab30:	20000c30 	.word	0x20000c30
 800ab34:	20000c2c 	.word	0x20000c2c
 800ab38:	20000c94 	.word	0x20000c94

0800ab3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08a      	sub	sp, #40	; 0x28
 800ab40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab46:	f000 fb07 	bl	800b158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab4a:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <xTimerCreateTimerTask+0x80>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d021      	beq.n	800ab96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab5a:	1d3a      	adds	r2, r7, #4
 800ab5c:	f107 0108 	add.w	r1, r7, #8
 800ab60:	f107 030c 	add.w	r3, r7, #12
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fd ff11 	bl	800898c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	9202      	str	r2, [sp, #8]
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	2302      	movs	r3, #2
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	460a      	mov	r2, r1
 800ab7c:	4910      	ldr	r1, [pc, #64]	; (800abc0 <xTimerCreateTimerTask+0x84>)
 800ab7e:	4811      	ldr	r0, [pc, #68]	; (800abc4 <xTimerCreateTimerTask+0x88>)
 800ab80:	f7fe ffe0 	bl	8009b44 <xTaskCreateStatic>
 800ab84:	4603      	mov	r3, r0
 800ab86:	4a10      	ldr	r2, [pc, #64]	; (800abc8 <xTimerCreateTimerTask+0x8c>)
 800ab88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab8a:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <xTimerCreateTimerTask+0x8c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab92:	2301      	movs	r3, #1
 800ab94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	613b      	str	r3, [r7, #16]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000cd0 	.word	0x20000cd0
 800abc0:	0800cd20 	.word	0x0800cd20
 800abc4:	0800ad01 	.word	0x0800ad01
 800abc8:	20000cd4 	.word	0x20000cd4

0800abcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abda:	2300      	movs	r3, #0
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <xTimerGenericCommand+0x2e>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	623b      	str	r3, [r7, #32]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abfa:	4b1a      	ldr	r3, [pc, #104]	; (800ac64 <xTimerGenericCommand+0x98>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d02a      	beq.n	800ac58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b05      	cmp	r3, #5
 800ac12:	dc18      	bgt.n	800ac46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac14:	f7ff fdb4 	bl	800a780 <xTaskGetSchedulerState>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d109      	bne.n	800ac32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac1e:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <xTimerGenericCommand+0x98>)
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f107 0110 	add.w	r1, r7, #16
 800ac26:	2300      	movs	r3, #0
 800ac28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2a:	f7fe f925 	bl	8008e78 <xQueueGenericSend>
 800ac2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac30:	e012      	b.n	800ac58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac32:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <xTimerGenericCommand+0x98>)
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	f107 0110 	add.w	r1, r7, #16
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f7fe f91b 	bl	8008e78 <xQueueGenericSend>
 800ac42:	6278      	str	r0, [r7, #36]	; 0x24
 800ac44:	e008      	b.n	800ac58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac46:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <xTimerGenericCommand+0x98>)
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f107 0110 	add.w	r1, r7, #16
 800ac4e:	2300      	movs	r3, #0
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	f7fe fa0f 	bl	8009074 <xQueueGenericSendFromISR>
 800ac56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3728      	adds	r7, #40	; 0x28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20000cd0 	.word	0x20000cd0

0800ac68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af02      	add	r7, sp, #8
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac72:	4b22      	ldr	r3, [pc, #136]	; (800acfc <prvProcessExpiredTimer+0x94>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd ff27 	bl	8008ad4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d022      	beq.n	800acda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	18d1      	adds	r1, r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	6978      	ldr	r0, [r7, #20]
 800aca2:	f000 f8d1 	bl	800ae48 <prvInsertTimerInActiveList>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01f      	beq.n	800acec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acac:	2300      	movs	r3, #0
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	2300      	movs	r3, #0
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	2100      	movs	r1, #0
 800acb6:	6978      	ldr	r0, [r7, #20]
 800acb8:	f7ff ff88 	bl	800abcc <xTimerGenericCommand>
 800acbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d113      	bne.n	800acec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	60fb      	str	r3, [r7, #12]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	4798      	blx	r3
}
 800acf4:	bf00      	nop
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20000cc8 	.word	0x20000cc8

0800ad00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 f857 	bl	800adc0 <prvGetNextExpireTime>
 800ad12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4619      	mov	r1, r3
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f803 	bl	800ad24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad1e:	f000 f8d5 	bl	800aecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad22:	e7f1      	b.n	800ad08 <prvTimerTask+0x8>

0800ad24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad2e:	f7ff f945 	bl	8009fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad32:	f107 0308 	add.w	r3, r7, #8
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f866 	bl	800ae08 <prvSampleTimeNow>
 800ad3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d130      	bne.n	800ada6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <prvProcessTimerOrBlockTask+0x3c>
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d806      	bhi.n	800ad60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad52:	f7ff f941 	bl	8009fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad56:	68f9      	ldr	r1, [r7, #12]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ff85 	bl	800ac68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad5e:	e024      	b.n	800adaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d008      	beq.n	800ad78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad66:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <prvProcessTimerOrBlockTask+0x90>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <prvProcessTimerOrBlockTask+0x50>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e000      	b.n	800ad76 <prvProcessTimerOrBlockTask+0x52>
 800ad74:	2300      	movs	r3, #0
 800ad76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <prvProcessTimerOrBlockTask+0x94>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fe fea9 	bl	8009adc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad8a:	f7ff f925 	bl	8009fd8 <xTaskResumeAll>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad94:	4b09      	ldr	r3, [pc, #36]	; (800adbc <prvProcessTimerOrBlockTask+0x98>)
 800ad96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	f3bf 8f6f 	isb	sy
}
 800ada4:	e001      	b.n	800adaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ada6:	f7ff f917 	bl	8009fd8 <xTaskResumeAll>
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000ccc 	.word	0x20000ccc
 800adb8:	20000cd0 	.word	0x20000cd0
 800adbc:	e000ed04 	.word	0xe000ed04

0800adc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adc8:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <prvGetNextExpireTime+0x44>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <prvGetNextExpireTime+0x16>
 800add2:	2201      	movs	r2, #1
 800add4:	e000      	b.n	800add8 <prvGetNextExpireTime+0x18>
 800add6:	2200      	movs	r2, #0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d105      	bne.n	800adf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <prvGetNextExpireTime+0x44>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e001      	b.n	800adf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adf4:	68fb      	ldr	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	20000cc8 	.word	0x20000cc8

0800ae08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae10:	f7ff f980 	bl	800a114 <xTaskGetTickCount>
 800ae14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <prvSampleTimeNow+0x3c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d205      	bcs.n	800ae2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae20:	f000 f936 	bl	800b090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	e002      	b.n	800ae32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae32:	4a04      	ldr	r2, [pc, #16]	; (800ae44 <prvSampleTimeNow+0x3c>)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae38:	68fb      	ldr	r3, [r7, #12]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000cd8 	.word	0x20000cd8

0800ae48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d812      	bhi.n	800ae94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	1ad2      	subs	r2, r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d302      	bcc.n	800ae82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	e01b      	b.n	800aeba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <prvInsertTimerInActiveList+0x7c>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7fd fde8 	bl	8008a62 <vListInsert>
 800ae92:	e012      	b.n	800aeba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d206      	bcs.n	800aeaa <prvInsertTimerInActiveList+0x62>
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d302      	bcc.n	800aeaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aea4:	2301      	movs	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	e007      	b.n	800aeba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeaa:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <prvInsertTimerInActiveList+0x80>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f7fd fdd4 	bl	8008a62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aeba:	697b      	ldr	r3, [r7, #20]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20000ccc 	.word	0x20000ccc
 800aec8:	20000cc8 	.word	0x20000cc8

0800aecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08e      	sub	sp, #56	; 0x38
 800aed0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aed2:	e0ca      	b.n	800b06a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	da18      	bge.n	800af0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aeda:	1d3b      	adds	r3, r7, #4
 800aedc:	3304      	adds	r3, #4
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	61fb      	str	r3, [r7, #28]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af02:	6850      	ldr	r0, [r2, #4]
 800af04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af06:	6892      	ldr	r2, [r2, #8]
 800af08:	4611      	mov	r1, r2
 800af0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f2c0 80aa 	blt.w	800b068 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d004      	beq.n	800af2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	3304      	adds	r3, #4
 800af24:	4618      	mov	r0, r3
 800af26:	f7fd fdd5 	bl	8008ad4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af2a:	463b      	mov	r3, r7
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff ff6b 	bl	800ae08 <prvSampleTimeNow>
 800af32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b09      	cmp	r3, #9
 800af38:	f200 8097 	bhi.w	800b06a <prvProcessReceivedCommands+0x19e>
 800af3c:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <prvProcessReceivedCommands+0x78>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af6d 	.word	0x0800af6d
 800af48:	0800af6d 	.word	0x0800af6d
 800af4c:	0800af6d 	.word	0x0800af6d
 800af50:	0800afe1 	.word	0x0800afe1
 800af54:	0800aff5 	.word	0x0800aff5
 800af58:	0800b03f 	.word	0x0800b03f
 800af5c:	0800af6d 	.word	0x0800af6d
 800af60:	0800af6d 	.word	0x0800af6d
 800af64:	0800afe1 	.word	0x0800afe1
 800af68:	0800aff5 	.word	0x0800aff5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af72:	f043 0301 	orr.w	r3, r3, #1
 800af76:	b2da      	uxtb	r2, r3
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	18d1      	adds	r1, r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af8c:	f7ff ff5c 	bl	800ae48 <prvInsertTimerInActiveList>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d069      	beq.n	800b06a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d05e      	beq.n	800b06a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	441a      	add	r2, r3
 800afb4:	2300      	movs	r3, #0
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	2300      	movs	r3, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afbe:	f7ff fe05 	bl	800abcc <xTimerGenericCommand>
 800afc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d14f      	bne.n	800b06a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	61bb      	str	r3, [r7, #24]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afe6:	f023 0301 	bic.w	r3, r3, #1
 800afea:	b2da      	uxtb	r2, r3
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aff2:	e03a      	b.n	800b06a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b2da      	uxtb	r2, r3
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	617b      	str	r3, [r7, #20]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	18d1      	adds	r1, r2, r3
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b038:	f7ff ff06 	bl	800ae48 <prvInsertTimerInActiveList>
					break;
 800b03c:	e015      	b.n	800b06a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b04c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b04e:	f000 fbdf 	bl	800b810 <vPortFree>
 800b052:	e00a      	b.n	800b06a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05a:	f023 0301 	bic.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b066:	e000      	b.n	800b06a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b06a:	4b08      	ldr	r3, [pc, #32]	; (800b08c <prvProcessReceivedCommands+0x1c0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	1d39      	adds	r1, r7, #4
 800b070:	2200      	movs	r2, #0
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe f926 	bl	80092c4 <xQueueReceive>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f47f af2a 	bne.w	800aed4 <prvProcessReceivedCommands+0x8>
	}
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3730      	adds	r7, #48	; 0x30
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20000cd0 	.word	0x20000cd0

0800b090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b096:	e048      	b.n	800b12a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b098:	4b2d      	ldr	r3, [pc, #180]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a2:	4b2b      	ldr	r3, [pc, #172]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fd fd0f 	bl	8008ad4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d02e      	beq.n	800b12a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d90e      	bls.n	800b0fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ea:	4b19      	ldr	r3, [pc, #100]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f7fd fcb4 	bl	8008a62 <vListInsert>
 800b0fa:	e016      	b.n	800b12a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	2300      	movs	r3, #0
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	2100      	movs	r1, #0
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f7ff fd60 	bl	800abcc <xTimerGenericCommand>
 800b10c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10a      	bne.n	800b12a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	603b      	str	r3, [r7, #0]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1b1      	bne.n	800b098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b13a:	4b06      	ldr	r3, [pc, #24]	; (800b154 <prvSwitchTimerLists+0xc4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a04      	ldr	r2, [pc, #16]	; (800b150 <prvSwitchTimerLists+0xc0>)
 800b140:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b142:	4a04      	ldr	r2, [pc, #16]	; (800b154 <prvSwitchTimerLists+0xc4>)
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	6013      	str	r3, [r2, #0]
}
 800b148:	bf00      	nop
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20000cc8 	.word	0x20000cc8
 800b154:	20000ccc 	.word	0x20000ccc

0800b158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b15e:	f000 f969 	bl	800b434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <prvCheckForValidListAndQueue+0x60>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d120      	bne.n	800b1ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b16a:	4814      	ldr	r0, [pc, #80]	; (800b1bc <prvCheckForValidListAndQueue+0x64>)
 800b16c:	f7fd fc28 	bl	80089c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b170:	4813      	ldr	r0, [pc, #76]	; (800b1c0 <prvCheckForValidListAndQueue+0x68>)
 800b172:	f7fd fc25 	bl	80089c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b176:	4b13      	ldr	r3, [pc, #76]	; (800b1c4 <prvCheckForValidListAndQueue+0x6c>)
 800b178:	4a10      	ldr	r2, [pc, #64]	; (800b1bc <prvCheckForValidListAndQueue+0x64>)
 800b17a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <prvCheckForValidListAndQueue+0x70>)
 800b17e:	4a10      	ldr	r2, [pc, #64]	; (800b1c0 <prvCheckForValidListAndQueue+0x68>)
 800b180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b182:	2300      	movs	r3, #0
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	4b11      	ldr	r3, [pc, #68]	; (800b1cc <prvCheckForValidListAndQueue+0x74>)
 800b188:	4a11      	ldr	r2, [pc, #68]	; (800b1d0 <prvCheckForValidListAndQueue+0x78>)
 800b18a:	2110      	movs	r1, #16
 800b18c:	200a      	movs	r0, #10
 800b18e:	f7fd fd33 	bl	8008bf8 <xQueueGenericCreateStatic>
 800b192:	4603      	mov	r3, r0
 800b194:	4a08      	ldr	r2, [pc, #32]	; (800b1b8 <prvCheckForValidListAndQueue+0x60>)
 800b196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <prvCheckForValidListAndQueue+0x60>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1a0:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <prvCheckForValidListAndQueue+0x60>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	490b      	ldr	r1, [pc, #44]	; (800b1d4 <prvCheckForValidListAndQueue+0x7c>)
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fc44 	bl	8009a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1ac:	f000 f972 	bl	800b494 <vPortExitCritical>
}
 800b1b0:	bf00      	nop
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000cd0 	.word	0x20000cd0
 800b1bc:	20000ca0 	.word	0x20000ca0
 800b1c0:	20000cb4 	.word	0x20000cb4
 800b1c4:	20000cc8 	.word	0x20000cc8
 800b1c8:	20000ccc 	.word	0x20000ccc
 800b1cc:	20000d7c 	.word	0x20000d7c
 800b1d0:	20000cdc 	.word	0x20000cdc
 800b1d4:	0800cd28 	.word	0x0800cd28

0800b1d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3b04      	subs	r3, #4
 800b1e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3b04      	subs	r3, #4
 800b1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f023 0201 	bic.w	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3b04      	subs	r3, #4
 800b206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b208:	4a0c      	ldr	r2, [pc, #48]	; (800b23c <pxPortInitialiseStack+0x64>)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3b14      	subs	r3, #20
 800b212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3b04      	subs	r3, #4
 800b21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f06f 0202 	mvn.w	r2, #2
 800b226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3b20      	subs	r3, #32
 800b22c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	0800b241 	.word	0x0800b241

0800b240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b24a:	4b12      	ldr	r3, [pc, #72]	; (800b294 <prvTaskExitError+0x54>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b252:	d00a      	beq.n	800b26a <prvTaskExitError+0x2a>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	60fb      	str	r3, [r7, #12]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <prvTaskExitError+0x28>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	60bb      	str	r3, [r7, #8]
}
 800b27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b27e:	bf00      	nop
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0fc      	beq.n	800b280 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20000024 	.word	0x20000024
	...

0800b2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <pxCurrentTCBConst2>)
 800b2a2:	6819      	ldr	r1, [r3, #0]
 800b2a4:	6808      	ldr	r0, [r1, #0]
 800b2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2aa:	f380 8809 	msr	PSP, r0
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8811 	msr	BASEPRI, r0
 800b2ba:	4770      	bx	lr
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst2>:
 800b2c0:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2c8:	4808      	ldr	r0, [pc, #32]	; (800b2ec <prvPortStartFirstTask+0x24>)
 800b2ca:	6800      	ldr	r0, [r0, #0]
 800b2cc:	6800      	ldr	r0, [r0, #0]
 800b2ce:	f380 8808 	msr	MSP, r0
 800b2d2:	f04f 0000 	mov.w	r0, #0
 800b2d6:	f380 8814 	msr	CONTROL, r0
 800b2da:	b662      	cpsie	i
 800b2dc:	b661      	cpsie	f
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	df00      	svc	0
 800b2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ea:	bf00      	nop
 800b2ec:	e000ed08 	.word	0xe000ed08

0800b2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2f6:	4b46      	ldr	r3, [pc, #280]	; (800b410 <xPortStartScheduler+0x120>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a46      	ldr	r2, [pc, #280]	; (800b414 <xPortStartScheduler+0x124>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10a      	bne.n	800b316 <xPortStartScheduler+0x26>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	613b      	str	r3, [r7, #16]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b316:	4b3e      	ldr	r3, [pc, #248]	; (800b410 <xPortStartScheduler+0x120>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a3f      	ldr	r2, [pc, #252]	; (800b418 <xPortStartScheduler+0x128>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10a      	bne.n	800b336 <xPortStartScheduler+0x46>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b336:	4b39      	ldr	r3, [pc, #228]	; (800b41c <xPortStartScheduler+0x12c>)
 800b338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	22ff      	movs	r2, #255	; 0xff
 800b346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	4b31      	ldr	r3, [pc, #196]	; (800b420 <xPortStartScheduler+0x130>)
 800b35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b35e:	4b31      	ldr	r3, [pc, #196]	; (800b424 <xPortStartScheduler+0x134>)
 800b360:	2207      	movs	r2, #7
 800b362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b364:	e009      	b.n	800b37a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <xPortStartScheduler+0x134>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <xPortStartScheduler+0x134>)
 800b36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	b2db      	uxtb	r3, r3
 800b378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d0ef      	beq.n	800b366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <xPortStartScheduler+0x134>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1c3 0307 	rsb	r3, r3, #7
 800b38e:	2b04      	cmp	r3, #4
 800b390:	d00a      	beq.n	800b3a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60bb      	str	r3, [r7, #8]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <xPortStartScheduler+0x134>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3b2:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <xPortStartScheduler+0x134>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3ba:	4a1a      	ldr	r2, [pc, #104]	; (800b424 <xPortStartScheduler+0x134>)
 800b3bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3c6:	4b18      	ldr	r3, [pc, #96]	; (800b428 <xPortStartScheduler+0x138>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a17      	ldr	r2, [pc, #92]	; (800b428 <xPortStartScheduler+0x138>)
 800b3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3d2:	4b15      	ldr	r3, [pc, #84]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a14      	ldr	r2, [pc, #80]	; (800b428 <xPortStartScheduler+0x138>)
 800b3d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3de:	f000 f8dd 	bl	800b59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <xPortStartScheduler+0x13c>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3e8:	f000 f8fc 	bl	800b5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3ec:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xPortStartScheduler+0x140>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <xPortStartScheduler+0x140>)
 800b3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3f8:	f7ff ff66 	bl	800b2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3fc:	f7fe ff54 	bl	800a2a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b400:	f7ff ff1e 	bl	800b240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	e000ed00 	.word	0xe000ed00
 800b414:	410fc271 	.word	0x410fc271
 800b418:	410fc270 	.word	0x410fc270
 800b41c:	e000e400 	.word	0xe000e400
 800b420:	20000dcc 	.word	0x20000dcc
 800b424:	20000dd0 	.word	0x20000dd0
 800b428:	e000ed20 	.word	0xe000ed20
 800b42c:	20000024 	.word	0x20000024
 800b430:	e000ef34 	.word	0xe000ef34

0800b434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	607b      	str	r3, [r7, #4]
}
 800b44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <vPortEnterCritical+0x58>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	4a0d      	ldr	r2, [pc, #52]	; (800b48c <vPortEnterCritical+0x58>)
 800b456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <vPortEnterCritical+0x58>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10f      	bne.n	800b480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b460:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <vPortEnterCritical+0x5c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <vPortEnterCritical+0x4c>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	603b      	str	r3, [r7, #0]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <vPortEnterCritical+0x4a>
	}
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20000024 	.word	0x20000024
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b49a:	4b12      	ldr	r3, [pc, #72]	; (800b4e4 <vPortExitCritical+0x50>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <vPortExitCritical+0x24>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	607b      	str	r3, [r7, #4]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	4a09      	ldr	r2, [pc, #36]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4c2:	4b08      	ldr	r3, [pc, #32]	; (800b4e4 <vPortExitCritical+0x50>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <vPortExitCritical+0x42>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f383 8811 	msr	BASEPRI, r3
}
 800b4d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000024 	.word	0x20000024
	...

0800b4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4f0:	f3ef 8009 	mrs	r0, PSP
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	4b15      	ldr	r3, [pc, #84]	; (800b550 <pxCurrentTCBConst>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	f01e 0f10 	tst.w	lr, #16
 800b500:	bf08      	it	eq
 800b502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	6010      	str	r0, [r2, #0]
 800b50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b514:	f380 8811 	msr	BASEPRI, r0
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f7fe fec2 	bl	800a2a8 <vTaskSwitchContext>
 800b524:	f04f 0000 	mov.w	r0, #0
 800b528:	f380 8811 	msr	BASEPRI, r0
 800b52c:	bc09      	pop	{r0, r3}
 800b52e:	6819      	ldr	r1, [r3, #0]
 800b530:	6808      	ldr	r0, [r1, #0]
 800b532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b536:	f01e 0f10 	tst.w	lr, #16
 800b53a:	bf08      	it	eq
 800b53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b540:	f380 8809 	msr	PSP, r0
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst>:
 800b550:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b572:	f7fe fddf 	bl	800a134 <xTaskIncrementTick>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b57c:	4b06      	ldr	r3, [pc, #24]	; (800b598 <xPortSysTickHandler+0x40>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	2300      	movs	r3, #0
 800b586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	f383 8811 	msr	BASEPRI, r3
}
 800b58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <vPortSetupTimerInterrupt+0x38>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <vPortSetupTimerInterrupt+0x3c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <vPortSetupTimerInterrupt+0x40>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	099b      	lsrs	r3, r3, #6
 800b5b8:	4a09      	ldr	r2, [pc, #36]	; (800b5e0 <vPortSetupTimerInterrupt+0x44>)
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5be:	4b04      	ldr	r3, [pc, #16]	; (800b5d0 <vPortSetupTimerInterrupt+0x34>)
 800b5c0:	2207      	movs	r2, #7
 800b5c2:	601a      	str	r2, [r3, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	e000e010 	.word	0xe000e010
 800b5d4:	e000e018 	.word	0xe000e018
 800b5d8:	20000004 	.word	0x20000004
 800b5dc:	10624dd3 	.word	0x10624dd3
 800b5e0:	e000e014 	.word	0xe000e014

0800b5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5f4 <vPortEnableVFP+0x10>
 800b5e8:	6801      	ldr	r1, [r0, #0]
 800b5ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ee:	6001      	str	r1, [r0, #0]
 800b5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5f2:	bf00      	nop
 800b5f4:	e000ed88 	.word	0xe000ed88

0800b5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5fe:	f3ef 8305 	mrs	r3, IPSR
 800b602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d914      	bls.n	800b634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b60a:	4a17      	ldr	r2, [pc, #92]	; (800b668 <vPortValidateInterruptPriority+0x70>)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b614:	4b15      	ldr	r3, [pc, #84]	; (800b66c <vPortValidateInterruptPriority+0x74>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	7afa      	ldrb	r2, [r7, #11]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d20a      	bcs.n	800b634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <vPortValidateInterruptPriority+0x78>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <vPortValidateInterruptPriority+0x7c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d90a      	bls.n	800b65a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	603b      	str	r3, [r7, #0]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <vPortValidateInterruptPriority+0x60>
	}
 800b65a:	bf00      	nop
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	e000e3f0 	.word	0xe000e3f0
 800b66c:	20000dcc 	.word	0x20000dcc
 800b670:	e000ed0c 	.word	0xe000ed0c
 800b674:	20000dd0 	.word	0x20000dd0

0800b678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b684:	f7fe fc9a 	bl	8009fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b688:	4b5b      	ldr	r3, [pc, #364]	; (800b7f8 <pvPortMalloc+0x180>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b690:	f000 f920 	bl	800b8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b694:	4b59      	ldr	r3, [pc, #356]	; (800b7fc <pvPortMalloc+0x184>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f040 8093 	bne.w	800b7c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01d      	beq.n	800b6e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d014      	beq.n	800b6e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f023 0307 	bic.w	r3, r3, #7
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	617b      	str	r3, [r7, #20]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d06e      	beq.n	800b7c8 <pvPortMalloc+0x150>
 800b6ea:	4b45      	ldr	r3, [pc, #276]	; (800b800 <pvPortMalloc+0x188>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d869      	bhi.n	800b7c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6f4:	4b43      	ldr	r3, [pc, #268]	; (800b804 <pvPortMalloc+0x18c>)
 800b6f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6f8:	4b42      	ldr	r3, [pc, #264]	; (800b804 <pvPortMalloc+0x18c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6fe:	e004      	b.n	800b70a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d903      	bls.n	800b71c <pvPortMalloc+0xa4>
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1f1      	bne.n	800b700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b71c:	4b36      	ldr	r3, [pc, #216]	; (800b7f8 <pvPortMalloc+0x180>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	429a      	cmp	r2, r3
 800b724:	d050      	beq.n	800b7c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2208      	movs	r2, #8
 800b72c:	4413      	add	r3, r2
 800b72e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	2308      	movs	r3, #8
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	429a      	cmp	r2, r3
 800b746:	d91f      	bls.n	800b788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00a      	beq.n	800b770 <pvPortMalloc+0xf8>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	613b      	str	r3, [r7, #16]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	1ad2      	subs	r2, r2, r3
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b782:	69b8      	ldr	r0, [r7, #24]
 800b784:	f000 f908 	bl	800b998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b788:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <pvPortMalloc+0x188>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	4a1b      	ldr	r2, [pc, #108]	; (800b800 <pvPortMalloc+0x188>)
 800b794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <pvPortMalloc+0x188>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <pvPortMalloc+0x190>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d203      	bcs.n	800b7aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <pvPortMalloc+0x188>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <pvPortMalloc+0x190>)
 800b7a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <pvPortMalloc+0x184>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <pvPortMalloc+0x194>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4a11      	ldr	r2, [pc, #68]	; (800b80c <pvPortMalloc+0x194>)
 800b7c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7c8:	f7fe fc06 	bl	8009fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <pvPortMalloc+0x174>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60fb      	str	r3, [r7, #12]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <pvPortMalloc+0x172>
	return pvReturn;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3728      	adds	r7, #40	; 0x28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001994 	.word	0x20001994
 800b7fc:	200019a8 	.word	0x200019a8
 800b800:	20001998 	.word	0x20001998
 800b804:	2000198c 	.word	0x2000198c
 800b808:	2000199c 	.word	0x2000199c
 800b80c:	200019a0 	.word	0x200019a0

0800b810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d04d      	beq.n	800b8be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b822:	2308      	movs	r3, #8
 800b824:	425b      	negs	r3, r3
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4413      	add	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <vPortFree+0xb8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4013      	ands	r3, r2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <vPortFree+0x44>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	60fb      	str	r3, [r7, #12]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <vPortFree+0x62>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	60bb      	str	r3, [r7, #8]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <vPortFree+0xb8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d01e      	beq.n	800b8be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d11a      	bne.n	800b8be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <vPortFree+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	43db      	mvns	r3, r3
 800b892:	401a      	ands	r2, r3
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b898:	f7fe fb90 	bl	8009fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <vPortFree+0xbc>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	4a09      	ldr	r2, [pc, #36]	; (800b8cc <vPortFree+0xbc>)
 800b8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8aa:	6938      	ldr	r0, [r7, #16]
 800b8ac:	f000 f874 	bl	800b998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <vPortFree+0xc0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	4a06      	ldr	r2, [pc, #24]	; (800b8d0 <vPortFree+0xc0>)
 800b8b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8ba:	f7fe fb8d 	bl	8009fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8be:	bf00      	nop
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	200019a8 	.word	0x200019a8
 800b8cc:	20001998 	.word	0x20001998
 800b8d0:	200019a4 	.word	0x200019a4

0800b8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8e0:	4b27      	ldr	r3, [pc, #156]	; (800b980 <prvHeapInit+0xac>)
 800b8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0307 	bic.w	r3, r3, #7
 800b8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <prvHeapInit+0xac>)
 800b904:	4413      	add	r3, r2
 800b906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b90c:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <prvHeapInit+0xb0>)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b912:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <prvHeapInit+0xb0>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b920:	2208      	movs	r2, #8
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1a9b      	subs	r3, r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a15      	ldr	r2, [pc, #84]	; (800b988 <prvHeapInit+0xb4>)
 800b934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <prvHeapInit+0xb4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2200      	movs	r2, #0
 800b93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <prvHeapInit+0xb4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b954:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <prvHeapInit+0xb4>)
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4a0a      	ldr	r2, [pc, #40]	; (800b98c <prvHeapInit+0xb8>)
 800b962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4a09      	ldr	r2, [pc, #36]	; (800b990 <prvHeapInit+0xbc>)
 800b96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b96c:	4b09      	ldr	r3, [pc, #36]	; (800b994 <prvHeapInit+0xc0>)
 800b96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b972:	601a      	str	r2, [r3, #0]
}
 800b974:	bf00      	nop
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20000dd4 	.word	0x20000dd4
 800b984:	2000198c 	.word	0x2000198c
 800b988:	20001994 	.word	0x20001994
 800b98c:	2000199c 	.word	0x2000199c
 800b990:	20001998 	.word	0x20001998
 800b994:	200019a8 	.word	0x200019a8

0800b998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <prvInsertBlockIntoFreeList+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e002      	b.n	800b9ac <prvInsertBlockIntoFreeList+0x14>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d8f7      	bhi.n	800b9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d108      	bne.n	800b9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	441a      	add	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	441a      	add	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d118      	bne.n	800ba20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4b15      	ldr	r3, [pc, #84]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d00d      	beq.n	800ba16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	441a      	add	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e008      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvInsertBlockIntoFreeList+0xb0>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e003      	b.n	800ba28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d002      	beq.n	800ba36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2000198c 	.word	0x2000198c
 800ba48:	20001994 	.word	0x20001994

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000028 	.word	0x20000028

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	4d0d      	ldr	r5, [pc, #52]	; (800ba90 <__libc_init_array+0x38>)
 800ba5c:	4c0d      	ldr	r4, [pc, #52]	; (800ba94 <__libc_init_array+0x3c>)
 800ba5e:	1b64      	subs	r4, r4, r5
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	2600      	movs	r6, #0
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	4d0b      	ldr	r5, [pc, #44]	; (800ba98 <__libc_init_array+0x40>)
 800ba6a:	4c0c      	ldr	r4, [pc, #48]	; (800ba9c <__libc_init_array+0x44>)
 800ba6c:	f000 fffa 	bl	800ca64 <_init>
 800ba70:	1b64      	subs	r4, r4, r5
 800ba72:	10a4      	asrs	r4, r4, #2
 800ba74:	2600      	movs	r6, #0
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	0800d27c 	.word	0x0800d27c
 800ba94:	0800d27c 	.word	0x0800d27c
 800ba98:	0800d27c 	.word	0x0800d27c
 800ba9c:	0800d280 	.word	0x0800d280

0800baa0 <memcpy>:
 800baa0:	440a      	add	r2, r1
 800baa2:	4291      	cmp	r1, r2
 800baa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baa8:	d100      	bne.n	800baac <memcpy+0xc>
 800baaa:	4770      	bx	lr
 800baac:	b510      	push	{r4, lr}
 800baae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab6:	4291      	cmp	r1, r2
 800bab8:	d1f9      	bne.n	800baae <memcpy+0xe>
 800baba:	bd10      	pop	{r4, pc}

0800babc <memset>:
 800babc:	4402      	add	r2, r0
 800babe:	4603      	mov	r3, r0
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d100      	bne.n	800bac6 <memset+0xa>
 800bac4:	4770      	bx	lr
 800bac6:	f803 1b01 	strb.w	r1, [r3], #1
 800baca:	e7f9      	b.n	800bac0 <memset+0x4>

0800bacc <iprintf>:
 800bacc:	b40f      	push	{r0, r1, r2, r3}
 800bace:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <iprintf+0x2c>)
 800bad0:	b513      	push	{r0, r1, r4, lr}
 800bad2:	681c      	ldr	r4, [r3, #0]
 800bad4:	b124      	cbz	r4, 800bae0 <iprintf+0x14>
 800bad6:	69a3      	ldr	r3, [r4, #24]
 800bad8:	b913      	cbnz	r3, 800bae0 <iprintf+0x14>
 800bada:	4620      	mov	r0, r4
 800badc:	f000 fa5e 	bl	800bf9c <__sinit>
 800bae0:	ab05      	add	r3, sp, #20
 800bae2:	9a04      	ldr	r2, [sp, #16]
 800bae4:	68a1      	ldr	r1, [r4, #8]
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fc2f 	bl	800c34c <_vfiprintf_r>
 800baee:	b002      	add	sp, #8
 800baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf4:	b004      	add	sp, #16
 800baf6:	4770      	bx	lr
 800baf8:	20000028 	.word	0x20000028

0800bafc <_puts_r>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	460e      	mov	r6, r1
 800bb00:	4605      	mov	r5, r0
 800bb02:	b118      	cbz	r0, 800bb0c <_puts_r+0x10>
 800bb04:	6983      	ldr	r3, [r0, #24]
 800bb06:	b90b      	cbnz	r3, 800bb0c <_puts_r+0x10>
 800bb08:	f000 fa48 	bl	800bf9c <__sinit>
 800bb0c:	69ab      	ldr	r3, [r5, #24]
 800bb0e:	68ac      	ldr	r4, [r5, #8]
 800bb10:	b913      	cbnz	r3, 800bb18 <_puts_r+0x1c>
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 fa42 	bl	800bf9c <__sinit>
 800bb18:	4b2c      	ldr	r3, [pc, #176]	; (800bbcc <_puts_r+0xd0>)
 800bb1a:	429c      	cmp	r4, r3
 800bb1c:	d120      	bne.n	800bb60 <_puts_r+0x64>
 800bb1e:	686c      	ldr	r4, [r5, #4]
 800bb20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb22:	07db      	lsls	r3, r3, #31
 800bb24:	d405      	bmi.n	800bb32 <_puts_r+0x36>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	0598      	lsls	r0, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_puts_r+0x36>
 800bb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2e:	f000 fad3 	bl	800c0d8 <__retarget_lock_acquire_recursive>
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	0719      	lsls	r1, r3, #28
 800bb36:	d51d      	bpl.n	800bb74 <_puts_r+0x78>
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	b1db      	cbz	r3, 800bb74 <_puts_r+0x78>
 800bb3c:	3e01      	subs	r6, #1
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb44:	3b01      	subs	r3, #1
 800bb46:	60a3      	str	r3, [r4, #8]
 800bb48:	bb39      	cbnz	r1, 800bb9a <_puts_r+0x9e>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	da38      	bge.n	800bbc0 <_puts_r+0xc4>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	210a      	movs	r1, #10
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 f848 	bl	800bbe8 <__swbuf_r>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d011      	beq.n	800bb80 <_puts_r+0x84>
 800bb5c:	250a      	movs	r5, #10
 800bb5e:	e011      	b.n	800bb84 <_puts_r+0x88>
 800bb60:	4b1b      	ldr	r3, [pc, #108]	; (800bbd0 <_puts_r+0xd4>)
 800bb62:	429c      	cmp	r4, r3
 800bb64:	d101      	bne.n	800bb6a <_puts_r+0x6e>
 800bb66:	68ac      	ldr	r4, [r5, #8]
 800bb68:	e7da      	b.n	800bb20 <_puts_r+0x24>
 800bb6a:	4b1a      	ldr	r3, [pc, #104]	; (800bbd4 <_puts_r+0xd8>)
 800bb6c:	429c      	cmp	r4, r3
 800bb6e:	bf08      	it	eq
 800bb70:	68ec      	ldreq	r4, [r5, #12]
 800bb72:	e7d5      	b.n	800bb20 <_puts_r+0x24>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4628      	mov	r0, r5
 800bb78:	f000 f888 	bl	800bc8c <__swsetup_r>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d0dd      	beq.n	800bb3c <_puts_r+0x40>
 800bb80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bb84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb86:	07da      	lsls	r2, r3, #31
 800bb88:	d405      	bmi.n	800bb96 <_puts_r+0x9a>
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	059b      	lsls	r3, r3, #22
 800bb8e:	d402      	bmi.n	800bb96 <_puts_r+0x9a>
 800bb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb92:	f000 faa2 	bl	800c0da <__retarget_lock_release_recursive>
 800bb96:	4628      	mov	r0, r5
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	da04      	bge.n	800bba8 <_puts_r+0xac>
 800bb9e:	69a2      	ldr	r2, [r4, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	dc06      	bgt.n	800bbb2 <_puts_r+0xb6>
 800bba4:	290a      	cmp	r1, #10
 800bba6:	d004      	beq.n	800bbb2 <_puts_r+0xb6>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	6022      	str	r2, [r4, #0]
 800bbae:	7019      	strb	r1, [r3, #0]
 800bbb0:	e7c5      	b.n	800bb3e <_puts_r+0x42>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 f817 	bl	800bbe8 <__swbuf_r>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d1bf      	bne.n	800bb3e <_puts_r+0x42>
 800bbbe:	e7df      	b.n	800bb80 <_puts_r+0x84>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	250a      	movs	r5, #10
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	6022      	str	r2, [r4, #0]
 800bbc8:	701d      	strb	r5, [r3, #0]
 800bbca:	e7db      	b.n	800bb84 <_puts_r+0x88>
 800bbcc:	0800d200 	.word	0x0800d200
 800bbd0:	0800d220 	.word	0x0800d220
 800bbd4:	0800d1e0 	.word	0x0800d1e0

0800bbd8 <puts>:
 800bbd8:	4b02      	ldr	r3, [pc, #8]	; (800bbe4 <puts+0xc>)
 800bbda:	4601      	mov	r1, r0
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f7ff bf8d 	b.w	800bafc <_puts_r>
 800bbe2:	bf00      	nop
 800bbe4:	20000028 	.word	0x20000028

0800bbe8 <__swbuf_r>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	460e      	mov	r6, r1
 800bbec:	4614      	mov	r4, r2
 800bbee:	4605      	mov	r5, r0
 800bbf0:	b118      	cbz	r0, 800bbfa <__swbuf_r+0x12>
 800bbf2:	6983      	ldr	r3, [r0, #24]
 800bbf4:	b90b      	cbnz	r3, 800bbfa <__swbuf_r+0x12>
 800bbf6:	f000 f9d1 	bl	800bf9c <__sinit>
 800bbfa:	4b21      	ldr	r3, [pc, #132]	; (800bc80 <__swbuf_r+0x98>)
 800bbfc:	429c      	cmp	r4, r3
 800bbfe:	d12b      	bne.n	800bc58 <__swbuf_r+0x70>
 800bc00:	686c      	ldr	r4, [r5, #4]
 800bc02:	69a3      	ldr	r3, [r4, #24]
 800bc04:	60a3      	str	r3, [r4, #8]
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	071a      	lsls	r2, r3, #28
 800bc0a:	d52f      	bpl.n	800bc6c <__swbuf_r+0x84>
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	b36b      	cbz	r3, 800bc6c <__swbuf_r+0x84>
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	6820      	ldr	r0, [r4, #0]
 800bc14:	1ac0      	subs	r0, r0, r3
 800bc16:	6963      	ldr	r3, [r4, #20]
 800bc18:	b2f6      	uxtb	r6, r6
 800bc1a:	4283      	cmp	r3, r0
 800bc1c:	4637      	mov	r7, r6
 800bc1e:	dc04      	bgt.n	800bc2a <__swbuf_r+0x42>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 f926 	bl	800be74 <_fflush_r>
 800bc28:	bb30      	cbnz	r0, 800bc78 <__swbuf_r+0x90>
 800bc2a:	68a3      	ldr	r3, [r4, #8]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	60a3      	str	r3, [r4, #8]
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	6022      	str	r2, [r4, #0]
 800bc36:	701e      	strb	r6, [r3, #0]
 800bc38:	6963      	ldr	r3, [r4, #20]
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	4283      	cmp	r3, r0
 800bc3e:	d004      	beq.n	800bc4a <__swbuf_r+0x62>
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	07db      	lsls	r3, r3, #31
 800bc44:	d506      	bpl.n	800bc54 <__swbuf_r+0x6c>
 800bc46:	2e0a      	cmp	r6, #10
 800bc48:	d104      	bne.n	800bc54 <__swbuf_r+0x6c>
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f000 f911 	bl	800be74 <_fflush_r>
 800bc52:	b988      	cbnz	r0, 800bc78 <__swbuf_r+0x90>
 800bc54:	4638      	mov	r0, r7
 800bc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc58:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <__swbuf_r+0x9c>)
 800bc5a:	429c      	cmp	r4, r3
 800bc5c:	d101      	bne.n	800bc62 <__swbuf_r+0x7a>
 800bc5e:	68ac      	ldr	r4, [r5, #8]
 800bc60:	e7cf      	b.n	800bc02 <__swbuf_r+0x1a>
 800bc62:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <__swbuf_r+0xa0>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	bf08      	it	eq
 800bc68:	68ec      	ldreq	r4, [r5, #12]
 800bc6a:	e7ca      	b.n	800bc02 <__swbuf_r+0x1a>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 f80c 	bl	800bc8c <__swsetup_r>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d0cb      	beq.n	800bc10 <__swbuf_r+0x28>
 800bc78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc7c:	e7ea      	b.n	800bc54 <__swbuf_r+0x6c>
 800bc7e:	bf00      	nop
 800bc80:	0800d200 	.word	0x0800d200
 800bc84:	0800d220 	.word	0x0800d220
 800bc88:	0800d1e0 	.word	0x0800d1e0

0800bc8c <__swsetup_r>:
 800bc8c:	4b32      	ldr	r3, [pc, #200]	; (800bd58 <__swsetup_r+0xcc>)
 800bc8e:	b570      	push	{r4, r5, r6, lr}
 800bc90:	681d      	ldr	r5, [r3, #0]
 800bc92:	4606      	mov	r6, r0
 800bc94:	460c      	mov	r4, r1
 800bc96:	b125      	cbz	r5, 800bca2 <__swsetup_r+0x16>
 800bc98:	69ab      	ldr	r3, [r5, #24]
 800bc9a:	b913      	cbnz	r3, 800bca2 <__swsetup_r+0x16>
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f000 f97d 	bl	800bf9c <__sinit>
 800bca2:	4b2e      	ldr	r3, [pc, #184]	; (800bd5c <__swsetup_r+0xd0>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d10f      	bne.n	800bcc8 <__swsetup_r+0x3c>
 800bca8:	686c      	ldr	r4, [r5, #4]
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcb0:	0719      	lsls	r1, r3, #28
 800bcb2:	d42c      	bmi.n	800bd0e <__swsetup_r+0x82>
 800bcb4:	06dd      	lsls	r5, r3, #27
 800bcb6:	d411      	bmi.n	800bcdc <__swsetup_r+0x50>
 800bcb8:	2309      	movs	r3, #9
 800bcba:	6033      	str	r3, [r6, #0]
 800bcbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc6:	e03e      	b.n	800bd46 <__swsetup_r+0xba>
 800bcc8:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <__swsetup_r+0xd4>)
 800bcca:	429c      	cmp	r4, r3
 800bccc:	d101      	bne.n	800bcd2 <__swsetup_r+0x46>
 800bcce:	68ac      	ldr	r4, [r5, #8]
 800bcd0:	e7eb      	b.n	800bcaa <__swsetup_r+0x1e>
 800bcd2:	4b24      	ldr	r3, [pc, #144]	; (800bd64 <__swsetup_r+0xd8>)
 800bcd4:	429c      	cmp	r4, r3
 800bcd6:	bf08      	it	eq
 800bcd8:	68ec      	ldreq	r4, [r5, #12]
 800bcda:	e7e6      	b.n	800bcaa <__swsetup_r+0x1e>
 800bcdc:	0758      	lsls	r0, r3, #29
 800bcde:	d512      	bpl.n	800bd06 <__swsetup_r+0x7a>
 800bce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bce2:	b141      	cbz	r1, 800bcf6 <__swsetup_r+0x6a>
 800bce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bce8:	4299      	cmp	r1, r3
 800bcea:	d002      	beq.n	800bcf2 <__swsetup_r+0x66>
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 fa59 	bl	800c1a4 <_free_r>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	6363      	str	r3, [r4, #52]	; 0x34
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	2300      	movs	r3, #0
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f043 0308 	orr.w	r3, r3, #8
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	b94b      	cbnz	r3, 800bd26 <__swsetup_r+0x9a>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd1c:	d003      	beq.n	800bd26 <__swsetup_r+0x9a>
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4630      	mov	r0, r6
 800bd22:	f000 f9ff 	bl	800c124 <__smakebuf_r>
 800bd26:	89a0      	ldrh	r0, [r4, #12]
 800bd28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd2c:	f010 0301 	ands.w	r3, r0, #1
 800bd30:	d00a      	beq.n	800bd48 <__swsetup_r+0xbc>
 800bd32:	2300      	movs	r3, #0
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	6963      	ldr	r3, [r4, #20]
 800bd38:	425b      	negs	r3, r3
 800bd3a:	61a3      	str	r3, [r4, #24]
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b943      	cbnz	r3, 800bd52 <__swsetup_r+0xc6>
 800bd40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd44:	d1ba      	bne.n	800bcbc <__swsetup_r+0x30>
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	0781      	lsls	r1, r0, #30
 800bd4a:	bf58      	it	pl
 800bd4c:	6963      	ldrpl	r3, [r4, #20]
 800bd4e:	60a3      	str	r3, [r4, #8]
 800bd50:	e7f4      	b.n	800bd3c <__swsetup_r+0xb0>
 800bd52:	2000      	movs	r0, #0
 800bd54:	e7f7      	b.n	800bd46 <__swsetup_r+0xba>
 800bd56:	bf00      	nop
 800bd58:	20000028 	.word	0x20000028
 800bd5c:	0800d200 	.word	0x0800d200
 800bd60:	0800d220 	.word	0x0800d220
 800bd64:	0800d1e0 	.word	0x0800d1e0

0800bd68 <__sflush_r>:
 800bd68:	898a      	ldrh	r2, [r1, #12]
 800bd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6e:	4605      	mov	r5, r0
 800bd70:	0710      	lsls	r0, r2, #28
 800bd72:	460c      	mov	r4, r1
 800bd74:	d458      	bmi.n	800be28 <__sflush_r+0xc0>
 800bd76:	684b      	ldr	r3, [r1, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	dc05      	bgt.n	800bd88 <__sflush_r+0x20>
 800bd7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dc02      	bgt.n	800bd88 <__sflush_r+0x20>
 800bd82:	2000      	movs	r0, #0
 800bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd8a:	2e00      	cmp	r6, #0
 800bd8c:	d0f9      	beq.n	800bd82 <__sflush_r+0x1a>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd94:	682f      	ldr	r7, [r5, #0]
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	d032      	beq.n	800be00 <__sflush_r+0x98>
 800bd9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	075a      	lsls	r2, r3, #29
 800bda0:	d505      	bpl.n	800bdae <__sflush_r+0x46>
 800bda2:	6863      	ldr	r3, [r4, #4]
 800bda4:	1ac0      	subs	r0, r0, r3
 800bda6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bda8:	b10b      	cbz	r3, 800bdae <__sflush_r+0x46>
 800bdaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdac:	1ac0      	subs	r0, r0, r3
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb4:	6a21      	ldr	r1, [r4, #32]
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b0      	blx	r6
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	d106      	bne.n	800bdce <__sflush_r+0x66>
 800bdc0:	6829      	ldr	r1, [r5, #0]
 800bdc2:	291d      	cmp	r1, #29
 800bdc4:	d82c      	bhi.n	800be20 <__sflush_r+0xb8>
 800bdc6:	4a2a      	ldr	r2, [pc, #168]	; (800be70 <__sflush_r+0x108>)
 800bdc8:	40ca      	lsrs	r2, r1
 800bdca:	07d6      	lsls	r6, r2, #31
 800bdcc:	d528      	bpl.n	800be20 <__sflush_r+0xb8>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	6062      	str	r2, [r4, #4]
 800bdd2:	04d9      	lsls	r1, r3, #19
 800bdd4:	6922      	ldr	r2, [r4, #16]
 800bdd6:	6022      	str	r2, [r4, #0]
 800bdd8:	d504      	bpl.n	800bde4 <__sflush_r+0x7c>
 800bdda:	1c42      	adds	r2, r0, #1
 800bddc:	d101      	bne.n	800bde2 <__sflush_r+0x7a>
 800bdde:	682b      	ldr	r3, [r5, #0]
 800bde0:	b903      	cbnz	r3, 800bde4 <__sflush_r+0x7c>
 800bde2:	6560      	str	r0, [r4, #84]	; 0x54
 800bde4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bde6:	602f      	str	r7, [r5, #0]
 800bde8:	2900      	cmp	r1, #0
 800bdea:	d0ca      	beq.n	800bd82 <__sflush_r+0x1a>
 800bdec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdf0:	4299      	cmp	r1, r3
 800bdf2:	d002      	beq.n	800bdfa <__sflush_r+0x92>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f9d5 	bl	800c1a4 <_free_r>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdfe:	e7c1      	b.n	800bd84 <__sflush_r+0x1c>
 800be00:	6a21      	ldr	r1, [r4, #32]
 800be02:	2301      	movs	r3, #1
 800be04:	4628      	mov	r0, r5
 800be06:	47b0      	blx	r6
 800be08:	1c41      	adds	r1, r0, #1
 800be0a:	d1c7      	bne.n	800bd9c <__sflush_r+0x34>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d0c4      	beq.n	800bd9c <__sflush_r+0x34>
 800be12:	2b1d      	cmp	r3, #29
 800be14:	d001      	beq.n	800be1a <__sflush_r+0xb2>
 800be16:	2b16      	cmp	r3, #22
 800be18:	d101      	bne.n	800be1e <__sflush_r+0xb6>
 800be1a:	602f      	str	r7, [r5, #0]
 800be1c:	e7b1      	b.n	800bd82 <__sflush_r+0x1a>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	e7ad      	b.n	800bd84 <__sflush_r+0x1c>
 800be28:	690f      	ldr	r7, [r1, #16]
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	d0a9      	beq.n	800bd82 <__sflush_r+0x1a>
 800be2e:	0793      	lsls	r3, r2, #30
 800be30:	680e      	ldr	r6, [r1, #0]
 800be32:	bf08      	it	eq
 800be34:	694b      	ldreq	r3, [r1, #20]
 800be36:	600f      	str	r7, [r1, #0]
 800be38:	bf18      	it	ne
 800be3a:	2300      	movne	r3, #0
 800be3c:	eba6 0807 	sub.w	r8, r6, r7
 800be40:	608b      	str	r3, [r1, #8]
 800be42:	f1b8 0f00 	cmp.w	r8, #0
 800be46:	dd9c      	ble.n	800bd82 <__sflush_r+0x1a>
 800be48:	6a21      	ldr	r1, [r4, #32]
 800be4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be4c:	4643      	mov	r3, r8
 800be4e:	463a      	mov	r2, r7
 800be50:	4628      	mov	r0, r5
 800be52:	47b0      	blx	r6
 800be54:	2800      	cmp	r0, #0
 800be56:	dc06      	bgt.n	800be66 <__sflush_r+0xfe>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be64:	e78e      	b.n	800bd84 <__sflush_r+0x1c>
 800be66:	4407      	add	r7, r0
 800be68:	eba8 0800 	sub.w	r8, r8, r0
 800be6c:	e7e9      	b.n	800be42 <__sflush_r+0xda>
 800be6e:	bf00      	nop
 800be70:	20400001 	.word	0x20400001

0800be74 <_fflush_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	690b      	ldr	r3, [r1, #16]
 800be78:	4605      	mov	r5, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	b913      	cbnz	r3, 800be84 <_fflush_r+0x10>
 800be7e:	2500      	movs	r5, #0
 800be80:	4628      	mov	r0, r5
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	b118      	cbz	r0, 800be8e <_fflush_r+0x1a>
 800be86:	6983      	ldr	r3, [r0, #24]
 800be88:	b90b      	cbnz	r3, 800be8e <_fflush_r+0x1a>
 800be8a:	f000 f887 	bl	800bf9c <__sinit>
 800be8e:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <_fflush_r+0x6c>)
 800be90:	429c      	cmp	r4, r3
 800be92:	d11b      	bne.n	800becc <_fflush_r+0x58>
 800be94:	686c      	ldr	r4, [r5, #4]
 800be96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0ef      	beq.n	800be7e <_fflush_r+0xa>
 800be9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bea0:	07d0      	lsls	r0, r2, #31
 800bea2:	d404      	bmi.n	800beae <_fflush_r+0x3a>
 800bea4:	0599      	lsls	r1, r3, #22
 800bea6:	d402      	bmi.n	800beae <_fflush_r+0x3a>
 800bea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beaa:	f000 f915 	bl	800c0d8 <__retarget_lock_acquire_recursive>
 800beae:	4628      	mov	r0, r5
 800beb0:	4621      	mov	r1, r4
 800beb2:	f7ff ff59 	bl	800bd68 <__sflush_r>
 800beb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beb8:	07da      	lsls	r2, r3, #31
 800beba:	4605      	mov	r5, r0
 800bebc:	d4e0      	bmi.n	800be80 <_fflush_r+0xc>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	059b      	lsls	r3, r3, #22
 800bec2:	d4dd      	bmi.n	800be80 <_fflush_r+0xc>
 800bec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bec6:	f000 f908 	bl	800c0da <__retarget_lock_release_recursive>
 800beca:	e7d9      	b.n	800be80 <_fflush_r+0xc>
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <_fflush_r+0x70>)
 800bece:	429c      	cmp	r4, r3
 800bed0:	d101      	bne.n	800bed6 <_fflush_r+0x62>
 800bed2:	68ac      	ldr	r4, [r5, #8]
 800bed4:	e7df      	b.n	800be96 <_fflush_r+0x22>
 800bed6:	4b04      	ldr	r3, [pc, #16]	; (800bee8 <_fflush_r+0x74>)
 800bed8:	429c      	cmp	r4, r3
 800beda:	bf08      	it	eq
 800bedc:	68ec      	ldreq	r4, [r5, #12]
 800bede:	e7da      	b.n	800be96 <_fflush_r+0x22>
 800bee0:	0800d200 	.word	0x0800d200
 800bee4:	0800d220 	.word	0x0800d220
 800bee8:	0800d1e0 	.word	0x0800d1e0

0800beec <std>:
 800beec:	2300      	movs	r3, #0
 800beee:	b510      	push	{r4, lr}
 800bef0:	4604      	mov	r4, r0
 800bef2:	e9c0 3300 	strd	r3, r3, [r0]
 800bef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800befa:	6083      	str	r3, [r0, #8]
 800befc:	8181      	strh	r1, [r0, #12]
 800befe:	6643      	str	r3, [r0, #100]	; 0x64
 800bf00:	81c2      	strh	r2, [r0, #14]
 800bf02:	6183      	str	r3, [r0, #24]
 800bf04:	4619      	mov	r1, r3
 800bf06:	2208      	movs	r2, #8
 800bf08:	305c      	adds	r0, #92	; 0x5c
 800bf0a:	f7ff fdd7 	bl	800babc <memset>
 800bf0e:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <std+0x38>)
 800bf10:	6263      	str	r3, [r4, #36]	; 0x24
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <std+0x3c>)
 800bf14:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf16:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <std+0x40>)
 800bf18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf1a:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <std+0x44>)
 800bf1c:	6224      	str	r4, [r4, #32]
 800bf1e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	bf00      	nop
 800bf24:	0800c8f5 	.word	0x0800c8f5
 800bf28:	0800c917 	.word	0x0800c917
 800bf2c:	0800c94f 	.word	0x0800c94f
 800bf30:	0800c973 	.word	0x0800c973

0800bf34 <_cleanup_r>:
 800bf34:	4901      	ldr	r1, [pc, #4]	; (800bf3c <_cleanup_r+0x8>)
 800bf36:	f000 b8af 	b.w	800c098 <_fwalk_reent>
 800bf3a:	bf00      	nop
 800bf3c:	0800be75 	.word	0x0800be75

0800bf40 <__sfmoreglue>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	1e4a      	subs	r2, r1, #1
 800bf44:	2568      	movs	r5, #104	; 0x68
 800bf46:	4355      	muls	r5, r2
 800bf48:	460e      	mov	r6, r1
 800bf4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf4e:	f000 f979 	bl	800c244 <_malloc_r>
 800bf52:	4604      	mov	r4, r0
 800bf54:	b140      	cbz	r0, 800bf68 <__sfmoreglue+0x28>
 800bf56:	2100      	movs	r1, #0
 800bf58:	e9c0 1600 	strd	r1, r6, [r0]
 800bf5c:	300c      	adds	r0, #12
 800bf5e:	60a0      	str	r0, [r4, #8]
 800bf60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf64:	f7ff fdaa 	bl	800babc <memset>
 800bf68:	4620      	mov	r0, r4
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}

0800bf6c <__sfp_lock_acquire>:
 800bf6c:	4801      	ldr	r0, [pc, #4]	; (800bf74 <__sfp_lock_acquire+0x8>)
 800bf6e:	f000 b8b3 	b.w	800c0d8 <__retarget_lock_acquire_recursive>
 800bf72:	bf00      	nop
 800bf74:	2000dd28 	.word	0x2000dd28

0800bf78 <__sfp_lock_release>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__sfp_lock_release+0x8>)
 800bf7a:	f000 b8ae 	b.w	800c0da <__retarget_lock_release_recursive>
 800bf7e:	bf00      	nop
 800bf80:	2000dd28 	.word	0x2000dd28

0800bf84 <__sinit_lock_acquire>:
 800bf84:	4801      	ldr	r0, [pc, #4]	; (800bf8c <__sinit_lock_acquire+0x8>)
 800bf86:	f000 b8a7 	b.w	800c0d8 <__retarget_lock_acquire_recursive>
 800bf8a:	bf00      	nop
 800bf8c:	2000dd23 	.word	0x2000dd23

0800bf90 <__sinit_lock_release>:
 800bf90:	4801      	ldr	r0, [pc, #4]	; (800bf98 <__sinit_lock_release+0x8>)
 800bf92:	f000 b8a2 	b.w	800c0da <__retarget_lock_release_recursive>
 800bf96:	bf00      	nop
 800bf98:	2000dd23 	.word	0x2000dd23

0800bf9c <__sinit>:
 800bf9c:	b510      	push	{r4, lr}
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	f7ff fff0 	bl	800bf84 <__sinit_lock_acquire>
 800bfa4:	69a3      	ldr	r3, [r4, #24]
 800bfa6:	b11b      	cbz	r3, 800bfb0 <__sinit+0x14>
 800bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfac:	f7ff bff0 	b.w	800bf90 <__sinit_lock_release>
 800bfb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfb4:	6523      	str	r3, [r4, #80]	; 0x50
 800bfb6:	4b13      	ldr	r3, [pc, #76]	; (800c004 <__sinit+0x68>)
 800bfb8:	4a13      	ldr	r2, [pc, #76]	; (800c008 <__sinit+0x6c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfbe:	42a3      	cmp	r3, r4
 800bfc0:	bf04      	itt	eq
 800bfc2:	2301      	moveq	r3, #1
 800bfc4:	61a3      	streq	r3, [r4, #24]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f820 	bl	800c00c <__sfp>
 800bfcc:	6060      	str	r0, [r4, #4]
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 f81c 	bl	800c00c <__sfp>
 800bfd4:	60a0      	str	r0, [r4, #8]
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 f818 	bl	800c00c <__sfp>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	60e0      	str	r0, [r4, #12]
 800bfe0:	2104      	movs	r1, #4
 800bfe2:	6860      	ldr	r0, [r4, #4]
 800bfe4:	f7ff ff82 	bl	800beec <std>
 800bfe8:	68a0      	ldr	r0, [r4, #8]
 800bfea:	2201      	movs	r2, #1
 800bfec:	2109      	movs	r1, #9
 800bfee:	f7ff ff7d 	bl	800beec <std>
 800bff2:	68e0      	ldr	r0, [r4, #12]
 800bff4:	2202      	movs	r2, #2
 800bff6:	2112      	movs	r1, #18
 800bff8:	f7ff ff78 	bl	800beec <std>
 800bffc:	2301      	movs	r3, #1
 800bffe:	61a3      	str	r3, [r4, #24]
 800c000:	e7d2      	b.n	800bfa8 <__sinit+0xc>
 800c002:	bf00      	nop
 800c004:	0800d1dc 	.word	0x0800d1dc
 800c008:	0800bf35 	.word	0x0800bf35

0800c00c <__sfp>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	4607      	mov	r7, r0
 800c010:	f7ff ffac 	bl	800bf6c <__sfp_lock_acquire>
 800c014:	4b1e      	ldr	r3, [pc, #120]	; (800c090 <__sfp+0x84>)
 800c016:	681e      	ldr	r6, [r3, #0]
 800c018:	69b3      	ldr	r3, [r6, #24]
 800c01a:	b913      	cbnz	r3, 800c022 <__sfp+0x16>
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff ffbd 	bl	800bf9c <__sinit>
 800c022:	3648      	adds	r6, #72	; 0x48
 800c024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c028:	3b01      	subs	r3, #1
 800c02a:	d503      	bpl.n	800c034 <__sfp+0x28>
 800c02c:	6833      	ldr	r3, [r6, #0]
 800c02e:	b30b      	cbz	r3, 800c074 <__sfp+0x68>
 800c030:	6836      	ldr	r6, [r6, #0]
 800c032:	e7f7      	b.n	800c024 <__sfp+0x18>
 800c034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c038:	b9d5      	cbnz	r5, 800c070 <__sfp+0x64>
 800c03a:	4b16      	ldr	r3, [pc, #88]	; (800c094 <__sfp+0x88>)
 800c03c:	60e3      	str	r3, [r4, #12]
 800c03e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c042:	6665      	str	r5, [r4, #100]	; 0x64
 800c044:	f000 f847 	bl	800c0d6 <__retarget_lock_init_recursive>
 800c048:	f7ff ff96 	bl	800bf78 <__sfp_lock_release>
 800c04c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c054:	6025      	str	r5, [r4, #0]
 800c056:	61a5      	str	r5, [r4, #24]
 800c058:	2208      	movs	r2, #8
 800c05a:	4629      	mov	r1, r5
 800c05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c060:	f7ff fd2c 	bl	800babc <memset>
 800c064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c06c:	4620      	mov	r0, r4
 800c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c070:	3468      	adds	r4, #104	; 0x68
 800c072:	e7d9      	b.n	800c028 <__sfp+0x1c>
 800c074:	2104      	movs	r1, #4
 800c076:	4638      	mov	r0, r7
 800c078:	f7ff ff62 	bl	800bf40 <__sfmoreglue>
 800c07c:	4604      	mov	r4, r0
 800c07e:	6030      	str	r0, [r6, #0]
 800c080:	2800      	cmp	r0, #0
 800c082:	d1d5      	bne.n	800c030 <__sfp+0x24>
 800c084:	f7ff ff78 	bl	800bf78 <__sfp_lock_release>
 800c088:	230c      	movs	r3, #12
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	e7ee      	b.n	800c06c <__sfp+0x60>
 800c08e:	bf00      	nop
 800c090:	0800d1dc 	.word	0x0800d1dc
 800c094:	ffff0001 	.word	0xffff0001

0800c098 <_fwalk_reent>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4606      	mov	r6, r0
 800c09e:	4688      	mov	r8, r1
 800c0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0a4:	2700      	movs	r7, #0
 800c0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ae:	d505      	bpl.n	800c0bc <_fwalk_reent+0x24>
 800c0b0:	6824      	ldr	r4, [r4, #0]
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	d1f7      	bne.n	800c0a6 <_fwalk_reent+0xe>
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0bc:	89ab      	ldrh	r3, [r5, #12]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d907      	bls.n	800c0d2 <_fwalk_reent+0x3a>
 800c0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	d003      	beq.n	800c0d2 <_fwalk_reent+0x3a>
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	47c0      	blx	r8
 800c0d0:	4307      	orrs	r7, r0
 800c0d2:	3568      	adds	r5, #104	; 0x68
 800c0d4:	e7e9      	b.n	800c0aa <_fwalk_reent+0x12>

0800c0d6 <__retarget_lock_init_recursive>:
 800c0d6:	4770      	bx	lr

0800c0d8 <__retarget_lock_acquire_recursive>:
 800c0d8:	4770      	bx	lr

0800c0da <__retarget_lock_release_recursive>:
 800c0da:	4770      	bx	lr

0800c0dc <__swhatbuf_r>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	460e      	mov	r6, r1
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	b096      	sub	sp, #88	; 0x58
 800c0e8:	4614      	mov	r4, r2
 800c0ea:	461d      	mov	r5, r3
 800c0ec:	da07      	bge.n	800c0fe <__swhatbuf_r+0x22>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	602b      	str	r3, [r5, #0]
 800c0f2:	89b3      	ldrh	r3, [r6, #12]
 800c0f4:	061a      	lsls	r2, r3, #24
 800c0f6:	d410      	bmi.n	800c11a <__swhatbuf_r+0x3e>
 800c0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0fc:	e00e      	b.n	800c11c <__swhatbuf_r+0x40>
 800c0fe:	466a      	mov	r2, sp
 800c100:	f000 fc5e 	bl	800c9c0 <_fstat_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	dbf2      	blt.n	800c0ee <__swhatbuf_r+0x12>
 800c108:	9a01      	ldr	r2, [sp, #4]
 800c10a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c10e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c112:	425a      	negs	r2, r3
 800c114:	415a      	adcs	r2, r3
 800c116:	602a      	str	r2, [r5, #0]
 800c118:	e7ee      	b.n	800c0f8 <__swhatbuf_r+0x1c>
 800c11a:	2340      	movs	r3, #64	; 0x40
 800c11c:	2000      	movs	r0, #0
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	b016      	add	sp, #88	; 0x58
 800c122:	bd70      	pop	{r4, r5, r6, pc}

0800c124 <__smakebuf_r>:
 800c124:	898b      	ldrh	r3, [r1, #12]
 800c126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c128:	079d      	lsls	r5, r3, #30
 800c12a:	4606      	mov	r6, r0
 800c12c:	460c      	mov	r4, r1
 800c12e:	d507      	bpl.n	800c140 <__smakebuf_r+0x1c>
 800c130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	6123      	str	r3, [r4, #16]
 800c138:	2301      	movs	r3, #1
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	b002      	add	sp, #8
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	ab01      	add	r3, sp, #4
 800c142:	466a      	mov	r2, sp
 800c144:	f7ff ffca 	bl	800c0dc <__swhatbuf_r>
 800c148:	9900      	ldr	r1, [sp, #0]
 800c14a:	4605      	mov	r5, r0
 800c14c:	4630      	mov	r0, r6
 800c14e:	f000 f879 	bl	800c244 <_malloc_r>
 800c152:	b948      	cbnz	r0, 800c168 <__smakebuf_r+0x44>
 800c154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c158:	059a      	lsls	r2, r3, #22
 800c15a:	d4ef      	bmi.n	800c13c <__smakebuf_r+0x18>
 800c15c:	f023 0303 	bic.w	r3, r3, #3
 800c160:	f043 0302 	orr.w	r3, r3, #2
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	e7e3      	b.n	800c130 <__smakebuf_r+0xc>
 800c168:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <__smakebuf_r+0x7c>)
 800c16a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	6020      	str	r0, [r4, #0]
 800c170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	9b00      	ldr	r3, [sp, #0]
 800c178:	6163      	str	r3, [r4, #20]
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	6120      	str	r0, [r4, #16]
 800c17e:	b15b      	cbz	r3, 800c198 <__smakebuf_r+0x74>
 800c180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c184:	4630      	mov	r0, r6
 800c186:	f000 fc2d 	bl	800c9e4 <_isatty_r>
 800c18a:	b128      	cbz	r0, 800c198 <__smakebuf_r+0x74>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	f043 0301 	orr.w	r3, r3, #1
 800c196:	81a3      	strh	r3, [r4, #12]
 800c198:	89a0      	ldrh	r0, [r4, #12]
 800c19a:	4305      	orrs	r5, r0
 800c19c:	81a5      	strh	r5, [r4, #12]
 800c19e:	e7cd      	b.n	800c13c <__smakebuf_r+0x18>
 800c1a0:	0800bf35 	.word	0x0800bf35

0800c1a4 <_free_r>:
 800c1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1a6:	2900      	cmp	r1, #0
 800c1a8:	d048      	beq.n	800c23c <_free_r+0x98>
 800c1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ae:	9001      	str	r0, [sp, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1b6:	bfb8      	it	lt
 800c1b8:	18e4      	addlt	r4, r4, r3
 800c1ba:	f000 fc35 	bl	800ca28 <__malloc_lock>
 800c1be:	4a20      	ldr	r2, [pc, #128]	; (800c240 <_free_r+0x9c>)
 800c1c0:	9801      	ldr	r0, [sp, #4]
 800c1c2:	6813      	ldr	r3, [r2, #0]
 800c1c4:	4615      	mov	r5, r2
 800c1c6:	b933      	cbnz	r3, 800c1d6 <_free_r+0x32>
 800c1c8:	6063      	str	r3, [r4, #4]
 800c1ca:	6014      	str	r4, [r2, #0]
 800c1cc:	b003      	add	sp, #12
 800c1ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1d2:	f000 bc2f 	b.w	800ca34 <__malloc_unlock>
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	d90b      	bls.n	800c1f2 <_free_r+0x4e>
 800c1da:	6821      	ldr	r1, [r4, #0]
 800c1dc:	1862      	adds	r2, r4, r1
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	bf04      	itt	eq
 800c1e2:	681a      	ldreq	r2, [r3, #0]
 800c1e4:	685b      	ldreq	r3, [r3, #4]
 800c1e6:	6063      	str	r3, [r4, #4]
 800c1e8:	bf04      	itt	eq
 800c1ea:	1852      	addeq	r2, r2, r1
 800c1ec:	6022      	streq	r2, [r4, #0]
 800c1ee:	602c      	str	r4, [r5, #0]
 800c1f0:	e7ec      	b.n	800c1cc <_free_r+0x28>
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	b10b      	cbz	r3, 800c1fc <_free_r+0x58>
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	d9fa      	bls.n	800c1f2 <_free_r+0x4e>
 800c1fc:	6811      	ldr	r1, [r2, #0]
 800c1fe:	1855      	adds	r5, r2, r1
 800c200:	42a5      	cmp	r5, r4
 800c202:	d10b      	bne.n	800c21c <_free_r+0x78>
 800c204:	6824      	ldr	r4, [r4, #0]
 800c206:	4421      	add	r1, r4
 800c208:	1854      	adds	r4, r2, r1
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	6011      	str	r1, [r2, #0]
 800c20e:	d1dd      	bne.n	800c1cc <_free_r+0x28>
 800c210:	681c      	ldr	r4, [r3, #0]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	6053      	str	r3, [r2, #4]
 800c216:	4421      	add	r1, r4
 800c218:	6011      	str	r1, [r2, #0]
 800c21a:	e7d7      	b.n	800c1cc <_free_r+0x28>
 800c21c:	d902      	bls.n	800c224 <_free_r+0x80>
 800c21e:	230c      	movs	r3, #12
 800c220:	6003      	str	r3, [r0, #0]
 800c222:	e7d3      	b.n	800c1cc <_free_r+0x28>
 800c224:	6825      	ldr	r5, [r4, #0]
 800c226:	1961      	adds	r1, r4, r5
 800c228:	428b      	cmp	r3, r1
 800c22a:	bf04      	itt	eq
 800c22c:	6819      	ldreq	r1, [r3, #0]
 800c22e:	685b      	ldreq	r3, [r3, #4]
 800c230:	6063      	str	r3, [r4, #4]
 800c232:	bf04      	itt	eq
 800c234:	1949      	addeq	r1, r1, r5
 800c236:	6021      	streq	r1, [r4, #0]
 800c238:	6054      	str	r4, [r2, #4]
 800c23a:	e7c7      	b.n	800c1cc <_free_r+0x28>
 800c23c:	b003      	add	sp, #12
 800c23e:	bd30      	pop	{r4, r5, pc}
 800c240:	200019ac 	.word	0x200019ac

0800c244 <_malloc_r>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	1ccd      	adds	r5, r1, #3
 800c248:	f025 0503 	bic.w	r5, r5, #3
 800c24c:	3508      	adds	r5, #8
 800c24e:	2d0c      	cmp	r5, #12
 800c250:	bf38      	it	cc
 800c252:	250c      	movcc	r5, #12
 800c254:	2d00      	cmp	r5, #0
 800c256:	4606      	mov	r6, r0
 800c258:	db01      	blt.n	800c25e <_malloc_r+0x1a>
 800c25a:	42a9      	cmp	r1, r5
 800c25c:	d903      	bls.n	800c266 <_malloc_r+0x22>
 800c25e:	230c      	movs	r3, #12
 800c260:	6033      	str	r3, [r6, #0]
 800c262:	2000      	movs	r0, #0
 800c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c266:	f000 fbdf 	bl	800ca28 <__malloc_lock>
 800c26a:	4921      	ldr	r1, [pc, #132]	; (800c2f0 <_malloc_r+0xac>)
 800c26c:	680a      	ldr	r2, [r1, #0]
 800c26e:	4614      	mov	r4, r2
 800c270:	b99c      	cbnz	r4, 800c29a <_malloc_r+0x56>
 800c272:	4f20      	ldr	r7, [pc, #128]	; (800c2f4 <_malloc_r+0xb0>)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	b923      	cbnz	r3, 800c282 <_malloc_r+0x3e>
 800c278:	4621      	mov	r1, r4
 800c27a:	4630      	mov	r0, r6
 800c27c:	f000 fb2a 	bl	800c8d4 <_sbrk_r>
 800c280:	6038      	str	r0, [r7, #0]
 800c282:	4629      	mov	r1, r5
 800c284:	4630      	mov	r0, r6
 800c286:	f000 fb25 	bl	800c8d4 <_sbrk_r>
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	d123      	bne.n	800c2d6 <_malloc_r+0x92>
 800c28e:	230c      	movs	r3, #12
 800c290:	6033      	str	r3, [r6, #0]
 800c292:	4630      	mov	r0, r6
 800c294:	f000 fbce 	bl	800ca34 <__malloc_unlock>
 800c298:	e7e3      	b.n	800c262 <_malloc_r+0x1e>
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	1b5b      	subs	r3, r3, r5
 800c29e:	d417      	bmi.n	800c2d0 <_malloc_r+0x8c>
 800c2a0:	2b0b      	cmp	r3, #11
 800c2a2:	d903      	bls.n	800c2ac <_malloc_r+0x68>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	441c      	add	r4, r3
 800c2a8:	6025      	str	r5, [r4, #0]
 800c2aa:	e004      	b.n	800c2b6 <_malloc_r+0x72>
 800c2ac:	6863      	ldr	r3, [r4, #4]
 800c2ae:	42a2      	cmp	r2, r4
 800c2b0:	bf0c      	ite	eq
 800c2b2:	600b      	streq	r3, [r1, #0]
 800c2b4:	6053      	strne	r3, [r2, #4]
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f000 fbbc 	bl	800ca34 <__malloc_unlock>
 800c2bc:	f104 000b 	add.w	r0, r4, #11
 800c2c0:	1d23      	adds	r3, r4, #4
 800c2c2:	f020 0007 	bic.w	r0, r0, #7
 800c2c6:	1ac2      	subs	r2, r0, r3
 800c2c8:	d0cc      	beq.n	800c264 <_malloc_r+0x20>
 800c2ca:	1a1b      	subs	r3, r3, r0
 800c2cc:	50a3      	str	r3, [r4, r2]
 800c2ce:	e7c9      	b.n	800c264 <_malloc_r+0x20>
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	6864      	ldr	r4, [r4, #4]
 800c2d4:	e7cc      	b.n	800c270 <_malloc_r+0x2c>
 800c2d6:	1cc4      	adds	r4, r0, #3
 800c2d8:	f024 0403 	bic.w	r4, r4, #3
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d0e3      	beq.n	800c2a8 <_malloc_r+0x64>
 800c2e0:	1a21      	subs	r1, r4, r0
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f000 faf6 	bl	800c8d4 <_sbrk_r>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d1dd      	bne.n	800c2a8 <_malloc_r+0x64>
 800c2ec:	e7cf      	b.n	800c28e <_malloc_r+0x4a>
 800c2ee:	bf00      	nop
 800c2f0:	200019ac 	.word	0x200019ac
 800c2f4:	200019b0 	.word	0x200019b0

0800c2f8 <__sfputc_r>:
 800c2f8:	6893      	ldr	r3, [r2, #8]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	b410      	push	{r4}
 800c300:	6093      	str	r3, [r2, #8]
 800c302:	da08      	bge.n	800c316 <__sfputc_r+0x1e>
 800c304:	6994      	ldr	r4, [r2, #24]
 800c306:	42a3      	cmp	r3, r4
 800c308:	db01      	blt.n	800c30e <__sfputc_r+0x16>
 800c30a:	290a      	cmp	r1, #10
 800c30c:	d103      	bne.n	800c316 <__sfputc_r+0x1e>
 800c30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c312:	f7ff bc69 	b.w	800bbe8 <__swbuf_r>
 800c316:	6813      	ldr	r3, [r2, #0]
 800c318:	1c58      	adds	r0, r3, #1
 800c31a:	6010      	str	r0, [r2, #0]
 800c31c:	7019      	strb	r1, [r3, #0]
 800c31e:	4608      	mov	r0, r1
 800c320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <__sfputs_r>:
 800c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	4614      	mov	r4, r2
 800c32e:	18d5      	adds	r5, r2, r3
 800c330:	42ac      	cmp	r4, r5
 800c332:	d101      	bne.n	800c338 <__sfputs_r+0x12>
 800c334:	2000      	movs	r0, #0
 800c336:	e007      	b.n	800c348 <__sfputs_r+0x22>
 800c338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33c:	463a      	mov	r2, r7
 800c33e:	4630      	mov	r0, r6
 800c340:	f7ff ffda 	bl	800c2f8 <__sfputc_r>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d1f3      	bne.n	800c330 <__sfputs_r+0xa>
 800c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c34c <_vfiprintf_r>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	460d      	mov	r5, r1
 800c352:	b09d      	sub	sp, #116	; 0x74
 800c354:	4614      	mov	r4, r2
 800c356:	4698      	mov	r8, r3
 800c358:	4606      	mov	r6, r0
 800c35a:	b118      	cbz	r0, 800c364 <_vfiprintf_r+0x18>
 800c35c:	6983      	ldr	r3, [r0, #24]
 800c35e:	b90b      	cbnz	r3, 800c364 <_vfiprintf_r+0x18>
 800c360:	f7ff fe1c 	bl	800bf9c <__sinit>
 800c364:	4b89      	ldr	r3, [pc, #548]	; (800c58c <_vfiprintf_r+0x240>)
 800c366:	429d      	cmp	r5, r3
 800c368:	d11b      	bne.n	800c3a2 <_vfiprintf_r+0x56>
 800c36a:	6875      	ldr	r5, [r6, #4]
 800c36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c36e:	07d9      	lsls	r1, r3, #31
 800c370:	d405      	bmi.n	800c37e <_vfiprintf_r+0x32>
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d402      	bmi.n	800c37e <_vfiprintf_r+0x32>
 800c378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c37a:	f7ff fead 	bl	800c0d8 <__retarget_lock_acquire_recursive>
 800c37e:	89ab      	ldrh	r3, [r5, #12]
 800c380:	071b      	lsls	r3, r3, #28
 800c382:	d501      	bpl.n	800c388 <_vfiprintf_r+0x3c>
 800c384:	692b      	ldr	r3, [r5, #16]
 800c386:	b9eb      	cbnz	r3, 800c3c4 <_vfiprintf_r+0x78>
 800c388:	4629      	mov	r1, r5
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff fc7e 	bl	800bc8c <__swsetup_r>
 800c390:	b1c0      	cbz	r0, 800c3c4 <_vfiprintf_r+0x78>
 800c392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c394:	07dc      	lsls	r4, r3, #31
 800c396:	d50e      	bpl.n	800c3b6 <_vfiprintf_r+0x6a>
 800c398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c39c:	b01d      	add	sp, #116	; 0x74
 800c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a2:	4b7b      	ldr	r3, [pc, #492]	; (800c590 <_vfiprintf_r+0x244>)
 800c3a4:	429d      	cmp	r5, r3
 800c3a6:	d101      	bne.n	800c3ac <_vfiprintf_r+0x60>
 800c3a8:	68b5      	ldr	r5, [r6, #8]
 800c3aa:	e7df      	b.n	800c36c <_vfiprintf_r+0x20>
 800c3ac:	4b79      	ldr	r3, [pc, #484]	; (800c594 <_vfiprintf_r+0x248>)
 800c3ae:	429d      	cmp	r5, r3
 800c3b0:	bf08      	it	eq
 800c3b2:	68f5      	ldreq	r5, [r6, #12]
 800c3b4:	e7da      	b.n	800c36c <_vfiprintf_r+0x20>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	0598      	lsls	r0, r3, #22
 800c3ba:	d4ed      	bmi.n	800c398 <_vfiprintf_r+0x4c>
 800c3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3be:	f7ff fe8c 	bl	800c0da <__retarget_lock_release_recursive>
 800c3c2:	e7e9      	b.n	800c398 <_vfiprintf_r+0x4c>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c8:	2320      	movs	r3, #32
 800c3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3d2:	2330      	movs	r3, #48	; 0x30
 800c3d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c598 <_vfiprintf_r+0x24c>
 800c3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3dc:	f04f 0901 	mov.w	r9, #1
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	469a      	mov	sl, r3
 800c3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e8:	b10a      	cbz	r2, 800c3ee <_vfiprintf_r+0xa2>
 800c3ea:	2a25      	cmp	r2, #37	; 0x25
 800c3ec:	d1f9      	bne.n	800c3e2 <_vfiprintf_r+0x96>
 800c3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c3f2:	d00b      	beq.n	800c40c <_vfiprintf_r+0xc0>
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f7ff ff93 	bl	800c326 <__sfputs_r>
 800c400:	3001      	adds	r0, #1
 800c402:	f000 80aa 	beq.w	800c55a <_vfiprintf_r+0x20e>
 800c406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c408:	445a      	add	r2, fp
 800c40a:	9209      	str	r2, [sp, #36]	; 0x24
 800c40c:	f89a 3000 	ldrb.w	r3, [sl]
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 80a2 	beq.w	800c55a <_vfiprintf_r+0x20e>
 800c416:	2300      	movs	r3, #0
 800c418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c420:	f10a 0a01 	add.w	sl, sl, #1
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	9307      	str	r3, [sp, #28]
 800c428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c42c:	931a      	str	r3, [sp, #104]	; 0x68
 800c42e:	4654      	mov	r4, sl
 800c430:	2205      	movs	r2, #5
 800c432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c436:	4858      	ldr	r0, [pc, #352]	; (800c598 <_vfiprintf_r+0x24c>)
 800c438:	f7f3 fed2 	bl	80001e0 <memchr>
 800c43c:	9a04      	ldr	r2, [sp, #16]
 800c43e:	b9d8      	cbnz	r0, 800c478 <_vfiprintf_r+0x12c>
 800c440:	06d1      	lsls	r1, r2, #27
 800c442:	bf44      	itt	mi
 800c444:	2320      	movmi	r3, #32
 800c446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44a:	0713      	lsls	r3, r2, #28
 800c44c:	bf44      	itt	mi
 800c44e:	232b      	movmi	r3, #43	; 0x2b
 800c450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c454:	f89a 3000 	ldrb.w	r3, [sl]
 800c458:	2b2a      	cmp	r3, #42	; 0x2a
 800c45a:	d015      	beq.n	800c488 <_vfiprintf_r+0x13c>
 800c45c:	9a07      	ldr	r2, [sp, #28]
 800c45e:	4654      	mov	r4, sl
 800c460:	2000      	movs	r0, #0
 800c462:	f04f 0c0a 	mov.w	ip, #10
 800c466:	4621      	mov	r1, r4
 800c468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c46c:	3b30      	subs	r3, #48	; 0x30
 800c46e:	2b09      	cmp	r3, #9
 800c470:	d94e      	bls.n	800c510 <_vfiprintf_r+0x1c4>
 800c472:	b1b0      	cbz	r0, 800c4a2 <_vfiprintf_r+0x156>
 800c474:	9207      	str	r2, [sp, #28]
 800c476:	e014      	b.n	800c4a2 <_vfiprintf_r+0x156>
 800c478:	eba0 0308 	sub.w	r3, r0, r8
 800c47c:	fa09 f303 	lsl.w	r3, r9, r3
 800c480:	4313      	orrs	r3, r2
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	46a2      	mov	sl, r4
 800c486:	e7d2      	b.n	800c42e <_vfiprintf_r+0xe2>
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	1d19      	adds	r1, r3, #4
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	9103      	str	r1, [sp, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bfbb      	ittet	lt
 800c494:	425b      	neglt	r3, r3
 800c496:	f042 0202 	orrlt.w	r2, r2, #2
 800c49a:	9307      	strge	r3, [sp, #28]
 800c49c:	9307      	strlt	r3, [sp, #28]
 800c49e:	bfb8      	it	lt
 800c4a0:	9204      	strlt	r2, [sp, #16]
 800c4a2:	7823      	ldrb	r3, [r4, #0]
 800c4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a6:	d10c      	bne.n	800c4c2 <_vfiprintf_r+0x176>
 800c4a8:	7863      	ldrb	r3, [r4, #1]
 800c4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ac:	d135      	bne.n	800c51a <_vfiprintf_r+0x1ce>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	9203      	str	r2, [sp, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfb8      	it	lt
 800c4ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c4be:	3402      	adds	r4, #2
 800c4c0:	9305      	str	r3, [sp, #20]
 800c4c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5a8 <_vfiprintf_r+0x25c>
 800c4c6:	7821      	ldrb	r1, [r4, #0]
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	4650      	mov	r0, sl
 800c4cc:	f7f3 fe88 	bl	80001e0 <memchr>
 800c4d0:	b140      	cbz	r0, 800c4e4 <_vfiprintf_r+0x198>
 800c4d2:	2340      	movs	r3, #64	; 0x40
 800c4d4:	eba0 000a 	sub.w	r0, r0, sl
 800c4d8:	fa03 f000 	lsl.w	r0, r3, r0
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	4303      	orrs	r3, r0
 800c4e0:	3401      	adds	r4, #1
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e8:	482c      	ldr	r0, [pc, #176]	; (800c59c <_vfiprintf_r+0x250>)
 800c4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4ee:	2206      	movs	r2, #6
 800c4f0:	f7f3 fe76 	bl	80001e0 <memchr>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d03f      	beq.n	800c578 <_vfiprintf_r+0x22c>
 800c4f8:	4b29      	ldr	r3, [pc, #164]	; (800c5a0 <_vfiprintf_r+0x254>)
 800c4fa:	bb1b      	cbnz	r3, 800c544 <_vfiprintf_r+0x1f8>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	3307      	adds	r3, #7
 800c500:	f023 0307 	bic.w	r3, r3, #7
 800c504:	3308      	adds	r3, #8
 800c506:	9303      	str	r3, [sp, #12]
 800c508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50a:	443b      	add	r3, r7
 800c50c:	9309      	str	r3, [sp, #36]	; 0x24
 800c50e:	e767      	b.n	800c3e0 <_vfiprintf_r+0x94>
 800c510:	fb0c 3202 	mla	r2, ip, r2, r3
 800c514:	460c      	mov	r4, r1
 800c516:	2001      	movs	r0, #1
 800c518:	e7a5      	b.n	800c466 <_vfiprintf_r+0x11a>
 800c51a:	2300      	movs	r3, #0
 800c51c:	3401      	adds	r4, #1
 800c51e:	9305      	str	r3, [sp, #20]
 800c520:	4619      	mov	r1, r3
 800c522:	f04f 0c0a 	mov.w	ip, #10
 800c526:	4620      	mov	r0, r4
 800c528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c52c:	3a30      	subs	r2, #48	; 0x30
 800c52e:	2a09      	cmp	r2, #9
 800c530:	d903      	bls.n	800c53a <_vfiprintf_r+0x1ee>
 800c532:	2b00      	cmp	r3, #0
 800c534:	d0c5      	beq.n	800c4c2 <_vfiprintf_r+0x176>
 800c536:	9105      	str	r1, [sp, #20]
 800c538:	e7c3      	b.n	800c4c2 <_vfiprintf_r+0x176>
 800c53a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c53e:	4604      	mov	r4, r0
 800c540:	2301      	movs	r3, #1
 800c542:	e7f0      	b.n	800c526 <_vfiprintf_r+0x1da>
 800c544:	ab03      	add	r3, sp, #12
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	462a      	mov	r2, r5
 800c54a:	4b16      	ldr	r3, [pc, #88]	; (800c5a4 <_vfiprintf_r+0x258>)
 800c54c:	a904      	add	r1, sp, #16
 800c54e:	4630      	mov	r0, r6
 800c550:	f3af 8000 	nop.w
 800c554:	4607      	mov	r7, r0
 800c556:	1c78      	adds	r0, r7, #1
 800c558:	d1d6      	bne.n	800c508 <_vfiprintf_r+0x1bc>
 800c55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c55c:	07d9      	lsls	r1, r3, #31
 800c55e:	d405      	bmi.n	800c56c <_vfiprintf_r+0x220>
 800c560:	89ab      	ldrh	r3, [r5, #12]
 800c562:	059a      	lsls	r2, r3, #22
 800c564:	d402      	bmi.n	800c56c <_vfiprintf_r+0x220>
 800c566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c568:	f7ff fdb7 	bl	800c0da <__retarget_lock_release_recursive>
 800c56c:	89ab      	ldrh	r3, [r5, #12]
 800c56e:	065b      	lsls	r3, r3, #25
 800c570:	f53f af12 	bmi.w	800c398 <_vfiprintf_r+0x4c>
 800c574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c576:	e711      	b.n	800c39c <_vfiprintf_r+0x50>
 800c578:	ab03      	add	r3, sp, #12
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	462a      	mov	r2, r5
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <_vfiprintf_r+0x258>)
 800c580:	a904      	add	r1, sp, #16
 800c582:	4630      	mov	r0, r6
 800c584:	f000 f880 	bl	800c688 <_printf_i>
 800c588:	e7e4      	b.n	800c554 <_vfiprintf_r+0x208>
 800c58a:	bf00      	nop
 800c58c:	0800d200 	.word	0x0800d200
 800c590:	0800d220 	.word	0x0800d220
 800c594:	0800d1e0 	.word	0x0800d1e0
 800c598:	0800d240 	.word	0x0800d240
 800c59c:	0800d24a 	.word	0x0800d24a
 800c5a0:	00000000 	.word	0x00000000
 800c5a4:	0800c327 	.word	0x0800c327
 800c5a8:	0800d246 	.word	0x0800d246

0800c5ac <_printf_common>:
 800c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	4616      	mov	r6, r2
 800c5b2:	4699      	mov	r9, r3
 800c5b4:	688a      	ldr	r2, [r1, #8]
 800c5b6:	690b      	ldr	r3, [r1, #16]
 800c5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	bfb8      	it	lt
 800c5c0:	4613      	movlt	r3, r2
 800c5c2:	6033      	str	r3, [r6, #0]
 800c5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	b10a      	cbz	r2, 800c5d2 <_printf_common+0x26>
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	6033      	str	r3, [r6, #0]
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	0699      	lsls	r1, r3, #26
 800c5d6:	bf42      	ittt	mi
 800c5d8:	6833      	ldrmi	r3, [r6, #0]
 800c5da:	3302      	addmi	r3, #2
 800c5dc:	6033      	strmi	r3, [r6, #0]
 800c5de:	6825      	ldr	r5, [r4, #0]
 800c5e0:	f015 0506 	ands.w	r5, r5, #6
 800c5e4:	d106      	bne.n	800c5f4 <_printf_common+0x48>
 800c5e6:	f104 0a19 	add.w	sl, r4, #25
 800c5ea:	68e3      	ldr	r3, [r4, #12]
 800c5ec:	6832      	ldr	r2, [r6, #0]
 800c5ee:	1a9b      	subs	r3, r3, r2
 800c5f0:	42ab      	cmp	r3, r5
 800c5f2:	dc26      	bgt.n	800c642 <_printf_common+0x96>
 800c5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5f8:	1e13      	subs	r3, r2, #0
 800c5fa:	6822      	ldr	r2, [r4, #0]
 800c5fc:	bf18      	it	ne
 800c5fe:	2301      	movne	r3, #1
 800c600:	0692      	lsls	r2, r2, #26
 800c602:	d42b      	bmi.n	800c65c <_printf_common+0xb0>
 800c604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c608:	4649      	mov	r1, r9
 800c60a:	4638      	mov	r0, r7
 800c60c:	47c0      	blx	r8
 800c60e:	3001      	adds	r0, #1
 800c610:	d01e      	beq.n	800c650 <_printf_common+0xa4>
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	68e5      	ldr	r5, [r4, #12]
 800c616:	6832      	ldr	r2, [r6, #0]
 800c618:	f003 0306 	and.w	r3, r3, #6
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	bf08      	it	eq
 800c620:	1aad      	subeq	r5, r5, r2
 800c622:	68a3      	ldr	r3, [r4, #8]
 800c624:	6922      	ldr	r2, [r4, #16]
 800c626:	bf0c      	ite	eq
 800c628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c62c:	2500      	movne	r5, #0
 800c62e:	4293      	cmp	r3, r2
 800c630:	bfc4      	itt	gt
 800c632:	1a9b      	subgt	r3, r3, r2
 800c634:	18ed      	addgt	r5, r5, r3
 800c636:	2600      	movs	r6, #0
 800c638:	341a      	adds	r4, #26
 800c63a:	42b5      	cmp	r5, r6
 800c63c:	d11a      	bne.n	800c674 <_printf_common+0xc8>
 800c63e:	2000      	movs	r0, #0
 800c640:	e008      	b.n	800c654 <_printf_common+0xa8>
 800c642:	2301      	movs	r3, #1
 800c644:	4652      	mov	r2, sl
 800c646:	4649      	mov	r1, r9
 800c648:	4638      	mov	r0, r7
 800c64a:	47c0      	blx	r8
 800c64c:	3001      	adds	r0, #1
 800c64e:	d103      	bne.n	800c658 <_printf_common+0xac>
 800c650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c658:	3501      	adds	r5, #1
 800c65a:	e7c6      	b.n	800c5ea <_printf_common+0x3e>
 800c65c:	18e1      	adds	r1, r4, r3
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	2030      	movs	r0, #48	; 0x30
 800c662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c666:	4422      	add	r2, r4
 800c668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c670:	3302      	adds	r3, #2
 800c672:	e7c7      	b.n	800c604 <_printf_common+0x58>
 800c674:	2301      	movs	r3, #1
 800c676:	4622      	mov	r2, r4
 800c678:	4649      	mov	r1, r9
 800c67a:	4638      	mov	r0, r7
 800c67c:	47c0      	blx	r8
 800c67e:	3001      	adds	r0, #1
 800c680:	d0e6      	beq.n	800c650 <_printf_common+0xa4>
 800c682:	3601      	adds	r6, #1
 800c684:	e7d9      	b.n	800c63a <_printf_common+0x8e>
	...

0800c688 <_printf_i>:
 800c688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c68c:	460c      	mov	r4, r1
 800c68e:	4691      	mov	r9, r2
 800c690:	7e27      	ldrb	r7, [r4, #24]
 800c692:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c694:	2f78      	cmp	r7, #120	; 0x78
 800c696:	4680      	mov	r8, r0
 800c698:	469a      	mov	sl, r3
 800c69a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c69e:	d807      	bhi.n	800c6b0 <_printf_i+0x28>
 800c6a0:	2f62      	cmp	r7, #98	; 0x62
 800c6a2:	d80a      	bhi.n	800c6ba <_printf_i+0x32>
 800c6a4:	2f00      	cmp	r7, #0
 800c6a6:	f000 80d8 	beq.w	800c85a <_printf_i+0x1d2>
 800c6aa:	2f58      	cmp	r7, #88	; 0x58
 800c6ac:	f000 80a3 	beq.w	800c7f6 <_printf_i+0x16e>
 800c6b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6b8:	e03a      	b.n	800c730 <_printf_i+0xa8>
 800c6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6be:	2b15      	cmp	r3, #21
 800c6c0:	d8f6      	bhi.n	800c6b0 <_printf_i+0x28>
 800c6c2:	a001      	add	r0, pc, #4	; (adr r0, 800c6c8 <_printf_i+0x40>)
 800c6c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c6c8:	0800c721 	.word	0x0800c721
 800c6cc:	0800c735 	.word	0x0800c735
 800c6d0:	0800c6b1 	.word	0x0800c6b1
 800c6d4:	0800c6b1 	.word	0x0800c6b1
 800c6d8:	0800c6b1 	.word	0x0800c6b1
 800c6dc:	0800c6b1 	.word	0x0800c6b1
 800c6e0:	0800c735 	.word	0x0800c735
 800c6e4:	0800c6b1 	.word	0x0800c6b1
 800c6e8:	0800c6b1 	.word	0x0800c6b1
 800c6ec:	0800c6b1 	.word	0x0800c6b1
 800c6f0:	0800c6b1 	.word	0x0800c6b1
 800c6f4:	0800c841 	.word	0x0800c841
 800c6f8:	0800c765 	.word	0x0800c765
 800c6fc:	0800c823 	.word	0x0800c823
 800c700:	0800c6b1 	.word	0x0800c6b1
 800c704:	0800c6b1 	.word	0x0800c6b1
 800c708:	0800c863 	.word	0x0800c863
 800c70c:	0800c6b1 	.word	0x0800c6b1
 800c710:	0800c765 	.word	0x0800c765
 800c714:	0800c6b1 	.word	0x0800c6b1
 800c718:	0800c6b1 	.word	0x0800c6b1
 800c71c:	0800c82b 	.word	0x0800c82b
 800c720:	680b      	ldr	r3, [r1, #0]
 800c722:	1d1a      	adds	r2, r3, #4
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	600a      	str	r2, [r1, #0]
 800c728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c730:	2301      	movs	r3, #1
 800c732:	e0a3      	b.n	800c87c <_printf_i+0x1f4>
 800c734:	6825      	ldr	r5, [r4, #0]
 800c736:	6808      	ldr	r0, [r1, #0]
 800c738:	062e      	lsls	r6, r5, #24
 800c73a:	f100 0304 	add.w	r3, r0, #4
 800c73e:	d50a      	bpl.n	800c756 <_printf_i+0xce>
 800c740:	6805      	ldr	r5, [r0, #0]
 800c742:	600b      	str	r3, [r1, #0]
 800c744:	2d00      	cmp	r5, #0
 800c746:	da03      	bge.n	800c750 <_printf_i+0xc8>
 800c748:	232d      	movs	r3, #45	; 0x2d
 800c74a:	426d      	negs	r5, r5
 800c74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c750:	485e      	ldr	r0, [pc, #376]	; (800c8cc <_printf_i+0x244>)
 800c752:	230a      	movs	r3, #10
 800c754:	e019      	b.n	800c78a <_printf_i+0x102>
 800c756:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c75a:	6805      	ldr	r5, [r0, #0]
 800c75c:	600b      	str	r3, [r1, #0]
 800c75e:	bf18      	it	ne
 800c760:	b22d      	sxthne	r5, r5
 800c762:	e7ef      	b.n	800c744 <_printf_i+0xbc>
 800c764:	680b      	ldr	r3, [r1, #0]
 800c766:	6825      	ldr	r5, [r4, #0]
 800c768:	1d18      	adds	r0, r3, #4
 800c76a:	6008      	str	r0, [r1, #0]
 800c76c:	0628      	lsls	r0, r5, #24
 800c76e:	d501      	bpl.n	800c774 <_printf_i+0xec>
 800c770:	681d      	ldr	r5, [r3, #0]
 800c772:	e002      	b.n	800c77a <_printf_i+0xf2>
 800c774:	0669      	lsls	r1, r5, #25
 800c776:	d5fb      	bpl.n	800c770 <_printf_i+0xe8>
 800c778:	881d      	ldrh	r5, [r3, #0]
 800c77a:	4854      	ldr	r0, [pc, #336]	; (800c8cc <_printf_i+0x244>)
 800c77c:	2f6f      	cmp	r7, #111	; 0x6f
 800c77e:	bf0c      	ite	eq
 800c780:	2308      	moveq	r3, #8
 800c782:	230a      	movne	r3, #10
 800c784:	2100      	movs	r1, #0
 800c786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c78a:	6866      	ldr	r6, [r4, #4]
 800c78c:	60a6      	str	r6, [r4, #8]
 800c78e:	2e00      	cmp	r6, #0
 800c790:	bfa2      	ittt	ge
 800c792:	6821      	ldrge	r1, [r4, #0]
 800c794:	f021 0104 	bicge.w	r1, r1, #4
 800c798:	6021      	strge	r1, [r4, #0]
 800c79a:	b90d      	cbnz	r5, 800c7a0 <_printf_i+0x118>
 800c79c:	2e00      	cmp	r6, #0
 800c79e:	d04d      	beq.n	800c83c <_printf_i+0x1b4>
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7a6:	fb03 5711 	mls	r7, r3, r1, r5
 800c7aa:	5dc7      	ldrb	r7, [r0, r7]
 800c7ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7b0:	462f      	mov	r7, r5
 800c7b2:	42bb      	cmp	r3, r7
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	d9f4      	bls.n	800c7a2 <_printf_i+0x11a>
 800c7b8:	2b08      	cmp	r3, #8
 800c7ba:	d10b      	bne.n	800c7d4 <_printf_i+0x14c>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	07df      	lsls	r7, r3, #31
 800c7c0:	d508      	bpl.n	800c7d4 <_printf_i+0x14c>
 800c7c2:	6923      	ldr	r3, [r4, #16]
 800c7c4:	6861      	ldr	r1, [r4, #4]
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	bfde      	ittt	le
 800c7ca:	2330      	movle	r3, #48	; 0x30
 800c7cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c7d4:	1b92      	subs	r2, r2, r6
 800c7d6:	6122      	str	r2, [r4, #16]
 800c7d8:	f8cd a000 	str.w	sl, [sp]
 800c7dc:	464b      	mov	r3, r9
 800c7de:	aa03      	add	r2, sp, #12
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	f7ff fee2 	bl	800c5ac <_printf_common>
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d14c      	bne.n	800c886 <_printf_i+0x1fe>
 800c7ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f0:	b004      	add	sp, #16
 800c7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f6:	4835      	ldr	r0, [pc, #212]	; (800c8cc <_printf_i+0x244>)
 800c7f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	680e      	ldr	r6, [r1, #0]
 800c800:	061f      	lsls	r7, r3, #24
 800c802:	f856 5b04 	ldr.w	r5, [r6], #4
 800c806:	600e      	str	r6, [r1, #0]
 800c808:	d514      	bpl.n	800c834 <_printf_i+0x1ac>
 800c80a:	07d9      	lsls	r1, r3, #31
 800c80c:	bf44      	itt	mi
 800c80e:	f043 0320 	orrmi.w	r3, r3, #32
 800c812:	6023      	strmi	r3, [r4, #0]
 800c814:	b91d      	cbnz	r5, 800c81e <_printf_i+0x196>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	f023 0320 	bic.w	r3, r3, #32
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	2310      	movs	r3, #16
 800c820:	e7b0      	b.n	800c784 <_printf_i+0xfc>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	f043 0320 	orr.w	r3, r3, #32
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	2378      	movs	r3, #120	; 0x78
 800c82c:	4828      	ldr	r0, [pc, #160]	; (800c8d0 <_printf_i+0x248>)
 800c82e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c832:	e7e3      	b.n	800c7fc <_printf_i+0x174>
 800c834:	065e      	lsls	r6, r3, #25
 800c836:	bf48      	it	mi
 800c838:	b2ad      	uxthmi	r5, r5
 800c83a:	e7e6      	b.n	800c80a <_printf_i+0x182>
 800c83c:	4616      	mov	r6, r2
 800c83e:	e7bb      	b.n	800c7b8 <_printf_i+0x130>
 800c840:	680b      	ldr	r3, [r1, #0]
 800c842:	6826      	ldr	r6, [r4, #0]
 800c844:	6960      	ldr	r0, [r4, #20]
 800c846:	1d1d      	adds	r5, r3, #4
 800c848:	600d      	str	r5, [r1, #0]
 800c84a:	0635      	lsls	r5, r6, #24
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	d501      	bpl.n	800c854 <_printf_i+0x1cc>
 800c850:	6018      	str	r0, [r3, #0]
 800c852:	e002      	b.n	800c85a <_printf_i+0x1d2>
 800c854:	0671      	lsls	r1, r6, #25
 800c856:	d5fb      	bpl.n	800c850 <_printf_i+0x1c8>
 800c858:	8018      	strh	r0, [r3, #0]
 800c85a:	2300      	movs	r3, #0
 800c85c:	6123      	str	r3, [r4, #16]
 800c85e:	4616      	mov	r6, r2
 800c860:	e7ba      	b.n	800c7d8 <_printf_i+0x150>
 800c862:	680b      	ldr	r3, [r1, #0]
 800c864:	1d1a      	adds	r2, r3, #4
 800c866:	600a      	str	r2, [r1, #0]
 800c868:	681e      	ldr	r6, [r3, #0]
 800c86a:	6862      	ldr	r2, [r4, #4]
 800c86c:	2100      	movs	r1, #0
 800c86e:	4630      	mov	r0, r6
 800c870:	f7f3 fcb6 	bl	80001e0 <memchr>
 800c874:	b108      	cbz	r0, 800c87a <_printf_i+0x1f2>
 800c876:	1b80      	subs	r0, r0, r6
 800c878:	6060      	str	r0, [r4, #4]
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	6123      	str	r3, [r4, #16]
 800c87e:	2300      	movs	r3, #0
 800c880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c884:	e7a8      	b.n	800c7d8 <_printf_i+0x150>
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	4632      	mov	r2, r6
 800c88a:	4649      	mov	r1, r9
 800c88c:	4640      	mov	r0, r8
 800c88e:	47d0      	blx	sl
 800c890:	3001      	adds	r0, #1
 800c892:	d0ab      	beq.n	800c7ec <_printf_i+0x164>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	079b      	lsls	r3, r3, #30
 800c898:	d413      	bmi.n	800c8c2 <_printf_i+0x23a>
 800c89a:	68e0      	ldr	r0, [r4, #12]
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	4298      	cmp	r0, r3
 800c8a0:	bfb8      	it	lt
 800c8a2:	4618      	movlt	r0, r3
 800c8a4:	e7a4      	b.n	800c7f0 <_printf_i+0x168>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4632      	mov	r2, r6
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	47d0      	blx	sl
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d09b      	beq.n	800c7ec <_printf_i+0x164>
 800c8b4:	3501      	adds	r5, #1
 800c8b6:	68e3      	ldr	r3, [r4, #12]
 800c8b8:	9903      	ldr	r1, [sp, #12]
 800c8ba:	1a5b      	subs	r3, r3, r1
 800c8bc:	42ab      	cmp	r3, r5
 800c8be:	dcf2      	bgt.n	800c8a6 <_printf_i+0x21e>
 800c8c0:	e7eb      	b.n	800c89a <_printf_i+0x212>
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	f104 0619 	add.w	r6, r4, #25
 800c8c8:	e7f5      	b.n	800c8b6 <_printf_i+0x22e>
 800c8ca:	bf00      	nop
 800c8cc:	0800d251 	.word	0x0800d251
 800c8d0:	0800d262 	.word	0x0800d262

0800c8d4 <_sbrk_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d06      	ldr	r5, [pc, #24]	; (800c8f0 <_sbrk_r+0x1c>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	602b      	str	r3, [r5, #0]
 800c8e0:	f7f5 f8ae 	bl	8001a40 <_sbrk>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_sbrk_r+0x1a>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_sbrk_r+0x1a>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	2000dd2c 	.word	0x2000dd2c

0800c8f4 <__sread>:
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8fc:	f000 f8a0 	bl	800ca40 <_read_r>
 800c900:	2800      	cmp	r0, #0
 800c902:	bfab      	itete	ge
 800c904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c906:	89a3      	ldrhlt	r3, [r4, #12]
 800c908:	181b      	addge	r3, r3, r0
 800c90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c90e:	bfac      	ite	ge
 800c910:	6563      	strge	r3, [r4, #84]	; 0x54
 800c912:	81a3      	strhlt	r3, [r4, #12]
 800c914:	bd10      	pop	{r4, pc}

0800c916 <__swrite>:
 800c916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c91a:	461f      	mov	r7, r3
 800c91c:	898b      	ldrh	r3, [r1, #12]
 800c91e:	05db      	lsls	r3, r3, #23
 800c920:	4605      	mov	r5, r0
 800c922:	460c      	mov	r4, r1
 800c924:	4616      	mov	r6, r2
 800c926:	d505      	bpl.n	800c934 <__swrite+0x1e>
 800c928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92c:	2302      	movs	r3, #2
 800c92e:	2200      	movs	r2, #0
 800c930:	f000 f868 	bl	800ca04 <_lseek_r>
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	4632      	mov	r2, r6
 800c942:	463b      	mov	r3, r7
 800c944:	4628      	mov	r0, r5
 800c946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c94a:	f000 b817 	b.w	800c97c <_write_r>

0800c94e <__sseek>:
 800c94e:	b510      	push	{r4, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c956:	f000 f855 	bl	800ca04 <_lseek_r>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	bf15      	itete	ne
 800c960:	6560      	strne	r0, [r4, #84]	; 0x54
 800c962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c96a:	81a3      	strheq	r3, [r4, #12]
 800c96c:	bf18      	it	ne
 800c96e:	81a3      	strhne	r3, [r4, #12]
 800c970:	bd10      	pop	{r4, pc}

0800c972 <__sclose>:
 800c972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c976:	f000 b813 	b.w	800c9a0 <_close_r>
	...

0800c97c <_write_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d07      	ldr	r5, [pc, #28]	; (800c99c <_write_r+0x20>)
 800c980:	4604      	mov	r4, r0
 800c982:	4608      	mov	r0, r1
 800c984:	4611      	mov	r1, r2
 800c986:	2200      	movs	r2, #0
 800c988:	602a      	str	r2, [r5, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	f7f5 f807 	bl	800199e <_write>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_write_r+0x1e>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_write_r+0x1e>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	2000dd2c 	.word	0x2000dd2c

0800c9a0 <_close_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d06      	ldr	r5, [pc, #24]	; (800c9bc <_close_r+0x1c>)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	602b      	str	r3, [r5, #0]
 800c9ac:	f7f5 f813 	bl	80019d6 <_close>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	d102      	bne.n	800c9ba <_close_r+0x1a>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	b103      	cbz	r3, 800c9ba <_close_r+0x1a>
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	2000dd2c 	.word	0x2000dd2c

0800c9c0 <_fstat_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	; (800c9e0 <_fstat_r+0x20>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	f7f5 f80e 	bl	80019ee <_fstat>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d102      	bne.n	800c9dc <_fstat_r+0x1c>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b103      	cbz	r3, 800c9dc <_fstat_r+0x1c>
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	2000dd2c 	.word	0x2000dd2c

0800c9e4 <_isatty_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d06      	ldr	r5, [pc, #24]	; (800ca00 <_isatty_r+0x1c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f7f5 f80d 	bl	8001a0e <_isatty>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_isatty_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_isatty_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	2000dd2c 	.word	0x2000dd2c

0800ca04 <_lseek_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d07      	ldr	r5, [pc, #28]	; (800ca24 <_lseek_r+0x20>)
 800ca08:	4604      	mov	r4, r0
 800ca0a:	4608      	mov	r0, r1
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	602a      	str	r2, [r5, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	f7f5 f806 	bl	8001a24 <_lseek>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_lseek_r+0x1e>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_lseek_r+0x1e>
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	2000dd2c 	.word	0x2000dd2c

0800ca28 <__malloc_lock>:
 800ca28:	4801      	ldr	r0, [pc, #4]	; (800ca30 <__malloc_lock+0x8>)
 800ca2a:	f7ff bb55 	b.w	800c0d8 <__retarget_lock_acquire_recursive>
 800ca2e:	bf00      	nop
 800ca30:	2000dd24 	.word	0x2000dd24

0800ca34 <__malloc_unlock>:
 800ca34:	4801      	ldr	r0, [pc, #4]	; (800ca3c <__malloc_unlock+0x8>)
 800ca36:	f7ff bb50 	b.w	800c0da <__retarget_lock_release_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	2000dd24 	.word	0x2000dd24

0800ca40 <_read_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d07      	ldr	r5, [pc, #28]	; (800ca60 <_read_r+0x20>)
 800ca44:	4604      	mov	r4, r0
 800ca46:	4608      	mov	r0, r1
 800ca48:	4611      	mov	r1, r2
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	602a      	str	r2, [r5, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f7f4 ff88 	bl	8001964 <_read>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d102      	bne.n	800ca5e <_read_r+0x1e>
 800ca58:	682b      	ldr	r3, [r5, #0]
 800ca5a:	b103      	cbz	r3, 800ca5e <_read_r+0x1e>
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	2000dd2c 	.word	0x2000dd2c

0800ca64 <_init>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr

0800ca70 <_fini>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	bf00      	nop
 800ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca76:	bc08      	pop	{r3}
 800ca78:	469e      	mov	lr, r3
 800ca7a:	4770      	bx	lr
