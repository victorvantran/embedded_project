
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009868  08009868  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009870  08009870  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e24  20000074  080098ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e98  080098ec  00021e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022377  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040bf  00000000  00000000  0004241b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  000464e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  00047db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c66  00000000  00000000  00049508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a565  00000000  00000000  0004f16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010039d  00000000  00000000  000696d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c4  00000000  00000000  00169ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095f8 	.word	0x080095f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080095f8 	.word	0x080095f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x20>)
 800058a:	f003 fd11 	bl	8003fb0 <HAL_UART_Transmit>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20001b0c 	.word	0x20001b0c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f001 f927 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f943 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 f90b 	bl	80007c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8d9 	bl	8000768 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f8a7 	bl	8000708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ba:	f004 fee7 	bl	800538c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tinkerTask */
  tinkerTaskHandle = osThreadNew(StartTinkerTask, NULL, &tinkerTask_attributes);
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x5c>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0x60>)
 80005c4:	f004 ff2c 	bl	8005420 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x64>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  vInitThingSpeak(&xThingSpeak, &huart1, &hdma_usart1_rx,
 80005ce:	2318      	movs	r3, #24
 80005d0:	9304      	str	r3, [sp, #16]
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	9303      	str	r3, [sp, #12]
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <main+0x68>)
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2320      	movs	r3, #32
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <main+0x6c>)
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <main+0x70>)
 80005ea:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x74>)
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x78>)
 80005ee:	f000 fd1b 	bl	8001028 <vInitThingSpeak>
  		PROCESS_MESSAGE_TASK_NAME, PROCESS_MESSAGE_TASK_SIZE, PROCESS_MESSAGE_TASK_PRIORITY);

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f004 feef 	bl	80053d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x5a>
 80005f8:	08009764 	.word	0x08009764
 80005fc:	080008e1 	.word	0x080008e1
 8000600:	20001a84 	.word	0x20001a84
 8000604:	0800962c 	.word	0x0800962c
 8000608:	0800961c 	.word	0x0800961c
 800060c:	200019f4 	.word	0x200019f4
 8000610:	20001a88 	.word	0x20001a88
 8000614:	20001bdc 	.word	0x20001bdc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fe28 	bl	800827c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fe1a 	bl	800827c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066e:	230a      	movs	r3, #10
 8000670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fe96 	bl	80023bc <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f949 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa62 	bl	8002b88 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ca:	f000 f92f 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006ce:	2303      	movs	r3, #3
 80006d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fc8b 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e8:	f000 f920 	bl	800092c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f0:	f001 fe0e 	bl	8002310 <HAL_PWREx_ControlVoltageScaling>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006fa:	f000 f917 	bl	800092c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	37e0      	adds	r7, #224	; 0xe0
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800074c:	f003 fbe2 	bl	8003f14 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8e9 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20001a88 	.word	0x20001a88
 8000764:	40013800 	.word	0x40013800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f003 fbb2 	bl	8003f14 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8b9 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20001b0c 	.word	0x20001b0c
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_DMA_Init+0x68>)
 80007d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_DMA_Init+0x68>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6493      	str	r3, [r2, #72]	; 0x48
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_DMA_Init+0x68>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	200e      	movs	r0, #14
 80007ec:	f001 f8fa 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007f0:	200e      	movs	r0, #14
 80007f2:	f001 f913 	bl	8001a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	200f      	movs	r0, #15
 80007fc:	f001 f8f2 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000800:	200f      	movs	r0, #15
 8000802:	f001 f90b 	bl	8001a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	2010      	movs	r0, #16
 800080c:	f001 f8ea 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000810:	2010      	movs	r0, #16
 8000812:	f001 f903 	bl	8001a1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2011      	movs	r0, #17
 800081c:	f001 f8e2 	bl	80019e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000820:	2011      	movs	r0, #17
 8000822:	f001 f8fb 	bl	8001a1c <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xa4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_GPIO_Init+0xa4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_GPIO_Init+0xa4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xa8>)
 80008b0:	f001 fcee 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xa8>)
 80008cc:	f001 fb36 	bl	8001f3c <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400

080008e0 <StartTinkerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTinkerTask */
void StartTinkerTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  	//bTransmitCommand(&xThingSpeak, "AT+CIFSR\r\n", 4 + 6);

  	//bTransmitThingSpeakData(&xThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
  	//i += 20;
  	osDelay(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ec:	f004 fe2a 	bl	8005544 <osDelay>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <StartTinkerTask+0x20>)
 80008f4:	f001 fce4 	bl	80022c0 <HAL_GPIO_TogglePin>
  	printf("hello task\r\n");
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <StartTinkerTask+0x24>)
 80008fa:	f007 fd4d 	bl	8008398 <puts>
  	osDelay(1000);
 80008fe:	e7f3      	b.n	80008e8 <StartTinkerTask+0x8>
 8000900:	48000400 	.word	0x48000400
 8000904:	08009640 	.word	0x08009640

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 ff8b 	bl	8001834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40001000 	.word	0x40001000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_MspInit+0x4c>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_MspInit+0x4c>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x4c>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f001 f835 	bl	80019e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a8a      	ldr	r2, [pc, #552]	; (8000bd0 <HAL_UART_MspInit+0x248>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	f040 8085 	bne.w	8000ab6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ac:	4b89      	ldr	r3, [pc, #548]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b0:	4a88      	ldr	r2, [pc, #544]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6613      	str	r3, [r2, #96]	; 0x60
 80009b8:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a82      	ldr	r2, [pc, #520]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b80      	ldr	r3, [pc, #512]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ee:	2307      	movs	r3, #7
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f001 fa9e 	bl	8001f3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a00:	4b75      	ldr	r3, [pc, #468]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a02:	4a76      	ldr	r2, [pc, #472]	; (8000bdc <HAL_UART_MspInit+0x254>)
 8000a04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000a06:	4b74      	ldr	r3, [pc, #464]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0c:	4b72      	ldr	r3, [pc, #456]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a12:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a18:	4b6f      	ldr	r3, [pc, #444]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a24:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a2a:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a30:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a36:	4868      	ldr	r0, [pc, #416]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a38:	f000 fffe 	bl	8001a38 <HAL_DMA_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000a42:	f7ff ff73 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a63      	ldr	r2, [pc, #396]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a4a:	671a      	str	r2, [r3, #112]	; 0x70
 8000a4c:	4a62      	ldr	r2, [pc, #392]	; (8000bd8 <HAL_UART_MspInit+0x250>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a52:	4b63      	ldr	r3, [pc, #396]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a54:	4a63      	ldr	r2, [pc, #396]	; (8000be4 <HAL_UART_MspInit+0x25c>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000a58:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a60:	2210      	movs	r2, #16
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a70:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a76:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a7c:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a88:	4855      	ldr	r0, [pc, #340]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a8a:	f000 ffd5 	bl	8001a38 <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000a94:	f7ff ff4a 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a51      	ldr	r2, [pc, #324]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000a9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a9e:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_UART_MspInit+0x258>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	2025      	movs	r0, #37	; 0x25
 8000aaa:	f000 ff9b 	bl	80019e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aae:	2025      	movs	r0, #37	; 0x25
 8000ab0:	f000 ffb4 	bl	8001a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab4:	e088      	b.n	8000bc8 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <HAL_UART_MspInit+0x260>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	f040 8083 	bne.w	8000bc8 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a3d      	ldr	r2, [pc, #244]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_UART_MspInit+0x24c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af2:	230c      	movs	r3, #12
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b02:	2307      	movs	r3, #7
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 fa14 	bl	8001f3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b16:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <HAL_UART_MspInit+0x268>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b32      	ldr	r3, [pc, #200]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b40:	2220      	movs	r2, #32
 8000b42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b4a:	4828      	ldr	r0, [pc, #160]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b4c:	f000 ff74 	bl	8001a38 <HAL_DMA_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000b56:	f7ff fee9 	bl	800092c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b5e:	671a      	str	r2, [r3, #112]	; 0x70
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <HAL_UART_MspInit+0x264>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b68:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <HAL_UART_MspInit+0x270>)
 8000b6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b74:	2210      	movs	r2, #16
 8000b76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000b9e:	f000 ff4b 	bl	8001a38 <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x224>
      Error_Handler();
 8000ba8:	f7ff fec0 	bl	800092c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000bb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_UART_MspInit+0x26c>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2105      	movs	r1, #5
 8000bbc:	2026      	movs	r0, #38	; 0x26
 8000bbe:	f000 ff11 	bl	80019e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f000 ff2a 	bl	8001a1c <HAL_NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	200019f4 	.word	0x200019f4
 8000bdc:	40020058 	.word	0x40020058
 8000be0:	200019ac 	.word	0x200019ac
 8000be4:	40020044 	.word	0x40020044
 8000be8:	40004400 	.word	0x40004400
 8000bec:	20001964 	.word	0x20001964
 8000bf0:	4002006c 	.word	0x4002006c
 8000bf4:	20001a3c 	.word	0x20001a3c
 8000bf8:	40020080 	.word	0x40020080

08000bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2036      	movs	r0, #54	; 0x36
 8000c12:	f000 fee7 	bl	80019e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c16:	2036      	movs	r0, #54	; 0x36
 8000c18:	f000 ff00 	bl	8001a1c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_InitTick+0x9c>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_InitTick+0x9c>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6593      	str	r3, [r2, #88]	; 0x58
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_InitTick+0x9c>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 0210 	add.w	r2, r7, #16
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f948 	bl	8002ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c44:	f002 f91a 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8000c48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_InitTick+0xa0>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3b01      	subs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_InitTick+0xa8>)
 8000c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c7a:	f002 fe79 	bl	8003970 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d104      	bne.n	8000c8e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_InitTick+0xa4>)
 8000c86:	f002 fed5 	bl	8003a34 <HAL_TIM_Base_Start_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	20001b90 	.word	0x20001b90
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel4_IRQHandler+0x10>)
 8000cda:	f001 f844 	bl	8001d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200019ac 	.word	0x200019ac

08000ce8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Channel5_IRQHandler+0x10>)
 8000cee:	f001 f83a 	bl	8001d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200019f4 	.word	0x200019f4

08000cfc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DMA1_Channel6_IRQHandler+0x10>)
 8000d02:	f001 f830 	bl	8001d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20001964 	.word	0x20001964

08000d10 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA1_Channel7_IRQHandler+0x10>)
 8000d16:	f001 f826 	bl	8001d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20001a3c 	.word	0x20001a3c

08000d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <USART1_IRQHandler+0x14>)
 8000d2a:	f003 fb05 	bl	8004338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_ThingSpeak_IRQHandler(&huart1);
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART1_IRQHandler+0x14>)
 8000d30:	f000 f8ee 	bl	8000f10 <USER_ThingSpeak_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20001a88 	.word	0x20001a88

08000d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART2_IRQHandler+0x10>)
 8000d42:	f003 faf9 	bl	8004338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //USER_ThingSpeak_IRQHandler(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20001b0c 	.word	0x20001b0c

08000d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <TIM6_DAC_IRQHandler+0x10>)
 8000d56:	f002 fedd 	bl	8003b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20001b90 	.word	0x20001b90

08000d64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
	}

return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e009      	b.n	8000dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbdd 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf1      	blt.n	8000db0 <_write+0x12>
	}
	return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f007 f9cc 	bl	800820c <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20018000 	.word	0x20018000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000090 	.word	0x20000090
 8000ea8:	20001e98 	.word	0x20001e98

08000eac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <SystemInit+0x5c>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SystemInit+0x5c>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <SystemInit+0x60>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <SystemInit+0x60>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <SystemInit+0x60>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <SystemInit+0x60>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <SystemInit+0x60>)
 8000ed8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000edc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <SystemInit+0x60>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <SystemInit+0x60>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <SystemInit+0x60>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SystemInit+0x60>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	40021000 	.word	0x40021000

08000f10 <USER_ThingSpeak_IRQHandler>:

ThingSpeakHandle_t xThingSpeak;
/* extern ThingSpeakHandle_t xThingSpeak in main */

void USER_ThingSpeak_IRQHandler(UART_HandleTypeDef *pxHUART)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(pxHUART, UART_FLAG_IDLE) != RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d106      	bne.n	8000f34 <USER_ThingSpeak_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(pxHUART);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	621a      	str	r2, [r3, #32]

		USER_UART_IDLECallback(&xThingSpeak);
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <USER_ThingSpeak_IRQHandler+0x2c>)
 8000f30:	f000 f942 	bl	80011b8 <USER_UART_IDLECallback>
	}
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20001bdc 	.word	0x20001bdc

08000f40 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	if (pxHUART == xThingSpeak.huart)
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_UART_RxCpltCallback+0x30>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d108      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0x24>
	{
		xThingSpeak.xRXBuffer.uRollOver++;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_UART_RxCpltCallback+0x30>)
 8000f54:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_UART_RxCpltCallback+0x30>)
 8000f60:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	}
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20001bdc 	.word	0x20001bdc

08000f74 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f7c:	bf00      	nop
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <vStartThingSpeakTask>:



/* IMPLEMENTATION */
void vStartThingSpeakTask(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//bTransmitCommand(&xThingSpeak, "AT+RST\r\n", 4 + 4);
	//HAL_Delay(3000);
	ThingSpeakHandle_t *pxThingSpeak = argument;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60bb      	str	r3, [r7, #8]

	int i = 711;
 8000f98:	f240 23c7 	movw	r3, #711	; 0x2c7
 8000f9c:	60fb      	str	r3, [r7, #12]

  	//bTransmitCommand(&xThingSpeak, "AT+CIFSR\r\n", 4 + 6);

  	//bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);

  	bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <vStartThingSpeakTask+0x38>)
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f000 fb86 	bl	80016b8 <bTransmitThingSpeakData>
  	//bTransmitCommand(&xThingSpeak, "AT\r\n", 4);

  	i += 20;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3314      	adds	r3, #20
 8000fb0:	60fb      	str	r3, [r7, #12]
  	osDelay(20000);
 8000fb2:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000fb6:	f004 fac5 	bl	8005544 <osDelay>
  	//osDelay(20000);
  	printf("thingspeak\r\n");
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <vStartThingSpeakTask+0x3c>)
 8000fbc:	f007 f9ec 	bl	8008398 <puts>
  	bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
 8000fc0:	e7ed      	b.n	8000f9e <vStartThingSpeakTask+0x12>
 8000fc2:	bf00      	nop
 8000fc4:	0800964c 	.word	0x0800964c
 8000fc8:	08009660 	.word	0x08009660

08000fcc <vStartProcMessageTask>:




void vStartProcMessageTask(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint32_t uHeadIndex = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
	ThingSpeakHandle_t *pxThingSpeak = argument;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
  	if (xTaskNotifyWait(0, 0xffffffff, &uHeadIndex, pdMS_TO_TICKS(1000)) == pdTRUE)
 8000fdc:	f107 0208 	add.w	r2, r7, #8
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f005 ff45 	bl	8006e78 <xTaskNotifyWait>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d110      	bne.n	8001016 <vStartProcMessageTask+0x4a>
  	{
  		bParseMessage(pxThingSpeak, (uint16_t)uHeadIndex);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f90c 	bl	8001218 <bParseMessage>

    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001000:	2101      	movs	r1, #1
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <vStartProcMessageTask+0x54>)
 8001004:	f001 f95c 	bl	80022c0 <HAL_GPIO_TogglePin>
      osDelay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f004 fa9b 	bl	8005544 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800100e:	2101      	movs	r1, #1
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <vStartProcMessageTask+0x54>)
 8001012:	f001 f955 	bl	80022c0 <HAL_GPIO_TogglePin>
  	else
  	{
  		// Error Handle
  	}

  	printf("parse\r\n");
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <vStartProcMessageTask+0x58>)
 8001018:	f007 f9be 	bl	8008398 <puts>
  	if (xTaskNotifyWait(0, 0xffffffff, &uHeadIndex, pdMS_TO_TICKS(1000)) == pdTRUE)
 800101c:	e7de      	b.n	8000fdc <vStartProcMessageTask+0x10>
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400
 8001024:	0800966c 	.word	0x0800966c

08001028 <vInitThingSpeak>:


void vInitThingSpeak(ThingSpeakHandle_t *pxThingSpeak, UART_HandleTypeDef *huart, DMA_HandleTypeDef *pxUART_DMA_RX,
		const char *pcThingSpeakTaskName, uint32_t uThingSpeakTaskSize, osPriority_t xThingSpeakTaskPriority,
		const char *pcProcessMessageTaskName, uint32_t uProcessMessageTaskSize, osPriority_t xProcessMessageTaskPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
	// Structure
	pxThingSpeak->huart = huart;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	601a      	str	r2, [r3, #0]
	pxThingSpeak->pxUART_DMA_RX = pxUART_DMA_RX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]
	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3308      	adds	r3, #8
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f007 f915 	bl	800827c <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f007 f900 	bl	800827c <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216

	pxThingSpeak->xThingSpeakTaskAttributes.name = pcThingSpeakTaskName;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	pxThingSpeak->xThingSpeakTaskAttributes.stack_size = uThingSpeakTaskSize;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	pxThingSpeak->xThingSpeakTaskAttributes.priority = xThingSpeakTaskPriority,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	pxThingSpeak->xThingSpeakTaskHandle = osThreadNew(vStartThingSpeakTask, pxThingSpeak, &pxThingSpeak->xThingSpeakTaskAttributes);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80010b2:	461a      	mov	r2, r3
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <vInitThingSpeak+0xf4>)
 80010b8:	f004 f9b2 	bl	8005420 <osThreadNew>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	pxThingSpeak->xProcMessageTaskAttributes.name = pcProcessMessageTaskName;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a3a      	ldr	r2, [r7, #32]
 80010c8:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	pxThingSpeak->xProcMessageTaskAttributes.stack_size = uProcessMessageTaskSize;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	pxThingSpeak->xProcMessageTaskAttributes.priority = xProcessMessageTaskPriority,
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	pxThingSpeak->xProcMessageTaskHandle = osThreadNew(vStartProcMessageTask, pxThingSpeak, &pxThingSpeak->xProcMessageTaskAttributes);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80010e2:	461a      	mov	r2, r3
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <vInitThingSpeak+0xf8>)
 80010e8:	f004 f99a 	bl	8005420 <osThreadNew>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240


	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0210 	orr.w	r2, r2, #16
 8001102:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3308      	adds	r3, #8
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	4619      	mov	r1, r3
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f003 f860 	bl	80041d4 <HAL_UART_Receive_DMA>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08000f8d 	.word	0x08000f8d
 8001120:	08000fcd 	.word	0x08000fcd

08001124 <vRefreshThingSpeak>:


void vRefreshThingSpeak(ThingSpeakHandle_t *pxThingSpeak)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(pxThingSpeak->huart);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f893 	bl	800425c <HAL_UART_DMAStop>

	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3308      	adds	r3, #8
 800113a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 f89b 	bl	800827c <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f007 f886 	bl	800827c <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216

  __HAL_UART_ENABLE_IT(pxThingSpeak->huart, UART_IT_IDLE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(pxThingSpeak->huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3308      	adds	r3, #8
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	4619      	mov	r1, r3
 80011aa:	f003 f813 	bl	80041d4 <HAL_UART_Receive_DMA>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(ThingSpeakHandle_t *pxThingSpeak)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]

	// Tail catch up to head
	pxThingSpeak->xRXBuffer.uHeadIndex = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - __HAL_DMA_GET_COUNTER(pxThingSpeak->pxUART_DMA_RX);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

	// Overwrite the most recent viable head (mailbox)
	xTaskNotifyFromISR((TaskHandle_t)pxThingSpeak->xProcMessageTaskHandle, (uint32_t)pxThingSpeak->xRXBuffer.uHeadIndex, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80011e6:	4619      	mov	r1, r3
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2203      	movs	r2, #3
 80011f2:	f005 ff53 	bl	800709c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <USER_UART_IDLECallback+0x54>
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <USER_UART_IDLECallback+0x5c>)
 80011fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f3bf 8f4f 	dsb	sy
 8001208:	f3bf 8f6f 	isb	sy
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	e000ed04 	.word	0xe000ed04

08001218 <bParseMessage>:


uint8_t bParseMessage(ThingSpeakHandle_t *pxThingSpeak, uint16_t uHeadIndex)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	uint16_t uTailIndex = pxThingSpeak->xRXBuffer.uTailIndex;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800122a:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t uRollOver = pxThingSpeak->xRXBuffer.uRollOver;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8001232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint16_t uParseIndex = uTailIndex;
 8001236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001238:	86bb      	strh	r3, [r7, #52]	; 0x34

	if (uRollOver == 0)
 800123a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800123e:	2b00      	cmp	r3, #0
 8001240:	d12e      	bne.n	80012a0 <bParseMessage+0x88>
	{
		while (uParseIndex != uHeadIndex)
 8001242:	e028      	b.n	8001296 <bParseMessage+0x7e>
		{
			//if (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
			if (bEndMatch(pxThingSpeak, uParseIndex))
 8001244:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f8cf 	bl	80013ec <bEndMatch>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01d      	beq.n	8001290 <bParseMessage+0x78>
			{
				if (uParseIndex - uTailIndex > 0)
 8001254:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd0f      	ble.n	800127e <bParseMessage+0x66>
				{
					char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0208 	add.w	r2, r3, #8
 8001264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
					size_t candidateLength = uParseIndex - uTailIndex - 1;
 800126a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800126c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]

					vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f91d 	bl	80014b8 <vHandleCandidateCommand>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) ;
 800127e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	86fb      	strh	r3, [r7, #54]	; 0x36
				pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800128c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
			}
			uParseIndex++;
 8001290:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001292:	3301      	adds	r3, #1
 8001294:	86bb      	strh	r3, [r7, #52]	; 0x34
		while (uParseIndex != uHeadIndex)
 8001296:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	429a      	cmp	r2, r3
 800129c:	d1d2      	bne.n	8001244 <bParseMessage+0x2c>
 800129e:	e092      	b.n	80013c6 <bParseMessage+0x1ae>
		}
	}
	else if (uRollOver == 1)
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 808b 	bne.w	80013c0 <bParseMessage+0x1a8>
	{
		if (uParseIndex > uHeadIndex)
 80012aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f240 8082 	bls.w	80013b8 <bParseMessage+0x1a0>
		{
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 80012b4:	e028      	b.n	8001308 <bParseMessage+0xf0>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 80012b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f896 	bl	80013ec <bEndMatch>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01d      	beq.n	8001302 <bParseMessage+0xea>
				{
					if (uParseIndex - uTailIndex > 0)
 80012c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd0f      	ble.n	80012f0 <bParseMessage+0xd8>
					{
						char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f103 0208 	add.w	r2, r3, #8
 80012d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
						size_t candidateLength = uParseIndex - uTailIndex - 1;
 80012dc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	3b01      	subs	r3, #1
 80012e4:	613b      	str	r3, [r7, #16]

						vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8e4 	bl	80014b8 <vHandleCandidateCommand>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 80012f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012f2:	3301      	adds	r3, #1
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012fe:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
				}
				uParseIndex++;
 8001302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001304:	3301      	adds	r3, #1
 8001306:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8001308:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d9d3      	bls.n	80012b6 <bParseMessage+0x9e>
			}

			uParseIndex = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	86bb      	strh	r3, [r7, #52]	; 0x34

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 8001312:	e04c      	b.n	80013ae <bParseMessage+0x196>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8001314:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f867 	bl	80013ec <bEndMatch>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d041      	beq.n	80013a8 <bParseMessage+0x190>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 8001324:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d91f      	bls.n	800136c <bParseMessage+0x154>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 800132c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800132e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001330:	429a      	cmp	r2, r3
 8001332:	d030      	beq.n	8001396 <bParseMessage+0x17e>
						{
							char *candidateFirst = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f103 0208 	add.w	r2, r3, #8
 800133a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800133c:	4413      	add	r3, r2
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateFirstLength = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - uTailIndex;
 8001340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001342:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001346:	623b      	str	r3, [r7, #32]
							char *candidateSecond = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3308      	adds	r3, #8
 800134c:	61fb      	str	r3, [r7, #28]
							size_t candidateSecondLength = uParseIndex;
 800134e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001350:	61bb      	str	r3, [r7, #24]

							vHandleCandidateCommandSplit(pxThingSpeak, candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	6a3a      	ldr	r2, [r7, #32]
 800135a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f901 	bl	8001564 <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 800136a:	e014      	b.n	8001396 <bParseMessage+0x17e>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 800136c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800136e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	dd0f      	ble.n	8001396 <bParseMessage+0x17e>
						{
							char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f103 0208 	add.w	r2, r3, #8
 800137c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800137e:	4413      	add	r3, r2
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t candidateLength = uParseIndex - uTailIndex - 1;
 8001382:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28

							vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 800138c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f891 	bl	80014b8 <vHandleCandidateCommand>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 8001396:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001398:	3301      	adds	r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80013a4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
				}

				uParseIndex++;
 80013a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013aa:	3301      	adds	r3, #1
 80013ac:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex != uHeadIndex)
 80013ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d1ae      	bne.n	8001314 <bParseMessage+0xfc>
 80013b6:	e006      	b.n	80013c6 <bParseMessage+0x1ae>
		else
		{
			// Reset due to too overflow rx buffer due to too much data received before it could all process
			//HAL_UART_DMAStop(pxThingSpeak->huart);
			//vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX, pxThingSpeak->xProcMessageTaskHandle);
			vRefreshThingSpeak(pxThingSpeak);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff feb3 	bl	8001124 <vRefreshThingSpeak>
 80013be:	e002      	b.n	80013c6 <bParseMessage+0x1ae>
	else
	{
		// Reset due to too overflow rx buffer due to too much data received before it could all process
		//HAL_UART_DMAStop(pxThingSpeak->huart);
		//vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX, pxThingSpeak->xProcMessageTaskHandle);
		vRefreshThingSpeak(pxThingSpeak);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff feaf 	bl	8001124 <vRefreshThingSpeak>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", pxThingSpeak->xRXBuffer.uTailIndex, pxThingSpeak->xRXBuffer.uHeadIndex);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80013cc:	4619      	mov	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80013d4:	461a      	mov	r2, r3
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <bParseMessage+0x1d0>)
 80013d8:	f006 ff58 	bl	800828c <iprintf>

	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3738      	adds	r7, #56	; 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08009674 	.word	0x08009674

080013ec <bEndMatch>:


uint8_t bEndMatch(ThingSpeakHandle_t *pxThingSpeak, uint16_t uParseIndex)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	7a1b      	ldrb	r3, [r3, #8]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d109      	bne.n	8001418 <bEndMatch+0x2c>
			(pxThingSpeak->xRXBuffer.puDMABuffer[(uParseIndex - 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer)] == '\r');
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	3b01      	subs	r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	7a1b      	ldrb	r3, [r3, #8]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 8001410:	2b0d      	cmp	r3, #13
 8001412:	d101      	bne.n	8001418 <bEndMatch+0x2c>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <bEndMatch+0x2e>
 8001418:	2300      	movs	r3, #0
 800141a:	b2db      	uxtb	r3, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <bCommandMatch>:


uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7fe fecb 	bl	80001d0 <strlen>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4293      	cmp	r3, r2
 8001440:	d109      	bne.n	8001456 <bCommandMatch+0x2e>
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f006 ffce 	bl	80083e8 <strncmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <bCommandMatch+0x2e>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <bCommandMatch+0x30>
 8001456:	2300      	movs	r3, #0
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7fe fead 	bl	80001d0 <strlen>
 8001476:	4601      	mov	r1, r0
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 800147e:	4299      	cmp	r1, r3
 8001480:	d114      	bne.n	80014ac <bCommandSplitMatch+0x4a>
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f006 ffae 	bl	80083e8 <strncmp>
 800148c:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f006 ffa3 	bl	80083e8 <strncmp>
 80014a2:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <bCommandSplitMatch+0x4a>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <bCommandSplitMatch+0x4c>
 80014ac:	2300      	movs	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <vHandleCandidateCommand>:
/* Debug purposes on serial monitor */
extern UART_HandleTypeDef huart2;


void vHandleCandidateCommand(ThingSpeakHandle_t *pxThingSpeak, const char *candidate, size_t candidateLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
	if (bCommandMatch("ON", candidate, candidateLength))
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	481e      	ldr	r0, [pc, #120]	; (8001544 <vHandleCandidateCommand+0x8c>)
 80014ca:	f7ff ffad 	bl	8001428 <bCommandMatch>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <vHandleCandidateCommand+0x24>
	{
		printf("SET LIGHT\r\n");
 80014d4:	481c      	ldr	r0, [pc, #112]	; (8001548 <vHandleCandidateCommand+0x90>)
 80014d6:	f006 ff5f 	bl	8008398 <puts>
		//HAL_UART_Transmit(&huart2, "INVLD: ", 7, 1000);
		HAL_UART_Transmit(&huart2, (char *)candidate, candidateLength, 1000);
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
		//printf("INVLD\r\n");
	}
}
 80014da:	e02e      	b.n	800153a <vHandleCandidateCommand+0x82>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <vHandleCandidateCommand+0x94>)
 80014e2:	f7ff ffa1 	bl	8001428 <bCommandMatch>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <vHandleCandidateCommand+0x3c>
		printf("UNSET LIGHT\r\n");
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <vHandleCandidateCommand+0x98>)
 80014ee:	f006 ff53 	bl	8008398 <puts>
}
 80014f2:	e022      	b.n	800153a <vHandleCandidateCommand+0x82>
	else if (bCommandMatch("OK", candidate, candidateLength))
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <vHandleCandidateCommand+0x9c>)
 80014fa:	f7ff ff95 	bl	8001428 <bCommandMatch>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <vHandleCandidateCommand+0x64>
		printf("OK Received\r\n");
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <vHandleCandidateCommand+0xa0>)
 8001506:	f006 ff47 	bl	8008398 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)OK, eSetValueWithOverwrite);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8001510:	2300      	movs	r3, #0
 8001512:	2203      	movs	r2, #3
 8001514:	2100      	movs	r1, #0
 8001516:	f005 fd09 	bl	8006f2c <xTaskGenericNotify>
}
 800151a:	e00e      	b.n	800153a <vHandleCandidateCommand+0x82>
		HAL_UART_Transmit(&huart2, (char *)candidate, candidateLength, 1000);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	b29a      	uxth	r2, r3
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <vHandleCandidateCommand+0xa4>)
 8001528:	f002 fd42 	bl	8003fb0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	2202      	movs	r2, #2
 8001532:	490b      	ldr	r1, [pc, #44]	; (8001560 <vHandleCandidateCommand+0xa8>)
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <vHandleCandidateCommand+0xa4>)
 8001536:	f002 fd3b 	bl	8003fb0 <HAL_UART_Transmit>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	08009694 	.word	0x08009694
 8001548:	08009698 	.word	0x08009698
 800154c:	080096a4 	.word	0x080096a4
 8001550:	080096a8 	.word	0x080096a8
 8001554:	080096b8 	.word	0x080096b8
 8001558:	080096bc 	.word	0x080096bc
 800155c:	20001b0c 	.word	0x20001b0c
 8001560:	080096cc 	.word	0x080096cc

08001564 <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(ThingSpeakHandle_t *pxThingSpeak, const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	4825      	ldr	r0, [pc, #148]	; (8001614 <vHandleCandidateCommandSplit+0xb0>)
 800157e:	f7ff ff70 	bl	8001462 <bCommandSplitMatch>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 8001588:	4823      	ldr	r0, [pc, #140]	; (8001618 <vHandleCandidateCommandSplit+0xb4>)
 800158a:	f006 ff05 	bl	8008398 <puts>
		HAL_UART_Transmit(&huart2, (char *)candidateFirst, candidateFirstLength, 1000);
		HAL_UART_Transmit(&huart2, (char *)candidateSecond, candidateSecondLength, 1000);
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
		//printf("INVLD\r\n");
	}
}
 800158e:	e03c      	b.n	800160a <vHandleCandidateCommandSplit+0xa6>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	4820      	ldr	r0, [pc, #128]	; (800161c <vHandleCandidateCommandSplit+0xb8>)
 800159c:	f7ff ff61 	bl	8001462 <bCommandSplitMatch>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 80015a6:	481e      	ldr	r0, [pc, #120]	; (8001620 <vHandleCandidateCommandSplit+0xbc>)
 80015a8:	f006 fef6 	bl	8008398 <puts>
}
 80015ac:	e02d      	b.n	800160a <vHandleCandidateCommandSplit+0xa6>
	else if (bCommandSplitMatch("OK", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	481a      	ldr	r0, [pc, #104]	; (8001624 <vHandleCandidateCommandSplit+0xc0>)
 80015ba:	f7ff ff52 	bl	8001462 <bCommandSplitMatch>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <vHandleCandidateCommandSplit+0x78>
		printf("OK Received\r\n");
 80015c4:	4818      	ldr	r0, [pc, #96]	; (8001628 <vHandleCandidateCommandSplit+0xc4>)
 80015c6:	f006 fee7 	bl	8008398 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)OK, eSetValueWithOverwrite);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 80015d0:	2300      	movs	r3, #0
 80015d2:	2203      	movs	r2, #3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f005 fca9 	bl	8006f2c <xTaskGenericNotify>
}
 80015da:	e016      	b.n	800160a <vHandleCandidateCommandSplit+0xa6>
		HAL_UART_Transmit(&huart2, (char *)candidateFirst, candidateFirstLength, 1000);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <vHandleCandidateCommandSplit+0xc8>)
 80015e8:	f002 fce2 	bl	8003fb0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (char *)candidateSecond, candidateSecondLength, 1000);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <vHandleCandidateCommandSplit+0xc8>)
 80015f8:	f002 fcda 	bl	8003fb0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	2202      	movs	r2, #2
 8001602:	490b      	ldr	r1, [pc, #44]	; (8001630 <vHandleCandidateCommandSplit+0xcc>)
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <vHandleCandidateCommandSplit+0xc8>)
 8001606:	f002 fcd3 	bl	8003fb0 <HAL_UART_Transmit>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08009694 	.word	0x08009694
 8001618:	08009698 	.word	0x08009698
 800161c:	080096a4 	.word	0x080096a4
 8001620:	080096a8 	.word	0x080096a8
 8001624:	080096b8 	.word	0x080096b8
 8001628:	080096bc 	.word	0x080096bc
 800162c:	20001b0c 	.word	0x20001b0c
 8001630:	080096cc 	.word	0x080096cc

08001634 <bTransmitCommand>:


uint8_t bTransmitCommand(ThingSpeakHandle_t *pxThingSpeak, const char *command, size_t numElements)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	/* [!] Could also add a wait for a semaphore, and semaphore released from isr on transmit complete callback */
	strncpy((char *)pxThingSpeak->xTXBuffer.puDMABuffer, command, numElements);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fede 	bl	800840c <strncpy>
	if (HAL_UART_Transmit_DMA(pxThingSpeak->huart, (uint8_t *)pxThingSpeak->xTXBuffer.puDMABuffer, numElements) == HAL_OK)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	b292      	uxth	r2, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f002 fd3a 	bl	80040d8 <HAL_UART_Transmit_DMA>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <bTransmitCommand+0x3a>
	{
		return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <bTransmitCommand+0x3c>
	}
	else
	{
		return 0;
 800166e:	2300      	movs	r3, #0
	}
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <bReceiveThingSpeakCommand>:


uint8_t bReceiveThingSpeakCommand(ThingSpeakHandle_t *pxThingSpeak, ATCommand_t eATCommand, TickType_t xTicksToWait)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	460b      	mov	r3, r1
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	72fb      	strb	r3, [r7, #11]
	// If success then return 1.


	// Enum for message
	uint32_t uCommand;
	if (xTaskNotifyWait(0, 0xffffffff, &uCommand, xTicksToWait) == pdPASS)
 8001686:	f107 0214 	add.w	r2, r7, #20
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001690:	2000      	movs	r0, #0
 8001692:	f005 fbf1 	bl	8006e78 <xTaskNotifyWait>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <bReceiveThingSpeakCommand+0x36>
	{
		if ((ATCommand_t)uCommand == eATCommand)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	7afa      	ldrb	r2, [r7, #11]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d101      	bne.n	80016aa <bReceiveThingSpeakCommand+0x32>
		{
			return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e002      	b.n	80016b0 <bReceiveThingSpeakCommand+0x38>
		}
		else
		{
			/* Error Handle: Wrong command expected */
			return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <bReceiveThingSpeakCommand+0x38>
		}
	}
	else
	{
		/* Error Handle: Timeout */
		return 0;
 80016ae:	2300      	movs	r3, #0
	}

}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <bTransmitThingSpeakData>:


uint8_t bTransmitThingSpeakData(ThingSpeakHandle_t *pxThingSpeak, char *apiKey, uint8_t field, uint16_t value)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0a8      	sub	sp, #160	; 0xa0
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	460b      	mov	r3, r1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	4613      	mov	r3, r2
 80016cc:	80bb      	strh	r3, [r7, #4]
	//osDelay(3000);
	char local_buf[100] = {0};
 80016ce:	2300      	movs	r3, #0
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
 80016d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d6:	2260      	movs	r2, #96	; 0x60
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 fdce 	bl	800827c <memset>
	char local_buf2[30] = {0};
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	831a      	strh	r2, [r3, #24]

	bTransmitCommand(pxThingSpeak, "AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 80016f8:	2229      	movs	r2, #41	; 0x29
 80016fa:	4926      	ldr	r1, [pc, #152]	; (8001794 <bTransmitThingSpeakData+0xdc>)
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ff99 	bl	8001634 <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, OK, pdMS_TO_TICKS(3000));
 8001702:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001706:	2100      	movs	r1, #0
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff ffb5 	bl	8001678 <bReceiveThingSpeakCommand>
	//osDelay(3000);

	//sprintf(local_buf, "GET /update?api_key=%sfield%u=%u\r\n", apiKey, field, value);
	sprintf(local_buf, "GET https://api.thingspeak.com/update?api_key=%s&field%u=%u\r\n", apiKey, field, value);
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	491e      	ldr	r1, [pc, #120]	; (8001798 <bTransmitThingSpeakData+0xe0>)
 800171e:	f006 fe43 	bl	80083a8 <siprintf>
	int len = strlen(local_buf);
 8001722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fd52 	bl	80001d0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800173a:	4918      	ldr	r1, [pc, #96]	; (800179c <bTransmitThingSpeakData+0xe4>)
 800173c:	4618      	mov	r0, r3
 800173e:	f006 fe33 	bl	80083a8 <siprintf>
	bTransmitCommand(pxThingSpeak, local_buf2, strlen(local_buf2));
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <strlen>
 800174c:	4602      	mov	r2, r0
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff ff6d 	bl	8001634 <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, OK, pdMS_TO_TICKS(3000));
 800175a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800175e:	2100      	movs	r1, #0
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff ff89 	bl	8001678 <bReceiveThingSpeakCommand>
	//osDelay(3000);

	bTransmitCommand(pxThingSpeak, local_buf, strlen(local_buf));
 8001766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fd30 	bl	80001d0 <strlen>
 8001770:	4602      	mov	r2, r0
 8001772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001776:	4619      	mov	r1, r3
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff ff5b 	bl	8001634 <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, OK, pdMS_TO_TICKS(3000));
 800177e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001782:	2100      	movs	r1, #0
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff ff77 	bl	8001678 <bReceiveThingSpeakCommand>
	//osDelay(3000);



	return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3798      	adds	r7, #152	; 0x98
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	080096d0 	.word	0x080096d0
 8001798:	080096fc 	.word	0x080096fc
 800179c:	0800973c 	.word	0x0800973c

080017a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a4:	f7ff fb82 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017aa:	e003      	b.n	80017b4 <LoopCopyDataInit>

080017ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017b2:	3104      	adds	r1, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017b4:	480a      	ldr	r0, [pc, #40]	; (80017e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017bc:	d3f6      	bcc.n	80017ac <CopyDataInit>
	ldr	r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017c0:	e002      	b.n	80017c8 <LoopFillZerobss>

080017c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017c4:	f842 3b04 	str.w	r3, [r2], #4

080017c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <LoopForever+0x16>)
	cmp	r2, r3
 80017ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017cc:	d3f9      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f006 fd23 	bl	8008218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d2:	f7fe fee3 	bl	800059c <main>

080017d6 <LoopForever>:

LoopForever:
    b LoopForever
 80017d6:	e7fe      	b.n	80017d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017dc:	08009878 	.word	0x08009878
	ldr	r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017e4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80017e8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80017ec:	20001e98 	.word	0x20001e98

080017f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC1_2_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_Init+0x3c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_Init+0x3c>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f8df 	bl	80019ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff f9f3 	bl	8000bfc <HAL_InitTick>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	e001      	b.n	8001826 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001822:	f7ff f889 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001826:	79fb      	ldrb	r3, [r7, #7]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	20001e44 	.word	0x20001e44

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20001e44 	.word	0x20001e44

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff4c 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f6:	f7ff ff61 	bl	80018bc <__NVIC_GetPriorityGrouping>
 80019fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7ff ffb1 	bl	8001968 <NVIC_EncodePriority>
 8001a06:	4602      	mov	r2, r0
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff80 	bl	8001914 <__NVIC_SetPriority>
}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff54 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e098      	b.n	8001b7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_DMA_Init+0x150>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d80f      	bhi.n	8001a76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <HAL_DMA_Init+0x154>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_DMA_Init+0x158>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	009a      	lsls	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_DMA_Init+0x15c>)
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
 8001a74:	e00e      	b.n	8001a94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_DMA_Init+0x160>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <HAL_DMA_Init+0x158>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	009a      	lsls	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <HAL_DMA_Init+0x164>)
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aee:	d039      	beq.n	8001b64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_DMA_Init+0x15c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d11a      	bne.n	8001b30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_DMA_Init+0x168>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f003 031c 	and.w	r3, r3, #28
 8001b06:	210f      	movs	r1, #15
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4924      	ldr	r1, [pc, #144]	; (8001ba0 <HAL_DMA_Init+0x168>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_DMA_Init+0x168>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f003 031c 	and.w	r3, r3, #28
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	491d      	ldr	r1, [pc, #116]	; (8001ba0 <HAL_DMA_Init+0x168>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
 8001b2e:	e019      	b.n	8001b64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_DMA_Init+0x16c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f003 031c 	and.w	r3, r3, #28
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <HAL_DMA_Init+0x16c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_DMA_Init+0x16c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 031c 	and.w	r3, r3, #28
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	4911      	ldr	r1, [pc, #68]	; (8001ba4 <HAL_DMA_Init+0x16c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40020407 	.word	0x40020407
 8001b8c:	bffdfff8 	.word	0xbffdfff8
 8001b90:	cccccccd 	.word	0xcccccccd
 8001b94:	40020000 	.word	0x40020000
 8001b98:	bffdfbf8 	.word	0xbffdfbf8
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	400200a8 	.word	0x400200a8
 8001ba4:	400204a8 	.word	0x400204a8

08001ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Start_IT+0x20>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e04b      	b.n	8001c60 <HAL_DMA_Start_IT+0xb8>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d13a      	bne.n	8001c52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f96b 	bl	8001edc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 020e 	orr.w	r2, r2, #14
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e00f      	b.n	8001c40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 020a 	orr.w	r2, r2, #10
 8001c3e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e022      	b.n	8001cd8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 020e 	bic.w	r2, r2, #14
 8001ca0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 021c 	and.w	r2, r3, #28
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d005      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e029      	b.n	8001d5c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020e 	bic.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f003 021c 	and.w	r2, r3, #28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
    }
  }
  return status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f003 031c 	and.w	r3, r3, #28
 8001d86:	2204      	movs	r2, #4
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d026      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x7a>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d021      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0204 	bic.w	r2, r2, #4
 8001db8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 021c 	and.w	r2, r3, #28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dcc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d071      	beq.n	8001eba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001dde:	e06c      	b.n	8001eba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f003 031c 	and.w	r3, r3, #28
 8001de8:	2202      	movs	r2, #2
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d02e      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xec>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d029      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10b      	bne.n	8001e24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 020a 	bic.w	r2, r2, #10
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f003 021c 	and.w	r2, r3, #28
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2102      	movs	r1, #2
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d038      	beq.n	8001eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e50:	e033      	b.n	8001eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f003 031c 	and.w	r3, r3, #28
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d02a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x156>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d025      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020e 	bic.w	r2, r2, #14
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	f003 021c 	and.w	r2, r3, #28
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
}
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f003 021c 	and.w	r2, r3, #28
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d108      	bne.n	8001f20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f1e:	e007      	b.n	8001f30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4a:	e17f      	b.n	800224c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8171 	beq.w	8002246 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d00b      	beq.n	8001f84 <HAL_GPIO_Init+0x48>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b12      	cmp	r3, #18
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 0201 	and.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d118      	bne.n	8002024 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x128>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	6939      	ldr	r1, [r7, #16]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ac 	beq.w	8002246 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_GPIO_Init+0x330>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_GPIO_Init+0x330>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6613      	str	r3, [r2, #96]	; 0x60
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_GPIO_Init+0x330>)
 80020fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002106:	4a5a      	ldr	r2, [pc, #360]	; (8002270 <HAL_GPIO_Init+0x334>)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002130:	d025      	beq.n	800217e <HAL_GPIO_Init+0x242>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_GPIO_Init+0x338>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01f      	beq.n	800217a <HAL_GPIO_Init+0x23e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4e      	ldr	r2, [pc, #312]	; (8002278 <HAL_GPIO_Init+0x33c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d019      	beq.n	8002176 <HAL_GPIO_Init+0x23a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4d      	ldr	r2, [pc, #308]	; (800227c <HAL_GPIO_Init+0x340>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0x236>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4c      	ldr	r2, [pc, #304]	; (8002280 <HAL_GPIO_Init+0x344>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00d      	beq.n	800216e <HAL_GPIO_Init+0x232>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4b      	ldr	r2, [pc, #300]	; (8002284 <HAL_GPIO_Init+0x348>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x22e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4a      	ldr	r2, [pc, #296]	; (8002288 <HAL_GPIO_Init+0x34c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_GPIO_Init+0x22a>
 8002162:	2306      	movs	r3, #6
 8002164:	e00c      	b.n	8002180 <HAL_GPIO_Init+0x244>
 8002166:	2307      	movs	r3, #7
 8002168:	e00a      	b.n	8002180 <HAL_GPIO_Init+0x244>
 800216a:	2305      	movs	r3, #5
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x244>
 800216e:	2304      	movs	r3, #4
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x244>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x244>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x244>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x244>
 800217e:	2300      	movs	r3, #0
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002190:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x334>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_GPIO_Init+0x350>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_GPIO_Init+0x350>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_GPIO_Init+0x350>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_GPIO_Init+0x350>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_GPIO_Init+0x350>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_GPIO_Init+0x350>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_GPIO_Init+0x350>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002240:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_GPIO_Init+0x350>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f ae78 	bne.w	8001f4c <HAL_GPIO_Init+0x10>
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40010000 	.word	0x40010000
 8002274:	48000400 	.word	0x48000400
 8002278:	48000800 	.word	0x48000800
 800227c:	48000c00 	.word	0x48000c00
 8002280:	48001000 	.word	0x48001000
 8002284:	48001400 	.word	0x48001400
 8002288:	48001800 	.word	0x48001800
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43d9      	mvns	r1, r3
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	400b      	ands	r3, r1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_PWREx_GetVoltageRange+0x18>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231e:	d130      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d038      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2232      	movs	r2, #50	; 0x32
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002354:	e002      	b.n	800235c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d102      	bne.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f2      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d110      	bne.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e00f      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d007      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e3d4      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4ba1      	ldr	r3, [pc, #644]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80e4 	beq.w	80025b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_RCC_OscConfig+0x4a>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	f040 808b 	bne.w	8002514 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 8087 	bne.w	8002514 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	4b93      	ldr	r3, [pc, #588]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e3ac      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	4b8c      	ldr	r3, [pc, #560]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <HAL_RCC_OscConfig+0x7c>
 800242e:	4b89      	ldr	r3, [pc, #548]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002436:	e005      	b.n	8002444 <HAL_RCC_OscConfig+0x88>
 8002438:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	4293      	cmp	r3, r2
 8002446:	d223      	bcs.n	8002490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fd73 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e38d      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245c:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4977      	ldr	r1, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4972      	ldr	r1, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
 800248e:	e025      	b.n	80024dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002490:	4b70      	ldr	r3, [pc, #448]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6f      	ldr	r2, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	496a      	ldr	r1, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ae:	4b69      	ldr	r3, [pc, #420]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4965      	ldr	r1, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fd33 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e34d      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024dc:	f000 fc36 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	495a      	ldr	r1, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x29c>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x2a0>)
 80024fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x2a4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fb7b 	bl	8000bfc <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d052      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	e331      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d032      	beq.n	8002582 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800251c:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002528:	f7ff f998 	bl	800185c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002530:	f7ff f994 	bl	800185c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e31a      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a40      	ldr	r2, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	493b      	ldr	r1, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	4936      	ldr	r1, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e01a      	b.n	80025b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258e:	f7ff f965 	bl	800185c <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002596:	f7ff f961 	bl	800185c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e2e7      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x1da>
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d074      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x21a>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d10e      	bne.n	80025ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d064      	beq.n	80026ac <HAL_RCC_OscConfig+0x2f0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d160      	bne.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e2c4      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x24a>
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e01d      	b.n	8002642 <HAL_RCC_OscConfig+0x286>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x26e>
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x286>
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_RCC_OscConfig+0x298>)
 800263c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01c      	beq.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff f907 	bl	800185c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002650:	e011      	b.n	8002676 <HAL_RCC_OscConfig+0x2ba>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	08009788 	.word	0x08009788
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f8fa 	bl	800185c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e280      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4baf      	ldr	r3, [pc, #700]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2a8>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f8ea 	bl	800185c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f8e6 	bl	800185c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e26c      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269e:	4ba5      	ldr	r3, [pc, #660]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x2d0>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d060      	beq.n	800277c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x310>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d116      	bne.n	80026fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	4b99      	ldr	r3, [pc, #612]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x328>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e249      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b93      	ldr	r3, [pc, #588]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	4990      	ldr	r1, [pc, #576]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	e040      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d023      	beq.n	800274a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002702:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8b      	ldr	r2, [pc, #556]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7ff f8a5 	bl	800185c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7ff f8a1 	bl	800185c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e227      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b7f      	ldr	r3, [pc, #508]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	497c      	ldr	r1, [pc, #496]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a79      	ldr	r2, [pc, #484]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff f881 	bl	800185c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f87d 	bl	800185c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e203      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002770:	4b70      	ldr	r3, [pc, #448]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03c      	beq.n	8002802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01c      	beq.n	80027ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7ff f85c 	bl	800185c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff f858 	bl	800185c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1de      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ba:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <HAL_RCC_OscConfig+0x3ec>
 80027c8:	e01b      	b.n	8002802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7ff f83f 	bl	800185c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7ff f83b 	bl	800185c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1c1      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ef      	bne.n	80027e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80a6 	beq.w	800295c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a43      	ldr	r2, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
 800282c:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d118      	bne.n	800287a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002854:	f7ff f802 	bl	800185c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe fffe 	bl	800185c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e184      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x57c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_RCC_OscConfig+0x4d8>
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002892:	e024      	b.n	80028de <HAL_RCC_OscConfig+0x522>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d110      	bne.n	80028be <HAL_RCC_OscConfig+0x502>
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	e00f      	b.n	80028de <HAL_RCC_OscConfig+0x522>
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d016      	beq.n	8002914 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe ffb9 	bl	800185c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe ffb5 	bl	800185c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e139      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_OscConfig+0x578>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0ed      	beq.n	80028ee <HAL_RCC_OscConfig+0x532>
 8002912:	e01a      	b.n	800294a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe ffa2 	bl	800185c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800291a:	e00f      	b.n	800293c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe ff9e 	bl	800185c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d906      	bls.n	800293c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e122      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	4b90      	ldr	r3, [pc, #576]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e8      	bne.n	800291c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4a8a      	ldr	r2, [pc, #552]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8108 	beq.w	8002b76 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2b02      	cmp	r3, #2
 800296c:	f040 80d0 	bne.w	8002b10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002970:	4b83      	ldr	r3, [pc, #524]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d130      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	3b01      	subs	r3, #1
 8002990:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d127      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11f      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b0:	2a07      	cmp	r2, #7
 80029b2:	bf14      	ite	ne
 80029b4:	2201      	movne	r2, #1
 80029b6:	2200      	moveq	r2, #0
 80029b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d113      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d06e      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d069      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ec:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029f8:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b7      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a08:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a14:	f7fe ff22 	bl	800185c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ff1e 	bl	800185c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0a4      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2e:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_RCC_OscConfig+0x7c8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a54:	0212      	lsls	r2, r2, #8
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a5c:	0852      	lsrs	r2, r2, #1
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	0552      	lsls	r2, r2, #21
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0652      	lsls	r2, r2, #25
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a74:	0912      	lsrs	r2, r2, #4
 8002a76:	0452      	lsls	r2, r2, #17
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4941      	ldr	r1, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a80:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a3b      	ldr	r2, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a98:	f7fe fee0 	bl	800185c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fedc 	bl	800185c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e062      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abe:	e05a      	b.n	8002b76 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e059      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d152      	bne.n	8002b76 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ae8:	f7fe feb8 	bl	800185c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe feb4 	bl	800185c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e03a      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x734>
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d02d      	beq.n	8002b72 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b34:	f023 0303 	bic.w	r3, r3, #3
 8002b38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fe87 	bl	800185c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe fe83 	bl	800185c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e009      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_OscConfig+0x7c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x796>
 8002b70:	e001      	b.n	8002b76 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	f99d808c 	.word	0xf99d808c

08002b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0c8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d910      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0207 	bic.w	r2, r3, #7
 8002bb2:	4961      	ldr	r1, [pc, #388]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b0      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d04c      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be0:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d121      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e09e      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d115      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e092      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c10:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e086      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e07e      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 0203 	bic.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	493f      	ldr	r1, [pc, #252]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe fe0b 	bl	800185c <HAL_GetTick>
 8002c46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4a:	f7fe fe07 	bl	800185c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e066      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 020c 	and.w	r2, r3, #12
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d1eb      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	492c      	ldr	r1, [pc, #176]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d210      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4924      	ldr	r1, [pc, #144]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e036      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4918      	ldr	r1, [pc, #96]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4910      	ldr	r1, [pc, #64]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfe:	f000 f825 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490c      	ldr	r1, [pc, #48]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ff6a 	bl	8000bfc <HAL_InitTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08009788 	.word	0x08009788
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x34>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d11e      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e004      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d134      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d003      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0xac>
 8002df0:	e005      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfa:	617b      	str	r3, [r7, #20]
      break;
 8002dfc:	e002      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	3301      	adds	r3, #1
 8002e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	fb02 f203 	mul.w	r2, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	0e5b      	lsrs	r3, r3, #25
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	3301      	adds	r3, #1
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e44:	69bb      	ldr	r3, [r7, #24]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	080097a0 	.word	0x080097a0
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08009798 	.word	0x08009798

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eac:	f7ff ffda 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0adb      	lsrs	r3, r3, #11
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08009798 	.word	0x08009798

08002ed4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCC_GetClockConfig+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40022000 	.word	0x40022000

08002f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f50:	f7ff f9d0 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 8002f54:	6178      	str	r0, [r7, #20]
 8002f56:	e014      	b.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f70:	f7ff f9c0 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 8002f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f88:	d10b      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d919      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2ba0      	cmp	r3, #160	; 0xa0
 8002f94:	d902      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f96:	2302      	movs	r3, #2
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e013      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e010      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d902      	bls.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa8:	2303      	movs	r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e00a      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d102      	bne.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e004      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d101      	bne.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 0207 	bic.w	r2, r3, #7
 8002fcc:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003000:	2300      	movs	r3, #0
 8003002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003004:	2300      	movs	r3, #0
 8003006:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	2b00      	cmp	r3, #0
 8003012:	d041      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301c:	d02a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800301e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003022:	d824      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800302a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800302e:	d81e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003038:	d010      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800303a:	e018      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800303c:	4b86      	ldr	r3, [pc, #536]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a85      	ldr	r2, [pc, #532]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003048:	e015      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fabb 	bl	80035cc <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800305a:	e00c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3320      	adds	r3, #32
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fba6 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	74fb      	strb	r3, [r7, #19]
      break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800307c:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308a:	4973      	ldr	r1, [pc, #460]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d041      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ac:	d02a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b2:	d824      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030be:	d81e      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d010      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ca:	e018      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030cc:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a61      	ldr	r2, [pc, #388]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d8:	e015      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fa73 	bl	80035cc <RCCEx_PLLSAI1_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ea:	e00c      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3320      	adds	r3, #32
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb5e 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030fc:	e003      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	74fb      	strb	r3, [r7, #19]
      break;
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800310c:	4b52      	ldr	r3, [pc, #328]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311a:	494f      	ldr	r1, [pc, #316]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a0 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b41      	ldr	r3, [pc, #260]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	4a40      	ldr	r2, [pc, #256]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	; 0x58
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003168:	2301      	movs	r3, #1
 800316a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3a      	ldr	r2, [pc, #232]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003178:	f7fe fb70 	bl	800185c <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fe fb6c 	bl	800185c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	74fb      	strb	r3, [r7, #19]
        break;
 8003192:	e005      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d15c      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d019      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe fb2b 	bl	800185c <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003208:	e00b      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fb27 	bl	800185c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d902      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	74fb      	strb	r3, [r7, #19]
            break;
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ec      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
 8003254:	e006      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003264:	7c7b      	ldrb	r3, [r7, #17]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326a:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a9d      	ldr	r2, [pc, #628]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003282:	4b98      	ldr	r3, [pc, #608]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 0203 	bic.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	4994      	ldr	r1, [pc, #592]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a4:	4b8f      	ldr	r3, [pc, #572]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 020c 	bic.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	498c      	ldr	r1, [pc, #560]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c6:	4b87      	ldr	r3, [pc, #540]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4983      	ldr	r1, [pc, #524]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e8:	4b7e      	ldr	r3, [pc, #504]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	497b      	ldr	r1, [pc, #492]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800330a:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	4972      	ldr	r1, [pc, #456]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332c:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	496a      	ldr	r1, [pc, #424]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	4961      	ldr	r1, [pc, #388]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003370:	4b5c      	ldr	r3, [pc, #368]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	4959      	ldr	r1, [pc, #356]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	4950      	ldr	r1, [pc, #320]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	4948      	ldr	r1, [pc, #288]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	493f      	ldr	r1, [pc, #252]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d028      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f8:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	4937      	ldr	r1, [pc, #220]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d106      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
 8003424:	e011      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f8c8 	bl	80035cc <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	491f      	ldr	r1, [pc, #124]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003480:	60d3      	str	r3, [r2, #12]
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f899 	bl	80035cc <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02b      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d2:	d109      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a02      	ldr	r2, [pc, #8]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034de:	60d3      	str	r3, [r2, #12]
 80034e0:	e014      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f867 	bl	80035cc <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003526:	4928      	ldr	r1, [pc, #160]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003536:	d10d      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2102      	movs	r1, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f844 	bl	80035cc <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3320      	adds	r3, #32
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f925 	bl	80037b4 <RCCEx_PLLSAI2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003592:	490d      	ldr	r1, [pc, #52]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b6:	4904      	ldr	r1, [pc, #16]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035be:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000

080035cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035da:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d018      	beq.n	8003618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035e6:	4b72      	ldr	r3, [pc, #456]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d10d      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
       ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035fe:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
       ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d047      	beq.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e044      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d018      	beq.n	8003652 <RCCEx_PLLSAI1_Config+0x86>
 8003620:	2b03      	cmp	r3, #3
 8003622:	d825      	bhi.n	8003670 <RCCEx_PLLSAI1_Config+0xa4>
 8003624:	2b01      	cmp	r3, #1
 8003626:	d002      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x62>
 8003628:	2b02      	cmp	r3, #2
 800362a:	d009      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x74>
 800362c:	e020      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800362e:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11d      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363e:	e01a      	b.n	8003676 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003640:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e013      	b.n	800367a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800365e:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800366e:	e006      	b.n	800367e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e004      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	430b      	orrs	r3, r1
 800369c:	4944      	ldr	r1, [pc, #272]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d17d      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036a8:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe f8d2 	bl	800185c <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036bc:	f7fe f8ce 	bl	800185c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
        break;
 80036ce:	e005      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d160      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	0211      	lsls	r1, r2, #8
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	0912      	lsrs	r2, r2, #4
 8003700:	0452      	lsls	r2, r2, #17
 8003702:	430a      	orrs	r2, r1
 8003704:	492a      	ldr	r1, [pc, #168]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	610b      	str	r3, [r1, #16]
 800370a:	e027      	b.n	800375c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d112      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800371a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	0211      	lsls	r1, r2, #8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6912      	ldr	r2, [r2, #16]
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	3a01      	subs	r2, #1
 800372c:	0552      	lsls	r2, r2, #21
 800372e:	430a      	orrs	r2, r1
 8003730:	491f      	ldr	r1, [pc, #124]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	610b      	str	r3, [r1, #16]
 8003736:	e011      	b.n	800375c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6892      	ldr	r2, [r2, #8]
 8003748:	0211      	lsls	r1, r2, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6952      	ldr	r2, [r2, #20]
 800374e:	0852      	lsrs	r2, r2, #1
 8003750:	3a01      	subs	r2, #1
 8003752:	0652      	lsls	r2, r2, #25
 8003754:	430a      	orrs	r2, r1
 8003756:	4916      	ldr	r1, [pc, #88]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe f878 	bl	800185c <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376e:	e009      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003770:	f7fe f874 	bl	800185c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	73fb      	strb	r3, [r7, #15]
          break;
 8003782:	e005      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4904      	ldr	r1, [pc, #16]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c2:	4b6a      	ldr	r3, [pc, #424]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ce:	4b67      	ldr	r3, [pc, #412]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
       ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
       ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d047      	beq.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e044      	b.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d018      	beq.n	800383a <RCCEx_PLLSAI2_Config+0x86>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d825      	bhi.n	8003858 <RCCEx_PLLSAI2_Config+0xa4>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d002      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x62>
 8003810:	2b02      	cmp	r3, #2
 8003812:	d009      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x74>
 8003814:	e020      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003816:	4b55      	ldr	r3, [pc, #340]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11d      	bne.n	800385e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003826:	e01a      	b.n	800385e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e013      	b.n	8003862 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003846:	4b49      	ldr	r3, [pc, #292]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003856:	e006      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e004      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003866:	bf00      	nop
    }

    if(status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	430b      	orrs	r3, r1
 8003884:	4939      	ldr	r1, [pc, #228]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d167      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a35      	ldr	r2, [pc, #212]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fd ffde 	bl	800185c <HAL_GetTick>
 80038a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a2:	e009      	b.n	80038b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a4:	f7fd ffda 	bl	800185c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d902      	bls.n	80038b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	73fb      	strb	r3, [r7, #15]
        break;
 80038b6:	e005      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b8:	4b2c      	ldr	r3, [pc, #176]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ef      	bne.n	80038a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d14a      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d0:	4b26      	ldr	r3, [pc, #152]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	0912      	lsrs	r2, r2, #4
 80038e8:	0452      	lsls	r2, r2, #17
 80038ea:	430a      	orrs	r2, r1
 80038ec:	491f      	ldr	r1, [pc, #124]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	614b      	str	r3, [r1, #20]
 80038f2:	e011      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6892      	ldr	r2, [r2, #8]
 8003904:	0211      	lsls	r1, r2, #8
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6912      	ldr	r2, [r2, #16]
 800390a:	0852      	lsrs	r2, r2, #1
 800390c:	3a01      	subs	r2, #1
 800390e:	0652      	lsls	r2, r2, #25
 8003910:	430a      	orrs	r2, r1
 8003912:	4916      	ldr	r1, [pc, #88]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd ff9a 	bl	800185c <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800392c:	f7fd ff96 	bl	800185c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
          break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e049      	b.n	8003a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f841 	bl	8003a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 f9f8 	bl	8003da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e04f      	b.n	8003aec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a76:	d018      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIM_Base_Start_IT+0x76>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d115      	bne.n	8003ad6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d015      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac2:	d011      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	e008      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e000      	b.n	8003aea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40013400 	.word	0x40013400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	00010007 	.word	0x00010007

08003b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d122      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d11b      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0202 	mvn.w	r2, #2
 8003b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f905 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8f7 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f908 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0204 	mvn.w	r2, #4
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8db 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8cd 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8de 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0208 	mvn.w	r2, #8
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8b1 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8a3 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8b4 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0210 	mvn.w	r2, #16
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2208      	movs	r2, #8
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f887 	bl	8003d66 <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f879 	bl	8003d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f88a 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0201 	mvn.w	r2, #1
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fc fe38 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b80      	cmp	r3, #128	; 0x80
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f914 	bl	8003eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d107      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f907 	bl	8003f00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d10e      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f838 	bl	8003d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d10e      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d107      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f06f 0220 	mvn.w	r2, #32
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8c7 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a40      	ldr	r2, [pc, #256]	; (8003eb8 <TIM_Base_SetConfig+0x114>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc2:	d00f      	beq.n	8003de4 <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a3d      	ldr	r2, [pc, #244]	; (8003ebc <TIM_Base_SetConfig+0x118>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <TIM_Base_SetConfig+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <TIM_Base_SetConfig+0x120>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <TIM_Base_SetConfig+0x124>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <TIM_Base_SetConfig+0x114>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01f      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d01b      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <TIM_Base_SetConfig+0x118>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d017      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <TIM_Base_SetConfig+0x11c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <TIM_Base_SetConfig+0x120>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00f      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <TIM_Base_SetConfig+0x124>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <TIM_Base_SetConfig+0x128>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <TIM_Base_SetConfig+0x12c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a26      	ldr	r2, [pc, #152]	; (8003ed4 <TIM_Base_SetConfig+0x130>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d108      	bne.n	8003e50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <TIM_Base_SetConfig+0x114>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0xf8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0xf8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <TIM_Base_SetConfig+0x128>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0xf8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <TIM_Base_SetConfig+0x12c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0xf8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <TIM_Base_SetConfig+0x130>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d103      	bne.n	8003ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	615a      	str	r2, [r3, #20]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40013400 	.word	0x40013400
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e040      	b.n	8003fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fc fd26 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fc1c 	bl	8004790 <UART_SetConfig>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e022      	b.n	8003fa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fe9a 	bl	8004ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 ff21 	bl	8004de8 <UART_CheckIdleState>
 8003fa6:	4603      	mov	r3, r0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	f040 8082 	bne.w	80040ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_Transmit+0x26>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07a      	b.n	80040d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit+0x38>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e073      	b.n	80040d0 <HAL_UART_Transmit+0x120>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2221      	movs	r2, #33	; 0x21
 8003ffc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd fc2d 	bl	800185c <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x80>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004040:	e02d      	b.n	800409e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 ff14 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e039      	b.n	80040d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406e:	b292      	uxth	r2, r2
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e008      	b.n	800408c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b292      	uxth	r2, r2
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1cb      	bne.n	8004042 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2140      	movs	r1, #64	; 0x40
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fee0 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e005      	b.n	80040d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d166      	bne.n	80041bc <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_UART_Transmit_DMA+0x22>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e05f      	b.n	80041be <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_UART_Transmit_DMA+0x34>
 8004108:	2302      	movs	r3, #2
 800410a:	e058      	b.n	80041be <HAL_UART_Transmit_DMA+0xe6>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	; 0x21
 8004136:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02b      	beq.n	8004198 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <HAL_UART_Transmit_DMA+0xf0>)
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_UART_Transmit_DMA+0xf4>)
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_UART_Transmit_DMA+0xf8>)
 8004156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	2200      	movs	r2, #0
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	4619      	mov	r1, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3328      	adds	r3, #40	; 0x28
 8004170:	461a      	mov	r2, r3
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	f7fd fd18 	bl	8001ba8 <HAL_DMA_Start_IT>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e012      	b.n	80041be <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	080050d5 	.word	0x080050d5
 80041cc:	08005129 	.word	0x08005129
 80041d0:	08005215 	.word	0x08005215

080041d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d131      	bne.n	800424e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_Receive_DMA+0x22>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e02a      	b.n	8004250 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Receive_DMA+0x34>
 8004204:	2302      	movs	r3, #2
 8004206:	e023      	b.n	8004250 <HAL_UART_Receive_DMA+0x7c>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <HAL_UART_Receive_DMA+0x84>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800423c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	461a      	mov	r2, r3
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fe95 	bl	8004f74 <UART_Start_Receive_DMA>
 800424a:	4603      	mov	r3, r0
 800424c:	e000      	b.n	8004250 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40008000 	.word	0x40008000

0800425c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d127      	bne.n	80042ce <HAL_UART_DMAStop+0x72>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b21      	cmp	r3, #33	; 0x21
 8004282:	d124      	bne.n	80042ce <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004292:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fce1 	bl	8001c68 <HAL_DMA_Abort>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd fe07 	bl	8001ec4 <HAL_DMA_GetError>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d105      	bne.n	80042c8 <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2210      	movs	r2, #16
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e032      	b.n	800432e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 febf 	bl	800504c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d127      	bne.n	800432c <HAL_UART_DMAStop+0xd0>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	d124      	bne.n	800432c <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d015      	beq.n	8004326 <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd fcb2 	bl	8001c68 <HAL_DMA_Abort>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fdd8 	bl	8001ec4 <HAL_DMA_GetError>
 8004314:	4603      	mov	r3, r0
 8004316:	2b20      	cmp	r3, #32
 8004318:	d105      	bne.n	8004326 <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2210      	movs	r2, #16
 800431e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e003      	b.n	800432e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fea5 	bl	8005076 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f640 030f 	movw	r3, #2063	; 0x80f
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d113      	bne.n	8004390 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 81ce 	beq.w	8004722 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
      }
      return;
 800438e:	e1c8      	b.n	8004722 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80e3 	beq.w	800455e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4ba6      	ldr	r3, [pc, #664]	; (8004640 <HAL_UART_IRQHandler+0x308>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80d8 	beq.w	800455e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <HAL_UART_IRQHandler+0xa2>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_UART_IRQHandler+0xce>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2202      	movs	r2, #2
 80043f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_UART_IRQHandler+0xfa>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2204      	movs	r2, #4
 8004420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004428:	f043 0202 	orr.w	r2, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2208      	movs	r2, #8
 8004456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <HAL_UART_IRQHandler+0x15e>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8142 	beq.w	8004726 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d004      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d031      	beq.n	800454a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fdc5 	bl	8005076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d123      	bne.n	8004542 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004508:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	2b00      	cmp	r3, #0
 8004510:	d013      	beq.n	800453a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <HAL_UART_IRQHandler+0x30c>)
 8004518:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fbe0 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004534:	4610      	mov	r0, r2
 8004536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	e00f      	b.n	800455a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f912 	bl	8004764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	e00b      	b.n	800455a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f90e 	bl	8004764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	e007      	b.n	800455a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f90a 	bl	8004764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004558:	e0e5      	b.n	8004726 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455a:	bf00      	nop
    return;
 800455c:	e0e3      	b.n	8004726 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004562:	2b01      	cmp	r3, #1
 8004564:	f040 80a9 	bne.w	80046ba <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80a3 	beq.w	80046ba <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 809d 	beq.w	80046ba <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2210      	movs	r2, #16
 8004586:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d158      	bne.n	8004648 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80c1 	beq.w	800472a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045ae:	893a      	ldrh	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f080 80ba 	bcs.w	800472a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	893a      	ldrh	r2, [r7, #8]
 80045ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0210 	bic.w	r2, r2, #16
 8004618:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fb22 	bl	8001c68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004630:	b29b      	uxth	r3, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	b29b      	uxth	r3, r3
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f89d 	bl	8004778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800463e:	e074      	b.n	800472a <HAL_UART_IRQHandler+0x3f2>
 8004640:	04000120 	.word	0x04000120
 8004644:	08005291 	.word	0x08005291
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004654:	b29b      	uxth	r3, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d063      	beq.n	800472e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d060      	beq.n	800472e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800467a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0210 	bic.w	r2, r2, #16
 80046ac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f860 	bl	8004778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046b8:	e039      	b.n	800472e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_UART_IRQHandler+0x3a8>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fe08 	bl	80052ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046de:	e029      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
    }
    return;
 8004704:	e015      	b.n	8004732 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d011      	beq.n	8004734 <HAL_UART_IRQHandler+0x3fc>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fdce 	bl	80052bc <UART_EndTransmit_IT>
    return;
 8004720:	e008      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004722:	bf00      	nop
 8004724:	e006      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
      return;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
      return;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004732:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop

0800473c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4bad      	ldr	r3, [pc, #692]	; (8004a70 <UART_SetConfig+0x2e0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	69f9      	ldr	r1, [r7, #28]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4aa2      	ldr	r2, [pc, #648]	; (8004a74 <UART_SetConfig+0x2e4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a99      	ldr	r2, [pc, #612]	; (8004a78 <UART_SetConfig+0x2e8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d121      	bne.n	800485a <UART_SetConfig+0xca>
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <UART_SetConfig+0x2ec>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d817      	bhi.n	8004854 <UART_SetConfig+0xc4>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x9c>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004849 	.word	0x08004849
 8004834:	08004843 	.word	0x08004843
 8004838:	0800484f 	.word	0x0800484f
 800483c:	2301      	movs	r3, #1
 800483e:	76fb      	strb	r3, [r7, #27]
 8004840:	e0e7      	b.n	8004a12 <UART_SetConfig+0x282>
 8004842:	2302      	movs	r3, #2
 8004844:	76fb      	strb	r3, [r7, #27]
 8004846:	e0e4      	b.n	8004a12 <UART_SetConfig+0x282>
 8004848:	2304      	movs	r3, #4
 800484a:	76fb      	strb	r3, [r7, #27]
 800484c:	e0e1      	b.n	8004a12 <UART_SetConfig+0x282>
 800484e:	2308      	movs	r3, #8
 8004850:	76fb      	strb	r3, [r7, #27]
 8004852:	e0de      	b.n	8004a12 <UART_SetConfig+0x282>
 8004854:	2310      	movs	r3, #16
 8004856:	76fb      	strb	r3, [r7, #27]
 8004858:	e0db      	b.n	8004a12 <UART_SetConfig+0x282>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a88      	ldr	r2, [pc, #544]	; (8004a80 <UART_SetConfig+0x2f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d132      	bne.n	80048ca <UART_SetConfig+0x13a>
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <UART_SetConfig+0x2ec>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b0c      	cmp	r3, #12
 8004870:	d828      	bhi.n	80048c4 <UART_SetConfig+0x134>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0xe8>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048c5 	.word	0x080048c5
 8004880:	080048c5 	.word	0x080048c5
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048b9 	.word	0x080048b9
 800488c:	080048c5 	.word	0x080048c5
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080048c5 	.word	0x080048c5
 8004898:	080048b3 	.word	0x080048b3
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	080048bf 	.word	0x080048bf
 80048ac:	2300      	movs	r3, #0
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	e0af      	b.n	8004a12 <UART_SetConfig+0x282>
 80048b2:	2302      	movs	r3, #2
 80048b4:	76fb      	strb	r3, [r7, #27]
 80048b6:	e0ac      	b.n	8004a12 <UART_SetConfig+0x282>
 80048b8:	2304      	movs	r3, #4
 80048ba:	76fb      	strb	r3, [r7, #27]
 80048bc:	e0a9      	b.n	8004a12 <UART_SetConfig+0x282>
 80048be:	2308      	movs	r3, #8
 80048c0:	76fb      	strb	r3, [r7, #27]
 80048c2:	e0a6      	b.n	8004a12 <UART_SetConfig+0x282>
 80048c4:	2310      	movs	r3, #16
 80048c6:	76fb      	strb	r3, [r7, #27]
 80048c8:	e0a3      	b.n	8004a12 <UART_SetConfig+0x282>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6d      	ldr	r2, [pc, #436]	; (8004a84 <UART_SetConfig+0x2f4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d120      	bne.n	8004916 <UART_SetConfig+0x186>
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <UART_SetConfig+0x2ec>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048de:	2b30      	cmp	r3, #48	; 0x30
 80048e0:	d013      	beq.n	800490a <UART_SetConfig+0x17a>
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d814      	bhi.n	8004910 <UART_SetConfig+0x180>
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d009      	beq.n	80048fe <UART_SetConfig+0x16e>
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d810      	bhi.n	8004910 <UART_SetConfig+0x180>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <UART_SetConfig+0x168>
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d006      	beq.n	8004904 <UART_SetConfig+0x174>
 80048f6:	e00b      	b.n	8004910 <UART_SetConfig+0x180>
 80048f8:	2300      	movs	r3, #0
 80048fa:	76fb      	strb	r3, [r7, #27]
 80048fc:	e089      	b.n	8004a12 <UART_SetConfig+0x282>
 80048fe:	2302      	movs	r3, #2
 8004900:	76fb      	strb	r3, [r7, #27]
 8004902:	e086      	b.n	8004a12 <UART_SetConfig+0x282>
 8004904:	2304      	movs	r3, #4
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	e083      	b.n	8004a12 <UART_SetConfig+0x282>
 800490a:	2308      	movs	r3, #8
 800490c:	76fb      	strb	r3, [r7, #27]
 800490e:	e080      	b.n	8004a12 <UART_SetConfig+0x282>
 8004910:	2310      	movs	r3, #16
 8004912:	76fb      	strb	r3, [r7, #27]
 8004914:	e07d      	b.n	8004a12 <UART_SetConfig+0x282>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a5b      	ldr	r2, [pc, #364]	; (8004a88 <UART_SetConfig+0x2f8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d120      	bne.n	8004962 <UART_SetConfig+0x1d2>
 8004920:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <UART_SetConfig+0x2ec>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800492a:	2bc0      	cmp	r3, #192	; 0xc0
 800492c:	d013      	beq.n	8004956 <UART_SetConfig+0x1c6>
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d814      	bhi.n	800495c <UART_SetConfig+0x1cc>
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d009      	beq.n	800494a <UART_SetConfig+0x1ba>
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d810      	bhi.n	800495c <UART_SetConfig+0x1cc>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x1b4>
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d006      	beq.n	8004950 <UART_SetConfig+0x1c0>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x1cc>
 8004944:	2300      	movs	r3, #0
 8004946:	76fb      	strb	r3, [r7, #27]
 8004948:	e063      	b.n	8004a12 <UART_SetConfig+0x282>
 800494a:	2302      	movs	r3, #2
 800494c:	76fb      	strb	r3, [r7, #27]
 800494e:	e060      	b.n	8004a12 <UART_SetConfig+0x282>
 8004950:	2304      	movs	r3, #4
 8004952:	76fb      	strb	r3, [r7, #27]
 8004954:	e05d      	b.n	8004a12 <UART_SetConfig+0x282>
 8004956:	2308      	movs	r3, #8
 8004958:	76fb      	strb	r3, [r7, #27]
 800495a:	e05a      	b.n	8004a12 <UART_SetConfig+0x282>
 800495c:	2310      	movs	r3, #16
 800495e:	76fb      	strb	r3, [r7, #27]
 8004960:	e057      	b.n	8004a12 <UART_SetConfig+0x282>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a49      	ldr	r2, [pc, #292]	; (8004a8c <UART_SetConfig+0x2fc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d125      	bne.n	80049b8 <UART_SetConfig+0x228>
 800496c:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <UART_SetConfig+0x2ec>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497a:	d017      	beq.n	80049ac <UART_SetConfig+0x21c>
 800497c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004980:	d817      	bhi.n	80049b2 <UART_SetConfig+0x222>
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d00b      	beq.n	80049a0 <UART_SetConfig+0x210>
 8004988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498c:	d811      	bhi.n	80049b2 <UART_SetConfig+0x222>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <UART_SetConfig+0x20a>
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d006      	beq.n	80049a6 <UART_SetConfig+0x216>
 8004998:	e00b      	b.n	80049b2 <UART_SetConfig+0x222>
 800499a:	2300      	movs	r3, #0
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e038      	b.n	8004a12 <UART_SetConfig+0x282>
 80049a0:	2302      	movs	r3, #2
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	e035      	b.n	8004a12 <UART_SetConfig+0x282>
 80049a6:	2304      	movs	r3, #4
 80049a8:	76fb      	strb	r3, [r7, #27]
 80049aa:	e032      	b.n	8004a12 <UART_SetConfig+0x282>
 80049ac:	2308      	movs	r3, #8
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	e02f      	b.n	8004a12 <UART_SetConfig+0x282>
 80049b2:	2310      	movs	r3, #16
 80049b4:	76fb      	strb	r3, [r7, #27]
 80049b6:	e02c      	b.n	8004a12 <UART_SetConfig+0x282>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <UART_SetConfig+0x2e4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d125      	bne.n	8004a0e <UART_SetConfig+0x27e>
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <UART_SetConfig+0x2ec>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d0:	d017      	beq.n	8004a02 <UART_SetConfig+0x272>
 80049d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d6:	d817      	bhi.n	8004a08 <UART_SetConfig+0x278>
 80049d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049dc:	d00b      	beq.n	80049f6 <UART_SetConfig+0x266>
 80049de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e2:	d811      	bhi.n	8004a08 <UART_SetConfig+0x278>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x260>
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x26c>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x278>
 80049f0:	2300      	movs	r3, #0
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e00d      	b.n	8004a12 <UART_SetConfig+0x282>
 80049f6:	2302      	movs	r3, #2
 80049f8:	76fb      	strb	r3, [r7, #27]
 80049fa:	e00a      	b.n	8004a12 <UART_SetConfig+0x282>
 80049fc:	2304      	movs	r3, #4
 80049fe:	76fb      	strb	r3, [r7, #27]
 8004a00:	e007      	b.n	8004a12 <UART_SetConfig+0x282>
 8004a02:	2308      	movs	r3, #8
 8004a04:	76fb      	strb	r3, [r7, #27]
 8004a06:	e004      	b.n	8004a12 <UART_SetConfig+0x282>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	76fb      	strb	r3, [r7, #27]
 8004a0c:	e001      	b.n	8004a12 <UART_SetConfig+0x282>
 8004a0e:	2310      	movs	r3, #16
 8004a10:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <UART_SetConfig+0x2e4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	f040 8087 	bne.w	8004b2c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d837      	bhi.n	8004a94 <UART_SetConfig+0x304>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x29c>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a95 	.word	0x08004a95
 8004a3c:	08004a5f 	.word	0x08004a5f
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a95 	.word	0x08004a95
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe fa14 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004a54:	6178      	str	r0, [r7, #20]
        break;
 8004a56:	e022      	b.n	8004a9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <UART_SetConfig+0x300>)
 8004a5a:	617b      	str	r3, [r7, #20]
        break;
 8004a5c:	e01f      	b.n	8004a9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe f975 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004a62:	6178      	str	r0, [r7, #20]
        break;
 8004a64:	e01b      	b.n	8004a9e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6a:	617b      	str	r3, [r7, #20]
        break;
 8004a6c:	e017      	b.n	8004a9e <UART_SetConfig+0x30e>
 8004a6e:	bf00      	nop
 8004a70:	efff69f3 	.word	0xefff69f3
 8004a74:	40008000 	.word	0x40008000
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40004400 	.word	0x40004400
 8004a84:	40004800 	.word	0x40004800
 8004a88:	40004c00 	.word	0x40004c00
 8004a8c:	40005000 	.word	0x40005000
 8004a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	76bb      	strb	r3, [r7, #26]
        break;
 8004a9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80f1 	beq.w	8004c88 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d305      	bcc.n	8004ac2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d902      	bls.n	8004ac8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	76bb      	strb	r3, [r7, #26]
 8004ac6:	e0df      	b.n	8004c88 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	020b      	lsls	r3, r1, #8
 8004ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ade:	0202      	lsls	r2, r0, #8
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	6849      	ldr	r1, [r1, #4]
 8004ae4:	0849      	lsrs	r1, r1, #1
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	1814      	adds	r4, r2, r0
 8004aee:	eb43 0501 	adc.w	r5, r3, r1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb fbbe 	bl	8000280 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b12:	d308      	bcc.n	8004b26 <UART_SetConfig+0x396>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d204      	bcs.n	8004b26 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e0b0      	b.n	8004c88 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	76bb      	strb	r3, [r7, #26]
 8004b2a:	e0ad      	b.n	8004c88 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d15c      	bne.n	8004bf0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004b36:	7efb      	ldrb	r3, [r7, #27]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d828      	bhi.n	8004b8e <UART_SetConfig+0x3fe>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x3b4>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004b8f 	.word	0x08004b8f
 8004b54:	08004b7f 	.word	0x08004b7f
 8004b58:	08004b8f 	.word	0x08004b8f
 8004b5c:	08004b8f 	.word	0x08004b8f
 8004b60:	08004b8f 	.word	0x08004b8f
 8004b64:	08004b87 	.word	0x08004b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe f988 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004b6c:	6178      	str	r0, [r7, #20]
        break;
 8004b6e:	e013      	b.n	8004b98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b70:	f7fe f99a 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004b74:	6178      	str	r0, [r7, #20]
        break;
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b78:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <UART_SetConfig+0x510>)
 8004b7a:	617b      	str	r3, [r7, #20]
        break;
 8004b7c:	e00c      	b.n	8004b98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7e:	f7fe f8e5 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004b82:	6178      	str	r0, [r7, #20]
        break;
 8004b84:	e008      	b.n	8004b98 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	617b      	str	r3, [r7, #20]
        break;
 8004b8c:	e004      	b.n	8004b98 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	76bb      	strb	r3, [r7, #26]
        break;
 8004b96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d074      	beq.n	8004c88 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	005a      	lsls	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b0f      	cmp	r3, #15
 8004bba:	d916      	bls.n	8004bea <UART_SetConfig+0x45a>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc2:	d212      	bcs.n	8004bea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f023 030f 	bic.w	r3, r3, #15
 8004bcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	89fb      	ldrh	r3, [r7, #14]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	89fa      	ldrh	r2, [r7, #14]
 8004be6:	60da      	str	r2, [r3, #12]
 8004be8:	e04e      	b.n	8004c88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	76bb      	strb	r3, [r7, #26]
 8004bee:	e04b      	b.n	8004c88 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf0:	7efb      	ldrb	r3, [r7, #27]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d827      	bhi.n	8004c46 <UART_SetConfig+0x4b6>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x46c>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe f92c 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004c24:	6178      	str	r0, [r7, #20]
        break;
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe f93e 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	6178      	str	r0, [r7, #20]
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <UART_SetConfig+0x510>)
 8004c32:	617b      	str	r3, [r7, #20]
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe f889 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004c3a:	6178      	str	r0, [r7, #20]
        break;
 8004c3c:	e008      	b.n	8004c50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	617b      	str	r3, [r7, #20]
        break;
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	085a      	lsrs	r2, r3, #1
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d908      	bls.n	8004c84 <UART_SetConfig+0x4f4>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d204      	bcs.n	8004c84 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e001      	b.n	8004c88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c94:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	00f42400 	.word	0x00f42400

08004ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01a      	beq.n	8004dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da2:	d10a      	bne.n	8004dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df8:	f7fc fd30 	bl	800185c <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d10e      	bne.n	8004e2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f82d 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e023      	b.n	8004e72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d10e      	bne.n	8004e56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f817 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e00d      	b.n	8004e72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8a:	e05e      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e92:	d05a      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fc fce2 	bl	800185c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11b      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e043      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02c      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efe:	d124      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00f      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d091      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2222      	movs	r2, #34	; 0x22
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02b      	beq.n	8004ffe <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a25      	ldr	r2, [pc, #148]	; (8005040 <UART_Start_Receive_DMA+0xcc>)
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a24      	ldr	r2, [pc, #144]	; (8005044 <UART_Start_Receive_DMA+0xd0>)
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a23      	ldr	r2, [pc, #140]	; (8005048 <UART_Start_Receive_DMA+0xd4>)
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	f7fc fde5 	bl	8001ba8 <HAL_DMA_Start_IT>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e01c      	b.n	8005038 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005014:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005034:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	08005145 	.word	0x08005145
 8005044:	080051dd 	.word	0x080051dd
 8005048:	08005215 	.word	0x08005215

0800504c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005062:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	679a      	str	r2, [r3, #120]	; 0x78
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800508c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0210 	bic.w	r2, r2, #16
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d114      	bne.n	800511a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005106:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005116:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005118:	e002      	b.n	8005120 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7fb ff2a 	bl	8000f74 <HAL_UART_TxCpltCallback>
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fb00 	bl	800473c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d12a      	bne.n	80051b6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005176:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005196:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d107      	bne.n	80051b6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0210 	bic.w	r2, r2, #16
 80051b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051c4:	4619      	mov	r1, r3
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fad6 	bl	8004778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051cc:	e002      	b.n	80051d4 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7fb feb6 	bl	8000f40 <HAL_UART_RxCpltCallback>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d109      	bne.n	8005206 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff faba 	bl	8004778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005204:	e002      	b.n	800520c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff faa2 	bl	8004750 <HAL_UART_RxHalfCpltCallback>
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005226:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d109      	bne.n	8005250 <UART_DMAError+0x3c>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b21      	cmp	r3, #33	; 0x21
 8005240:	d106      	bne.n	8005250 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff fefe 	bl	800504c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d109      	bne.n	8005272 <UART_DMAError+0x5e>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b22      	cmp	r3, #34	; 0x22
 8005262:	d106      	bne.n	8005272 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7ff ff02 	bl	8005076 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005278:	f043 0210 	orr.w	r2, r3, #16
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f7ff fa6e 	bl	8004764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fa58 	bl	8004764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fb fe47 	bl	8000f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <__NVIC_SetPriority>:
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	6039      	str	r1, [r7, #0]
 800530e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005314:	2b00      	cmp	r3, #0
 8005316:	db0a      	blt.n	800532e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	490c      	ldr	r1, [pc, #48]	; (8005350 <__NVIC_SetPriority+0x4c>)
 800531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005322:	0112      	lsls	r2, r2, #4
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	440b      	add	r3, r1
 8005328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800532c:	e00a      	b.n	8005344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4908      	ldr	r1, [pc, #32]	; (8005354 <__NVIC_SetPriority+0x50>)
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	3b04      	subs	r3, #4
 800533c:	0112      	lsls	r2, r2, #4
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	440b      	add	r3, r1
 8005342:	761a      	strb	r2, [r3, #24]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	e000e100 	.word	0xe000e100
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <SysTick_Handler+0x1c>)
 800535e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005360:	f001 fcfe 	bl	8006d60 <xTaskGetSchedulerState>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d001      	beq.n	800536e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800536a:	f002 fcd5 	bl	8007d18 <xPortSysTickHandler>
  }
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	e000e010 	.word	0xe000e010

08005378 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800537c:	2100      	movs	r1, #0
 800537e:	f06f 0004 	mvn.w	r0, #4
 8005382:	f7ff ffbf 	bl	8005304 <__NVIC_SetPriority>
#endif
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005392:	f3ef 8305 	mrs	r3, IPSR
 8005396:	603b      	str	r3, [r7, #0]
  return(result);
 8005398:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800539e:	f06f 0305 	mvn.w	r3, #5
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e00c      	b.n	80053c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <osKernelInitialize+0x44>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <osKernelInitialize+0x44>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	e002      	b.n	80053c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000094 	.word	0x20000094

080053d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053da:	f3ef 8305 	mrs	r3, IPSR
 80053de:	603b      	str	r3, [r7, #0]
  return(result);
 80053e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80053e6:	f06f 0305 	mvn.w	r3, #5
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	e010      	b.n	8005410 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <osKernelStart+0x48>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d109      	bne.n	800540a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053f6:	f7ff ffbf 	bl	8005378 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053fa:	4b08      	ldr	r3, [pc, #32]	; (800541c <osKernelStart+0x48>)
 80053fc:	2202      	movs	r2, #2
 80053fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005400:	f001 f866 	bl	80064d0 <vTaskStartScheduler>
      stat = osOK;
 8005404:	2300      	movs	r3, #0
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e002      	b.n	8005410 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800540e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005410:	687b      	ldr	r3, [r7, #4]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000094 	.word	0x20000094

08005420 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005430:	f3ef 8305 	mrs	r3, IPSR
 8005434:	617b      	str	r3, [r7, #20]
  return(result);
 8005436:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005438:	2b00      	cmp	r3, #0
 800543a:	d17e      	bne.n	800553a <osThreadNew+0x11a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d07b      	beq.n	800553a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005446:	2318      	movs	r3, #24
 8005448:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d045      	beq.n	80054e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <osThreadNew+0x48>
        name = attr->name;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <osThreadNew+0x6e>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b38      	cmp	r3, #56	; 0x38
 8005480:	d805      	bhi.n	800548e <osThreadNew+0x6e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <osThreadNew+0x72>
        return (NULL);
 800548e:	2300      	movs	r3, #0
 8005490:	e054      	b.n	800553c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <osThreadNew+0xa8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b5b      	cmp	r3, #91	; 0x5b
 80054b0:	d90a      	bls.n	80054c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <osThreadNew+0xa8>
        mem = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e010      	b.n	80054ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10c      	bne.n	80054ea <osThreadNew+0xca>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <osThreadNew+0xca>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <osThreadNew+0xca>
          mem = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e001      	b.n	80054ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fe0c 	bl	8006124 <xTaskCreateStatic>
 800550c:	4603      	mov	r3, r0
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e013      	b.n	800553a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d110      	bne.n	800553a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	b29a      	uxth	r2, r3
 800551c:	f107 0310 	add.w	r3, r7, #16
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fe57 	bl	80061de <xTaskCreate>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d001      	beq.n	800553a <osThreadNew+0x11a>
            hTask = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800553a:	693b      	ldr	r3, [r7, #16]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554c:	f3ef 8305 	mrs	r3, IPSR
 8005550:	60bb      	str	r3, [r7, #8]
  return(result);
 8005552:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <osDelay+0x1c>
    stat = osErrorISR;
 8005558:	f06f 0305 	mvn.w	r3, #5
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e007      	b.n	8005570 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <osDelay+0x2c>
      vTaskDelay(ticks);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 ff7c 	bl	8006468 <vTaskDelay>
    }
  }

  return (stat);
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800558c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a06      	ldr	r2, [pc, #24]	; (80055ac <vApplicationGetIdleTaskMemory+0x30>)
 8005592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000098 	.word	0x20000098
 80055ac:	200000f4 	.word	0x200000f4

080055b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <vApplicationGetTimerTaskMemory+0x2c>)
 80055c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vApplicationGetTimerTaskMemory+0x30>)
 80055c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	200002f4 	.word	0x200002f4
 80055e0:	20000350 	.word	0x20000350

080055e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f103 0208 	add.w	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f103 0208 	add.w	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 0208 	add.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569c:	d103      	bne.n	80056a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e00c      	b.n	80056c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3308      	adds	r3, #8
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e002      	b.n	80056b4 <vListInsert+0x2e>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d2f6      	bcs.n	80056ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6892      	ldr	r2, [r2, #8]
 800570e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d103      	bne.n	800572c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1e5a      	subs	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005776:	f002 fa3d 	bl	8007bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	441a      	add	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	3b01      	subs	r3, #1
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d114      	bne.n	80057f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01a      	beq.n	800580a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3310      	adds	r3, #16
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f903 	bl	80069e4 <xTaskRemoveFromEventList>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <xQueueGenericReset+0xcc>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	e009      	b.n	800580a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3310      	adds	r3, #16
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fef2 	bl	80055e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff feed 	bl	80055e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800580a:	f002 fa23 	bl	8007c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800580e:	2301      	movs	r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <xQueueGenericCreateStatic+0x52>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xQueueGenericCreateStatic+0x56>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueGenericCreateStatic+0x58>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	623b      	str	r3, [r7, #32]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <xQueueGenericCreateStatic+0x7e>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <xQueueGenericCreateStatic+0x82>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <xQueueGenericCreateStatic+0x84>
 800589e:	2300      	movs	r3, #0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	61fb      	str	r3, [r7, #28]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058ba:	2350      	movs	r3, #80	; 0x50
 80058bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b50      	cmp	r3, #80	; 0x50
 80058c2:	d00a      	beq.n	80058da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61bb      	str	r3, [r7, #24]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f805 	bl	800590c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005904:	4618      	mov	r0, r3
 8005906:	3730      	adds	r7, #48	; 0x30
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e002      	b.n	800592e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800593a:	2101      	movs	r1, #1
 800593c:	69b8      	ldr	r0, [r7, #24]
 800593e:	f7ff ff05 	bl	800574c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericSend+0x32>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <xQueueGenericSend+0x40>
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xQueueGenericSend+0x44>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xQueueGenericSend+0x46>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <xQueueGenericSend+0x60>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d103      	bne.n	80059c2 <xQueueGenericSend+0x6e>
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <xQueueGenericSend+0x72>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <xQueueGenericSend+0x74>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e2:	f001 f9bd 	bl	8006d60 <xTaskGetSchedulerState>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <xQueueGenericSend+0x9e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueGenericSend+0xa2>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueGenericSend+0xa4>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueGenericSend+0xbe>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a12:	f002 f8ef 	bl	8007bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <xQueueGenericSend+0xd4>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d129      	bne.n	8005a7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a2e:	f000 fa0b 	bl	8005e48 <prvCopyDataToQueue>
 8005a32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d010      	beq.n	8005a5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 ffcf 	bl	80069e4 <xTaskRemoveFromEventList>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b3f      	ldr	r3, [pc, #252]	; (8005b4c <xQueueGenericSend+0x1f8>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	e00a      	b.n	8005a74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a64:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <xQueueGenericSend+0x1f8>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a74:	f002 f8ee 	bl	8007c54 <vPortExitCritical>
				return pdPASS;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e063      	b.n	8005b44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a82:	f002 f8e7 	bl	8007c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e05c      	b.n	8005b44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 f809 	bl	8006aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a9e:	f002 f8d9 	bl	8007c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa2:	f000 fd7b 	bl	800659c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa6:	f002 f8a5 	bl	8007bf4 <vPortEnterCritical>
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab6:	d103      	bne.n	8005ac0 <xQueueGenericSend+0x16c>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d103      	bne.n	8005ad6 <xQueueGenericSend+0x182>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad6:	f002 f8bd 	bl	8007c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ada:	1d3a      	adds	r2, r7, #4
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fff8 	bl	8006ad8 <xTaskCheckForTimeOut>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d124      	bne.n	8005b38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af0:	f000 faa2 	bl	8006038 <prvIsQueueFull>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d018      	beq.n	8005b2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	3310      	adds	r3, #16
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 ff1e 	bl	8006944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0a:	f000 fa2d 	bl	8005f68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b0e:	f000 fd53 	bl	80065b8 <xTaskResumeAll>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f47f af7c 	bne.w	8005a12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <xQueueGenericSend+0x1f8>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	e772      	b.n	8005a12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b2e:	f000 fa1b 	bl	8005f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b32:	f000 fd41 	bl	80065b8 <xTaskResumeAll>
 8005b36:	e76c      	b.n	8005a12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3a:	f000 fa15 	bl	8005f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3e:	f000 fd3b 	bl	80065b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3738      	adds	r7, #56	; 0x38
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b090      	sub	sp, #64	; 0x40
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <xQueueGenericSendFromISR+0x3c>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <xQueueGenericSendFromISR+0x40>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <xQueueGenericSendFromISR+0x42>
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSendFromISR+0x6a>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSendFromISR+0x6e>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSendFromISR+0x70>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bda:	f002 f8ed 	bl	8007db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bde:	f3ef 8211 	mrs	r2, BASEPRI
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	61fa      	str	r2, [r7, #28]
 8005bf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <xQueueGenericSendFromISR+0xbc>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d12f      	bne.n	8005c6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c22:	f000 f911 	bl	8005e48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c2e:	d112      	bne.n	8005c56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d016      	beq.n	8005c66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fed1 	bl	80069e4 <xTaskRemoveFromEventList>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e007      	b.n	8005c66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	b25a      	sxtb	r2, r3
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c66:	2301      	movs	r3, #1
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c6a:	e001      	b.n	8005c70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3740      	adds	r7, #64	; 0x40
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08c      	sub	sp, #48	; 0x30
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <xQueueReceive+0x30>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	623b      	str	r3, [r7, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <xQueueReceive+0x3e>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <xQueueReceive+0x42>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueReceive+0x44>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xQueueReceive+0x5e>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	61fb      	str	r3, [r7, #28]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ce6:	f001 f83b 	bl	8006d60 <xTaskGetSchedulerState>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <xQueueReceive+0x6e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <xQueueReceive+0x72>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <xQueueReceive+0x74>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueReceive+0x8e>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	61bb      	str	r3, [r7, #24]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d16:	f001 ff6d 	bl	8007bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01f      	beq.n	8005d66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f000 f8f7 	bl	8005f1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fe4e 	bl	80069e4 <xTaskRemoveFromEventList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d4e:	4b3d      	ldr	r3, [pc, #244]	; (8005e44 <xQueueReceive+0x1bc>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d5e:	f001 ff79 	bl	8007c54 <vPortExitCritical>
				return pdPASS;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e069      	b.n	8005e3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d6c:	f001 ff72 	bl	8007c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e062      	b.n	8005e3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d7a:	f107 0310 	add.w	r3, r7, #16
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fe94 	bl	8006aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d88:	f001 ff64 	bl	8007c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d8c:	f000 fc06 	bl	800659c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d90:	f001 ff30 	bl	8007bf4 <vPortEnterCritical>
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da0:	d103      	bne.n	8005daa <xQueueReceive+0x122>
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db6:	d103      	bne.n	8005dc0 <xQueueReceive+0x138>
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc0:	f001 ff48 	bl	8007c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dc4:	1d3a      	adds	r2, r7, #4
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fe83 	bl	8006ad8 <xTaskCheckForTimeOut>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d123      	bne.n	8005e20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dda:	f000 f917 	bl	800600c <prvIsQueueEmpty>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d017      	beq.n	8005e14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fda9 	bl	8006944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df4:	f000 f8b8 	bl	8005f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005df8:	f000 fbde 	bl	80065b8 <xTaskResumeAll>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d189      	bne.n	8005d16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <xQueueReceive+0x1bc>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	e780      	b.n	8005d16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e16:	f000 f8a7 	bl	8005f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e1a:	f000 fbcd 	bl	80065b8 <xTaskResumeAll>
 8005e1e:	e77a      	b.n	8005d16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e22:	f000 f8a1 	bl	8005f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e26:	f000 fbc7 	bl	80065b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2c:	f000 f8ee 	bl	800600c <prvIsQueueEmpty>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f43f af6f 	beq.w	8005d16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3730      	adds	r7, #48	; 0x30
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10d      	bne.n	8005e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d14d      	bne.n	8005f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ff92 	bl	8006d9c <xTaskPriorityDisinherit>
 8005e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	e043      	b.n	8005f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d119      	bne.n	8005ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6858      	ldr	r0, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	461a      	mov	r2, r3
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	f002 f9e4 	bl	8008260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d32b      	bcc.n	8005f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	e026      	b.n	8005f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68d8      	ldr	r0, [r3, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	f002 f9ca 	bl	8008260 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	441a      	add	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d207      	bcs.n	8005ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	441a      	add	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d105      	bne.n	8005f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f12:	697b      	ldr	r3, [r7, #20]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	441a      	add	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d303      	bcc.n	8005f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68d9      	ldr	r1, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6838      	ldr	r0, [r7, #0]
 8005f5c:	f002 f980 	bl	8008260 <memcpy>
	}
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f70:	f001 fe40 	bl	8007bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f7c:	e011      	b.n	8005fa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3324      	adds	r3, #36	; 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fd2a 	bl	80069e4 <xTaskRemoveFromEventList>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f96:	f000 fe01 	bl	8006b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dce9      	bgt.n	8005f7e <prvUnlockQueue+0x16>
 8005faa:	e000      	b.n	8005fae <prvUnlockQueue+0x46>
					break;
 8005fac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fb6:	f001 fe4d 	bl	8007c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fba:	f001 fe1b 	bl	8007bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fc6:	e011      	b.n	8005fec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d012      	beq.n	8005ff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fd05 	bl	80069e4 <xTaskRemoveFromEventList>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fe0:	f000 fddc 	bl	8006b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dce9      	bgt.n	8005fc8 <prvUnlockQueue+0x60>
 8005ff4:	e000      	b.n	8005ff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	22ff      	movs	r2, #255	; 0xff
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006000:	f001 fe28 	bl	8007c54 <vPortExitCritical>
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006014:	f001 fdee 	bl	8007bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e001      	b.n	800602a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f001 fe13 	bl	8007c54 <vPortExitCritical>

	return xReturn;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006040:	f001 fdd8 	bl	8007bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	429a      	cmp	r2, r3
 800604e:	d102      	bne.n	8006056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e001      	b.n	800605a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605a:	f001 fdfb 	bl	8007c54 <vPortExitCritical>

	return xReturn;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e014      	b.n	80060a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006078:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <vQueueAddToRegistry+0x50>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006084:	490c      	ldr	r1, [pc, #48]	; (80060b8 <vQueueAddToRegistry+0x50>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <vQueueAddToRegistry+0x50>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800609a:	e006      	b.n	80060aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b07      	cmp	r3, #7
 80060a6:	d9e7      	bls.n	8006078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20001e48 	.word	0x20001e48

080060bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060cc:	f001 fd92 	bl	8007bf4 <vPortEnterCritical>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060dc:	d103      	bne.n	80060e6 <vQueueWaitForMessageRestricted+0x2a>
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f2:	d103      	bne.n	80060fc <vQueueWaitForMessageRestricted+0x40>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fc:	f001 fdaa 	bl	8007c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fc3b 	bl	800698c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	f7ff ff26 	bl	8005f68 <prvUnlockQueue>
	}
 800611c:	bf00      	nop
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08e      	sub	sp, #56	; 0x38
 8006128:	af04      	add	r7, sp, #16
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	623b      	str	r3, [r7, #32]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xTaskCreateStatic+0x46>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61fb      	str	r3, [r7, #28]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800616a:	235c      	movs	r3, #92	; 0x5c
 800616c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b5c      	cmp	r3, #92	; 0x5c
 8006172:	d00a      	beq.n	800618a <xTaskCreateStatic+0x66>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	61bb      	str	r3, [r7, #24]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800618a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01e      	beq.n	80061d0 <xTaskCreateStatic+0xac>
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01b      	beq.n	80061d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061aa:	2300      	movs	r3, #0
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f850 	bl	8006268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ca:	f000 f8dd 	bl	8006388 <prvAddNewTaskToReadyList>
 80061ce:	e001      	b.n	80061d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061d4:	697b      	ldr	r3, [r7, #20]
	}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3728      	adds	r7, #40	; 0x28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08c      	sub	sp, #48	; 0x30
 80061e2:	af04      	add	r7, sp, #16
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fe20 	bl	8007e38 <pvPortMalloc>
 80061f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00e      	beq.n	800621e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006200:	205c      	movs	r0, #92	; 0x5c
 8006202:	f001 fe19 	bl	8007e38 <pvPortMalloc>
 8006206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
 8006214:	e005      	b.n	8006222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006216:	6978      	ldr	r0, [r7, #20]
 8006218:	f001 feda 	bl	8007fd0 <vPortFree>
 800621c:	e001      	b.n	8006222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	2300      	movs	r3, #0
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f80e 	bl	8006268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800624c:	69f8      	ldr	r0, [r7, #28]
 800624e:	f000 f89b 	bl	8006388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006252:	2301      	movs	r3, #1
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e002      	b.n	800625e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800625c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800625e:	69bb      	ldr	r3, [r7, #24]
	}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	21a5      	movs	r1, #165	; 0xa5
 8006282:	f001 fffb 	bl	800827c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006290:	3b01      	subs	r3, #1
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	617b      	str	r3, [r7, #20]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01f      	beq.n	8006306 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e012      	b.n	80062f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	7819      	ldrb	r1, [r3, #0]
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	3334      	adds	r3, #52	; 0x34
 80062dc:	460a      	mov	r2, r1
 80062de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d006      	beq.n	80062fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d9e9      	bls.n	80062cc <prvInitialiseNewTask+0x64>
 80062f8:	e000      	b.n	80062fc <prvInitialiseNewTask+0x94>
			{
				break;
 80062fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006304:	e003      	b.n	800630e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	2b37      	cmp	r3, #55	; 0x37
 8006312:	d901      	bls.n	8006318 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006314:	2337      	movs	r3, #55	; 0x37
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	3304      	adds	r3, #4
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff f978 	bl	8005624 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	3318      	adds	r3, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f973 	bl	8005624 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2200      	movs	r2, #0
 8006358:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	68f9      	ldr	r1, [r7, #12]
 8006366:	69b8      	ldr	r0, [r7, #24]
 8006368:	f001 fb16 	bl	8007998 <pxPortInitialiseStack>
 800636c:	4602      	mov	r2, r0
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637e:	bf00      	nop
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006390:	f001 fc30 	bl	8007bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a2c      	ldr	r2, [pc, #176]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 800639c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800639e:	4b2c      	ldr	r3, [pc, #176]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063ac:	4b27      	ldr	r3, [pc, #156]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d110      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b4:	f000 fc16 	bl	8006be4 <prvInitialiseTaskLists>
 80063b8:	e00d      	b.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c2:	4b23      	ldr	r3, [pc, #140]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d802      	bhi.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063d0:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063d6:	4b20      	ldr	r3, [pc, #128]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <prvAddNewTaskToReadyList+0xd4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <prvAddNewTaskToReadyList+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <prvAddNewTaskToReadyList+0xd4>)
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <prvAddNewTaskToReadyList+0xd8>)
 800640a:	441a      	add	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7ff f913 	bl	800563e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006418:	f001 fc1c 	bl	8007c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800641c:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	429a      	cmp	r2, r3
 8006430:	d207      	bcs.n	8006442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <prvAddNewTaskToReadyList+0xdc>)
 8006434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000c24 	.word	0x20000c24
 8006450:	20000750 	.word	0x20000750
 8006454:	20000c30 	.word	0x20000c30
 8006458:	20000c40 	.word	0x20000c40
 800645c:	20000c2c 	.word	0x20000c2c
 8006460:	20000754 	.word	0x20000754
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d017      	beq.n	80064aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <vTaskDelay+0x60>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <vTaskDelay+0x30>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60bb      	str	r3, [r7, #8]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006498:	f000 f880 	bl	800659c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800649c:	2100      	movs	r1, #0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fed8 	bl	8007254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064a4:	f000 f888 	bl	80065b8 <xTaskResumeAll>
 80064a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <vTaskDelay+0x64>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000c4c 	.word	0x20000c4c
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064de:	463a      	mov	r2, r7
 80064e0:	1d39      	adds	r1, r7, #4
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f848 	bl	800557c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	9202      	str	r2, [sp, #8]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2300      	movs	r3, #0
 80064fc:	460a      	mov	r2, r1
 80064fe:	4921      	ldr	r1, [pc, #132]	; (8006584 <vTaskStartScheduler+0xb4>)
 8006500:	4821      	ldr	r0, [pc, #132]	; (8006588 <vTaskStartScheduler+0xb8>)
 8006502:	f7ff fe0f 	bl	8006124 <xTaskCreateStatic>
 8006506:	4603      	mov	r3, r0
 8006508:	4a20      	ldr	r2, [pc, #128]	; (800658c <vTaskStartScheduler+0xbc>)
 800650a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <vTaskStartScheduler+0xbc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e001      	b.n	800651e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d102      	bne.n	800652a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006524:	f000 feea 	bl	80072fc <xTimerCreateTimerTask>
 8006528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d116      	bne.n	800655e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
}
 8006542:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <vTaskStartScheduler+0xc0>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <vTaskStartScheduler+0xc4>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <vTaskStartScheduler+0xc8>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006558:	f001 faaa 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800655c:	e00e      	b.n	800657c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006564:	d10a      	bne.n	800657c <vTaskStartScheduler+0xac>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60fb      	str	r3, [r7, #12]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <vTaskStartScheduler+0xaa>
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	0800974c 	.word	0x0800974c
 8006588:	08006bb5 	.word	0x08006bb5
 800658c:	20000c48 	.word	0x20000c48
 8006590:	20000c44 	.word	0x20000c44
 8006594:	20000c30 	.word	0x20000c30
 8006598:	20000c28 	.word	0x20000c28

0800659c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <vTaskSuspendAll+0x18>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	4a03      	ldr	r2, [pc, #12]	; (80065b4 <vTaskSuspendAll+0x18>)
 80065a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065aa:	bf00      	nop
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	20000c4c 	.word	0x20000c4c

080065b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065c6:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <xTaskResumeAll+0x118>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	603b      	str	r3, [r7, #0]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065e4:	f001 fb06 	bl	8007bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065e8:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <xTaskResumeAll+0x118>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	4a38      	ldr	r2, [pc, #224]	; (80066d0 <xTaskResumeAll+0x118>)
 80065f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065f2:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <xTaskResumeAll+0x118>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d162      	bne.n	80066c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065fa:	4b36      	ldr	r3, [pc, #216]	; (80066d4 <xTaskResumeAll+0x11c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d05e      	beq.n	80066c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006602:	e02f      	b.n	8006664 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006604:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <xTaskResumeAll+0x120>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3318      	adds	r3, #24
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff f871 	bl	80056f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3304      	adds	r3, #4
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff f86c 	bl	80056f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b2d      	ldr	r3, [pc, #180]	; (80066dc <xTaskResumeAll+0x124>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d903      	bls.n	8006634 <xTaskResumeAll+0x7c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <xTaskResumeAll+0x124>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <xTaskResumeAll+0x128>)
 8006642:	441a      	add	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe fff7 	bl	800563e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4b23      	ldr	r3, [pc, #140]	; (80066e4 <xTaskResumeAll+0x12c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d302      	bcc.n	8006664 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800665e:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <xTaskResumeAll+0x130>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <xTaskResumeAll+0x120>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1cb      	bne.n	8006604 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006672:	f000 fb55 	bl	8006d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <xTaskResumeAll+0x134>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d010      	beq.n	80066a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006682:	f000 f847 	bl	8006714 <xTaskIncrementTick>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800668c:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <xTaskResumeAll+0x130>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3b01      	subs	r3, #1
 8006696:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f1      	bne.n	8006682 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <xTaskResumeAll+0x134>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <xTaskResumeAll+0x130>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <xTaskResumeAll+0x138>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066c0:	f001 fac8 	bl	8007c54 <vPortExitCritical>

	return xAlreadyYielded;
 80066c4:	68bb      	ldr	r3, [r7, #8]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000c4c 	.word	0x20000c4c
 80066d4:	20000c24 	.word	0x20000c24
 80066d8:	20000be4 	.word	0x20000be4
 80066dc:	20000c2c 	.word	0x20000c2c
 80066e0:	20000754 	.word	0x20000754
 80066e4:	20000750 	.word	0x20000750
 80066e8:	20000c38 	.word	0x20000c38
 80066ec:	20000c34 	.word	0x20000c34
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <xTaskGetTickCount+0x1c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006700:	687b      	ldr	r3, [r7, #4]
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000c28 	.word	0x20000c28

08006714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	4b4f      	ldr	r3, [pc, #316]	; (800685c <xTaskIncrementTick+0x148>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 808f 	bne.w	8006846 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006728:	4b4d      	ldr	r3, [pc, #308]	; (8006860 <xTaskIncrementTick+0x14c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006730:	4a4b      	ldr	r2, [pc, #300]	; (8006860 <xTaskIncrementTick+0x14c>)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d120      	bne.n	800677e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800673c:	4b49      	ldr	r3, [pc, #292]	; (8006864 <xTaskIncrementTick+0x150>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <xTaskIncrementTick+0x48>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	603b      	str	r3, [r7, #0]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xTaskIncrementTick+0x46>
 800675c:	4b41      	ldr	r3, [pc, #260]	; (8006864 <xTaskIncrementTick+0x150>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	4b41      	ldr	r3, [pc, #260]	; (8006868 <xTaskIncrementTick+0x154>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a3f      	ldr	r2, [pc, #252]	; (8006864 <xTaskIncrementTick+0x150>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	4a3f      	ldr	r2, [pc, #252]	; (8006868 <xTaskIncrementTick+0x154>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4b3e      	ldr	r3, [pc, #248]	; (800686c <xTaskIncrementTick+0x158>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	4a3d      	ldr	r2, [pc, #244]	; (800686c <xTaskIncrementTick+0x158>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	f000 fad1 	bl	8006d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800677e:	4b3c      	ldr	r3, [pc, #240]	; (8006870 <xTaskIncrementTick+0x15c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d349      	bcc.n	800681c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006788:	4b36      	ldr	r3, [pc, #216]	; (8006864 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006792:	4b37      	ldr	r3, [pc, #220]	; (8006870 <xTaskIncrementTick+0x15c>)
 8006794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006798:	601a      	str	r2, [r3, #0]
					break;
 800679a:	e03f      	b.n	800681c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679c:	4b31      	ldr	r3, [pc, #196]	; (8006864 <xTaskIncrementTick+0x150>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d203      	bcs.n	80067bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067b4:	4a2e      	ldr	r2, [pc, #184]	; (8006870 <xTaskIncrementTick+0x15c>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ba:	e02f      	b.n	800681c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3304      	adds	r3, #4
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe ff99 	bl	80056f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	3318      	adds	r3, #24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe ff90 	bl	80056f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <xTaskIncrementTick+0x160>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d903      	bls.n	80067ec <xTaskIncrementTick+0xd8>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <xTaskIncrementTick+0x160>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <xTaskIncrementTick+0x164>)
 80067fa:	441a      	add	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe ff1b 	bl	800563e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <xTaskIncrementTick+0x168>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	429a      	cmp	r2, r3
 8006814:	d3b8      	bcc.n	8006788 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800681a:	e7b5      	b.n	8006788 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800681c:	4b17      	ldr	r3, [pc, #92]	; (800687c <xTaskIncrementTick+0x168>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	4915      	ldr	r1, [pc, #84]	; (8006878 <xTaskIncrementTick+0x164>)
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d901      	bls.n	8006838 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <xTaskIncrementTick+0x16c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e004      	b.n	8006850 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006846:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <xTaskIncrementTick+0x170>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <xTaskIncrementTick+0x170>)
 800684e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000c4c 	.word	0x20000c4c
 8006860:	20000c28 	.word	0x20000c28
 8006864:	20000bdc 	.word	0x20000bdc
 8006868:	20000be0 	.word	0x20000be0
 800686c:	20000c3c 	.word	0x20000c3c
 8006870:	20000c44 	.word	0x20000c44
 8006874:	20000c2c 	.word	0x20000c2c
 8006878:	20000754 	.word	0x20000754
 800687c:	20000750 	.word	0x20000750
 8006880:	20000c38 	.word	0x20000c38
 8006884:	20000c34 	.word	0x20000c34

08006888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800688e:	4b28      	ldr	r3, [pc, #160]	; (8006930 <vTaskSwitchContext+0xa8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006896:	4b27      	ldr	r3, [pc, #156]	; (8006934 <vTaskSwitchContext+0xac>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800689c:	e041      	b.n	8006922 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800689e:	4b25      	ldr	r3, [pc, #148]	; (8006934 <vTaskSwitchContext+0xac>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <vTaskSwitchContext+0xb0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e010      	b.n	80068ce <vTaskSwitchContext+0x46>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	607b      	str	r3, [r7, #4]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <vTaskSwitchContext+0x3e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	491b      	ldr	r1, [pc, #108]	; (800693c <vTaskSwitchContext+0xb4>)
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0e4      	beq.n	80068ac <vTaskSwitchContext+0x24>
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a13      	ldr	r2, [pc, #76]	; (800693c <vTaskSwitchContext+0xb4>)
 80068ee:	4413      	add	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	3308      	adds	r3, #8
 8006904:	429a      	cmp	r2, r3
 8006906:	d104      	bne.n	8006912 <vTaskSwitchContext+0x8a>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	605a      	str	r2, [r3, #4]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <vTaskSwitchContext+0xb8>)
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	4a06      	ldr	r2, [pc, #24]	; (8006938 <vTaskSwitchContext+0xb0>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6013      	str	r3, [r2, #0]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000c4c 	.word	0x20000c4c
 8006934:	20000c38 	.word	0x20000c38
 8006938:	20000c2c 	.word	0x20000c2c
 800693c:	20000754 	.word	0x20000754
 8006940:	20000750 	.word	0x20000750

08006944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60fb      	str	r3, [r7, #12]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <vTaskPlaceOnEventList+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3318      	adds	r3, #24
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe fe87 	bl	8005686 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006978:	2101      	movs	r1, #1
 800697a:	6838      	ldr	r0, [r7, #0]
 800697c:	f000 fc6a 	bl	8007254 <prvAddCurrentTaskToDelayedList>
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20000750 	.word	0x20000750

0800698c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3318      	adds	r3, #24
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7fe fe3e 	bl	800563e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	68b8      	ldr	r0, [r7, #8]
 80069d2:	f000 fc3f 	bl	8007254 <prvAddCurrentTaskToDelayedList>
	}
 80069d6:	bf00      	nop
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000750 	.word	0x20000750

080069e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	3318      	adds	r3, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fe6f 	bl	80056f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <xTaskRemoveFromEventList+0xb0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d11d      	bne.n	8006a5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe66 	bl	80056f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <xTaskRemoveFromEventList+0xb4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d903      	bls.n	8006a40 <xTaskRemoveFromEventList+0x5c>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <xTaskRemoveFromEventList+0xb4>)
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <xTaskRemoveFromEventList+0xb8>)
 8006a4e:	441a      	add	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7fe fdf1 	bl	800563e <vListInsertEnd>
 8006a5c:	e005      	b.n	8006a6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3318      	adds	r3, #24
 8006a62:	4619      	mov	r1, r3
 8006a64:	480e      	ldr	r0, [pc, #56]	; (8006aa0 <xTaskRemoveFromEventList+0xbc>)
 8006a66:	f7fe fdea 	bl	800563e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <xTaskRemoveFromEventList+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d905      	bls.n	8006a84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <xTaskRemoveFromEventList+0xc4>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e001      	b.n	8006a88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a88:	697b      	ldr	r3, [r7, #20]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000c4c 	.word	0x20000c4c
 8006a98:	20000c2c 	.word	0x20000c2c
 8006a9c:	20000754 	.word	0x20000754
 8006aa0:	20000be4 	.word	0x20000be4
 8006aa4:	20000750 	.word	0x20000750
 8006aa8:	20000c38 	.word	0x20000c38

08006aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <vTaskInternalSetTimeOutState+0x24>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <vTaskInternalSetTimeOutState+0x28>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	605a      	str	r2, [r3, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20000c3c 	.word	0x20000c3c
 8006ad4:	20000c28 	.word	0x20000c28

08006ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	613b      	str	r3, [r7, #16]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60fb      	str	r3, [r7, #12]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b1a:	f001 f86b 	bl	8007bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <xTaskCheckForTimeOut+0xbc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b36:	d102      	bne.n	8006b3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
 8006b3c:	e023      	b.n	8006b86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <xTaskCheckForTimeOut+0xc0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d007      	beq.n	8006b5a <xTaskCheckForTimeOut+0x82>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d302      	bcc.n	8006b5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e015      	b.n	8006b86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d20b      	bcs.n	8006b7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad2      	subs	r2, r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff ff9b 	bl	8006aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	e004      	b.n	8006b86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b86:	f001 f865 	bl	8007c54 <vPortExitCritical>

	return xReturn;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000c28 	.word	0x20000c28
 8006b98:	20000c3c 	.word	0x20000c3c

08006b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <vTaskMissedYield+0x14>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000c38 	.word	0x20000c38

08006bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bbc:	f000 f852 	bl	8006c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <prvIdleTask+0x28>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d9f9      	bls.n	8006bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <prvIdleTask+0x2c>)
 8006bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bd8:	e7f0      	b.n	8006bbc <prvIdleTask+0x8>
 8006bda:	bf00      	nop
 8006bdc:	20000754 	.word	0x20000754
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bea:	2300      	movs	r3, #0
 8006bec:	607b      	str	r3, [r7, #4]
 8006bee:	e00c      	b.n	8006c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <prvInitialiseTaskLists+0x60>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fcf0 	bl	80055e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3301      	adds	r3, #1
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b37      	cmp	r3, #55	; 0x37
 8006c0e:	d9ef      	bls.n	8006bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c10:	480d      	ldr	r0, [pc, #52]	; (8006c48 <prvInitialiseTaskLists+0x64>)
 8006c12:	f7fe fce7 	bl	80055e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c16:	480d      	ldr	r0, [pc, #52]	; (8006c4c <prvInitialiseTaskLists+0x68>)
 8006c18:	f7fe fce4 	bl	80055e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c1c:	480c      	ldr	r0, [pc, #48]	; (8006c50 <prvInitialiseTaskLists+0x6c>)
 8006c1e:	f7fe fce1 	bl	80055e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c22:	480c      	ldr	r0, [pc, #48]	; (8006c54 <prvInitialiseTaskLists+0x70>)
 8006c24:	f7fe fcde 	bl	80055e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c28:	480b      	ldr	r0, [pc, #44]	; (8006c58 <prvInitialiseTaskLists+0x74>)
 8006c2a:	f7fe fcdb 	bl	80055e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <prvInitialiseTaskLists+0x78>)
 8006c30:	4a05      	ldr	r2, [pc, #20]	; (8006c48 <prvInitialiseTaskLists+0x64>)
 8006c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <prvInitialiseTaskLists+0x7c>)
 8006c36:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <prvInitialiseTaskLists+0x68>)
 8006c38:	601a      	str	r2, [r3, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000754 	.word	0x20000754
 8006c48:	20000bb4 	.word	0x20000bb4
 8006c4c:	20000bc8 	.word	0x20000bc8
 8006c50:	20000be4 	.word	0x20000be4
 8006c54:	20000bf8 	.word	0x20000bf8
 8006c58:	20000c10 	.word	0x20000c10
 8006c5c:	20000bdc 	.word	0x20000bdc
 8006c60:	20000be0 	.word	0x20000be0

08006c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c6a:	e019      	b.n	8006ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c6c:	f000 ffc2 	bl	8007bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c70:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <prvCheckTasksWaitingTermination+0x50>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fd3b 	bl	80056f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <prvCheckTasksWaitingTermination+0x54>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <prvCheckTasksWaitingTermination+0x54>)
 8006c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <prvCheckTasksWaitingTermination+0x58>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <prvCheckTasksWaitingTermination+0x58>)
 8006c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c96:	f000 ffdd 	bl	8007c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f810 	bl	8006cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <prvCheckTasksWaitingTermination+0x58>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e1      	bne.n	8006c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000bf8 	.word	0x20000bf8
 8006cb8:	20000c24 	.word	0x20000c24
 8006cbc:	20000c0c 	.word	0x20000c0c

08006cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d108      	bne.n	8006ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f97a 	bl	8007fd0 <vPortFree>
				vPortFree( pxTCB );
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f977 	bl	8007fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ce2:	e018      	b.n	8006d16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d103      	bne.n	8006cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 f96e 	bl	8007fd0 <vPortFree>
	}
 8006cf4:	e00f      	b.n	8006d16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d00a      	beq.n	8006d16 <prvDeleteTCB+0x56>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60fb      	str	r3, [r7, #12]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <prvDeleteTCB+0x54>
	}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvResetNextTaskUnblockTime+0x38>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvResetNextTaskUnblockTime+0x3c>)
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d38:	e008      	b.n	8006d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <prvResetNextTaskUnblockTime+0x38>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <prvResetNextTaskUnblockTime+0x3c>)
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000bdc 	.word	0x20000bdc
 8006d5c:	20000c44 	.word	0x20000c44

08006d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <xTaskGetSchedulerState+0x34>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	e008      	b.n	8006d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <xTaskGetSchedulerState+0x38>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	e001      	b.n	8006d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d82:	2300      	movs	r3, #0
 8006d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d86:	687b      	ldr	r3, [r7, #4]
	}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	20000c30 	.word	0x20000c30
 8006d98:	20000c4c 	.word	0x20000c4c

08006d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d056      	beq.n	8006e60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <xTaskPriorityDisinherit+0xd0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d00a      	beq.n	8006dd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60bb      	str	r3, [r7, #8]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d02c      	beq.n	8006e60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d128      	bne.n	8006e60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fc70 	bl	80056f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <xTaskPriorityDisinherit+0xd4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <xTaskPriorityDisinherit+0xa4>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <xTaskPriorityDisinherit+0xd4>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <xTaskPriorityDisinherit+0xd8>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe fbf1 	bl	800563e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e60:	697b      	ldr	r3, [r7, #20]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000750 	.word	0x20000750
 8006e70:	20000c2c 	.word	0x20000c2c
 8006e74:	20000754 	.word	0x20000754

08006e78 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006e86:	f000 feb5 	bl	8007bf4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006e8a:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d01a      	beq.n	8006ece <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006e98:	4b22      	ldr	r3, [pc, #136]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	43d2      	mvns	r2, r2
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006ea6:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	6838      	ldr	r0, [r7, #0]
 8006eba:	f000 f9cb 	bl	8007254 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <xTaskNotifyWait+0xb0>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ece:	f000 fec1 	bl	8007c54 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006ed2:	f000 fe8f 	bl	8007bf4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d002      	beq.n	8006efa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e008      	b.n	8006f0c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	43d2      	mvns	r2, r2
 8006f04:	400a      	ands	r2, r1
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <xTaskNotifyWait+0xac>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8006f16:	f000 fe9d 	bl	8007c54 <vPortExitCritical>

		return xReturn;
 8006f1a:	697b      	ldr	r3, [r7, #20]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000750 	.word	0x20000750
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xTaskGenericNotify+0x30>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61bb      	str	r3, [r7, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006f60:	f000 fe48 	bl	8007bf4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f78:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d828      	bhi.n	8006fda <xTaskGenericNotify+0xae>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <xTaskGenericNotify+0x64>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006ffb 	.word	0x08006ffb
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006fb3 	.word	0x08006fb3
 8006f9c:	08006fbf 	.word	0x08006fbf
 8006fa0:	08006fc7 	.word	0x08006fc7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006fb0:	e026      	b.n	8007000 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006fbc:	e020      	b.n	8007000 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006fc4:	e01c      	b.n	8007000 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d003      	beq.n	8006fd4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006fd2:	e015      	b.n	8007000 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006fd8:	e012      	b.n	8007000 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d00c      	beq.n	8006ffe <xTaskGenericNotify+0xd2>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	617b      	str	r3, [r7, #20]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskGenericNotify+0xcc>
					break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <xTaskGenericNotify+0xd4>

					break;
 8006ffe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007000:	7ffb      	ldrb	r3, [r7, #31]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d13a      	bne.n	800707c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fb74 	bl	80056f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	4b1d      	ldr	r3, [pc, #116]	; (800708c <xTaskGenericNotify+0x160>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d903      	bls.n	8007024 <xTaskGenericNotify+0xf8>
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a1a      	ldr	r2, [pc, #104]	; (800708c <xTaskGenericNotify+0x160>)
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4a17      	ldr	r2, [pc, #92]	; (8007090 <xTaskGenericNotify+0x164>)
 8007032:	441a      	add	r2, r3
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fe faff 	bl	800563e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <xTaskGenericNotify+0x132>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	613b      	str	r3, [r7, #16]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <xTaskGenericNotify+0x168>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	429a      	cmp	r2, r3
 800706a:	d907      	bls.n	800707c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <xTaskGenericNotify+0x16c>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800707c:	f000 fdea 	bl	8007c54 <vPortExitCritical>

		return xReturn;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007082:	4618      	mov	r0, r3
 8007084:	3728      	adds	r7, #40	; 0x28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000c2c 	.word	0x20000c2c
 8007090:	20000754 	.word	0x20000754
 8007094:	20000750 	.word	0x20000750
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	; 0x38
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070cc:	f000 fe74 	bl	8007db8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80070d4:	f3ef 8211 	mrs	r2, BASEPRI
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80070ec:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	2202      	movs	r2, #2
 800710c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b04      	cmp	r3, #4
 8007114:	d828      	bhi.n	8007168 <xTaskGenericNotifyFromISR+0xcc>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <xTaskGenericNotifyFromISR+0x80>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007189 	.word	0x08007189
 8007120:	08007131 	.word	0x08007131
 8007124:	0800713f 	.word	0x0800713f
 8007128:	0800714b 	.word	0x0800714b
 800712c:	08007153 	.word	0x08007153
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	431a      	orrs	r2, r3
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800713c:	e027      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007148:	e021      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007150:	e01d      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007156:	2b02      	cmp	r3, #2
 8007158:	d003      	beq.n	8007162 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007160:	e015      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007166:	e012      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007170:	d00c      	beq.n	800718c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61bb      	str	r3, [r7, #24]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <xTaskGenericNotifyFromISR+0xea>
					break;
 8007188:	bf00      	nop
 800718a:	e000      	b.n	800718e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800718c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800718e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007192:	2b01      	cmp	r3, #1
 8007194:	d146      	bne.n	8007224 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	617b      	str	r3, [r7, #20]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b4:	4b21      	ldr	r3, [pc, #132]	; (800723c <xTaskGenericNotifyFromISR+0x1a0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11d      	bne.n	80071f8 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fa99 	bl	80056f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <xTaskGenericNotifyFromISR+0x1a4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d903      	bls.n	80071da <xTaskGenericNotifyFromISR+0x13e>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <xTaskGenericNotifyFromISR+0x1a4>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a17      	ldr	r2, [pc, #92]	; (8007244 <xTaskGenericNotifyFromISR+0x1a8>)
 80071e8:	441a      	add	r2, r3
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe fa24 	bl	800563e <vListInsertEnd>
 80071f6:	e005      	b.n	8007204 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	3318      	adds	r3, #24
 80071fc:	4619      	mov	r1, r3
 80071fe:	4812      	ldr	r0, [pc, #72]	; (8007248 <xTaskGenericNotifyFromISR+0x1ac>)
 8007200:	f7fe fa1d 	bl	800563e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4b10      	ldr	r3, [pc, #64]	; (800724c <xTaskGenericNotifyFromISR+0x1b0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	429a      	cmp	r2, r3
 8007210:	d908      	bls.n	8007224 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	2201      	movs	r2, #1
 800721c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <xTaskGenericNotifyFromISR+0x1b4>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007232:	4618      	mov	r0, r3
 8007234:	3738      	adds	r7, #56	; 0x38
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000c4c 	.word	0x20000c4c
 8007240:	20000c2c 	.word	0x20000c2c
 8007244:	20000754 	.word	0x20000754
 8007248:	20000be4 	.word	0x20000be4
 800724c:	20000750 	.word	0x20000750
 8007250:	20000c38 	.word	0x20000c38

08007254 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800725e:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007264:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fa44 	bl	80056f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007276:	d10a      	bne.n	800728e <prvAddCurrentTaskToDelayedList+0x3a>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4819      	ldr	r0, [pc, #100]	; (80072ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007288:	f7fe f9d9 	bl	800563e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800728c:	e026      	b.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d209      	bcs.n	80072ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fe f9e7 	bl	8005686 <vListInsert>
}
 80072b8:	e010      	b.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ba:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe f9dd 	bl	8005686 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d202      	bcs.n	80072dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072d6:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6013      	str	r3, [r2, #0]
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000c28 	.word	0x20000c28
 80072e8:	20000750 	.word	0x20000750
 80072ec:	20000c10 	.word	0x20000c10
 80072f0:	20000be0 	.word	0x20000be0
 80072f4:	20000bdc 	.word	0x20000bdc
 80072f8:	20000c44 	.word	0x20000c44

080072fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	; 0x28
 8007300:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007306:	f000 fb07 	bl	8007918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800730a:	4b1c      	ldr	r3, [pc, #112]	; (800737c <xTimerCreateTimerTask+0x80>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d021      	beq.n	8007356 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800731a:	1d3a      	adds	r2, r7, #4
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe f943 	bl	80055b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	9202      	str	r2, [sp, #8]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	2302      	movs	r3, #2
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2300      	movs	r3, #0
 800733a:	460a      	mov	r2, r1
 800733c:	4910      	ldr	r1, [pc, #64]	; (8007380 <xTimerCreateTimerTask+0x84>)
 800733e:	4811      	ldr	r0, [pc, #68]	; (8007384 <xTimerCreateTimerTask+0x88>)
 8007340:	f7fe fef0 	bl	8006124 <xTaskCreateStatic>
 8007344:	4603      	mov	r3, r0
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <xTimerCreateTimerTask+0x8c>)
 8007348:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <xTimerCreateTimerTask+0x8c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007352:	2301      	movs	r3, #1
 8007354:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	613b      	str	r3, [r7, #16]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007372:	697b      	ldr	r3, [r7, #20]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000c80 	.word	0x20000c80
 8007380:	08009754 	.word	0x08009754
 8007384:	080074c1 	.word	0x080074c1
 8007388:	20000c84 	.word	0x20000c84

0800738c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	623b      	str	r3, [r7, #32]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <xTimerGenericCommand+0x98>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d02a      	beq.n	8007418 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	dc18      	bgt.n	8007406 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073d4:	f7ff fcc4 	bl	8006d60 <xTaskGetSchedulerState>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d109      	bne.n	80073f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073de:	4b11      	ldr	r3, [pc, #68]	; (8007424 <xTimerGenericCommand+0x98>)
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	f107 0110 	add.w	r1, r7, #16
 80073e6:	2300      	movs	r3, #0
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	f7fe fab3 	bl	8005954 <xQueueGenericSend>
 80073ee:	6278      	str	r0, [r7, #36]	; 0x24
 80073f0:	e012      	b.n	8007418 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073f2:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <xTimerGenericCommand+0x98>)
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f107 0110 	add.w	r1, r7, #16
 80073fa:	2300      	movs	r3, #0
 80073fc:	2200      	movs	r2, #0
 80073fe:	f7fe faa9 	bl	8005954 <xQueueGenericSend>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24
 8007404:	e008      	b.n	8007418 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007406:	4b07      	ldr	r3, [pc, #28]	; (8007424 <xTimerGenericCommand+0x98>)
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f107 0110 	add.w	r1, r7, #16
 800740e:	2300      	movs	r3, #0
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	f7fe fb9d 	bl	8005b50 <xQueueGenericSendFromISR>
 8007416:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800741a:	4618      	mov	r0, r3
 800741c:	3728      	adds	r7, #40	; 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000c80 	.word	0x20000c80

08007428 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af02      	add	r7, sp, #8
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007432:	4b22      	ldr	r3, [pc, #136]	; (80074bc <prvProcessExpiredTimer+0x94>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe f959 	bl	80056f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d022      	beq.n	800749a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	18d1      	adds	r1, r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	6978      	ldr	r0, [r7, #20]
 8007462:	f000 f8d1 	bl	8007608 <prvInsertTimerInActiveList>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01f      	beq.n	80074ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	2100      	movs	r1, #0
 8007476:	6978      	ldr	r0, [r7, #20]
 8007478:	f7ff ff88 	bl	800738c <xTimerGenericCommand>
 800747c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d113      	bne.n	80074ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	6978      	ldr	r0, [r7, #20]
 80074b2:	4798      	blx	r3
}
 80074b4:	bf00      	nop
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000c78 	.word	0x20000c78

080074c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 f857 	bl	8007580 <prvGetNextExpireTime>
 80074d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4619      	mov	r1, r3
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f803 	bl	80074e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074de:	f000 f8d5 	bl	800768c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074e2:	e7f1      	b.n	80074c8 <prvTimerTask+0x8>

080074e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074ee:	f7ff f855 	bl	800659c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074f2:	f107 0308 	add.w	r3, r7, #8
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f866 	bl	80075c8 <prvSampleTimeNow>
 80074fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d130      	bne.n	8007566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <prvProcessTimerOrBlockTask+0x3c>
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	429a      	cmp	r2, r3
 8007510:	d806      	bhi.n	8007520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007512:	f7ff f851 	bl	80065b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ff85 	bl	8007428 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800751e:	e024      	b.n	800756a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <prvProcessTimerOrBlockTask+0x90>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <prvProcessTimerOrBlockTask+0x50>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <prvProcessTimerOrBlockTask+0x52>
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <prvProcessTimerOrBlockTask+0x94>)
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	f7fe fdb9 	bl	80060bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800754a:	f7ff f835 	bl	80065b8 <xTaskResumeAll>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007554:	4b09      	ldr	r3, [pc, #36]	; (800757c <prvProcessTimerOrBlockTask+0x98>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
}
 8007564:	e001      	b.n	800756a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007566:	f7ff f827 	bl	80065b8 <xTaskResumeAll>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000c7c 	.word	0x20000c7c
 8007578:	20000c80 	.word	0x20000c80
 800757c:	e000ed04 	.word	0xe000ed04

08007580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <prvGetNextExpireTime+0x44>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <prvGetNextExpireTime+0x16>
 8007592:	2201      	movs	r2, #1
 8007594:	e000      	b.n	8007598 <prvGetNextExpireTime+0x18>
 8007596:	2200      	movs	r2, #0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <prvGetNextExpireTime+0x44>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	e001      	b.n	80075b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000c78 	.word	0x20000c78

080075c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075d0:	f7ff f890 	bl	80066f4 <xTaskGetTickCount>
 80075d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <prvSampleTimeNow+0x3c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d205      	bcs.n	80075ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075e0:	f000 f936 	bl	8007850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075f2:	4a04      	ldr	r2, [pc, #16]	; (8007604 <prvSampleTimeNow+0x3c>)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075f8:	68fb      	ldr	r3, [r7, #12]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000c88 	.word	0x20000c88

08007608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d812      	bhi.n	8007654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	d302      	bcc.n	8007642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800763c:	2301      	movs	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	e01b      	b.n	800767a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007642:	4b10      	ldr	r3, [pc, #64]	; (8007684 <prvInsertTimerInActiveList+0x7c>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3304      	adds	r3, #4
 800764a:	4619      	mov	r1, r3
 800764c:	4610      	mov	r0, r2
 800764e:	f7fe f81a 	bl	8005686 <vListInsert>
 8007652:	e012      	b.n	800767a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d206      	bcs.n	800766a <prvInsertTimerInActiveList+0x62>
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e007      	b.n	800767a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <prvInsertTimerInActiveList+0x80>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fe f806 	bl	8005686 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800767a:	697b      	ldr	r3, [r7, #20]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000c7c 	.word	0x20000c7c
 8007688:	20000c78 	.word	0x20000c78

0800768c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	; 0x38
 8007690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007692:	e0ca      	b.n	800782a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	da18      	bge.n	80076cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	3304      	adds	r3, #4
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	61fb      	str	r3, [r7, #28]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076c2:	6850      	ldr	r0, [r2, #4]
 80076c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076c6:	6892      	ldr	r2, [r2, #8]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f2c0 80aa 	blt.w	8007828 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	3304      	adds	r3, #4
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f807 	bl	80056f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ea:	463b      	mov	r3, r7
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff ff6b 	bl	80075c8 <prvSampleTimeNow>
 80076f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	f200 8097 	bhi.w	800782a <prvProcessReceivedCommands+0x19e>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <prvProcessReceivedCommands+0x78>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	0800772d 	.word	0x0800772d
 8007708:	0800772d 	.word	0x0800772d
 800770c:	0800772d 	.word	0x0800772d
 8007710:	080077a1 	.word	0x080077a1
 8007714:	080077b5 	.word	0x080077b5
 8007718:	080077ff 	.word	0x080077ff
 800771c:	0800772d 	.word	0x0800772d
 8007720:	0800772d 	.word	0x0800772d
 8007724:	080077a1 	.word	0x080077a1
 8007728:	080077b5 	.word	0x080077b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	b2da      	uxtb	r2, r3
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	18d1      	adds	r1, r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774c:	f7ff ff5c 	bl	8007608 <prvInsertTimerInActiveList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d069      	beq.n	800782a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05e      	beq.n	800782a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	441a      	add	r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	2100      	movs	r1, #0
 800777c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800777e:	f7ff fe05 	bl	800738c <xTimerGenericCommand>
 8007782:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d14f      	bne.n	800782a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	61bb      	str	r3, [r7, #24]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80077b2:	e03a      	b.n	800782a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	617b      	str	r3, [r7, #20]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	18d1      	adds	r1, r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f8:	f7ff ff06 	bl	8007608 <prvInsertTimerInActiveList>
					break;
 80077fc:	e015      	b.n	800782a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800780c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780e:	f000 fbdf 	bl	8007fd0 <vPortFree>
 8007812:	e00a      	b.n	800782a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007826:	e000      	b.n	800782a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <prvProcessReceivedCommands+0x1c0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	1d39      	adds	r1, r7, #4
 8007830:	2200      	movs	r2, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fa28 	bl	8005c88 <xQueueReceive>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	f47f af2a 	bne.w	8007694 <prvProcessReceivedCommands+0x8>
	}
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3730      	adds	r7, #48	; 0x30
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000c80 	.word	0x20000c80

08007850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007856:	e048      	b.n	80078ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007858:	4b2d      	ldr	r3, [pc, #180]	; (8007910 <prvSwitchTimerLists+0xc0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <prvSwitchTimerLists+0xc0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7fd ff41 	bl	80056f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02e      	beq.n	80078ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	429a      	cmp	r2, r3
 800789c:	d90e      	bls.n	80078bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <prvSwitchTimerLists+0xc0>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7fd fee6 	bl	8005686 <vListInsert>
 80078ba:	e016      	b.n	80078ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	2100      	movs	r1, #0
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff fd60 	bl	800738c <xTimerGenericCommand>
 80078cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	603b      	str	r3, [r7, #0]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <prvSwitchTimerLists+0xc0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1b1      	bne.n	8007858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <prvSwitchTimerLists+0xc0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078fa:	4b06      	ldr	r3, [pc, #24]	; (8007914 <prvSwitchTimerLists+0xc4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a04      	ldr	r2, [pc, #16]	; (8007910 <prvSwitchTimerLists+0xc0>)
 8007900:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007902:	4a04      	ldr	r2, [pc, #16]	; (8007914 <prvSwitchTimerLists+0xc4>)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000c78 	.word	0x20000c78
 8007914:	20000c7c 	.word	0x20000c7c

08007918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800791e:	f000 f969 	bl	8007bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d120      	bne.n	800796c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800792a:	4814      	ldr	r0, [pc, #80]	; (800797c <prvCheckForValidListAndQueue+0x64>)
 800792c:	f7fd fe5a 	bl	80055e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007930:	4813      	ldr	r0, [pc, #76]	; (8007980 <prvCheckForValidListAndQueue+0x68>)
 8007932:	f7fd fe57 	bl	80055e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <prvCheckForValidListAndQueue+0x6c>)
 8007938:	4a10      	ldr	r2, [pc, #64]	; (800797c <prvCheckForValidListAndQueue+0x64>)
 800793a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800793c:	4b12      	ldr	r3, [pc, #72]	; (8007988 <prvCheckForValidListAndQueue+0x70>)
 800793e:	4a10      	ldr	r2, [pc, #64]	; (8007980 <prvCheckForValidListAndQueue+0x68>)
 8007940:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007942:	2300      	movs	r3, #0
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <prvCheckForValidListAndQueue+0x74>)
 8007948:	4a11      	ldr	r2, [pc, #68]	; (8007990 <prvCheckForValidListAndQueue+0x78>)
 800794a:	2110      	movs	r1, #16
 800794c:	200a      	movs	r0, #10
 800794e:	f7fd ff65 	bl	800581c <xQueueGenericCreateStatic>
 8007952:	4603      	mov	r3, r0
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007956:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <prvCheckForValidListAndQueue+0x60>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <prvCheckForValidListAndQueue+0x60>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	490b      	ldr	r1, [pc, #44]	; (8007994 <prvCheckForValidListAndQueue+0x7c>)
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fb7e 	bl	8006068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800796c:	f000 f972 	bl	8007c54 <vPortExitCritical>
}
 8007970:	bf00      	nop
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000c80 	.word	0x20000c80
 800797c:	20000c50 	.word	0x20000c50
 8007980:	20000c64 	.word	0x20000c64
 8007984:	20000c78 	.word	0x20000c78
 8007988:	20000c7c 	.word	0x20000c7c
 800798c:	20000d2c 	.word	0x20000d2c
 8007990:	20000c8c 	.word	0x20000c8c
 8007994:	0800975c 	.word	0x0800975c

08007998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f023 0201 	bic.w	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c8:	4a0c      	ldr	r2, [pc, #48]	; (80079fc <pxPortInitialiseStack+0x64>)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3b14      	subs	r3, #20
 80079d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3b04      	subs	r3, #4
 80079de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f06f 0202 	mvn.w	r2, #2
 80079e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b20      	subs	r3, #32
 80079ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ee:	68fb      	ldr	r3, [r7, #12]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	08007a01 	.word	0x08007a01

08007a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <prvTaskExitError+0x54>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a12:	d00a      	beq.n	8007a2a <prvTaskExitError+0x2a>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <prvTaskExitError+0x28>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60bb      	str	r3, [r7, #8]
}
 8007a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a3e:	bf00      	nop
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0fc      	beq.n	8007a40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	2000000c 	.word	0x2000000c
	...

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	; (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ab6:	4b46      	ldr	r3, [pc, #280]	; (8007bd0 <xPortStartScheduler+0x120>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a46      	ldr	r2, [pc, #280]	; (8007bd4 <xPortStartScheduler+0x124>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10a      	bne.n	8007ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ad6:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <xPortStartScheduler+0x120>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a3f      	ldr	r2, [pc, #252]	; (8007bd8 <xPortStartScheduler+0x128>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10a      	bne.n	8007af6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007af6:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <xPortStartScheduler+0x12c>)
 8007af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <xPortStartScheduler+0x130>)
 8007b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b1e:	4b31      	ldr	r3, [pc, #196]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b20:	2207      	movs	r2, #7
 8007b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b24:	e009      	b.n	8007b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b26:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b42:	2b80      	cmp	r3, #128	; 0x80
 8007b44:	d0ef      	beq.n	8007b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b46:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1c3 0307 	rsb	r3, r3, #7
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d00a      	beq.n	8007b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60bb      	str	r3, [r7, #8]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b68:	4b1e      	ldr	r3, [pc, #120]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b72:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b86:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b92:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b9e:	f000 f8dd 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <xPortStartScheduler+0x13c>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ba8:	f000 f8fc 	bl	8007da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bac:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <xPortStartScheduler+0x140>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0f      	ldr	r2, [pc, #60]	; (8007bf0 <xPortStartScheduler+0x140>)
 8007bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bb8:	f7ff ff66 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bbc:	f7fe fe64 	bl	8006888 <vTaskSwitchContext>
	prvTaskExitError();
 8007bc0:	f7ff ff1e 	bl	8007a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	e000ed00 	.word	0xe000ed00
 8007bd4:	410fc271 	.word	0x410fc271
 8007bd8:	410fc270 	.word	0x410fc270
 8007bdc:	e000e400 	.word	0xe000e400
 8007be0:	20000d7c 	.word	0x20000d7c
 8007be4:	20000d80 	.word	0x20000d80
 8007be8:	e000ed20 	.word	0xe000ed20
 8007bec:	2000000c 	.word	0x2000000c
 8007bf0:	e000ef34 	.word	0xe000ef34

08007bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	607b      	str	r3, [r7, #4]
}
 8007c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	4a0d      	ldr	r2, [pc, #52]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10f      	bne.n	8007c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <vPortEnterCritical+0x5c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	603b      	str	r3, [r7, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <vPortEnterCritical+0x4a>
	}
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	2000000c 	.word	0x2000000c
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c5a:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <vPortExitCritical+0x24>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	607b      	str	r3, [r7, #4]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <vPortExitCritical+0x42>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f383 8811 	msr	BASEPRI, r3
}
 8007c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	2000000c 	.word	0x2000000c
	...

08007cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cd4:	f380 8811 	msr	BASEPRI, r0
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f7fe fdd2 	bl	8006888 <vTaskSwitchContext>
 8007ce4:	f04f 0000 	mov.w	r0, #0
 8007ce8:	f380 8811 	msr	BASEPRI, r0
 8007cec:	bc09      	pop	{r0, r3}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	f01e 0f10 	tst.w	lr, #16
 8007cfa:	bf08      	it	eq
 8007cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d00:	f380 8809 	msr	PSP, r0
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst>:
 8007d10:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7fe fcef 	bl	8006714 <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <xPortSysTickHandler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <vPortSetupTimerInterrupt+0x44>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010
 8007d94:	e000e018 	.word	0xe000e018
 8007d98:	20000000 	.word	0x20000000
 8007d9c:	10624dd3 	.word	0x10624dd3
 8007da0:	e000e014 	.word	0xe000e014

08007da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007db4 <vPortEnableVFP+0x10>
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dae:	6001      	str	r1, [r0, #0]
 8007db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007db2:	bf00      	nop
 8007db4:	e000ed88 	.word	0xe000ed88

08007db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dbe:	f3ef 8305 	mrs	r3, IPSR
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d914      	bls.n	8007df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <vPortValidateInterruptPriority+0x70>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd4:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <vPortValidateInterruptPriority+0x74>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20a      	bcs.n	8007df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <vPortValidateInterruptPriority+0x78>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <vPortValidateInterruptPriority+0x7c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d90a      	bls.n	8007e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	603b      	str	r3, [r7, #0]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <vPortValidateInterruptPriority+0x60>
	}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	e000e3f0 	.word	0xe000e3f0
 8007e2c:	20000d7c 	.word	0x20000d7c
 8007e30:	e000ed0c 	.word	0xe000ed0c
 8007e34:	20000d80 	.word	0x20000d80

08007e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	; 0x28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e44:	f7fe fbaa 	bl	800659c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e48:	4b5b      	ldr	r3, [pc, #364]	; (8007fb8 <pvPortMalloc+0x180>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e50:	f000 f920 	bl	8008094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e54:	4b59      	ldr	r3, [pc, #356]	; (8007fbc <pvPortMalloc+0x184>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 8093 	bne.w	8007f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01d      	beq.n	8007ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e68:	2208      	movs	r2, #8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d014      	beq.n	8007ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	3308      	adds	r3, #8
 8007e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	617b      	str	r3, [r7, #20]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d06e      	beq.n	8007f88 <pvPortMalloc+0x150>
 8007eaa:	4b45      	ldr	r3, [pc, #276]	; (8007fc0 <pvPortMalloc+0x188>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d869      	bhi.n	8007f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eb4:	4b43      	ldr	r3, [pc, #268]	; (8007fc4 <pvPortMalloc+0x18c>)
 8007eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eb8:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <pvPortMalloc+0x18c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ebe:	e004      	b.n	8007eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d903      	bls.n	8007edc <pvPortMalloc+0xa4>
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f1      	bne.n	8007ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007edc:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <pvPortMalloc+0x180>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d050      	beq.n	8007f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2208      	movs	r2, #8
 8007eec:	4413      	add	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	2308      	movs	r3, #8
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d91f      	bls.n	8007f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <pvPortMalloc+0xf8>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	613b      	str	r3, [r7, #16]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f42:	69b8      	ldr	r0, [r7, #24]
 8007f44:	f000 f908 	bl	8008158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f48:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f56:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <pvPortMalloc+0x190>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d203      	bcs.n	8007f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f62:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <pvPortMalloc+0x190>)
 8007f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <pvPortMalloc+0x184>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <pvPortMalloc+0x194>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <pvPortMalloc+0x194>)
 8007f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f88:	f7fe fb16 	bl	80065b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <pvPortMalloc+0x174>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60fb      	str	r3, [r7, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <pvPortMalloc+0x172>
	return pvReturn;
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	; 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001944 	.word	0x20001944
 8007fbc:	20001958 	.word	0x20001958
 8007fc0:	20001948 	.word	0x20001948
 8007fc4:	2000193c 	.word	0x2000193c
 8007fc8:	2000194c 	.word	0x2000194c
 8007fcc:	20001950 	.word	0x20001950

08007fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d04d      	beq.n	800807e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	425b      	negs	r3, r3
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <vPortFree+0xb8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <vPortFree+0x44>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60fb      	str	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <vPortFree+0x62>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60bb      	str	r3, [r7, #8]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <vPortFree+0xb8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01e      	beq.n	800807e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11a      	bne.n	800807e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <vPortFree+0xb8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	43db      	mvns	r3, r3
 8008052:	401a      	ands	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008058:	f7fe faa0 	bl	800659c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <vPortFree+0xbc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4413      	add	r3, r2
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <vPortFree+0xbc>)
 8008068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f000 f874 	bl	8008158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <vPortFree+0xc0>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a06      	ldr	r2, [pc, #24]	; (8008090 <vPortFree+0xc0>)
 8008078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800807a:	f7fe fa9d 	bl	80065b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800807e:	bf00      	nop
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20001958 	.word	0x20001958
 800808c:	20001948 	.word	0x20001948
 8008090:	20001954 	.word	0x20001954

08008094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800809a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800809e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080a0:	4b27      	ldr	r3, [pc, #156]	; (8008140 <prvHeapInit+0xac>)
 80080a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00c      	beq.n	80080c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3307      	adds	r3, #7
 80080b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <prvHeapInit+0xac>)
 80080c4:	4413      	add	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080cc:	4a1d      	ldr	r2, [pc, #116]	; (8008144 <prvHeapInit+0xb0>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080d2:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <prvHeapInit+0xb0>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4413      	add	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080e0:	2208      	movs	r2, #8
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a15      	ldr	r2, [pc, #84]	; (8008148 <prvHeapInit+0xb4>)
 80080f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <prvHeapInit+0xb4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvHeapInit+0xb4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvHeapInit+0xb4>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4a0a      	ldr	r2, [pc, #40]	; (800814c <prvHeapInit+0xb8>)
 8008122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <prvHeapInit+0xbc>)
 800812a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <prvHeapInit+0xc0>)
 800812e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	20000d84 	.word	0x20000d84
 8008144:	2000193c 	.word	0x2000193c
 8008148:	20001944 	.word	0x20001944
 800814c:	2000194c 	.word	0x2000194c
 8008150:	20001948 	.word	0x20001948
 8008154:	20001958 	.word	0x20001958

08008158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <prvInsertBlockIntoFreeList+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e002      	b.n	800816c <prvInsertBlockIntoFreeList+0x14>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d8f7      	bhi.n	8008166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d108      	bne.n	800819a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	441a      	add	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d118      	bne.n	80081e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <prvInsertBlockIntoFreeList+0xb0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d00d      	beq.n	80081d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	441a      	add	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e008      	b.n	80081e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvInsertBlockIntoFreeList+0xb0>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e003      	b.n	80081e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d002      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f6:	bf00      	nop
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	2000193c 	.word	0x2000193c
 8008208:	20001944 	.word	0x20001944

0800820c <__errno>:
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <__errno+0x8>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000010 	.word	0x20000010

08008218 <__libc_init_array>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4d0d      	ldr	r5, [pc, #52]	; (8008250 <__libc_init_array+0x38>)
 800821c:	4c0d      	ldr	r4, [pc, #52]	; (8008254 <__libc_init_array+0x3c>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	2600      	movs	r6, #0
 8008224:	42a6      	cmp	r6, r4
 8008226:	d109      	bne.n	800823c <__libc_init_array+0x24>
 8008228:	4d0b      	ldr	r5, [pc, #44]	; (8008258 <__libc_init_array+0x40>)
 800822a:	4c0c      	ldr	r4, [pc, #48]	; (800825c <__libc_init_array+0x44>)
 800822c:	f001 f9e4 	bl	80095f8 <_init>
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	10a4      	asrs	r4, r4, #2
 8008234:	2600      	movs	r6, #0
 8008236:	42a6      	cmp	r6, r4
 8008238:	d105      	bne.n	8008246 <__libc_init_array+0x2e>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008240:	4798      	blx	r3
 8008242:	3601      	adds	r6, #1
 8008244:	e7ee      	b.n	8008224 <__libc_init_array+0xc>
 8008246:	f855 3b04 	ldr.w	r3, [r5], #4
 800824a:	4798      	blx	r3
 800824c:	3601      	adds	r6, #1
 800824e:	e7f2      	b.n	8008236 <__libc_init_array+0x1e>
 8008250:	08009870 	.word	0x08009870
 8008254:	08009870 	.word	0x08009870
 8008258:	08009870 	.word	0x08009870
 800825c:	08009874 	.word	0x08009874

08008260 <memcpy>:
 8008260:	440a      	add	r2, r1
 8008262:	4291      	cmp	r1, r2
 8008264:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008268:	d100      	bne.n	800826c <memcpy+0xc>
 800826a:	4770      	bx	lr
 800826c:	b510      	push	{r4, lr}
 800826e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008276:	4291      	cmp	r1, r2
 8008278:	d1f9      	bne.n	800826e <memcpy+0xe>
 800827a:	bd10      	pop	{r4, pc}

0800827c <memset>:
 800827c:	4402      	add	r2, r0
 800827e:	4603      	mov	r3, r0
 8008280:	4293      	cmp	r3, r2
 8008282:	d100      	bne.n	8008286 <memset+0xa>
 8008284:	4770      	bx	lr
 8008286:	f803 1b01 	strb.w	r1, [r3], #1
 800828a:	e7f9      	b.n	8008280 <memset+0x4>

0800828c <iprintf>:
 800828c:	b40f      	push	{r0, r1, r2, r3}
 800828e:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <iprintf+0x2c>)
 8008290:	b513      	push	{r0, r1, r4, lr}
 8008292:	681c      	ldr	r4, [r3, #0]
 8008294:	b124      	cbz	r4, 80082a0 <iprintf+0x14>
 8008296:	69a3      	ldr	r3, [r4, #24]
 8008298:	b913      	cbnz	r3, 80082a0 <iprintf+0x14>
 800829a:	4620      	mov	r0, r4
 800829c:	f000 faa4 	bl	80087e8 <__sinit>
 80082a0:	ab05      	add	r3, sp, #20
 80082a2:	9a04      	ldr	r2, [sp, #16]
 80082a4:	68a1      	ldr	r1, [r4, #8]
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fdd1 	bl	8008e50 <_vfiprintf_r>
 80082ae:	b002      	add	sp, #8
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b4:	b004      	add	sp, #16
 80082b6:	4770      	bx	lr
 80082b8:	20000010 	.word	0x20000010

080082bc <_puts_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	460e      	mov	r6, r1
 80082c0:	4605      	mov	r5, r0
 80082c2:	b118      	cbz	r0, 80082cc <_puts_r+0x10>
 80082c4:	6983      	ldr	r3, [r0, #24]
 80082c6:	b90b      	cbnz	r3, 80082cc <_puts_r+0x10>
 80082c8:	f000 fa8e 	bl	80087e8 <__sinit>
 80082cc:	69ab      	ldr	r3, [r5, #24]
 80082ce:	68ac      	ldr	r4, [r5, #8]
 80082d0:	b913      	cbnz	r3, 80082d8 <_puts_r+0x1c>
 80082d2:	4628      	mov	r0, r5
 80082d4:	f000 fa88 	bl	80087e8 <__sinit>
 80082d8:	4b2c      	ldr	r3, [pc, #176]	; (800838c <_puts_r+0xd0>)
 80082da:	429c      	cmp	r4, r3
 80082dc:	d120      	bne.n	8008320 <_puts_r+0x64>
 80082de:	686c      	ldr	r4, [r5, #4]
 80082e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_puts_r+0x36>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	0598      	lsls	r0, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_puts_r+0x36>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f000 fb19 	bl	8008924 <__retarget_lock_acquire_recursive>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	0719      	lsls	r1, r3, #28
 80082f6:	d51d      	bpl.n	8008334 <_puts_r+0x78>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	b1db      	cbz	r3, 8008334 <_puts_r+0x78>
 80082fc:	3e01      	subs	r6, #1
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008304:	3b01      	subs	r3, #1
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	bb39      	cbnz	r1, 800835a <_puts_r+0x9e>
 800830a:	2b00      	cmp	r3, #0
 800830c:	da38      	bge.n	8008380 <_puts_r+0xc4>
 800830e:	4622      	mov	r2, r4
 8008310:	210a      	movs	r1, #10
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f88e 	bl	8008434 <__swbuf_r>
 8008318:	3001      	adds	r0, #1
 800831a:	d011      	beq.n	8008340 <_puts_r+0x84>
 800831c:	250a      	movs	r5, #10
 800831e:	e011      	b.n	8008344 <_puts_r+0x88>
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <_puts_r+0xd4>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d101      	bne.n	800832a <_puts_r+0x6e>
 8008326:	68ac      	ldr	r4, [r5, #8]
 8008328:	e7da      	b.n	80082e0 <_puts_r+0x24>
 800832a:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <_puts_r+0xd8>)
 800832c:	429c      	cmp	r4, r3
 800832e:	bf08      	it	eq
 8008330:	68ec      	ldreq	r4, [r5, #12]
 8008332:	e7d5      	b.n	80082e0 <_puts_r+0x24>
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f8ce 	bl	80084d8 <__swsetup_r>
 800833c:	2800      	cmp	r0, #0
 800833e:	d0dd      	beq.n	80082fc <_puts_r+0x40>
 8008340:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d405      	bmi.n	8008356 <_puts_r+0x9a>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d402      	bmi.n	8008356 <_puts_r+0x9a>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f000 fae8 	bl	8008926 <__retarget_lock_release_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	2b00      	cmp	r3, #0
 800835c:	da04      	bge.n	8008368 <_puts_r+0xac>
 800835e:	69a2      	ldr	r2, [r4, #24]
 8008360:	429a      	cmp	r2, r3
 8008362:	dc06      	bgt.n	8008372 <_puts_r+0xb6>
 8008364:	290a      	cmp	r1, #10
 8008366:	d004      	beq.n	8008372 <_puts_r+0xb6>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	7019      	strb	r1, [r3, #0]
 8008370:	e7c5      	b.n	80082fe <_puts_r+0x42>
 8008372:	4622      	mov	r2, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f000 f85d 	bl	8008434 <__swbuf_r>
 800837a:	3001      	adds	r0, #1
 800837c:	d1bf      	bne.n	80082fe <_puts_r+0x42>
 800837e:	e7df      	b.n	8008340 <_puts_r+0x84>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	250a      	movs	r5, #10
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	6022      	str	r2, [r4, #0]
 8008388:	701d      	strb	r5, [r3, #0]
 800838a:	e7db      	b.n	8008344 <_puts_r+0x88>
 800838c:	080097f4 	.word	0x080097f4
 8008390:	08009814 	.word	0x08009814
 8008394:	080097d4 	.word	0x080097d4

08008398 <puts>:
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <puts+0xc>)
 800839a:	4601      	mov	r1, r0
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f7ff bf8d 	b.w	80082bc <_puts_r>
 80083a2:	bf00      	nop
 80083a4:	20000010 	.word	0x20000010

080083a8 <siprintf>:
 80083a8:	b40e      	push	{r1, r2, r3}
 80083aa:	b500      	push	{lr}
 80083ac:	b09c      	sub	sp, #112	; 0x70
 80083ae:	ab1d      	add	r3, sp, #116	; 0x74
 80083b0:	9002      	str	r0, [sp, #8]
 80083b2:	9006      	str	r0, [sp, #24]
 80083b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b8:	4809      	ldr	r0, [pc, #36]	; (80083e0 <siprintf+0x38>)
 80083ba:	9107      	str	r1, [sp, #28]
 80083bc:	9104      	str	r1, [sp, #16]
 80083be:	4909      	ldr	r1, [pc, #36]	; (80083e4 <siprintf+0x3c>)
 80083c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c4:	9105      	str	r1, [sp, #20]
 80083c6:	6800      	ldr	r0, [r0, #0]
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	a902      	add	r1, sp, #8
 80083cc:	f000 fc16 	bl	8008bfc <_svfiprintf_r>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	b01c      	add	sp, #112	; 0x70
 80083d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083dc:	b003      	add	sp, #12
 80083de:	4770      	bx	lr
 80083e0:	20000010 	.word	0x20000010
 80083e4:	ffff0208 	.word	0xffff0208

080083e8 <strncmp>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	b16a      	cbz	r2, 8008408 <strncmp+0x20>
 80083ec:	3901      	subs	r1, #1
 80083ee:	1884      	adds	r4, r0, r2
 80083f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80083f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <strncmp+0x1c>
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d001      	beq.n	8008404 <strncmp+0x1c>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f5      	bne.n	80083f0 <strncmp+0x8>
 8008404:	1a98      	subs	r0, r3, r2
 8008406:	bd10      	pop	{r4, pc}
 8008408:	4610      	mov	r0, r2
 800840a:	e7fc      	b.n	8008406 <strncmp+0x1e>

0800840c <strncpy>:
 800840c:	b510      	push	{r4, lr}
 800840e:	3901      	subs	r1, #1
 8008410:	4603      	mov	r3, r0
 8008412:	b132      	cbz	r2, 8008422 <strncpy+0x16>
 8008414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008418:	f803 4b01 	strb.w	r4, [r3], #1
 800841c:	3a01      	subs	r2, #1
 800841e:	2c00      	cmp	r4, #0
 8008420:	d1f7      	bne.n	8008412 <strncpy+0x6>
 8008422:	441a      	add	r2, r3
 8008424:	2100      	movs	r1, #0
 8008426:	4293      	cmp	r3, r2
 8008428:	d100      	bne.n	800842c <strncpy+0x20>
 800842a:	bd10      	pop	{r4, pc}
 800842c:	f803 1b01 	strb.w	r1, [r3], #1
 8008430:	e7f9      	b.n	8008426 <strncpy+0x1a>
	...

08008434 <__swbuf_r>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	460e      	mov	r6, r1
 8008438:	4614      	mov	r4, r2
 800843a:	4605      	mov	r5, r0
 800843c:	b118      	cbz	r0, 8008446 <__swbuf_r+0x12>
 800843e:	6983      	ldr	r3, [r0, #24]
 8008440:	b90b      	cbnz	r3, 8008446 <__swbuf_r+0x12>
 8008442:	f000 f9d1 	bl	80087e8 <__sinit>
 8008446:	4b21      	ldr	r3, [pc, #132]	; (80084cc <__swbuf_r+0x98>)
 8008448:	429c      	cmp	r4, r3
 800844a:	d12b      	bne.n	80084a4 <__swbuf_r+0x70>
 800844c:	686c      	ldr	r4, [r5, #4]
 800844e:	69a3      	ldr	r3, [r4, #24]
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	071a      	lsls	r2, r3, #28
 8008456:	d52f      	bpl.n	80084b8 <__swbuf_r+0x84>
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	b36b      	cbz	r3, 80084b8 <__swbuf_r+0x84>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	1ac0      	subs	r0, r0, r3
 8008462:	6963      	ldr	r3, [r4, #20]
 8008464:	b2f6      	uxtb	r6, r6
 8008466:	4283      	cmp	r3, r0
 8008468:	4637      	mov	r7, r6
 800846a:	dc04      	bgt.n	8008476 <__swbuf_r+0x42>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f926 	bl	80086c0 <_fflush_r>
 8008474:	bb30      	cbnz	r0, 80084c4 <__swbuf_r+0x90>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	3b01      	subs	r3, #1
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	6022      	str	r2, [r4, #0]
 8008482:	701e      	strb	r6, [r3, #0]
 8008484:	6963      	ldr	r3, [r4, #20]
 8008486:	3001      	adds	r0, #1
 8008488:	4283      	cmp	r3, r0
 800848a:	d004      	beq.n	8008496 <__swbuf_r+0x62>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	07db      	lsls	r3, r3, #31
 8008490:	d506      	bpl.n	80084a0 <__swbuf_r+0x6c>
 8008492:	2e0a      	cmp	r6, #10
 8008494:	d104      	bne.n	80084a0 <__swbuf_r+0x6c>
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f911 	bl	80086c0 <_fflush_r>
 800849e:	b988      	cbnz	r0, 80084c4 <__swbuf_r+0x90>
 80084a0:	4638      	mov	r0, r7
 80084a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <__swbuf_r+0x9c>)
 80084a6:	429c      	cmp	r4, r3
 80084a8:	d101      	bne.n	80084ae <__swbuf_r+0x7a>
 80084aa:	68ac      	ldr	r4, [r5, #8]
 80084ac:	e7cf      	b.n	800844e <__swbuf_r+0x1a>
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <__swbuf_r+0xa0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	bf08      	it	eq
 80084b4:	68ec      	ldreq	r4, [r5, #12]
 80084b6:	e7ca      	b.n	800844e <__swbuf_r+0x1a>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 f80c 	bl	80084d8 <__swsetup_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d0cb      	beq.n	800845c <__swbuf_r+0x28>
 80084c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80084c8:	e7ea      	b.n	80084a0 <__swbuf_r+0x6c>
 80084ca:	bf00      	nop
 80084cc:	080097f4 	.word	0x080097f4
 80084d0:	08009814 	.word	0x08009814
 80084d4:	080097d4 	.word	0x080097d4

080084d8 <__swsetup_r>:
 80084d8:	4b32      	ldr	r3, [pc, #200]	; (80085a4 <__swsetup_r+0xcc>)
 80084da:	b570      	push	{r4, r5, r6, lr}
 80084dc:	681d      	ldr	r5, [r3, #0]
 80084de:	4606      	mov	r6, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	b125      	cbz	r5, 80084ee <__swsetup_r+0x16>
 80084e4:	69ab      	ldr	r3, [r5, #24]
 80084e6:	b913      	cbnz	r3, 80084ee <__swsetup_r+0x16>
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 f97d 	bl	80087e8 <__sinit>
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <__swsetup_r+0xd0>)
 80084f0:	429c      	cmp	r4, r3
 80084f2:	d10f      	bne.n	8008514 <__swsetup_r+0x3c>
 80084f4:	686c      	ldr	r4, [r5, #4]
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fc:	0719      	lsls	r1, r3, #28
 80084fe:	d42c      	bmi.n	800855a <__swsetup_r+0x82>
 8008500:	06dd      	lsls	r5, r3, #27
 8008502:	d411      	bmi.n	8008528 <__swsetup_r+0x50>
 8008504:	2309      	movs	r3, #9
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008512:	e03e      	b.n	8008592 <__swsetup_r+0xba>
 8008514:	4b25      	ldr	r3, [pc, #148]	; (80085ac <__swsetup_r+0xd4>)
 8008516:	429c      	cmp	r4, r3
 8008518:	d101      	bne.n	800851e <__swsetup_r+0x46>
 800851a:	68ac      	ldr	r4, [r5, #8]
 800851c:	e7eb      	b.n	80084f6 <__swsetup_r+0x1e>
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <__swsetup_r+0xd8>)
 8008520:	429c      	cmp	r4, r3
 8008522:	bf08      	it	eq
 8008524:	68ec      	ldreq	r4, [r5, #12]
 8008526:	e7e6      	b.n	80084f6 <__swsetup_r+0x1e>
 8008528:	0758      	lsls	r0, r3, #29
 800852a:	d512      	bpl.n	8008552 <__swsetup_r+0x7a>
 800852c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852e:	b141      	cbz	r1, 8008542 <__swsetup_r+0x6a>
 8008530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008534:	4299      	cmp	r1, r3
 8008536:	d002      	beq.n	800853e <__swsetup_r+0x66>
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fa59 	bl	80089f0 <_free_r>
 800853e:	2300      	movs	r3, #0
 8008540:	6363      	str	r3, [r4, #52]	; 0x34
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	2300      	movs	r3, #0
 800854c:	6063      	str	r3, [r4, #4]
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	b94b      	cbnz	r3, 8008572 <__swsetup_r+0x9a>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008568:	d003      	beq.n	8008572 <__swsetup_r+0x9a>
 800856a:	4621      	mov	r1, r4
 800856c:	4630      	mov	r0, r6
 800856e:	f000 f9ff 	bl	8008970 <__smakebuf_r>
 8008572:	89a0      	ldrh	r0, [r4, #12]
 8008574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008578:	f010 0301 	ands.w	r3, r0, #1
 800857c:	d00a      	beq.n	8008594 <__swsetup_r+0xbc>
 800857e:	2300      	movs	r3, #0
 8008580:	60a3      	str	r3, [r4, #8]
 8008582:	6963      	ldr	r3, [r4, #20]
 8008584:	425b      	negs	r3, r3
 8008586:	61a3      	str	r3, [r4, #24]
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	b943      	cbnz	r3, 800859e <__swsetup_r+0xc6>
 800858c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008590:	d1ba      	bne.n	8008508 <__swsetup_r+0x30>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	0781      	lsls	r1, r0, #30
 8008596:	bf58      	it	pl
 8008598:	6963      	ldrpl	r3, [r4, #20]
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	e7f4      	b.n	8008588 <__swsetup_r+0xb0>
 800859e:	2000      	movs	r0, #0
 80085a0:	e7f7      	b.n	8008592 <__swsetup_r+0xba>
 80085a2:	bf00      	nop
 80085a4:	20000010 	.word	0x20000010
 80085a8:	080097f4 	.word	0x080097f4
 80085ac:	08009814 	.word	0x08009814
 80085b0:	080097d4 	.word	0x080097d4

080085b4 <__sflush_r>:
 80085b4:	898a      	ldrh	r2, [r1, #12]
 80085b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ba:	4605      	mov	r5, r0
 80085bc:	0710      	lsls	r0, r2, #28
 80085be:	460c      	mov	r4, r1
 80085c0:	d458      	bmi.n	8008674 <__sflush_r+0xc0>
 80085c2:	684b      	ldr	r3, [r1, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc05      	bgt.n	80085d4 <__sflush_r+0x20>
 80085c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	dc02      	bgt.n	80085d4 <__sflush_r+0x20>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	d0f9      	beq.n	80085ce <__sflush_r+0x1a>
 80085da:	2300      	movs	r3, #0
 80085dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085e0:	682f      	ldr	r7, [r5, #0]
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	d032      	beq.n	800864c <__sflush_r+0x98>
 80085e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	075a      	lsls	r2, r3, #29
 80085ec:	d505      	bpl.n	80085fa <__sflush_r+0x46>
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	1ac0      	subs	r0, r0, r3
 80085f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085f4:	b10b      	cbz	r3, 80085fa <__sflush_r+0x46>
 80085f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085f8:	1ac0      	subs	r0, r0, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	4602      	mov	r2, r0
 80085fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008600:	6a21      	ldr	r1, [r4, #32]
 8008602:	4628      	mov	r0, r5
 8008604:	47b0      	blx	r6
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	d106      	bne.n	800861a <__sflush_r+0x66>
 800860c:	6829      	ldr	r1, [r5, #0]
 800860e:	291d      	cmp	r1, #29
 8008610:	d82c      	bhi.n	800866c <__sflush_r+0xb8>
 8008612:	4a2a      	ldr	r2, [pc, #168]	; (80086bc <__sflush_r+0x108>)
 8008614:	40ca      	lsrs	r2, r1
 8008616:	07d6      	lsls	r6, r2, #31
 8008618:	d528      	bpl.n	800866c <__sflush_r+0xb8>
 800861a:	2200      	movs	r2, #0
 800861c:	6062      	str	r2, [r4, #4]
 800861e:	04d9      	lsls	r1, r3, #19
 8008620:	6922      	ldr	r2, [r4, #16]
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	d504      	bpl.n	8008630 <__sflush_r+0x7c>
 8008626:	1c42      	adds	r2, r0, #1
 8008628:	d101      	bne.n	800862e <__sflush_r+0x7a>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	b903      	cbnz	r3, 8008630 <__sflush_r+0x7c>
 800862e:	6560      	str	r0, [r4, #84]	; 0x54
 8008630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008632:	602f      	str	r7, [r5, #0]
 8008634:	2900      	cmp	r1, #0
 8008636:	d0ca      	beq.n	80085ce <__sflush_r+0x1a>
 8008638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800863c:	4299      	cmp	r1, r3
 800863e:	d002      	beq.n	8008646 <__sflush_r+0x92>
 8008640:	4628      	mov	r0, r5
 8008642:	f000 f9d5 	bl	80089f0 <_free_r>
 8008646:	2000      	movs	r0, #0
 8008648:	6360      	str	r0, [r4, #52]	; 0x34
 800864a:	e7c1      	b.n	80085d0 <__sflush_r+0x1c>
 800864c:	6a21      	ldr	r1, [r4, #32]
 800864e:	2301      	movs	r3, #1
 8008650:	4628      	mov	r0, r5
 8008652:	47b0      	blx	r6
 8008654:	1c41      	adds	r1, r0, #1
 8008656:	d1c7      	bne.n	80085e8 <__sflush_r+0x34>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0c4      	beq.n	80085e8 <__sflush_r+0x34>
 800865e:	2b1d      	cmp	r3, #29
 8008660:	d001      	beq.n	8008666 <__sflush_r+0xb2>
 8008662:	2b16      	cmp	r3, #22
 8008664:	d101      	bne.n	800866a <__sflush_r+0xb6>
 8008666:	602f      	str	r7, [r5, #0]
 8008668:	e7b1      	b.n	80085ce <__sflush_r+0x1a>
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	e7ad      	b.n	80085d0 <__sflush_r+0x1c>
 8008674:	690f      	ldr	r7, [r1, #16]
 8008676:	2f00      	cmp	r7, #0
 8008678:	d0a9      	beq.n	80085ce <__sflush_r+0x1a>
 800867a:	0793      	lsls	r3, r2, #30
 800867c:	680e      	ldr	r6, [r1, #0]
 800867e:	bf08      	it	eq
 8008680:	694b      	ldreq	r3, [r1, #20]
 8008682:	600f      	str	r7, [r1, #0]
 8008684:	bf18      	it	ne
 8008686:	2300      	movne	r3, #0
 8008688:	eba6 0807 	sub.w	r8, r6, r7
 800868c:	608b      	str	r3, [r1, #8]
 800868e:	f1b8 0f00 	cmp.w	r8, #0
 8008692:	dd9c      	ble.n	80085ce <__sflush_r+0x1a>
 8008694:	6a21      	ldr	r1, [r4, #32]
 8008696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008698:	4643      	mov	r3, r8
 800869a:	463a      	mov	r2, r7
 800869c:	4628      	mov	r0, r5
 800869e:	47b0      	blx	r6
 80086a0:	2800      	cmp	r0, #0
 80086a2:	dc06      	bgt.n	80086b2 <__sflush_r+0xfe>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b0:	e78e      	b.n	80085d0 <__sflush_r+0x1c>
 80086b2:	4407      	add	r7, r0
 80086b4:	eba8 0800 	sub.w	r8, r8, r0
 80086b8:	e7e9      	b.n	800868e <__sflush_r+0xda>
 80086ba:	bf00      	nop
 80086bc:	20400001 	.word	0x20400001

080086c0 <_fflush_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	690b      	ldr	r3, [r1, #16]
 80086c4:	4605      	mov	r5, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	b913      	cbnz	r3, 80086d0 <_fflush_r+0x10>
 80086ca:	2500      	movs	r5, #0
 80086cc:	4628      	mov	r0, r5
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	b118      	cbz	r0, 80086da <_fflush_r+0x1a>
 80086d2:	6983      	ldr	r3, [r0, #24]
 80086d4:	b90b      	cbnz	r3, 80086da <_fflush_r+0x1a>
 80086d6:	f000 f887 	bl	80087e8 <__sinit>
 80086da:	4b14      	ldr	r3, [pc, #80]	; (800872c <_fflush_r+0x6c>)
 80086dc:	429c      	cmp	r4, r3
 80086de:	d11b      	bne.n	8008718 <_fflush_r+0x58>
 80086e0:	686c      	ldr	r4, [r5, #4]
 80086e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0ef      	beq.n	80086ca <_fflush_r+0xa>
 80086ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ec:	07d0      	lsls	r0, r2, #31
 80086ee:	d404      	bmi.n	80086fa <_fflush_r+0x3a>
 80086f0:	0599      	lsls	r1, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_fflush_r+0x3a>
 80086f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f6:	f000 f915 	bl	8008924 <__retarget_lock_acquire_recursive>
 80086fa:	4628      	mov	r0, r5
 80086fc:	4621      	mov	r1, r4
 80086fe:	f7ff ff59 	bl	80085b4 <__sflush_r>
 8008702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008704:	07da      	lsls	r2, r3, #31
 8008706:	4605      	mov	r5, r0
 8008708:	d4e0      	bmi.n	80086cc <_fflush_r+0xc>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	059b      	lsls	r3, r3, #22
 800870e:	d4dd      	bmi.n	80086cc <_fflush_r+0xc>
 8008710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008712:	f000 f908 	bl	8008926 <__retarget_lock_release_recursive>
 8008716:	e7d9      	b.n	80086cc <_fflush_r+0xc>
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <_fflush_r+0x70>)
 800871a:	429c      	cmp	r4, r3
 800871c:	d101      	bne.n	8008722 <_fflush_r+0x62>
 800871e:	68ac      	ldr	r4, [r5, #8]
 8008720:	e7df      	b.n	80086e2 <_fflush_r+0x22>
 8008722:	4b04      	ldr	r3, [pc, #16]	; (8008734 <_fflush_r+0x74>)
 8008724:	429c      	cmp	r4, r3
 8008726:	bf08      	it	eq
 8008728:	68ec      	ldreq	r4, [r5, #12]
 800872a:	e7da      	b.n	80086e2 <_fflush_r+0x22>
 800872c:	080097f4 	.word	0x080097f4
 8008730:	08009814 	.word	0x08009814
 8008734:	080097d4 	.word	0x080097d4

08008738 <std>:
 8008738:	2300      	movs	r3, #0
 800873a:	b510      	push	{r4, lr}
 800873c:	4604      	mov	r4, r0
 800873e:	e9c0 3300 	strd	r3, r3, [r0]
 8008742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008746:	6083      	str	r3, [r0, #8]
 8008748:	8181      	strh	r1, [r0, #12]
 800874a:	6643      	str	r3, [r0, #100]	; 0x64
 800874c:	81c2      	strh	r2, [r0, #14]
 800874e:	6183      	str	r3, [r0, #24]
 8008750:	4619      	mov	r1, r3
 8008752:	2208      	movs	r2, #8
 8008754:	305c      	adds	r0, #92	; 0x5c
 8008756:	f7ff fd91 	bl	800827c <memset>
 800875a:	4b05      	ldr	r3, [pc, #20]	; (8008770 <std+0x38>)
 800875c:	6263      	str	r3, [r4, #36]	; 0x24
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <std+0x3c>)
 8008760:	62a3      	str	r3, [r4, #40]	; 0x28
 8008762:	4b05      	ldr	r3, [pc, #20]	; (8008778 <std+0x40>)
 8008764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <std+0x44>)
 8008768:	6224      	str	r4, [r4, #32]
 800876a:	6323      	str	r3, [r4, #48]	; 0x30
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	080093f9 	.word	0x080093f9
 8008774:	0800941b 	.word	0x0800941b
 8008778:	08009453 	.word	0x08009453
 800877c:	08009477 	.word	0x08009477

08008780 <_cleanup_r>:
 8008780:	4901      	ldr	r1, [pc, #4]	; (8008788 <_cleanup_r+0x8>)
 8008782:	f000 b8af 	b.w	80088e4 <_fwalk_reent>
 8008786:	bf00      	nop
 8008788:	080086c1 	.word	0x080086c1

0800878c <__sfmoreglue>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	1e4a      	subs	r2, r1, #1
 8008790:	2568      	movs	r5, #104	; 0x68
 8008792:	4355      	muls	r5, r2
 8008794:	460e      	mov	r6, r1
 8008796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800879a:	f000 f979 	bl	8008a90 <_malloc_r>
 800879e:	4604      	mov	r4, r0
 80087a0:	b140      	cbz	r0, 80087b4 <__sfmoreglue+0x28>
 80087a2:	2100      	movs	r1, #0
 80087a4:	e9c0 1600 	strd	r1, r6, [r0]
 80087a8:	300c      	adds	r0, #12
 80087aa:	60a0      	str	r0, [r4, #8]
 80087ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087b0:	f7ff fd64 	bl	800827c <memset>
 80087b4:	4620      	mov	r0, r4
 80087b6:	bd70      	pop	{r4, r5, r6, pc}

080087b8 <__sfp_lock_acquire>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__sfp_lock_acquire+0x8>)
 80087ba:	f000 b8b3 	b.w	8008924 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	20001e90 	.word	0x20001e90

080087c4 <__sfp_lock_release>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__sfp_lock_release+0x8>)
 80087c6:	f000 b8ae 	b.w	8008926 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	20001e90 	.word	0x20001e90

080087d0 <__sinit_lock_acquire>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sinit_lock_acquire+0x8>)
 80087d2:	f000 b8a7 	b.w	8008924 <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	20001e8b 	.word	0x20001e8b

080087dc <__sinit_lock_release>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__sinit_lock_release+0x8>)
 80087de:	f000 b8a2 	b.w	8008926 <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	20001e8b 	.word	0x20001e8b

080087e8 <__sinit>:
 80087e8:	b510      	push	{r4, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	f7ff fff0 	bl	80087d0 <__sinit_lock_acquire>
 80087f0:	69a3      	ldr	r3, [r4, #24]
 80087f2:	b11b      	cbz	r3, 80087fc <__sinit+0x14>
 80087f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f8:	f7ff bff0 	b.w	80087dc <__sinit_lock_release>
 80087fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008800:	6523      	str	r3, [r4, #80]	; 0x50
 8008802:	4b13      	ldr	r3, [pc, #76]	; (8008850 <__sinit+0x68>)
 8008804:	4a13      	ldr	r2, [pc, #76]	; (8008854 <__sinit+0x6c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	62a2      	str	r2, [r4, #40]	; 0x28
 800880a:	42a3      	cmp	r3, r4
 800880c:	bf04      	itt	eq
 800880e:	2301      	moveq	r3, #1
 8008810:	61a3      	streq	r3, [r4, #24]
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f820 	bl	8008858 <__sfp>
 8008818:	6060      	str	r0, [r4, #4]
 800881a:	4620      	mov	r0, r4
 800881c:	f000 f81c 	bl	8008858 <__sfp>
 8008820:	60a0      	str	r0, [r4, #8]
 8008822:	4620      	mov	r0, r4
 8008824:	f000 f818 	bl	8008858 <__sfp>
 8008828:	2200      	movs	r2, #0
 800882a:	60e0      	str	r0, [r4, #12]
 800882c:	2104      	movs	r1, #4
 800882e:	6860      	ldr	r0, [r4, #4]
 8008830:	f7ff ff82 	bl	8008738 <std>
 8008834:	68a0      	ldr	r0, [r4, #8]
 8008836:	2201      	movs	r2, #1
 8008838:	2109      	movs	r1, #9
 800883a:	f7ff ff7d 	bl	8008738 <std>
 800883e:	68e0      	ldr	r0, [r4, #12]
 8008840:	2202      	movs	r2, #2
 8008842:	2112      	movs	r1, #18
 8008844:	f7ff ff78 	bl	8008738 <std>
 8008848:	2301      	movs	r3, #1
 800884a:	61a3      	str	r3, [r4, #24]
 800884c:	e7d2      	b.n	80087f4 <__sinit+0xc>
 800884e:	bf00      	nop
 8008850:	080097d0 	.word	0x080097d0
 8008854:	08008781 	.word	0x08008781

08008858 <__sfp>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	4607      	mov	r7, r0
 800885c:	f7ff ffac 	bl	80087b8 <__sfp_lock_acquire>
 8008860:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <__sfp+0x84>)
 8008862:	681e      	ldr	r6, [r3, #0]
 8008864:	69b3      	ldr	r3, [r6, #24]
 8008866:	b913      	cbnz	r3, 800886e <__sfp+0x16>
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff ffbd 	bl	80087e8 <__sinit>
 800886e:	3648      	adds	r6, #72	; 0x48
 8008870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008874:	3b01      	subs	r3, #1
 8008876:	d503      	bpl.n	8008880 <__sfp+0x28>
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	b30b      	cbz	r3, 80088c0 <__sfp+0x68>
 800887c:	6836      	ldr	r6, [r6, #0]
 800887e:	e7f7      	b.n	8008870 <__sfp+0x18>
 8008880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008884:	b9d5      	cbnz	r5, 80088bc <__sfp+0x64>
 8008886:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <__sfp+0x88>)
 8008888:	60e3      	str	r3, [r4, #12]
 800888a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800888e:	6665      	str	r5, [r4, #100]	; 0x64
 8008890:	f000 f847 	bl	8008922 <__retarget_lock_init_recursive>
 8008894:	f7ff ff96 	bl	80087c4 <__sfp_lock_release>
 8008898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800889c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088a0:	6025      	str	r5, [r4, #0]
 80088a2:	61a5      	str	r5, [r4, #24]
 80088a4:	2208      	movs	r2, #8
 80088a6:	4629      	mov	r1, r5
 80088a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088ac:	f7ff fce6 	bl	800827c <memset>
 80088b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088b8:	4620      	mov	r0, r4
 80088ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088bc:	3468      	adds	r4, #104	; 0x68
 80088be:	e7d9      	b.n	8008874 <__sfp+0x1c>
 80088c0:	2104      	movs	r1, #4
 80088c2:	4638      	mov	r0, r7
 80088c4:	f7ff ff62 	bl	800878c <__sfmoreglue>
 80088c8:	4604      	mov	r4, r0
 80088ca:	6030      	str	r0, [r6, #0]
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d1d5      	bne.n	800887c <__sfp+0x24>
 80088d0:	f7ff ff78 	bl	80087c4 <__sfp_lock_release>
 80088d4:	230c      	movs	r3, #12
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	e7ee      	b.n	80088b8 <__sfp+0x60>
 80088da:	bf00      	nop
 80088dc:	080097d0 	.word	0x080097d0
 80088e0:	ffff0001 	.word	0xffff0001

080088e4 <_fwalk_reent>:
 80088e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e8:	4606      	mov	r6, r0
 80088ea:	4688      	mov	r8, r1
 80088ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088f0:	2700      	movs	r7, #0
 80088f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088f6:	f1b9 0901 	subs.w	r9, r9, #1
 80088fa:	d505      	bpl.n	8008908 <_fwalk_reent+0x24>
 80088fc:	6824      	ldr	r4, [r4, #0]
 80088fe:	2c00      	cmp	r4, #0
 8008900:	d1f7      	bne.n	80088f2 <_fwalk_reent+0xe>
 8008902:	4638      	mov	r0, r7
 8008904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008908:	89ab      	ldrh	r3, [r5, #12]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d907      	bls.n	800891e <_fwalk_reent+0x3a>
 800890e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008912:	3301      	adds	r3, #1
 8008914:	d003      	beq.n	800891e <_fwalk_reent+0x3a>
 8008916:	4629      	mov	r1, r5
 8008918:	4630      	mov	r0, r6
 800891a:	47c0      	blx	r8
 800891c:	4307      	orrs	r7, r0
 800891e:	3568      	adds	r5, #104	; 0x68
 8008920:	e7e9      	b.n	80088f6 <_fwalk_reent+0x12>

08008922 <__retarget_lock_init_recursive>:
 8008922:	4770      	bx	lr

08008924 <__retarget_lock_acquire_recursive>:
 8008924:	4770      	bx	lr

08008926 <__retarget_lock_release_recursive>:
 8008926:	4770      	bx	lr

08008928 <__swhatbuf_r>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	460e      	mov	r6, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	2900      	cmp	r1, #0
 8008932:	b096      	sub	sp, #88	; 0x58
 8008934:	4614      	mov	r4, r2
 8008936:	461d      	mov	r5, r3
 8008938:	da07      	bge.n	800894a <__swhatbuf_r+0x22>
 800893a:	2300      	movs	r3, #0
 800893c:	602b      	str	r3, [r5, #0]
 800893e:	89b3      	ldrh	r3, [r6, #12]
 8008940:	061a      	lsls	r2, r3, #24
 8008942:	d410      	bmi.n	8008966 <__swhatbuf_r+0x3e>
 8008944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008948:	e00e      	b.n	8008968 <__swhatbuf_r+0x40>
 800894a:	466a      	mov	r2, sp
 800894c:	f000 fdba 	bl	80094c4 <_fstat_r>
 8008950:	2800      	cmp	r0, #0
 8008952:	dbf2      	blt.n	800893a <__swhatbuf_r+0x12>
 8008954:	9a01      	ldr	r2, [sp, #4]
 8008956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800895a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800895e:	425a      	negs	r2, r3
 8008960:	415a      	adcs	r2, r3
 8008962:	602a      	str	r2, [r5, #0]
 8008964:	e7ee      	b.n	8008944 <__swhatbuf_r+0x1c>
 8008966:	2340      	movs	r3, #64	; 0x40
 8008968:	2000      	movs	r0, #0
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	b016      	add	sp, #88	; 0x58
 800896e:	bd70      	pop	{r4, r5, r6, pc}

08008970 <__smakebuf_r>:
 8008970:	898b      	ldrh	r3, [r1, #12]
 8008972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008974:	079d      	lsls	r5, r3, #30
 8008976:	4606      	mov	r6, r0
 8008978:	460c      	mov	r4, r1
 800897a:	d507      	bpl.n	800898c <__smakebuf_r+0x1c>
 800897c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	2301      	movs	r3, #1
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	b002      	add	sp, #8
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	ab01      	add	r3, sp, #4
 800898e:	466a      	mov	r2, sp
 8008990:	f7ff ffca 	bl	8008928 <__swhatbuf_r>
 8008994:	9900      	ldr	r1, [sp, #0]
 8008996:	4605      	mov	r5, r0
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f879 	bl	8008a90 <_malloc_r>
 800899e:	b948      	cbnz	r0, 80089b4 <__smakebuf_r+0x44>
 80089a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a4:	059a      	lsls	r2, r3, #22
 80089a6:	d4ef      	bmi.n	8008988 <__smakebuf_r+0x18>
 80089a8:	f023 0303 	bic.w	r3, r3, #3
 80089ac:	f043 0302 	orr.w	r3, r3, #2
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	e7e3      	b.n	800897c <__smakebuf_r+0xc>
 80089b4:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <__smakebuf_r+0x7c>)
 80089b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	6020      	str	r0, [r4, #0]
 80089bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	6163      	str	r3, [r4, #20]
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	6120      	str	r0, [r4, #16]
 80089ca:	b15b      	cbz	r3, 80089e4 <__smakebuf_r+0x74>
 80089cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 fd89 	bl	80094e8 <_isatty_r>
 80089d6:	b128      	cbz	r0, 80089e4 <__smakebuf_r+0x74>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f023 0303 	bic.w	r3, r3, #3
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	89a0      	ldrh	r0, [r4, #12]
 80089e6:	4305      	orrs	r5, r0
 80089e8:	81a5      	strh	r5, [r4, #12]
 80089ea:	e7cd      	b.n	8008988 <__smakebuf_r+0x18>
 80089ec:	08008781 	.word	0x08008781

080089f0 <_free_r>:
 80089f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089f2:	2900      	cmp	r1, #0
 80089f4:	d048      	beq.n	8008a88 <_free_r+0x98>
 80089f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089fa:	9001      	str	r0, [sp, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008a02:	bfb8      	it	lt
 8008a04:	18e4      	addlt	r4, r4, r3
 8008a06:	f000 fdab 	bl	8009560 <__malloc_lock>
 8008a0a:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <_free_r+0x9c>)
 8008a0c:	9801      	ldr	r0, [sp, #4]
 8008a0e:	6813      	ldr	r3, [r2, #0]
 8008a10:	4615      	mov	r5, r2
 8008a12:	b933      	cbnz	r3, 8008a22 <_free_r+0x32>
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	6014      	str	r4, [r2, #0]
 8008a18:	b003      	add	sp, #12
 8008a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a1e:	f000 bda5 	b.w	800956c <__malloc_unlock>
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	d90b      	bls.n	8008a3e <_free_r+0x4e>
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	1862      	adds	r2, r4, r1
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bf04      	itt	eq
 8008a2e:	681a      	ldreq	r2, [r3, #0]
 8008a30:	685b      	ldreq	r3, [r3, #4]
 8008a32:	6063      	str	r3, [r4, #4]
 8008a34:	bf04      	itt	eq
 8008a36:	1852      	addeq	r2, r2, r1
 8008a38:	6022      	streq	r2, [r4, #0]
 8008a3a:	602c      	str	r4, [r5, #0]
 8008a3c:	e7ec      	b.n	8008a18 <_free_r+0x28>
 8008a3e:	461a      	mov	r2, r3
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	b10b      	cbz	r3, 8008a48 <_free_r+0x58>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d9fa      	bls.n	8008a3e <_free_r+0x4e>
 8008a48:	6811      	ldr	r1, [r2, #0]
 8008a4a:	1855      	adds	r5, r2, r1
 8008a4c:	42a5      	cmp	r5, r4
 8008a4e:	d10b      	bne.n	8008a68 <_free_r+0x78>
 8008a50:	6824      	ldr	r4, [r4, #0]
 8008a52:	4421      	add	r1, r4
 8008a54:	1854      	adds	r4, r2, r1
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	6011      	str	r1, [r2, #0]
 8008a5a:	d1dd      	bne.n	8008a18 <_free_r+0x28>
 8008a5c:	681c      	ldr	r4, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	6053      	str	r3, [r2, #4]
 8008a62:	4421      	add	r1, r4
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	e7d7      	b.n	8008a18 <_free_r+0x28>
 8008a68:	d902      	bls.n	8008a70 <_free_r+0x80>
 8008a6a:	230c      	movs	r3, #12
 8008a6c:	6003      	str	r3, [r0, #0]
 8008a6e:	e7d3      	b.n	8008a18 <_free_r+0x28>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf04      	itt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	6063      	str	r3, [r4, #4]
 8008a7e:	bf04      	itt	eq
 8008a80:	1949      	addeq	r1, r1, r5
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	6054      	str	r4, [r2, #4]
 8008a86:	e7c7      	b.n	8008a18 <_free_r+0x28>
 8008a88:	b003      	add	sp, #12
 8008a8a:	bd30      	pop	{r4, r5, pc}
 8008a8c:	2000195c 	.word	0x2000195c

08008a90 <_malloc_r>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	1ccd      	adds	r5, r1, #3
 8008a94:	f025 0503 	bic.w	r5, r5, #3
 8008a98:	3508      	adds	r5, #8
 8008a9a:	2d0c      	cmp	r5, #12
 8008a9c:	bf38      	it	cc
 8008a9e:	250c      	movcc	r5, #12
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	db01      	blt.n	8008aaa <_malloc_r+0x1a>
 8008aa6:	42a9      	cmp	r1, r5
 8008aa8:	d903      	bls.n	8008ab2 <_malloc_r+0x22>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	6033      	str	r3, [r6, #0]
 8008aae:	2000      	movs	r0, #0
 8008ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab2:	f000 fd55 	bl	8009560 <__malloc_lock>
 8008ab6:	4921      	ldr	r1, [pc, #132]	; (8008b3c <_malloc_r+0xac>)
 8008ab8:	680a      	ldr	r2, [r1, #0]
 8008aba:	4614      	mov	r4, r2
 8008abc:	b99c      	cbnz	r4, 8008ae6 <_malloc_r+0x56>
 8008abe:	4f20      	ldr	r7, [pc, #128]	; (8008b40 <_malloc_r+0xb0>)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	b923      	cbnz	r3, 8008ace <_malloc_r+0x3e>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 fc86 	bl	80093d8 <_sbrk_r>
 8008acc:	6038      	str	r0, [r7, #0]
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 fc81 	bl	80093d8 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d123      	bne.n	8008b22 <_malloc_r+0x92>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f000 fd44 	bl	800956c <__malloc_unlock>
 8008ae4:	e7e3      	b.n	8008aae <_malloc_r+0x1e>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	1b5b      	subs	r3, r3, r5
 8008aea:	d417      	bmi.n	8008b1c <_malloc_r+0x8c>
 8008aec:	2b0b      	cmp	r3, #11
 8008aee:	d903      	bls.n	8008af8 <_malloc_r+0x68>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	441c      	add	r4, r3
 8008af4:	6025      	str	r5, [r4, #0]
 8008af6:	e004      	b.n	8008b02 <_malloc_r+0x72>
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	42a2      	cmp	r2, r4
 8008afc:	bf0c      	ite	eq
 8008afe:	600b      	streq	r3, [r1, #0]
 8008b00:	6053      	strne	r3, [r2, #4]
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 fd32 	bl	800956c <__malloc_unlock>
 8008b08:	f104 000b 	add.w	r0, r4, #11
 8008b0c:	1d23      	adds	r3, r4, #4
 8008b0e:	f020 0007 	bic.w	r0, r0, #7
 8008b12:	1ac2      	subs	r2, r0, r3
 8008b14:	d0cc      	beq.n	8008ab0 <_malloc_r+0x20>
 8008b16:	1a1b      	subs	r3, r3, r0
 8008b18:	50a3      	str	r3, [r4, r2]
 8008b1a:	e7c9      	b.n	8008ab0 <_malloc_r+0x20>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	6864      	ldr	r4, [r4, #4]
 8008b20:	e7cc      	b.n	8008abc <_malloc_r+0x2c>
 8008b22:	1cc4      	adds	r4, r0, #3
 8008b24:	f024 0403 	bic.w	r4, r4, #3
 8008b28:	42a0      	cmp	r0, r4
 8008b2a:	d0e3      	beq.n	8008af4 <_malloc_r+0x64>
 8008b2c:	1a21      	subs	r1, r4, r0
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f000 fc52 	bl	80093d8 <_sbrk_r>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d1dd      	bne.n	8008af4 <_malloc_r+0x64>
 8008b38:	e7cf      	b.n	8008ada <_malloc_r+0x4a>
 8008b3a:	bf00      	nop
 8008b3c:	2000195c 	.word	0x2000195c
 8008b40:	20001960 	.word	0x20001960

08008b44 <__ssputs_r>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	688e      	ldr	r6, [r1, #8]
 8008b4a:	429e      	cmp	r6, r3
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4690      	mov	r8, r2
 8008b52:	461f      	mov	r7, r3
 8008b54:	d838      	bhi.n	8008bc8 <__ssputs_r+0x84>
 8008b56:	898a      	ldrh	r2, [r1, #12]
 8008b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b5c:	d032      	beq.n	8008bc4 <__ssputs_r+0x80>
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	6909      	ldr	r1, [r1, #16]
 8008b62:	eba5 0901 	sub.w	r9, r5, r1
 8008b66:	6965      	ldr	r5, [r4, #20]
 8008b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b70:	3301      	adds	r3, #1
 8008b72:	444b      	add	r3, r9
 8008b74:	106d      	asrs	r5, r5, #1
 8008b76:	429d      	cmp	r5, r3
 8008b78:	bf38      	it	cc
 8008b7a:	461d      	movcc	r5, r3
 8008b7c:	0553      	lsls	r3, r2, #21
 8008b7e:	d531      	bpl.n	8008be4 <__ssputs_r+0xa0>
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7ff ff85 	bl	8008a90 <_malloc_r>
 8008b86:	4606      	mov	r6, r0
 8008b88:	b950      	cbnz	r0, 8008ba0 <__ssputs_r+0x5c>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	f8ca 3000 	str.w	r3, [sl]
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	6921      	ldr	r1, [r4, #16]
 8008ba2:	464a      	mov	r2, r9
 8008ba4:	f7ff fb5c 	bl	8008260 <memcpy>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	6126      	str	r6, [r4, #16]
 8008bb6:	6165      	str	r5, [r4, #20]
 8008bb8:	444e      	add	r6, r9
 8008bba:	eba5 0509 	sub.w	r5, r5, r9
 8008bbe:	6026      	str	r6, [r4, #0]
 8008bc0:	60a5      	str	r5, [r4, #8]
 8008bc2:	463e      	mov	r6, r7
 8008bc4:	42be      	cmp	r6, r7
 8008bc6:	d900      	bls.n	8008bca <__ssputs_r+0x86>
 8008bc8:	463e      	mov	r6, r7
 8008bca:	4632      	mov	r2, r6
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	4641      	mov	r1, r8
 8008bd0:	f000 fcac 	bl	800952c <memmove>
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	1b9b      	subs	r3, r3, r6
 8008bda:	4432      	add	r2, r6
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6022      	str	r2, [r4, #0]
 8008be0:	2000      	movs	r0, #0
 8008be2:	e7db      	b.n	8008b9c <__ssputs_r+0x58>
 8008be4:	462a      	mov	r2, r5
 8008be6:	f000 fcc7 	bl	8009578 <_realloc_r>
 8008bea:	4606      	mov	r6, r0
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1e1      	bne.n	8008bb4 <__ssputs_r+0x70>
 8008bf0:	6921      	ldr	r1, [r4, #16]
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7ff fefc 	bl	80089f0 <_free_r>
 8008bf8:	e7c7      	b.n	8008b8a <__ssputs_r+0x46>
	...

08008bfc <_svfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4698      	mov	r8, r3
 8008c02:	898b      	ldrh	r3, [r1, #12]
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	b09d      	sub	sp, #116	; 0x74
 8008c08:	4607      	mov	r7, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	d50e      	bpl.n	8008c2e <_svfiprintf_r+0x32>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b963      	cbnz	r3, 8008c2e <_svfiprintf_r+0x32>
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	f7ff ff3b 	bl	8008a90 <_malloc_r>
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	6128      	str	r0, [r5, #16]
 8008c1e:	b920      	cbnz	r0, 8008c2a <_svfiprintf_r+0x2e>
 8008c20:	230c      	movs	r3, #12
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c28:	e0d1      	b.n	8008dce <_svfiprintf_r+0x1d2>
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	616b      	str	r3, [r5, #20]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9309      	str	r3, [sp, #36]	; 0x24
 8008c32:	2320      	movs	r3, #32
 8008c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c3c:	2330      	movs	r3, #48	; 0x30
 8008c3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008de8 <_svfiprintf_r+0x1ec>
 8008c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c46:	f04f 0901 	mov.w	r9, #1
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	469a      	mov	sl, r3
 8008c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c52:	b10a      	cbz	r2, 8008c58 <_svfiprintf_r+0x5c>
 8008c54:	2a25      	cmp	r2, #37	; 0x25
 8008c56:	d1f9      	bne.n	8008c4c <_svfiprintf_r+0x50>
 8008c58:	ebba 0b04 	subs.w	fp, sl, r4
 8008c5c:	d00b      	beq.n	8008c76 <_svfiprintf_r+0x7a>
 8008c5e:	465b      	mov	r3, fp
 8008c60:	4622      	mov	r2, r4
 8008c62:	4629      	mov	r1, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff ff6d 	bl	8008b44 <__ssputs_r>
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f000 80aa 	beq.w	8008dc4 <_svfiprintf_r+0x1c8>
 8008c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c72:	445a      	add	r2, fp
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a2 	beq.w	8008dc4 <_svfiprintf_r+0x1c8>
 8008c80:	2300      	movs	r3, #0
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8a:	f10a 0a01 	add.w	sl, sl, #1
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c96:	931a      	str	r3, [sp, #104]	; 0x68
 8008c98:	4654      	mov	r4, sl
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca0:	4851      	ldr	r0, [pc, #324]	; (8008de8 <_svfiprintf_r+0x1ec>)
 8008ca2:	f7f7 fa9d 	bl	80001e0 <memchr>
 8008ca6:	9a04      	ldr	r2, [sp, #16]
 8008ca8:	b9d8      	cbnz	r0, 8008ce2 <_svfiprintf_r+0xe6>
 8008caa:	06d0      	lsls	r0, r2, #27
 8008cac:	bf44      	itt	mi
 8008cae:	2320      	movmi	r3, #32
 8008cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb4:	0711      	lsls	r1, r2, #28
 8008cb6:	bf44      	itt	mi
 8008cb8:	232b      	movmi	r3, #43	; 0x2b
 8008cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc4:	d015      	beq.n	8008cf2 <_svfiprintf_r+0xf6>
 8008cc6:	9a07      	ldr	r2, [sp, #28]
 8008cc8:	4654      	mov	r4, sl
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f04f 0c0a 	mov.w	ip, #10
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd6:	3b30      	subs	r3, #48	; 0x30
 8008cd8:	2b09      	cmp	r3, #9
 8008cda:	d94e      	bls.n	8008d7a <_svfiprintf_r+0x17e>
 8008cdc:	b1b0      	cbz	r0, 8008d0c <_svfiprintf_r+0x110>
 8008cde:	9207      	str	r2, [sp, #28]
 8008ce0:	e014      	b.n	8008d0c <_svfiprintf_r+0x110>
 8008ce2:	eba0 0308 	sub.w	r3, r0, r8
 8008ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cea:	4313      	orrs	r3, r2
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	46a2      	mov	sl, r4
 8008cf0:	e7d2      	b.n	8008c98 <_svfiprintf_r+0x9c>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	9103      	str	r1, [sp, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfbb      	ittet	lt
 8008cfe:	425b      	neglt	r3, r3
 8008d00:	f042 0202 	orrlt.w	r2, r2, #2
 8008d04:	9307      	strge	r3, [sp, #28]
 8008d06:	9307      	strlt	r3, [sp, #28]
 8008d08:	bfb8      	it	lt
 8008d0a:	9204      	strlt	r2, [sp, #16]
 8008d0c:	7823      	ldrb	r3, [r4, #0]
 8008d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d10:	d10c      	bne.n	8008d2c <_svfiprintf_r+0x130>
 8008d12:	7863      	ldrb	r3, [r4, #1]
 8008d14:	2b2a      	cmp	r3, #42	; 0x2a
 8008d16:	d135      	bne.n	8008d84 <_svfiprintf_r+0x188>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	9203      	str	r2, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfb8      	it	lt
 8008d24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d28:	3402      	adds	r4, #2
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008df8 <_svfiprintf_r+0x1fc>
 8008d30:	7821      	ldrb	r1, [r4, #0]
 8008d32:	2203      	movs	r2, #3
 8008d34:	4650      	mov	r0, sl
 8008d36:	f7f7 fa53 	bl	80001e0 <memchr>
 8008d3a:	b140      	cbz	r0, 8008d4e <_svfiprintf_r+0x152>
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	eba0 000a 	sub.w	r0, r0, sl
 8008d42:	fa03 f000 	lsl.w	r0, r3, r0
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	4303      	orrs	r3, r0
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	4826      	ldr	r0, [pc, #152]	; (8008dec <_svfiprintf_r+0x1f0>)
 8008d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d58:	2206      	movs	r2, #6
 8008d5a:	f7f7 fa41 	bl	80001e0 <memchr>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d038      	beq.n	8008dd4 <_svfiprintf_r+0x1d8>
 8008d62:	4b23      	ldr	r3, [pc, #140]	; (8008df0 <_svfiprintf_r+0x1f4>)
 8008d64:	bb1b      	cbnz	r3, 8008dae <_svfiprintf_r+0x1b2>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	3307      	adds	r3, #7
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	3308      	adds	r3, #8
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d74:	4433      	add	r3, r6
 8008d76:	9309      	str	r3, [sp, #36]	; 0x24
 8008d78:	e767      	b.n	8008c4a <_svfiprintf_r+0x4e>
 8008d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7a5      	b.n	8008cd0 <_svfiprintf_r+0xd4>
 8008d84:	2300      	movs	r3, #0
 8008d86:	3401      	adds	r4, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4620      	mov	r0, r4
 8008d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d96:	3a30      	subs	r2, #48	; 0x30
 8008d98:	2a09      	cmp	r2, #9
 8008d9a:	d903      	bls.n	8008da4 <_svfiprintf_r+0x1a8>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0c5      	beq.n	8008d2c <_svfiprintf_r+0x130>
 8008da0:	9105      	str	r1, [sp, #20]
 8008da2:	e7c3      	b.n	8008d2c <_svfiprintf_r+0x130>
 8008da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da8:	4604      	mov	r4, r0
 8008daa:	2301      	movs	r3, #1
 8008dac:	e7f0      	b.n	8008d90 <_svfiprintf_r+0x194>
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <_svfiprintf_r+0x1f8>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	4638      	mov	r0, r7
 8008dba:	f3af 8000 	nop.w
 8008dbe:	1c42      	adds	r2, r0, #1
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	d1d6      	bne.n	8008d72 <_svfiprintf_r+0x176>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	065b      	lsls	r3, r3, #25
 8008dc8:	f53f af2c 	bmi.w	8008c24 <_svfiprintf_r+0x28>
 8008dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dce:	b01d      	add	sp, #116	; 0x74
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	ab03      	add	r3, sp, #12
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <_svfiprintf_r+0x1f8>)
 8008ddc:	a904      	add	r1, sp, #16
 8008dde:	4638      	mov	r0, r7
 8008de0:	f000 f9d4 	bl	800918c <_printf_i>
 8008de4:	e7eb      	b.n	8008dbe <_svfiprintf_r+0x1c2>
 8008de6:	bf00      	nop
 8008de8:	08009834 	.word	0x08009834
 8008dec:	0800983e 	.word	0x0800983e
 8008df0:	00000000 	.word	0x00000000
 8008df4:	08008b45 	.word	0x08008b45
 8008df8:	0800983a 	.word	0x0800983a

08008dfc <__sfputc_r>:
 8008dfc:	6893      	ldr	r3, [r2, #8]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	b410      	push	{r4}
 8008e04:	6093      	str	r3, [r2, #8]
 8008e06:	da08      	bge.n	8008e1a <__sfputc_r+0x1e>
 8008e08:	6994      	ldr	r4, [r2, #24]
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	db01      	blt.n	8008e12 <__sfputc_r+0x16>
 8008e0e:	290a      	cmp	r1, #10
 8008e10:	d103      	bne.n	8008e1a <__sfputc_r+0x1e>
 8008e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e16:	f7ff bb0d 	b.w	8008434 <__swbuf_r>
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	1c58      	adds	r0, r3, #1
 8008e1e:	6010      	str	r0, [r2, #0]
 8008e20:	7019      	strb	r1, [r3, #0]
 8008e22:	4608      	mov	r0, r1
 8008e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <__sfputs_r>:
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	4614      	mov	r4, r2
 8008e32:	18d5      	adds	r5, r2, r3
 8008e34:	42ac      	cmp	r4, r5
 8008e36:	d101      	bne.n	8008e3c <__sfputs_r+0x12>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e007      	b.n	8008e4c <__sfputs_r+0x22>
 8008e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e40:	463a      	mov	r2, r7
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ffda 	bl	8008dfc <__sfputc_r>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d1f3      	bne.n	8008e34 <__sfputs_r+0xa>
 8008e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e50 <_vfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	460d      	mov	r5, r1
 8008e56:	b09d      	sub	sp, #116	; 0x74
 8008e58:	4614      	mov	r4, r2
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	b118      	cbz	r0, 8008e68 <_vfiprintf_r+0x18>
 8008e60:	6983      	ldr	r3, [r0, #24]
 8008e62:	b90b      	cbnz	r3, 8008e68 <_vfiprintf_r+0x18>
 8008e64:	f7ff fcc0 	bl	80087e8 <__sinit>
 8008e68:	4b89      	ldr	r3, [pc, #548]	; (8009090 <_vfiprintf_r+0x240>)
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	d11b      	bne.n	8008ea6 <_vfiprintf_r+0x56>
 8008e6e:	6875      	ldr	r5, [r6, #4]
 8008e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	d405      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	059a      	lsls	r2, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7e:	f7ff fd51 	bl	8008924 <__retarget_lock_acquire_recursive>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	071b      	lsls	r3, r3, #28
 8008e86:	d501      	bpl.n	8008e8c <_vfiprintf_r+0x3c>
 8008e88:	692b      	ldr	r3, [r5, #16]
 8008e8a:	b9eb      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x78>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff fb22 	bl	80084d8 <__swsetup_r>
 8008e94:	b1c0      	cbz	r0, 8008ec8 <_vfiprintf_r+0x78>
 8008e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e98:	07dc      	lsls	r4, r3, #31
 8008e9a:	d50e      	bpl.n	8008eba <_vfiprintf_r+0x6a>
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea0:	b01d      	add	sp, #116	; 0x74
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	4b7b      	ldr	r3, [pc, #492]	; (8009094 <_vfiprintf_r+0x244>)
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	d101      	bne.n	8008eb0 <_vfiprintf_r+0x60>
 8008eac:	68b5      	ldr	r5, [r6, #8]
 8008eae:	e7df      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eb0:	4b79      	ldr	r3, [pc, #484]	; (8009098 <_vfiprintf_r+0x248>)
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	bf08      	it	eq
 8008eb6:	68f5      	ldreq	r5, [r6, #12]
 8008eb8:	e7da      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	0598      	lsls	r0, r3, #22
 8008ebe:	d4ed      	bmi.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff fd30 	bl	8008926 <__retarget_lock_release_recursive>
 8008ec6:	e7e9      	b.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ecc:	2320      	movs	r3, #32
 8008ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed6:	2330      	movs	r3, #48	; 0x30
 8008ed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800909c <_vfiprintf_r+0x24c>
 8008edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ee0:	f04f 0901 	mov.w	r9, #1
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	469a      	mov	sl, r3
 8008ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_vfiprintf_r+0xa2>
 8008eee:	2a25      	cmp	r2, #37	; 0x25
 8008ef0:	d1f9      	bne.n	8008ee6 <_vfiprintf_r+0x96>
 8008ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef6:	d00b      	beq.n	8008f10 <_vfiprintf_r+0xc0>
 8008ef8:	465b      	mov	r3, fp
 8008efa:	4622      	mov	r2, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff93 	bl	8008e2a <__sfputs_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	f000 80aa 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	445a      	add	r2, fp
 8008f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80a2 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f24:	f10a 0a01 	add.w	sl, sl, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f30:	931a      	str	r3, [sp, #104]	; 0x68
 8008f32:	4654      	mov	r4, sl
 8008f34:	2205      	movs	r2, #5
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4858      	ldr	r0, [pc, #352]	; (800909c <_vfiprintf_r+0x24c>)
 8008f3c:	f7f7 f950 	bl	80001e0 <memchr>
 8008f40:	9a04      	ldr	r2, [sp, #16]
 8008f42:	b9d8      	cbnz	r0, 8008f7c <_vfiprintf_r+0x12c>
 8008f44:	06d1      	lsls	r1, r2, #27
 8008f46:	bf44      	itt	mi
 8008f48:	2320      	movmi	r3, #32
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4e:	0713      	lsls	r3, r2, #28
 8008f50:	bf44      	itt	mi
 8008f52:	232b      	movmi	r3, #43	; 0x2b
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d015      	beq.n	8008f8c <_vfiprintf_r+0x13c>
 8008f60:	9a07      	ldr	r2, [sp, #28]
 8008f62:	4654      	mov	r4, sl
 8008f64:	2000      	movs	r0, #0
 8008f66:	f04f 0c0a 	mov.w	ip, #10
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f70:	3b30      	subs	r3, #48	; 0x30
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d94e      	bls.n	8009014 <_vfiprintf_r+0x1c4>
 8008f76:	b1b0      	cbz	r0, 8008fa6 <_vfiprintf_r+0x156>
 8008f78:	9207      	str	r2, [sp, #28]
 8008f7a:	e014      	b.n	8008fa6 <_vfiprintf_r+0x156>
 8008f7c:	eba0 0308 	sub.w	r3, r0, r8
 8008f80:	fa09 f303 	lsl.w	r3, r9, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	46a2      	mov	sl, r4
 8008f8a:	e7d2      	b.n	8008f32 <_vfiprintf_r+0xe2>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9103      	str	r1, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbb      	ittet	lt
 8008f98:	425b      	neglt	r3, r3
 8008f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9e:	9307      	strge	r3, [sp, #28]
 8008fa0:	9307      	strlt	r3, [sp, #28]
 8008fa2:	bfb8      	it	lt
 8008fa4:	9204      	strlt	r2, [sp, #16]
 8008fa6:	7823      	ldrb	r3, [r4, #0]
 8008fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008faa:	d10c      	bne.n	8008fc6 <_vfiprintf_r+0x176>
 8008fac:	7863      	ldrb	r3, [r4, #1]
 8008fae:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb0:	d135      	bne.n	800901e <_vfiprintf_r+0x1ce>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	9203      	str	r2, [sp, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfb8      	it	lt
 8008fbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fc2:	3402      	adds	r4, #2
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090ac <_vfiprintf_r+0x25c>
 8008fca:	7821      	ldrb	r1, [r4, #0]
 8008fcc:	2203      	movs	r2, #3
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f7f7 f906 	bl	80001e0 <memchr>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_vfiprintf_r+0x198>
 8008fd6:	2340      	movs	r3, #64	; 0x40
 8008fd8:	eba0 000a 	sub.w	r0, r0, sl
 8008fdc:	fa03 f000 	lsl.w	r0, r3, r0
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	4303      	orrs	r3, r0
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	482c      	ldr	r0, [pc, #176]	; (80090a0 <_vfiprintf_r+0x250>)
 8008fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ff2:	2206      	movs	r2, #6
 8008ff4:	f7f7 f8f4 	bl	80001e0 <memchr>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d03f      	beq.n	800907c <_vfiprintf_r+0x22c>
 8008ffc:	4b29      	ldr	r3, [pc, #164]	; (80090a4 <_vfiprintf_r+0x254>)
 8008ffe:	bb1b      	cbnz	r3, 8009048 <_vfiprintf_r+0x1f8>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	3307      	adds	r3, #7
 8009004:	f023 0307 	bic.w	r3, r3, #7
 8009008:	3308      	adds	r3, #8
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900e:	443b      	add	r3, r7
 8009010:	9309      	str	r3, [sp, #36]	; 0x24
 8009012:	e767      	b.n	8008ee4 <_vfiprintf_r+0x94>
 8009014:	fb0c 3202 	mla	r2, ip, r2, r3
 8009018:	460c      	mov	r4, r1
 800901a:	2001      	movs	r0, #1
 800901c:	e7a5      	b.n	8008f6a <_vfiprintf_r+0x11a>
 800901e:	2300      	movs	r3, #0
 8009020:	3401      	adds	r4, #1
 8009022:	9305      	str	r3, [sp, #20]
 8009024:	4619      	mov	r1, r3
 8009026:	f04f 0c0a 	mov.w	ip, #10
 800902a:	4620      	mov	r0, r4
 800902c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009030:	3a30      	subs	r2, #48	; 0x30
 8009032:	2a09      	cmp	r2, #9
 8009034:	d903      	bls.n	800903e <_vfiprintf_r+0x1ee>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0c5      	beq.n	8008fc6 <_vfiprintf_r+0x176>
 800903a:	9105      	str	r1, [sp, #20]
 800903c:	e7c3      	b.n	8008fc6 <_vfiprintf_r+0x176>
 800903e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009042:	4604      	mov	r4, r0
 8009044:	2301      	movs	r3, #1
 8009046:	e7f0      	b.n	800902a <_vfiprintf_r+0x1da>
 8009048:	ab03      	add	r3, sp, #12
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	462a      	mov	r2, r5
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <_vfiprintf_r+0x258>)
 8009050:	a904      	add	r1, sp, #16
 8009052:	4630      	mov	r0, r6
 8009054:	f3af 8000 	nop.w
 8009058:	4607      	mov	r7, r0
 800905a:	1c78      	adds	r0, r7, #1
 800905c:	d1d6      	bne.n	800900c <_vfiprintf_r+0x1bc>
 800905e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009060:	07d9      	lsls	r1, r3, #31
 8009062:	d405      	bmi.n	8009070 <_vfiprintf_r+0x220>
 8009064:	89ab      	ldrh	r3, [r5, #12]
 8009066:	059a      	lsls	r2, r3, #22
 8009068:	d402      	bmi.n	8009070 <_vfiprintf_r+0x220>
 800906a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906c:	f7ff fc5b 	bl	8008926 <__retarget_lock_release_recursive>
 8009070:	89ab      	ldrh	r3, [r5, #12]
 8009072:	065b      	lsls	r3, r3, #25
 8009074:	f53f af12 	bmi.w	8008e9c <_vfiprintf_r+0x4c>
 8009078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907a:	e711      	b.n	8008ea0 <_vfiprintf_r+0x50>
 800907c:	ab03      	add	r3, sp, #12
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	462a      	mov	r2, r5
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <_vfiprintf_r+0x258>)
 8009084:	a904      	add	r1, sp, #16
 8009086:	4630      	mov	r0, r6
 8009088:	f000 f880 	bl	800918c <_printf_i>
 800908c:	e7e4      	b.n	8009058 <_vfiprintf_r+0x208>
 800908e:	bf00      	nop
 8009090:	080097f4 	.word	0x080097f4
 8009094:	08009814 	.word	0x08009814
 8009098:	080097d4 	.word	0x080097d4
 800909c:	08009834 	.word	0x08009834
 80090a0:	0800983e 	.word	0x0800983e
 80090a4:	00000000 	.word	0x00000000
 80090a8:	08008e2b 	.word	0x08008e2b
 80090ac:	0800983a 	.word	0x0800983a

080090b0 <_printf_common>:
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	4616      	mov	r6, r2
 80090b6:	4699      	mov	r9, r3
 80090b8:	688a      	ldr	r2, [r1, #8]
 80090ba:	690b      	ldr	r3, [r1, #16]
 80090bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090c0:	4293      	cmp	r3, r2
 80090c2:	bfb8      	it	lt
 80090c4:	4613      	movlt	r3, r2
 80090c6:	6033      	str	r3, [r6, #0]
 80090c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090cc:	4607      	mov	r7, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	b10a      	cbz	r2, 80090d6 <_printf_common+0x26>
 80090d2:	3301      	adds	r3, #1
 80090d4:	6033      	str	r3, [r6, #0]
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	0699      	lsls	r1, r3, #26
 80090da:	bf42      	ittt	mi
 80090dc:	6833      	ldrmi	r3, [r6, #0]
 80090de:	3302      	addmi	r3, #2
 80090e0:	6033      	strmi	r3, [r6, #0]
 80090e2:	6825      	ldr	r5, [r4, #0]
 80090e4:	f015 0506 	ands.w	r5, r5, #6
 80090e8:	d106      	bne.n	80090f8 <_printf_common+0x48>
 80090ea:	f104 0a19 	add.w	sl, r4, #25
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	6832      	ldr	r2, [r6, #0]
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	dc26      	bgt.n	8009146 <_printf_common+0x96>
 80090f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090fc:	1e13      	subs	r3, r2, #0
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	bf18      	it	ne
 8009102:	2301      	movne	r3, #1
 8009104:	0692      	lsls	r2, r2, #26
 8009106:	d42b      	bmi.n	8009160 <_printf_common+0xb0>
 8009108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800910c:	4649      	mov	r1, r9
 800910e:	4638      	mov	r0, r7
 8009110:	47c0      	blx	r8
 8009112:	3001      	adds	r0, #1
 8009114:	d01e      	beq.n	8009154 <_printf_common+0xa4>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	68e5      	ldr	r5, [r4, #12]
 800911a:	6832      	ldr	r2, [r6, #0]
 800911c:	f003 0306 	and.w	r3, r3, #6
 8009120:	2b04      	cmp	r3, #4
 8009122:	bf08      	it	eq
 8009124:	1aad      	subeq	r5, r5, r2
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	6922      	ldr	r2, [r4, #16]
 800912a:	bf0c      	ite	eq
 800912c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009130:	2500      	movne	r5, #0
 8009132:	4293      	cmp	r3, r2
 8009134:	bfc4      	itt	gt
 8009136:	1a9b      	subgt	r3, r3, r2
 8009138:	18ed      	addgt	r5, r5, r3
 800913a:	2600      	movs	r6, #0
 800913c:	341a      	adds	r4, #26
 800913e:	42b5      	cmp	r5, r6
 8009140:	d11a      	bne.n	8009178 <_printf_common+0xc8>
 8009142:	2000      	movs	r0, #0
 8009144:	e008      	b.n	8009158 <_printf_common+0xa8>
 8009146:	2301      	movs	r3, #1
 8009148:	4652      	mov	r2, sl
 800914a:	4649      	mov	r1, r9
 800914c:	4638      	mov	r0, r7
 800914e:	47c0      	blx	r8
 8009150:	3001      	adds	r0, #1
 8009152:	d103      	bne.n	800915c <_printf_common+0xac>
 8009154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	3501      	adds	r5, #1
 800915e:	e7c6      	b.n	80090ee <_printf_common+0x3e>
 8009160:	18e1      	adds	r1, r4, r3
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	2030      	movs	r0, #48	; 0x30
 8009166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800916a:	4422      	add	r2, r4
 800916c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009174:	3302      	adds	r3, #2
 8009176:	e7c7      	b.n	8009108 <_printf_common+0x58>
 8009178:	2301      	movs	r3, #1
 800917a:	4622      	mov	r2, r4
 800917c:	4649      	mov	r1, r9
 800917e:	4638      	mov	r0, r7
 8009180:	47c0      	blx	r8
 8009182:	3001      	adds	r0, #1
 8009184:	d0e6      	beq.n	8009154 <_printf_common+0xa4>
 8009186:	3601      	adds	r6, #1
 8009188:	e7d9      	b.n	800913e <_printf_common+0x8e>
	...

0800918c <_printf_i>:
 800918c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	460c      	mov	r4, r1
 8009192:	4691      	mov	r9, r2
 8009194:	7e27      	ldrb	r7, [r4, #24]
 8009196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009198:	2f78      	cmp	r7, #120	; 0x78
 800919a:	4680      	mov	r8, r0
 800919c:	469a      	mov	sl, r3
 800919e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a2:	d807      	bhi.n	80091b4 <_printf_i+0x28>
 80091a4:	2f62      	cmp	r7, #98	; 0x62
 80091a6:	d80a      	bhi.n	80091be <_printf_i+0x32>
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	f000 80d8 	beq.w	800935e <_printf_i+0x1d2>
 80091ae:	2f58      	cmp	r7, #88	; 0x58
 80091b0:	f000 80a3 	beq.w	80092fa <_printf_i+0x16e>
 80091b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091bc:	e03a      	b.n	8009234 <_printf_i+0xa8>
 80091be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091c2:	2b15      	cmp	r3, #21
 80091c4:	d8f6      	bhi.n	80091b4 <_printf_i+0x28>
 80091c6:	a001      	add	r0, pc, #4	; (adr r0, 80091cc <_printf_i+0x40>)
 80091c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80091cc:	08009225 	.word	0x08009225
 80091d0:	08009239 	.word	0x08009239
 80091d4:	080091b5 	.word	0x080091b5
 80091d8:	080091b5 	.word	0x080091b5
 80091dc:	080091b5 	.word	0x080091b5
 80091e0:	080091b5 	.word	0x080091b5
 80091e4:	08009239 	.word	0x08009239
 80091e8:	080091b5 	.word	0x080091b5
 80091ec:	080091b5 	.word	0x080091b5
 80091f0:	080091b5 	.word	0x080091b5
 80091f4:	080091b5 	.word	0x080091b5
 80091f8:	08009345 	.word	0x08009345
 80091fc:	08009269 	.word	0x08009269
 8009200:	08009327 	.word	0x08009327
 8009204:	080091b5 	.word	0x080091b5
 8009208:	080091b5 	.word	0x080091b5
 800920c:	08009367 	.word	0x08009367
 8009210:	080091b5 	.word	0x080091b5
 8009214:	08009269 	.word	0x08009269
 8009218:	080091b5 	.word	0x080091b5
 800921c:	080091b5 	.word	0x080091b5
 8009220:	0800932f 	.word	0x0800932f
 8009224:	680b      	ldr	r3, [r1, #0]
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	600a      	str	r2, [r1, #0]
 800922c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009234:	2301      	movs	r3, #1
 8009236:	e0a3      	b.n	8009380 <_printf_i+0x1f4>
 8009238:	6825      	ldr	r5, [r4, #0]
 800923a:	6808      	ldr	r0, [r1, #0]
 800923c:	062e      	lsls	r6, r5, #24
 800923e:	f100 0304 	add.w	r3, r0, #4
 8009242:	d50a      	bpl.n	800925a <_printf_i+0xce>
 8009244:	6805      	ldr	r5, [r0, #0]
 8009246:	600b      	str	r3, [r1, #0]
 8009248:	2d00      	cmp	r5, #0
 800924a:	da03      	bge.n	8009254 <_printf_i+0xc8>
 800924c:	232d      	movs	r3, #45	; 0x2d
 800924e:	426d      	negs	r5, r5
 8009250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009254:	485e      	ldr	r0, [pc, #376]	; (80093d0 <_printf_i+0x244>)
 8009256:	230a      	movs	r3, #10
 8009258:	e019      	b.n	800928e <_printf_i+0x102>
 800925a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800925e:	6805      	ldr	r5, [r0, #0]
 8009260:	600b      	str	r3, [r1, #0]
 8009262:	bf18      	it	ne
 8009264:	b22d      	sxthne	r5, r5
 8009266:	e7ef      	b.n	8009248 <_printf_i+0xbc>
 8009268:	680b      	ldr	r3, [r1, #0]
 800926a:	6825      	ldr	r5, [r4, #0]
 800926c:	1d18      	adds	r0, r3, #4
 800926e:	6008      	str	r0, [r1, #0]
 8009270:	0628      	lsls	r0, r5, #24
 8009272:	d501      	bpl.n	8009278 <_printf_i+0xec>
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	e002      	b.n	800927e <_printf_i+0xf2>
 8009278:	0669      	lsls	r1, r5, #25
 800927a:	d5fb      	bpl.n	8009274 <_printf_i+0xe8>
 800927c:	881d      	ldrh	r5, [r3, #0]
 800927e:	4854      	ldr	r0, [pc, #336]	; (80093d0 <_printf_i+0x244>)
 8009280:	2f6f      	cmp	r7, #111	; 0x6f
 8009282:	bf0c      	ite	eq
 8009284:	2308      	moveq	r3, #8
 8009286:	230a      	movne	r3, #10
 8009288:	2100      	movs	r1, #0
 800928a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800928e:	6866      	ldr	r6, [r4, #4]
 8009290:	60a6      	str	r6, [r4, #8]
 8009292:	2e00      	cmp	r6, #0
 8009294:	bfa2      	ittt	ge
 8009296:	6821      	ldrge	r1, [r4, #0]
 8009298:	f021 0104 	bicge.w	r1, r1, #4
 800929c:	6021      	strge	r1, [r4, #0]
 800929e:	b90d      	cbnz	r5, 80092a4 <_printf_i+0x118>
 80092a0:	2e00      	cmp	r6, #0
 80092a2:	d04d      	beq.n	8009340 <_printf_i+0x1b4>
 80092a4:	4616      	mov	r6, r2
 80092a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80092aa:	fb03 5711 	mls	r7, r3, r1, r5
 80092ae:	5dc7      	ldrb	r7, [r0, r7]
 80092b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092b4:	462f      	mov	r7, r5
 80092b6:	42bb      	cmp	r3, r7
 80092b8:	460d      	mov	r5, r1
 80092ba:	d9f4      	bls.n	80092a6 <_printf_i+0x11a>
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d10b      	bne.n	80092d8 <_printf_i+0x14c>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	07df      	lsls	r7, r3, #31
 80092c4:	d508      	bpl.n	80092d8 <_printf_i+0x14c>
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	6861      	ldr	r1, [r4, #4]
 80092ca:	4299      	cmp	r1, r3
 80092cc:	bfde      	ittt	le
 80092ce:	2330      	movle	r3, #48	; 0x30
 80092d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80092d8:	1b92      	subs	r2, r2, r6
 80092da:	6122      	str	r2, [r4, #16]
 80092dc:	f8cd a000 	str.w	sl, [sp]
 80092e0:	464b      	mov	r3, r9
 80092e2:	aa03      	add	r2, sp, #12
 80092e4:	4621      	mov	r1, r4
 80092e6:	4640      	mov	r0, r8
 80092e8:	f7ff fee2 	bl	80090b0 <_printf_common>
 80092ec:	3001      	adds	r0, #1
 80092ee:	d14c      	bne.n	800938a <_printf_i+0x1fe>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092f4:	b004      	add	sp, #16
 80092f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fa:	4835      	ldr	r0, [pc, #212]	; (80093d0 <_printf_i+0x244>)
 80092fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	680e      	ldr	r6, [r1, #0]
 8009304:	061f      	lsls	r7, r3, #24
 8009306:	f856 5b04 	ldr.w	r5, [r6], #4
 800930a:	600e      	str	r6, [r1, #0]
 800930c:	d514      	bpl.n	8009338 <_printf_i+0x1ac>
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	bf44      	itt	mi
 8009312:	f043 0320 	orrmi.w	r3, r3, #32
 8009316:	6023      	strmi	r3, [r4, #0]
 8009318:	b91d      	cbnz	r5, 8009322 <_printf_i+0x196>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	f023 0320 	bic.w	r3, r3, #32
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	2310      	movs	r3, #16
 8009324:	e7b0      	b.n	8009288 <_printf_i+0xfc>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	f043 0320 	orr.w	r3, r3, #32
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	2378      	movs	r3, #120	; 0x78
 8009330:	4828      	ldr	r0, [pc, #160]	; (80093d4 <_printf_i+0x248>)
 8009332:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009336:	e7e3      	b.n	8009300 <_printf_i+0x174>
 8009338:	065e      	lsls	r6, r3, #25
 800933a:	bf48      	it	mi
 800933c:	b2ad      	uxthmi	r5, r5
 800933e:	e7e6      	b.n	800930e <_printf_i+0x182>
 8009340:	4616      	mov	r6, r2
 8009342:	e7bb      	b.n	80092bc <_printf_i+0x130>
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	6826      	ldr	r6, [r4, #0]
 8009348:	6960      	ldr	r0, [r4, #20]
 800934a:	1d1d      	adds	r5, r3, #4
 800934c:	600d      	str	r5, [r1, #0]
 800934e:	0635      	lsls	r5, r6, #24
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	d501      	bpl.n	8009358 <_printf_i+0x1cc>
 8009354:	6018      	str	r0, [r3, #0]
 8009356:	e002      	b.n	800935e <_printf_i+0x1d2>
 8009358:	0671      	lsls	r1, r6, #25
 800935a:	d5fb      	bpl.n	8009354 <_printf_i+0x1c8>
 800935c:	8018      	strh	r0, [r3, #0]
 800935e:	2300      	movs	r3, #0
 8009360:	6123      	str	r3, [r4, #16]
 8009362:	4616      	mov	r6, r2
 8009364:	e7ba      	b.n	80092dc <_printf_i+0x150>
 8009366:	680b      	ldr	r3, [r1, #0]
 8009368:	1d1a      	adds	r2, r3, #4
 800936a:	600a      	str	r2, [r1, #0]
 800936c:	681e      	ldr	r6, [r3, #0]
 800936e:	6862      	ldr	r2, [r4, #4]
 8009370:	2100      	movs	r1, #0
 8009372:	4630      	mov	r0, r6
 8009374:	f7f6 ff34 	bl	80001e0 <memchr>
 8009378:	b108      	cbz	r0, 800937e <_printf_i+0x1f2>
 800937a:	1b80      	subs	r0, r0, r6
 800937c:	6060      	str	r0, [r4, #4]
 800937e:	6863      	ldr	r3, [r4, #4]
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	2300      	movs	r3, #0
 8009384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009388:	e7a8      	b.n	80092dc <_printf_i+0x150>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	4632      	mov	r2, r6
 800938e:	4649      	mov	r1, r9
 8009390:	4640      	mov	r0, r8
 8009392:	47d0      	blx	sl
 8009394:	3001      	adds	r0, #1
 8009396:	d0ab      	beq.n	80092f0 <_printf_i+0x164>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	079b      	lsls	r3, r3, #30
 800939c:	d413      	bmi.n	80093c6 <_printf_i+0x23a>
 800939e:	68e0      	ldr	r0, [r4, #12]
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	4298      	cmp	r0, r3
 80093a4:	bfb8      	it	lt
 80093a6:	4618      	movlt	r0, r3
 80093a8:	e7a4      	b.n	80092f4 <_printf_i+0x168>
 80093aa:	2301      	movs	r3, #1
 80093ac:	4632      	mov	r2, r6
 80093ae:	4649      	mov	r1, r9
 80093b0:	4640      	mov	r0, r8
 80093b2:	47d0      	blx	sl
 80093b4:	3001      	adds	r0, #1
 80093b6:	d09b      	beq.n	80092f0 <_printf_i+0x164>
 80093b8:	3501      	adds	r5, #1
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	9903      	ldr	r1, [sp, #12]
 80093be:	1a5b      	subs	r3, r3, r1
 80093c0:	42ab      	cmp	r3, r5
 80093c2:	dcf2      	bgt.n	80093aa <_printf_i+0x21e>
 80093c4:	e7eb      	b.n	800939e <_printf_i+0x212>
 80093c6:	2500      	movs	r5, #0
 80093c8:	f104 0619 	add.w	r6, r4, #25
 80093cc:	e7f5      	b.n	80093ba <_printf_i+0x22e>
 80093ce:	bf00      	nop
 80093d0:	08009845 	.word	0x08009845
 80093d4:	08009856 	.word	0x08009856

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d06      	ldr	r5, [pc, #24]	; (80093f4 <_sbrk_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f7 fd2c 	bl	8000e40 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	20001e94 	.word	0x20001e94

080093f8 <__sread>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	460c      	mov	r4, r1
 80093fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009400:	f000 f8e0 	bl	80095c4 <_read_r>
 8009404:	2800      	cmp	r0, #0
 8009406:	bfab      	itete	ge
 8009408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800940a:	89a3      	ldrhlt	r3, [r4, #12]
 800940c:	181b      	addge	r3, r3, r0
 800940e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009412:	bfac      	ite	ge
 8009414:	6563      	strge	r3, [r4, #84]	; 0x54
 8009416:	81a3      	strhlt	r3, [r4, #12]
 8009418:	bd10      	pop	{r4, pc}

0800941a <__swrite>:
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	461f      	mov	r7, r3
 8009420:	898b      	ldrh	r3, [r1, #12]
 8009422:	05db      	lsls	r3, r3, #23
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	4616      	mov	r6, r2
 800942a:	d505      	bpl.n	8009438 <__swrite+0x1e>
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	2302      	movs	r3, #2
 8009432:	2200      	movs	r2, #0
 8009434:	f000 f868 	bl	8009508 <_lseek_r>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	4632      	mov	r2, r6
 8009446:	463b      	mov	r3, r7
 8009448:	4628      	mov	r0, r5
 800944a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800944e:	f000 b817 	b.w	8009480 <_write_r>

08009452 <__sseek>:
 8009452:	b510      	push	{r4, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945a:	f000 f855 	bl	8009508 <_lseek_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	bf15      	itete	ne
 8009464:	6560      	strne	r0, [r4, #84]	; 0x54
 8009466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800946a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800946e:	81a3      	strheq	r3, [r4, #12]
 8009470:	bf18      	it	ne
 8009472:	81a3      	strhne	r3, [r4, #12]
 8009474:	bd10      	pop	{r4, pc}

08009476 <__sclose>:
 8009476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947a:	f000 b813 	b.w	80094a4 <_close_r>
	...

08009480 <_write_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d07      	ldr	r5, [pc, #28]	; (80094a0 <_write_r+0x20>)
 8009484:	4604      	mov	r4, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	602a      	str	r2, [r5, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f7 fc85 	bl	8000d9e <_write>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_write_r+0x1e>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_write_r+0x1e>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20001e94 	.word	0x20001e94

080094a4 <_close_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d06      	ldr	r5, [pc, #24]	; (80094c0 <_close_r+0x1c>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	602b      	str	r3, [r5, #0]
 80094b0:	f7f7 fc91 	bl	8000dd6 <_close>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_close_r+0x1a>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_close_r+0x1a>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	20001e94 	.word	0x20001e94

080094c4 <_fstat_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4d07      	ldr	r5, [pc, #28]	; (80094e4 <_fstat_r+0x20>)
 80094c8:	2300      	movs	r3, #0
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	602b      	str	r3, [r5, #0]
 80094d2:	f7f7 fc8c 	bl	8000dee <_fstat>
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	d102      	bne.n	80094e0 <_fstat_r+0x1c>
 80094da:	682b      	ldr	r3, [r5, #0]
 80094dc:	b103      	cbz	r3, 80094e0 <_fstat_r+0x1c>
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	bf00      	nop
 80094e4:	20001e94 	.word	0x20001e94

080094e8 <_isatty_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_isatty_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f7 fc8b 	bl	8000e0e <_isatty>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_isatty_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_isatty_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20001e94 	.word	0x20001e94

08009508 <_lseek_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	; (8009528 <_lseek_r+0x20>)
 800950c:	4604      	mov	r4, r0
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	2200      	movs	r2, #0
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7f7 fc84 	bl	8000e24 <_lseek>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_lseek_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_lseek_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20001e94 	.word	0x20001e94

0800952c <memmove>:
 800952c:	4288      	cmp	r0, r1
 800952e:	b510      	push	{r4, lr}
 8009530:	eb01 0402 	add.w	r4, r1, r2
 8009534:	d902      	bls.n	800953c <memmove+0x10>
 8009536:	4284      	cmp	r4, r0
 8009538:	4623      	mov	r3, r4
 800953a:	d807      	bhi.n	800954c <memmove+0x20>
 800953c:	1e43      	subs	r3, r0, #1
 800953e:	42a1      	cmp	r1, r4
 8009540:	d008      	beq.n	8009554 <memmove+0x28>
 8009542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800954a:	e7f8      	b.n	800953e <memmove+0x12>
 800954c:	4402      	add	r2, r0
 800954e:	4601      	mov	r1, r0
 8009550:	428a      	cmp	r2, r1
 8009552:	d100      	bne.n	8009556 <memmove+0x2a>
 8009554:	bd10      	pop	{r4, pc}
 8009556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800955a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800955e:	e7f7      	b.n	8009550 <memmove+0x24>

08009560 <__malloc_lock>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__malloc_lock+0x8>)
 8009562:	f7ff b9df 	b.w	8008924 <__retarget_lock_acquire_recursive>
 8009566:	bf00      	nop
 8009568:	20001e8c 	.word	0x20001e8c

0800956c <__malloc_unlock>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__malloc_unlock+0x8>)
 800956e:	f7ff b9da 	b.w	8008926 <__retarget_lock_release_recursive>
 8009572:	bf00      	nop
 8009574:	20001e8c 	.word	0x20001e8c

08009578 <_realloc_r>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	4607      	mov	r7, r0
 800957c:	4614      	mov	r4, r2
 800957e:	460e      	mov	r6, r1
 8009580:	b921      	cbnz	r1, 800958c <_realloc_r+0x14>
 8009582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009586:	4611      	mov	r1, r2
 8009588:	f7ff ba82 	b.w	8008a90 <_malloc_r>
 800958c:	b922      	cbnz	r2, 8009598 <_realloc_r+0x20>
 800958e:	f7ff fa2f 	bl	80089f0 <_free_r>
 8009592:	4625      	mov	r5, r4
 8009594:	4628      	mov	r0, r5
 8009596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009598:	f000 f826 	bl	80095e8 <_malloc_usable_size_r>
 800959c:	42a0      	cmp	r0, r4
 800959e:	d20f      	bcs.n	80095c0 <_realloc_r+0x48>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4638      	mov	r0, r7
 80095a4:	f7ff fa74 	bl	8008a90 <_malloc_r>
 80095a8:	4605      	mov	r5, r0
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d0f2      	beq.n	8009594 <_realloc_r+0x1c>
 80095ae:	4631      	mov	r1, r6
 80095b0:	4622      	mov	r2, r4
 80095b2:	f7fe fe55 	bl	8008260 <memcpy>
 80095b6:	4631      	mov	r1, r6
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff fa19 	bl	80089f0 <_free_r>
 80095be:	e7e9      	b.n	8009594 <_realloc_r+0x1c>
 80095c0:	4635      	mov	r5, r6
 80095c2:	e7e7      	b.n	8009594 <_realloc_r+0x1c>

080095c4 <_read_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d07      	ldr	r5, [pc, #28]	; (80095e4 <_read_r+0x20>)
 80095c8:	4604      	mov	r4, r0
 80095ca:	4608      	mov	r0, r1
 80095cc:	4611      	mov	r1, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f7f7 fbc6 	bl	8000d64 <_read>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_read_r+0x1e>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_read_r+0x1e>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20001e94 	.word	0x20001e94

080095e8 <_malloc_usable_size_r>:
 80095e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ec:	1f18      	subs	r0, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfbc      	itt	lt
 80095f2:	580b      	ldrlt	r3, [r1, r0]
 80095f4:	18c0      	addlt	r0, r0, r3
 80095f6:	4770      	bx	lr

080095f8 <_init>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr

08009604 <_fini>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	bf00      	nop
 8009608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960a:	bc08      	pop	{r3}
 800960c:	469e      	mov	lr, r3
 800960e:	4770      	bx	lr
