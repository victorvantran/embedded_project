
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007830  08007830  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007838  08007838  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000074  080078b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba0  080078b4  00021ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9a  00000000  00000000  0003f59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00043238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00044a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e3f  00000000  00000000  00046100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190b0  00000000  00000000  0004af3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffee9  00000000  00000000  00063fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b94  00000000  00000000  00163f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007718 	.word	0x08007718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007718 	.word	0x08007718

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004d0:	1d39      	adds	r1, r7, #4
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d6:	2201      	movs	r2, #1
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <__io_putchar+0x20>)
 80004da:	f002 ff71 	bl	80033c0 <HAL_UART_Transmit>
	return ch;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20001a7c 	.word	0x20001a7c

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fc3e 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81c 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f918 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f8f0 	bl	80006e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f8be 	bl	8000680 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f88c 	bl	8000620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f003 feae 	bl	8004268 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of thingspeakTask */
  thingspeakTaskHandle = osThreadNew(StartThingSpeakTask, NULL, &thingspeakTask_attributes);
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <main+0x38>)
 800050e:	2100      	movs	r1, #0
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <main+0x3c>)
 8000512:	f003 fef3 	bl	80042fc <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <main+0x40>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f003 fec8 	bl	80042b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x34>
 8000522:	bf00      	nop
 8000524:	08007760 	.word	0x08007760
 8000528:	080007fd 	.word	0x080007fd
 800052c:	200019ac 	.word	0x200019ac

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b8      	sub	sp, #224	; 0xe0
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fc1c 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2288      	movs	r2, #136	; 0x88
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fc0e 	bl	8006d7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058c:	2307      	movs	r3, #7
 800058e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f912 	bl	80017cc <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ae:	f000 f945 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fcde 	bl	8001f98 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005e2:	f000 f92b 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005e6:	2303      	movs	r3, #3
 80005e8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ea:	2300      	movs	r3, #0
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ff07 	bl	8002408 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000600:	f000 f91c 	bl	800083c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000604:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000608:	f001 f88a 	bl	8001720 <HAL_PWREx_ControlVoltageScaling>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000612:	f000 f913 	bl	800083c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	37e0      	adds	r7, #224	; 0xe0
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART1_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000664:	f002 fe5e 	bl	8003324 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f8e5 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200019f8 	.word	0x200019f8
 800067c:	40013800 	.word	0x40013800

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f002 fe2e 	bl	8003324 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8b5 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001a7c 	.word	0x20001a7c
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x48>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x48>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6493      	str	r3, [r2, #72]	; 0x48
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x48>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2105      	movs	r1, #5
 8000702:	200e      	movs	r0, #14
 8000704:	f000 fc2c 	bl	8000f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000708:	200e      	movs	r0, #14
 800070a:	f000 fc45 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2105      	movs	r1, #5
 8000712:	200f      	movs	r0, #15
 8000714:	f000 fc24 	bl	8000f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000718:	200f      	movs	r0, #15
 800071a:	f000 fc3d 	bl	8000f98 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 ff93 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0xc8>)
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_GPIO_Init+0xcc>)
 80007c4:	f000 fddc 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fdcd 	bl	8001380 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	10210000 	.word	0x10210000
 80007f8:	48000800 	.word	0x48000800

080007fc <StartThingSpeakTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThingSpeakTask */
void StartThingSpeakTask(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	printf("hello\r\n");
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <StartThingSpeakTask+0x18>)
 8000806:	f006 fb2f 	bl	8006e68 <puts>
  	osDelay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f003 fe07 	bl	8004420 <osDelay>
  {
 8000812:	e7f7      	b.n	8000804 <StartThingSpeakTask+0x8>
 8000814:	08007740 	.word	0x08007740

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 fac1 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fb6b 	bl	8000f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a5d      	ldr	r2, [pc, #372]	; (8000a2c <HAL_UART_MspInit+0x194>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	f040 8085 	bne.w	80009c6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008bc:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c0:	4a5b      	ldr	r2, [pc, #364]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6613      	str	r3, [r2, #96]	; 0x60
 80008c8:	4b59      	ldr	r3, [pc, #356]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	4a55      	ldr	r2, [pc, #340]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e0:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008fe:	2307      	movs	r3, #7
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f000 fd38 	bl	8001380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000912:	4a49      	ldr	r2, [pc, #292]	; (8000a38 <HAL_UART_MspInit+0x1a0>)
 8000914:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000918:	2202      	movs	r2, #2
 800091a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092e:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000940:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000946:	483b      	ldr	r0, [pc, #236]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 8000948:	f000 fb34 	bl	8000fb4 <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000952:	f7ff ff73 	bl	800083c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 800095a:	671a      	str	r2, [r3, #112]	; 0x70
 800095c:	4a35      	ldr	r2, [pc, #212]	; (8000a34 <HAL_UART_MspInit+0x19c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000964:	4a36      	ldr	r2, [pc, #216]	; (8000a40 <HAL_UART_MspInit+0x1a8>)
 8000966:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096e:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000970:	2210      	movs	r2, #16
 8000972:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000974:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000980:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000998:	4828      	ldr	r0, [pc, #160]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 800099a:	f000 fb0b 	bl	8000fb4 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80009a4:	f7ff ff4a 	bl	800083c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 80009ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <HAL_UART_MspInit+0x1a4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2105      	movs	r1, #5
 80009b8:	2025      	movs	r0, #37	; 0x25
 80009ba:	f000 fad1 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009be:	2025      	movs	r0, #37	; 0x25
 80009c0:	f000 faea 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c4:	e02d      	b.n	8000a22 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <HAL_UART_MspInit+0x1ac>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d128      	bne.n	8000a22 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	6593      	str	r3, [r2, #88]	; 0x58
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x198>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a00:	230c      	movs	r3, #12
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a10:	2307      	movs	r3, #7
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fcaf 	bl	8001380 <HAL_GPIO_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	200019b0 	.word	0x200019b0
 8000a38:	40020058 	.word	0x40020058
 8000a3c:	20001964 	.word	0x20001964
 8000a40:	40020044 	.word	0x40020044
 8000a44:	40004400 	.word	0x40004400

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	; 0x36
 8000a5e:	f000 fa7f 	bl	8000f60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a62:	2036      	movs	r0, #54	; 0x36
 8000a64:	f000 fa98 	bl	8000f98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <HAL_InitTick+0x9c>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_InitTick+0x9c>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6593      	str	r3, [r2, #88]	; 0x58
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_InitTick+0x9c>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fc2a 	bl	80022e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a90:	f001 fbfc 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8000a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_InitTick+0xa0>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_InitTick+0xa4>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_InitTick+0xa8>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_InitTick+0xa4>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_InitTick+0xa4>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_InitTick+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_InitTick+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_InitTick+0xa4>)
 8000ac6:	f002 f95b 	bl	8002d80 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_InitTick+0xa4>)
 8000ad2:	f002 f9b7 	bl	8002e44 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	20001b00 	.word	0x20001b00
 8000af0:	40001000 	.word	0x40001000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Channel4_IRQHandler+0x10>)
 8000b26:	f000 fb7c 	bl	8001222 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20001964 	.word	0x20001964

08000b34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Channel5_IRQHandler+0x10>)
 8000b3a:	f000 fb72 	bl	8001222 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200019b0 	.word	0x200019b0

08000b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <USART1_IRQHandler+0x10>)
 8000b4e:	f002 fccb 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200019f8 	.word	0x200019f8

08000b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM6_DAC_IRQHandler+0x10>)
 8000b62:	f002 f9df 	bl	8002f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001b00 	.word	0x20001b00

08000b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
	}

return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc7f 	bl	80004c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf1      	blt.n	8000bbc <_write+0x12>
	}
	return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:

int _close(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_isatty>:

int _isatty(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
	return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f006 f846 	bl	8006d0c <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20018000 	.word	0x20018000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000090 	.word	0x20000090
 8000cb4:	20001ba0 	.word	0x20001ba0

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <SystemInit+0x5c>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <SystemInit+0x5c>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <SystemInit+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <SystemInit+0x60>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <SystemInit+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <SystemInit+0x60>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <SystemInit+0x60>)
 8000ce4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ce8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <SystemInit+0x60>)
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SystemInit+0x60>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <SystemInit+0x60>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SystemInit+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	40021000 	.word	0x40021000

08000d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d20:	f7ff ffca 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d26:	e003      	b.n	8000d30 <LoopCopyDataInit>

08000d28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d2e:	3104      	adds	r1, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d30:	480a      	ldr	r0, [pc, #40]	; (8000d5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d38:	d3f6      	bcc.n	8000d28 <CopyDataInit>
	ldr	r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d3c:	e002      	b.n	8000d44 <LoopFillZerobss>

08000d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d40:	f842 3b04 	str.w	r3, [r2], #4

08000d44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <LoopForever+0x16>)
	cmp	r2, r3
 8000d46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d48:	d3f9      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f005 ffe5 	bl	8006d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4e:	f7ff fbcd 	bl	80004ec <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d58:	08007840 	.word	0x08007840
	ldr	r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d60:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000d64:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000d68:	20001ba0 	.word	0x20001ba0

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_Init+0x3c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_Init+0x3c>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f8df 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fe5b 	bl	8000a48 <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e001      	b.n	8000da2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9e:	f7ff fd53 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20001b4c 	.word	0x20001b4c

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20001b4c 	.word	0x20001b4c

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f72:	f7ff ff61 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff ffb1 	bl	8000ee4 <NVIC_EncodePriority>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff80 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff54 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e098      	b.n	80010f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <HAL_DMA_Init+0x150>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d80f      	bhi.n	8000ff2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <HAL_DMA_Init+0x154>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_DMA_Init+0x158>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	009a      	lsls	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_DMA_Init+0x15c>)
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff0:	e00e      	b.n	8001010 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b46      	ldr	r3, [pc, #280]	; (8001114 <HAL_DMA_Init+0x160>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a43      	ldr	r2, [pc, #268]	; (800110c <HAL_DMA_Init+0x158>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	009a      	lsls	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a42      	ldr	r2, [pc, #264]	; (8001118 <HAL_DMA_Init+0x164>)
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800102a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800106a:	d039      	beq.n	80010e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <HAL_DMA_Init+0x15c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d11a      	bne.n	80010ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <HAL_DMA_Init+0x168>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 031c 	and.w	r3, r3, #28
 8001082:	210f      	movs	r1, #15
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4924      	ldr	r1, [pc, #144]	; (800111c <HAL_DMA_Init+0x168>)
 800108c:	4013      	ands	r3, r2
 800108e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <HAL_DMA_Init+0x168>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f003 031c 	and.w	r3, r3, #28
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	491d      	ldr	r1, [pc, #116]	; (800111c <HAL_DMA_Init+0x168>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
 80010aa:	e019      	b.n	80010e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_DMA_Init+0x16c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	f003 031c 	and.w	r3, r3, #28
 80010b8:	210f      	movs	r1, #15
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	4917      	ldr	r1, [pc, #92]	; (8001120 <HAL_DMA_Init+0x16c>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_DMA_Init+0x16c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6859      	ldr	r1, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f003 031c 	and.w	r3, r3, #28
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	4911      	ldr	r1, [pc, #68]	; (8001120 <HAL_DMA_Init+0x16c>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40020407 	.word	0x40020407
 8001108:	bffdfff8 	.word	0xbffdfff8
 800110c:	cccccccd 	.word	0xcccccccd
 8001110:	40020000 	.word	0x40020000
 8001114:	bffdfbf8 	.word	0xbffdfbf8
 8001118:	40020400 	.word	0x40020400
 800111c:	400200a8 	.word	0x400200a8
 8001120:	400204a8 	.word	0x400204a8

08001124 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d008      	beq.n	800114e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2204      	movs	r2, #4
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e022      	b.n	8001194 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 020e 	bic.w	r2, r2, #14
 800115c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f003 021c 	and.w	r2, r3, #28
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d005      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2204      	movs	r2, #4
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e029      	b.n	8001218 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020e 	bic.w	r2, r2, #14
 80011d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
    }
  }
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 031c 	and.w	r3, r3, #28
 8001242:	2204      	movs	r2, #4
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d026      	beq.n	800129c <HAL_DMA_IRQHandler+0x7a>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d021      	beq.n	800129c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f003 021c 	and.w	r2, r3, #28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2104      	movs	r1, #4
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	2b00      	cmp	r3, #0
 8001290:	d071      	beq.n	8001376 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800129a:	e06c      	b.n	8001376 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f003 031c 	and.w	r3, r3, #28
 80012a4:	2202      	movs	r2, #2
 80012a6:	409a      	lsls	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d02e      	beq.n	800130e <HAL_DMA_IRQHandler+0xec>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d029      	beq.n	800130e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10b      	bne.n	80012e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020a 	bic.w	r2, r2, #10
 80012d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2102      	movs	r1, #2
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d038      	beq.n	8001376 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800130c:	e033      	b.n	8001376 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f003 031c 	and.w	r3, r3, #28
 8001316:	2208      	movs	r2, #8
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d02a      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d025      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 020e 	bic.w	r2, r2, #14
 800133a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 021c 	and.w	r2, r3, #28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001376:	bf00      	nop
 8001378:	bf00      	nop
}
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e17f      	b.n	8001690 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8171 	beq.w	800168a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d00b      	beq.n	80013c8 <HAL_GPIO_Init+0x48>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013bc:	2b11      	cmp	r3, #17
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d118      	bne.n	8001468 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x128>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b12      	cmp	r3, #18
 80014a6:	d123      	bne.n	80014f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80ac 	beq.w	800168a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a5e      	ldr	r2, [pc, #376]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154a:	4a5a      	ldr	r2, [pc, #360]	; (80016b4 <HAL_GPIO_Init+0x334>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x338>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x23e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x33c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x23a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x340>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x236>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x344>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x232>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x348>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_GPIO_Init+0x34c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x22a>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015c2:	2300      	movs	r3, #0
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_GPIO_Init+0x334>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_GPIO_Init+0x350>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001606:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_GPIO_Init+0x350>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_GPIO_Init+0x350>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_GPIO_Init+0x350>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae78 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000800 	.word	0x48000800
 80016c0:	48000c00 	.word	0x48000c00
 80016c4:	48001000 	.word	0x48001000
 80016c8:	48001400 	.word	0x48001400
 80016cc:	48001800 	.word	0x48001800
 80016d0:	40010400 	.word	0x40010400

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_PWREx_GetVoltageRange+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000

08001720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172e:	d130      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d038      	beq.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2232      	movs	r2, #50	; 0x32
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	3301      	adds	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001764:	e002      	b.n	800176c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3b01      	subs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001778:	d102      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x60>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f2      	bne.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d110      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e00f      	b.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d007      	beq.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40007000 	.word	0x40007000
 80017c4:	20000000 	.word	0x20000000
 80017c8:	431bde83 	.word	0x431bde83

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e3d4      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	4ba1      	ldr	r3, [pc, #644]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	4b9e      	ldr	r3, [pc, #632]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80e4 	beq.w	80019c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_RCC_OscConfig+0x4a>
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	f040 808b 	bne.w	8001924 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 8087 	bne.w	8001924 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x62>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e3ac      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <HAL_RCC_OscConfig+0x7c>
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001846:	e005      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
 8001848:	4b86      	ldr	r3, [pc, #536]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001854:	4293      	cmp	r3, r2
 8001856:	d223      	bcs.n	80018a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fd73 	bl	8002348 <RCC_SetFlashLatencyFromMSIRange>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e38d      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7c      	ldr	r2, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b7a      	ldr	r3, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4977      	ldr	r1, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	4972      	ldr	r1, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
 800189e:	e025      	b.n	80018ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a0:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6f      	ldr	r2, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	496a      	ldr	r1, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4965      	ldr	r1, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fd33 	bl	8002348 <RCC_SetFlashLatencyFromMSIRange>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e34d      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ec:	f000 fc36 	bl	800215c <HAL_RCC_GetSysClockFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	495a      	ldr	r1, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x29c>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_RCC_OscConfig+0x2a0>)
 800190a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x2a4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f899 	bl	8000a48 <HAL_InitTick>
 8001916:	4603      	mov	r3, r0
 8001918:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d052      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	e331      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d032      	beq.n	8001992 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001938:	f7ff fa4e 	bl	8000dd8 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001940:	f7ff fa4a 	bl	8000dd8 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e31a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	493b      	ldr	r1, [pc, #236]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	4936      	ldr	r1, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e01a      	b.n	80019c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800199e:	f7ff fa1b 	bl	8000dd8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa17 	bl	8000dd8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2e7      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x1da>
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d074      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x21a>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	d10e      	bne.n	80019fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d064      	beq.n	8001abc <HAL_RCC_OscConfig+0x2f0>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d160      	bne.n	8001abc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e2c4      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x24a>
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e01d      	b.n	8001a52 <HAL_RCC_OscConfig+0x286>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x26e>
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x286>
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f9bd 	bl	8000dd8 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a60:	e011      	b.n	8001a86 <HAL_RCC_OscConfig+0x2ba>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	08007784 	.word	0x08007784
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f9b0 	bl	8000dd8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e280      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a86:	4baf      	ldr	r3, [pc, #700]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2a8>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f9a0 	bl	8000dd8 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f99c 	bl	8000dd8 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e26c      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aae:	4ba5      	ldr	r3, [pc, #660]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2d0>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_OscConfig+0x310>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d116      	bne.n	8001b0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001adc:	4b99      	ldr	r3, [pc, #612]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_OscConfig+0x328>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e249      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b93      	ldr	r3, [pc, #588]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	4990      	ldr	r1, [pc, #576]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	e040      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d023      	beq.n	8001b5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b12:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a8b      	ldr	r2, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f95b 	bl	8000dd8 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f957 	bl	8000dd8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e227      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	497c      	ldr	r1, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a79      	ldr	r2, [pc, #484]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff f937 	bl	8000dd8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f933 	bl	8000dd8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e203      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b80:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba6:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f912 	bl	8000dd8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f90e 	bl	8000dd8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1de      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bca:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ef      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x3ec>
 8001bd8:	e01b      	b.n	8001c12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bda:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8f5 	bl	8000dd8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8f1 	bl	8000dd8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1c1      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c04:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ef      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a6 	beq.w	8001d6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	4a43      	ldr	r2, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <HAL_RCC_OscConfig+0x57c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d118      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c58:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x57c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3a      	ldr	r2, [pc, #232]	; (8001d48 <HAL_RCC_OscConfig+0x57c>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c64:	f7ff f8b8 	bl	8000dd8 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7ff f8b4 	bl	8000dd8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e184      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_RCC_OscConfig+0x57c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d8>
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e024      	b.n	8001cee <HAL_RCC_OscConfig+0x522>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d110      	bne.n	8001cce <HAL_RCC_OscConfig+0x502>
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ccc:	e00f      	b.n	8001cee <HAL_RCC_OscConfig+0x522>
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f86f 	bl	8000dd8 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff f86b 	bl	8000dd8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e139      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x578>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ed      	beq.n	8001cfe <HAL_RCC_OscConfig+0x532>
 8001d22:	e01a      	b.n	8001d5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff f858 	bl	8000dd8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7ff f854 	bl	8000dd8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d906      	bls.n	8001d4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e122      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4c:	4b90      	ldr	r3, [pc, #576]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e8      	bne.n	8001d2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8108 	beq.w	8001f86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 80d0 	bne.w	8001f20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d80:	4b83      	ldr	r3, [pc, #524]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d130      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d127      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d11f      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dc0:	2a07      	cmp	r2, #7
 8001dc2:	bf14      	ite	ne
 8001dc4:	2201      	movne	r2, #1
 8001dc6:	2200      	moveq	r2, #0
 8001dc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d113      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d06e      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d069      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b7      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e18:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5c      	ldr	r2, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e24:	f7fe ffd8 	bl	8000dd8 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ffd4 	bl	8000dd8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0a4      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_RCC_OscConfig+0x7c8>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e64:	0212      	lsls	r2, r2, #8
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e6c:	0852      	lsrs	r2, r2, #1
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0552      	lsls	r2, r2, #21
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e78:	0852      	lsrs	r2, r2, #1
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	0652      	lsls	r2, r2, #25
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e84:	0912      	lsrs	r2, r2, #4
 8001e86:	0452      	lsls	r2, r2, #17
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	4941      	ldr	r1, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3e      	ldr	r2, [pc, #248]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea8:	f7fe ff96 	bl	8000dd8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe ff92 	bl	8000dd8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e062      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ece:	e05a      	b.n	8001f86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e059      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d152      	bne.n	8001f86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef8:	f7fe ff6e 	bl	8000dd8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe ff6a 	bl	8000dd8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e03a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x734>
 8001f1e:	e032      	b.n	8001f86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d02d      	beq.n	8001f82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f44:	f023 0303 	bic.w	r3, r3, #3
 8001f48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ff3d 	bl	8000dd8 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe ff39 	bl	8000dd8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e009      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x796>
 8001f80:	e001      	b.n	8001f86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	f99d808c 	.word	0xf99d808c

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0c8      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4961      	ldr	r1, [pc, #388]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0b0      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d04c      	beq.n	8002082 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff0:	4b56      	ldr	r3, [pc, #344]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d121      	bne.n	8002040 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e09e      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d115      	bne.n	8002040 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e092      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e086      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002030:	4b46      	ldr	r3, [pc, #280]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e07e      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002040:	4b42      	ldr	r3, [pc, #264]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 0203 	bic.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	493f      	ldr	r1, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002052:	f7fe fec1 	bl	8000dd8 <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	e00a      	b.n	8002070 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe febd 	bl	8000dd8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e066      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 020c 	and.w	r2, r3, #12
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	429a      	cmp	r2, r3
 8002080:	d1eb      	bne.n	800205a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	492c      	ldr	r1, [pc, #176]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4924      	ldr	r1, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1b0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e036      	b.n	800213e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4918      	ldr	r1, [pc, #96]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4910      	ldr	r1, [pc, #64]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210e:	f000 f825 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCC_ClockConfig+0x1b4>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490c      	ldr	r1, [pc, #48]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fc88 	bl	8000a48 <HAL_InitTick>
 8002138:	4603      	mov	r3, r0
 800213a:	72fb      	strb	r3, [r7, #11]

  return status;
 800213c:	7afb      	ldrb	r3, [r7, #11]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	08007784 	.word	0x08007784
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x34>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d121      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d11e      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e005      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021b8:	4a2b      	ldr	r2, [pc, #172]	; (8002268 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d102      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_GetSysClockFreq+0x110>)
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e004      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_RCC_GetSysClockFreq+0x114>)
 80021e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d134      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0xa6>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d003      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0xac>
 8002200:	e005      	b.n	800220e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_GetSysClockFreq+0x110>)
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x114>)
 800220a:	617b      	str	r3, [r7, #20]
      break;
 800220c:	e002      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	617b      	str	r3, [r7, #20]
      break;
 8002212:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	3301      	adds	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	fb02 f203 	mul.w	r2, r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	0e5b      	lsrs	r3, r3, #25
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	3301      	adds	r3, #1
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002254:	69bb      	ldr	r3, [r7, #24]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	0800779c 	.word	0x0800779c
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200

08002274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08007794 	.word	0x08007794

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022bc:	f7ff ffda 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	0adb      	lsrs	r3, r3, #11
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08007794 	.word	0x08007794

080022e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	220f      	movs	r2, #15
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_GetClockConfig+0x5c>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_RCC_GetClockConfig+0x60>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0207 	and.w	r2, r3, #7
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002360:	f7ff f9d0 	bl	8001704 <HAL_PWREx_GetVoltageRange>
 8002364:	6178      	str	r0, [r7, #20]
 8002366:	e014      	b.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4a24      	ldr	r2, [pc, #144]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002380:	f7ff f9c0 	bl	8001704 <HAL_PWREx_GetVoltageRange>
 8002384:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002398:	d10b      	bne.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d919      	bls.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2ba0      	cmp	r3, #160	; 0xa0
 80023a4:	d902      	bls.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a6:	2302      	movs	r3, #2
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e013      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e010      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d902      	bls.n	80023be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b8:	2303      	movs	r3, #3
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e00a      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d102      	bne.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c4:	2302      	movs	r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e004      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b70      	cmp	r3, #112	; 0x70
 80023ce:	d101      	bne.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 0207 	bic.w	r2, r3, #7
 80023dc:	4909      	ldr	r1, [pc, #36]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	40022000 	.word	0x40022000

08002408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002410:	2300      	movs	r3, #0
 8002412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002414:	2300      	movs	r3, #0
 8002416:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002420:	2b00      	cmp	r3, #0
 8002422:	d041      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002428:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800242c:	d02a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800242e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002432:	d824      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800243a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800243e:	d81e      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002448:	d010      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800244a:	e018      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800244c:	4b86      	ldr	r3, [pc, #536]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a85      	ldr	r2, [pc, #532]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002458:	e015      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fabb 	bl	80029dc <RCCEx_PLLSAI1_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246a:	e00c      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3320      	adds	r3, #32
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fba6 	bl	8002bc4 <RCCEx_PLLSAI2_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800247c:	e003      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	74fb      	strb	r3, [r7, #19]
      break;
 8002482:	e000      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249a:	4973      	ldr	r1, [pc, #460]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024a2:	e001      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d041      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024bc:	d02a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024c2:	d824      	bhi.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ce:	d81e      	bhi.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d010      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024da:	e018      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024dc:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a61      	ldr	r2, [pc, #388]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e8:	e015      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fa73 	bl	80029dc <RCCEx_PLLSAI1_Config>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fa:	e00c      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3320      	adds	r3, #32
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fb5e 	bl	8002bc4 <RCCEx_PLLSAI2_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800250c:	e003      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	74fb      	strb	r3, [r7, #19]
      break;
 8002512:	e000      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251c:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800252a:	494f      	ldr	r1, [pc, #316]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002532:	e001      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a0 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	4a40      	ldr	r2, [pc, #256]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256a:	6593      	str	r3, [r2, #88]	; 0x58
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002578:	2301      	movs	r3, #1
 800257a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3a      	ldr	r2, [pc, #232]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002588:	f7fe fc26 	bl	8000dd8 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800258e:	e009      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7fe fc22 	bl	8000dd8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	74fb      	strb	r3, [r7, #19]
        break;
 80025a2:	e005      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d15c      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01f      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d019      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fbe1 	bl	8000dd8 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002618:	e00b      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fbdd 	bl	8000dd8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d902      	bls.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	74fb      	strb	r3, [r7, #19]
            break;
 8002630:	e006      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ec      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002656:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800265e:	e009      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002674:	7c7b      	ldrb	r3, [r7, #17]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b9e      	ldr	r3, [pc, #632]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a9d      	ldr	r2, [pc, #628]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002692:	4b98      	ldr	r3, [pc, #608]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f023 0203 	bic.w	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	4994      	ldr	r1, [pc, #592]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b4:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 020c 	bic.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	498c      	ldr	r1, [pc, #560]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026d6:	4b87      	ldr	r3, [pc, #540]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4983      	ldr	r1, [pc, #524]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f8:	4b7e      	ldr	r3, [pc, #504]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	497b      	ldr	r1, [pc, #492]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	4972      	ldr	r1, [pc, #456]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800273c:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	496a      	ldr	r1, [pc, #424]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275e:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	4961      	ldr	r1, [pc, #388]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002780:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	4959      	ldr	r1, [pc, #356]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a2:	4b54      	ldr	r3, [pc, #336]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	4950      	ldr	r1, [pc, #320]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	4948      	ldr	r1, [pc, #288]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	493f      	ldr	r1, [pc, #252]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d028      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002816:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002826:	d106      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
 8002834:	e011      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800283e:	d10c      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f8c8 	bl	80029dc <RCCEx_PLLSAI1_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d028      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	491f      	ldr	r1, [pc, #124]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002884:	d106      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002890:	60d3      	str	r3, [r2, #12]
 8002892:	e011      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f899 	bl	80029dc <RCCEx_PLLSAI1_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02b      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d109      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a02      	ldr	r2, [pc, #8]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
 80028f0:	e014      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f867 	bl	80029dc <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02f      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002936:	4928      	ldr	r1, [pc, #160]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002946:	d10d      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f844 	bl	80029dc <RCCEx_PLLSAI1_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	74bb      	strb	r3, [r7, #18]
 8002962:	e011      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296c:	d10c      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3320      	adds	r3, #32
 8002972:	2102      	movs	r1, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f925 	bl	8002bc4 <RCCEx_PLLSAI2_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a2:	490d      	ldr	r1, [pc, #52]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029c6:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000

080029dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ea:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029f6:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0203 	and.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
       ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d047      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e044      	b.n	8002ab2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d018      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0x86>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d825      	bhi.n	8002a80 <RCCEx_PLLSAI1_Config+0xa4>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d002      	beq.n	8002a3e <RCCEx_PLLSAI1_Config+0x62>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d009      	beq.n	8002a50 <RCCEx_PLLSAI1_Config+0x74>
 8002a3c:	e020      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a3e:	4b60      	ldr	r3, [pc, #384]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11d      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4e:	e01a      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a50:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e013      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a62:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a6e:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a7e:	e006      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e004      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a86:	bf00      	nop
 8002a88:	e002      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10d      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d17d      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe f988 	bl	8000dd8 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aca:	e009      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002acc:	f7fe f984 	bl	8000dd8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ade:	e005      	b.n	8002aec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ae0:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ef      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d160      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	0211      	lsls	r1, r2, #8
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68d2      	ldr	r2, [r2, #12]
 8002b0e:	0912      	lsrs	r2, r2, #4
 8002b10:	0452      	lsls	r2, r2, #17
 8002b12:	430a      	orrs	r2, r1
 8002b14:	492a      	ldr	r1, [pc, #168]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	610b      	str	r3, [r1, #16]
 8002b1a:	e027      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d112      	bne.n	8002b48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	0211      	lsls	r1, r2, #8
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6912      	ldr	r2, [r2, #16]
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0552      	lsls	r2, r2, #21
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	491f      	ldr	r1, [pc, #124]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]
 8002b46:	e011      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	0211      	lsls	r1, r2, #8
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6952      	ldr	r2, [r2, #20]
 8002b5e:	0852      	lsrs	r2, r2, #1
 8002b60:	3a01      	subs	r2, #1
 8002b62:	0652      	lsls	r2, r2, #25
 8002b64:	430a      	orrs	r2, r1
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe f92e 	bl	8000dd8 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b7e:	e009      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b80:	f7fe f92a 	bl	8000dd8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	73fb      	strb	r3, [r7, #15]
          break;
 8002b92:	e005      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d018      	beq.n	8002c10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10d      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
       ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d047      	beq.n	8002c9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e044      	b.n	8002c9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d018      	beq.n	8002c4a <RCCEx_PLLSAI2_Config+0x86>
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d825      	bhi.n	8002c68 <RCCEx_PLLSAI2_Config+0xa4>
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <RCCEx_PLLSAI2_Config+0x62>
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d009      	beq.n	8002c38 <RCCEx_PLLSAI2_Config+0x74>
 8002c24:	e020      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c26:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c36:	e01a      	b.n	8002c6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e013      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c4a:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c56:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c66:	e006      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e004      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	430b      	orrs	r3, r1
 8002c94:	4939      	ldr	r1, [pc, #228]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d167      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a35      	ldr	r2, [pc, #212]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe f894 	bl	8000dd8 <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cb2:	e009      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb4:	f7fe f890 	bl	8000dd8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d902      	bls.n	8002cc8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cc6:	e005      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ef      	bne.n	8002cb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d14a      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	0912      	lsrs	r2, r2, #4
 8002cf8:	0452      	lsls	r2, r2, #17
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	491f      	ldr	r1, [pc, #124]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	614b      	str	r3, [r1, #20]
 8002d02:	e011      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6892      	ldr	r2, [r2, #8]
 8002d14:	0211      	lsls	r1, r2, #8
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6912      	ldr	r2, [r2, #16]
 8002d1a:	0852      	lsrs	r2, r2, #1
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	0652      	lsls	r2, r2, #25
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4916      	ldr	r1, [pc, #88]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe f850 	bl	8000dd8 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d3a:	e009      	b.n	8002d50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d3c:	f7fe f84c 	bl	8000dd8 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d4e:	e005      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4904      	ldr	r1, [pc, #16]	; (8002d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e049      	b.n	8002e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f841 	bl	8002e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 f9f8 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e04f      	b.n	8002efc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d018      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_Base_Start_IT+0x76>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d115      	bne.n	8002ee6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d015      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0xb4>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d011      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	e008      	b.n	8002ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	00010007 	.word	0x00010007

08002f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d122      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d11b      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0202 	mvn.w	r2, #2
 8002f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f905 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8f7 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f908 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d122      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d11b      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0204 	mvn.w	r2, #4
 8002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8db 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8cd 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8de 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0208 	mvn.w	r2, #8
 8002ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8b1 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8a3 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8b4 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b10      	cmp	r3, #16
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0210 	mvn.w	r2, #16
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2208      	movs	r2, #8
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f887 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f879 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f88a 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0201 	mvn.w	r2, #1
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fbb8 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b80      	cmp	r3, #128	; 0x80
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f914 	bl	80032fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e2:	d10e      	bne.n	8003102 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d107      	bne.n	8003102 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f907 	bl	8003310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d10e      	bne.n	800312e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d107      	bne.n	800312e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f838 	bl	800319e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d10e      	bne.n	800315a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b20      	cmp	r3, #32
 8003148:	d107      	bne.n	800315a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0220 	mvn.w	r2, #32
 8003152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8c7 	bl	80032e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <TIM_Base_SetConfig+0x118>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <TIM_Base_SetConfig+0x11c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <TIM_Base_SetConfig+0x120>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d01b      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <TIM_Base_SetConfig+0x118>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d017      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <TIM_Base_SetConfig+0x11c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <TIM_Base_SetConfig+0x120>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00f      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <TIM_Base_SetConfig+0x128>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <TIM_Base_SetConfig+0x12c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <TIM_Base_SetConfig+0x130>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a11      	ldr	r2, [pc, #68]	; (80032dc <TIM_Base_SetConfig+0x128>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <TIM_Base_SetConfig+0x12c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <TIM_Base_SetConfig+0x130>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40013400 	.word	0x40013400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800

080032e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e040      	b.n	80033b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd faa6 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fae2 	bl	800392c <UART_SetConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e022      	b.n	80033b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fd60 	bl	8003e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800338e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800339e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fde7 	bl	8003f84 <UART_CheckIdleState>
 80033b6:	4603      	mov	r3, r0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f040 8082 	bne.w	80034de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_UART_Transmit+0x26>
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07a      	b.n	80034e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Transmit+0x38>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e073      	b.n	80034e0 <HAL_UART_Transmit+0x120>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2221      	movs	r2, #33	; 0x21
 800340c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800340e:	f7fd fce3 	bl	8000dd8 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d108      	bne.n	8003440 <HAL_UART_Transmit+0x80>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e003      	b.n	8003448 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003450:	e02d      	b.n	80034ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fdda 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e039      	b.n	80034e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	b292      	uxth	r2, r2
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3302      	adds	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e008      	b.n	800349c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b292      	uxth	r2, r2
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cb      	bne.n	8003452 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fda6 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e005      	b.n	80034e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f640 030f 	movw	r3, #2063	; 0x80f
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 81ce 	beq.w	80038d2 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
      }
      return;
 800353e:	e1c8      	b.n	80038d2 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80e3 	beq.w	800370e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <HAL_UART_IRQHandler+0x308>)
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80d8 	beq.w	800370e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_UART_IRQHandler+0xa2>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_UART_IRQHandler+0xce>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2202      	movs	r2, #2
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d8:	f043 0202 	orr.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	f043 0208 	orr.w	r2, r3, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	2b00      	cmp	r3, #0
 8003620:	d011      	beq.n	8003646 <HAL_UART_IRQHandler+0x15e>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00c      	beq.n	8003646 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8142 	beq.w	80038d6 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00c      	beq.n	8003676 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d004      	beq.n	8003696 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003692:	2b00      	cmp	r3, #0
 8003694:	d031      	beq.n	80036fa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fd39 	bl	800410e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d123      	bne.n	80036f2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d013      	beq.n	80036ea <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <HAL_UART_IRQHandler+0x30c>)
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fd66 	bl	80011a0 <HAL_DMA_Abort_IT>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d017      	beq.n	800370a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e00f      	b.n	800370a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f908 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e00b      	b.n	800370a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f904 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	e007      	b.n	800370a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f900 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003708:	e0e5      	b.n	80038d6 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	bf00      	nop
    return;
 800370c:	e0e3      	b.n	80038d6 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	2b01      	cmp	r3, #1
 8003714:	f040 80a9 	bne.w	800386a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a3 	beq.w	800386a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 809d 	beq.w	800386a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d158      	bne.n	80037f8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80c1 	beq.w	80038da <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800375e:	893a      	ldrh	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	f080 80ba 	bcs.w	80038da <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	893a      	ldrh	r2, [r7, #8]
 800376a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12a      	bne.n	80037d4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ac:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0210 	bic.w	r2, r2, #16
 80037c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fca8 	bl	8001124 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f893 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037ee:	e074      	b.n	80038da <HAL_UART_IRQHandler+0x3f2>
 80037f0:	04000120 	.word	0x04000120
 80037f4:	0800416d 	.word	0x0800416d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003804:	b29b      	uxth	r3, r3
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d060      	beq.n	80038de <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800382a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0210 	bic.w	r2, r2, #16
 800385c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f856 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003868:	e039      	b.n	80038de <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <HAL_UART_IRQHandler+0x3a8>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fc9e 	bl	80041ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800388e:	e029      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01a      	beq.n	80038e2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
    }
    return;
 80038b4:	e015      	b.n	80038e2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d011      	beq.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fc64 	bl	8004198 <UART_EndTransmit_IT>
    return;
 80038d0:	e008      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038d2:	bf00      	nop
 80038d4:	e006      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80038d6:	bf00      	nop
 80038d8:	e004      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80038e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop

080038ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	b5b0      	push	{r4, r5, r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4bad      	ldr	r3, [pc, #692]	; (8003c0c <UART_SetConfig+0x2e0>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	69f9      	ldr	r1, [r7, #28]
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4aa2      	ldr	r2, [pc, #648]	; (8003c10 <UART_SetConfig+0x2e4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a99      	ldr	r2, [pc, #612]	; (8003c14 <UART_SetConfig+0x2e8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d121      	bne.n	80039f6 <UART_SetConfig+0xca>
 80039b2:	4b99      	ldr	r3, [pc, #612]	; (8003c18 <UART_SetConfig+0x2ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d817      	bhi.n	80039f0 <UART_SetConfig+0xc4>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x9c>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039e5 	.word	0x080039e5
 80039d0:	080039df 	.word	0x080039df
 80039d4:	080039eb 	.word	0x080039eb
 80039d8:	2301      	movs	r3, #1
 80039da:	76fb      	strb	r3, [r7, #27]
 80039dc:	e0e7      	b.n	8003bae <UART_SetConfig+0x282>
 80039de:	2302      	movs	r3, #2
 80039e0:	76fb      	strb	r3, [r7, #27]
 80039e2:	e0e4      	b.n	8003bae <UART_SetConfig+0x282>
 80039e4:	2304      	movs	r3, #4
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e0e1      	b.n	8003bae <UART_SetConfig+0x282>
 80039ea:	2308      	movs	r3, #8
 80039ec:	76fb      	strb	r3, [r7, #27]
 80039ee:	e0de      	b.n	8003bae <UART_SetConfig+0x282>
 80039f0:	2310      	movs	r3, #16
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	e0db      	b.n	8003bae <UART_SetConfig+0x282>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a88      	ldr	r2, [pc, #544]	; (8003c1c <UART_SetConfig+0x2f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d132      	bne.n	8003a66 <UART_SetConfig+0x13a>
 8003a00:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <UART_SetConfig+0x2ec>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d828      	bhi.n	8003a60 <UART_SetConfig+0x134>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <UART_SetConfig+0xe8>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a61 	.word	0x08003a61
 8003a1c:	08003a61 	.word	0x08003a61
 8003a20:	08003a61 	.word	0x08003a61
 8003a24:	08003a55 	.word	0x08003a55
 8003a28:	08003a61 	.word	0x08003a61
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a61 	.word	0x08003a61
 8003a34:	08003a4f 	.word	0x08003a4f
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a61 	.word	0x08003a61
 8003a44:	08003a5b 	.word	0x08003a5b
 8003a48:	2300      	movs	r3, #0
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e0af      	b.n	8003bae <UART_SetConfig+0x282>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	76fb      	strb	r3, [r7, #27]
 8003a52:	e0ac      	b.n	8003bae <UART_SetConfig+0x282>
 8003a54:	2304      	movs	r3, #4
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	e0a9      	b.n	8003bae <UART_SetConfig+0x282>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	76fb      	strb	r3, [r7, #27]
 8003a5e:	e0a6      	b.n	8003bae <UART_SetConfig+0x282>
 8003a60:	2310      	movs	r3, #16
 8003a62:	76fb      	strb	r3, [r7, #27]
 8003a64:	e0a3      	b.n	8003bae <UART_SetConfig+0x282>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	; (8003c20 <UART_SetConfig+0x2f4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d120      	bne.n	8003ab2 <UART_SetConfig+0x186>
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <UART_SetConfig+0x2ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a7a:	2b30      	cmp	r3, #48	; 0x30
 8003a7c:	d013      	beq.n	8003aa6 <UART_SetConfig+0x17a>
 8003a7e:	2b30      	cmp	r3, #48	; 0x30
 8003a80:	d814      	bhi.n	8003aac <UART_SetConfig+0x180>
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d009      	beq.n	8003a9a <UART_SetConfig+0x16e>
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d810      	bhi.n	8003aac <UART_SetConfig+0x180>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <UART_SetConfig+0x168>
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d006      	beq.n	8003aa0 <UART_SetConfig+0x174>
 8003a92:	e00b      	b.n	8003aac <UART_SetConfig+0x180>
 8003a94:	2300      	movs	r3, #0
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e089      	b.n	8003bae <UART_SetConfig+0x282>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e086      	b.n	8003bae <UART_SetConfig+0x282>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	e083      	b.n	8003bae <UART_SetConfig+0x282>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	76fb      	strb	r3, [r7, #27]
 8003aaa:	e080      	b.n	8003bae <UART_SetConfig+0x282>
 8003aac:	2310      	movs	r3, #16
 8003aae:	76fb      	strb	r3, [r7, #27]
 8003ab0:	e07d      	b.n	8003bae <UART_SetConfig+0x282>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5b      	ldr	r2, [pc, #364]	; (8003c24 <UART_SetConfig+0x2f8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d120      	bne.n	8003afe <UART_SetConfig+0x1d2>
 8003abc:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <UART_SetConfig+0x2ec>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ac8:	d013      	beq.n	8003af2 <UART_SetConfig+0x1c6>
 8003aca:	2bc0      	cmp	r3, #192	; 0xc0
 8003acc:	d814      	bhi.n	8003af8 <UART_SetConfig+0x1cc>
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d009      	beq.n	8003ae6 <UART_SetConfig+0x1ba>
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d810      	bhi.n	8003af8 <UART_SetConfig+0x1cc>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <UART_SetConfig+0x1b4>
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d006      	beq.n	8003aec <UART_SetConfig+0x1c0>
 8003ade:	e00b      	b.n	8003af8 <UART_SetConfig+0x1cc>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	76fb      	strb	r3, [r7, #27]
 8003ae4:	e063      	b.n	8003bae <UART_SetConfig+0x282>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	76fb      	strb	r3, [r7, #27]
 8003aea:	e060      	b.n	8003bae <UART_SetConfig+0x282>
 8003aec:	2304      	movs	r3, #4
 8003aee:	76fb      	strb	r3, [r7, #27]
 8003af0:	e05d      	b.n	8003bae <UART_SetConfig+0x282>
 8003af2:	2308      	movs	r3, #8
 8003af4:	76fb      	strb	r3, [r7, #27]
 8003af6:	e05a      	b.n	8003bae <UART_SetConfig+0x282>
 8003af8:	2310      	movs	r3, #16
 8003afa:	76fb      	strb	r3, [r7, #27]
 8003afc:	e057      	b.n	8003bae <UART_SetConfig+0x282>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d125      	bne.n	8003b54 <UART_SetConfig+0x228>
 8003b08:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <UART_SetConfig+0x2ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b16:	d017      	beq.n	8003b48 <UART_SetConfig+0x21c>
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1c:	d817      	bhi.n	8003b4e <UART_SetConfig+0x222>
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b22:	d00b      	beq.n	8003b3c <UART_SetConfig+0x210>
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d811      	bhi.n	8003b4e <UART_SetConfig+0x222>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <UART_SetConfig+0x20a>
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b32:	d006      	beq.n	8003b42 <UART_SetConfig+0x216>
 8003b34:	e00b      	b.n	8003b4e <UART_SetConfig+0x222>
 8003b36:	2300      	movs	r3, #0
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e038      	b.n	8003bae <UART_SetConfig+0x282>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	e035      	b.n	8003bae <UART_SetConfig+0x282>
 8003b42:	2304      	movs	r3, #4
 8003b44:	76fb      	strb	r3, [r7, #27]
 8003b46:	e032      	b.n	8003bae <UART_SetConfig+0x282>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	76fb      	strb	r3, [r7, #27]
 8003b4c:	e02f      	b.n	8003bae <UART_SetConfig+0x282>
 8003b4e:	2310      	movs	r3, #16
 8003b50:	76fb      	strb	r3, [r7, #27]
 8003b52:	e02c      	b.n	8003bae <UART_SetConfig+0x282>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <UART_SetConfig+0x2e4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d125      	bne.n	8003baa <UART_SetConfig+0x27e>
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <UART_SetConfig+0x2ec>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b6c:	d017      	beq.n	8003b9e <UART_SetConfig+0x272>
 8003b6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b72:	d817      	bhi.n	8003ba4 <UART_SetConfig+0x278>
 8003b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b78:	d00b      	beq.n	8003b92 <UART_SetConfig+0x266>
 8003b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7e:	d811      	bhi.n	8003ba4 <UART_SetConfig+0x278>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <UART_SetConfig+0x260>
 8003b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b88:	d006      	beq.n	8003b98 <UART_SetConfig+0x26c>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x278>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	76fb      	strb	r3, [r7, #27]
 8003b90:	e00d      	b.n	8003bae <UART_SetConfig+0x282>
 8003b92:	2302      	movs	r3, #2
 8003b94:	76fb      	strb	r3, [r7, #27]
 8003b96:	e00a      	b.n	8003bae <UART_SetConfig+0x282>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	76fb      	strb	r3, [r7, #27]
 8003b9c:	e007      	b.n	8003bae <UART_SetConfig+0x282>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	76fb      	strb	r3, [r7, #27]
 8003ba2:	e004      	b.n	8003bae <UART_SetConfig+0x282>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	76fb      	strb	r3, [r7, #27]
 8003ba8:	e001      	b.n	8003bae <UART_SetConfig+0x282>
 8003baa:	2310      	movs	r3, #16
 8003bac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <UART_SetConfig+0x2e4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f040 8087 	bne.w	8003cc8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bba:	7efb      	ldrb	r3, [r7, #27]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d837      	bhi.n	8003c30 <UART_SetConfig+0x304>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x29c>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c31 	.word	0x08003c31
 8003bd8:	08003bfb 	.word	0x08003bfb
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fb4e 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003bf0:	6178      	str	r0, [r7, #20]
        break;
 8003bf2:	e022      	b.n	8003c3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <UART_SetConfig+0x300>)
 8003bf6:	617b      	str	r3, [r7, #20]
        break;
 8003bf8:	e01f      	b.n	8003c3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe faaf 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003bfe:	6178      	str	r0, [r7, #20]
        break;
 8003c00:	e01b      	b.n	8003c3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	617b      	str	r3, [r7, #20]
        break;
 8003c08:	e017      	b.n	8003c3a <UART_SetConfig+0x30e>
 8003c0a:	bf00      	nop
 8003c0c:	efff69f3 	.word	0xefff69f3
 8003c10:	40008000 	.word	0x40008000
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	40004800 	.word	0x40004800
 8003c24:	40004c00 	.word	0x40004c00
 8003c28:	40005000 	.word	0x40005000
 8003c2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	76bb      	strb	r3, [r7, #26]
        break;
 8003c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80f1 	beq.w	8003e24 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d305      	bcc.n	8003c5e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d902      	bls.n	8003c64 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	76bb      	strb	r3, [r7, #26]
 8003c62:	e0df      	b.n	8003e24 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	020b      	lsls	r3, r1, #8
 8003c76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c7a:	0202      	lsls	r2, r0, #8
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	6849      	ldr	r1, [r1, #4]
 8003c80:	0849      	lsrs	r1, r1, #1
 8003c82:	4608      	mov	r0, r1
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	1814      	adds	r4, r2, r0
 8003c8a:	eb43 0501 	adc.w	r5, r3, r1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f7fc fa98 	bl	80001d0 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cae:	d308      	bcc.n	8003cc2 <UART_SetConfig+0x396>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb6:	d204      	bcs.n	8003cc2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	e0b0      	b.n	8003e24 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	76bb      	strb	r3, [r7, #26]
 8003cc6:	e0ad      	b.n	8003e24 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d15c      	bne.n	8003d8c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003cd2:	7efb      	ldrb	r3, [r7, #27]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d828      	bhi.n	8003d2a <UART_SetConfig+0x3fe>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x3b4>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d2b 	.word	0x08003d2b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fac2 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003d08:	6178      	str	r0, [r7, #20]
        break;
 8003d0a:	e013      	b.n	8003d34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fad4 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8003d10:	6178      	str	r0, [r7, #20]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <UART_SetConfig+0x510>)
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fa1f 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003d1e:	6178      	str	r0, [r7, #20]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	617b      	str	r3, [r7, #20]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	76bb      	strb	r3, [r7, #26]
        break;
 8003d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d074      	beq.n	8003e24 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	d916      	bls.n	8003d86 <UART_SetConfig+0x45a>
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5e:	d212      	bcs.n	8003d86 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f023 030f 	bic.w	r3, r3, #15
 8003d68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	89fa      	ldrh	r2, [r7, #14]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	e04e      	b.n	8003e24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	76bb      	strb	r3, [r7, #26]
 8003d8a:	e04b      	b.n	8003e24 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8c:	7efb      	ldrb	r3, [r7, #27]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d827      	bhi.n	8003de2 <UART_SetConfig+0x4b6>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x46c>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003de3 	.word	0x08003de3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fa66 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003dc0:	6178      	str	r0, [r7, #20]
        break;
 8003dc2:	e013      	b.n	8003dec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fa78 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	6178      	str	r0, [r7, #20]
        break;
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <UART_SetConfig+0x510>)
 8003dce:	617b      	str	r3, [r7, #20]
        break;
 8003dd0:	e00c      	b.n	8003dec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe f9c3 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003dd6:	6178      	str	r0, [r7, #20]
        break;
 8003dd8:	e008      	b.n	8003dec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	617b      	str	r3, [r7, #20]
        break;
 8003de0:	e004      	b.n	8003dec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	76bb      	strb	r3, [r7, #26]
        break;
 8003dea:	bf00      	nop
    }

    if (pclk != 0U)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085a      	lsrs	r2, r3, #1
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	d908      	bls.n	8003e20 <UART_SetConfig+0x4f4>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d204      	bcs.n	8003e20 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e001      	b.n	8003e24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e30:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	00f42400 	.word	0x00f42400

08003e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d10a      	bne.n	8003f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f94:	f7fc ff20 	bl	8000dd8 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10e      	bne.n	8003fc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f82d 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e023      	b.n	800400e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d10e      	bne.n	8003ff2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f817 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e00d      	b.n	800400e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	e05e      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402e:	d05a      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fc fed2 	bl	8000dd8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <UART_WaitOnFlagUntilTimeout+0x30>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11b      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004054:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e043      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02c      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409a:	d124      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d091      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004124:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0210 	bic.w	r2, r2, #16
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fbb8 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fb95 	bl	80038ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <__NVIC_SetPriority>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db0a      	blt.n	800420a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	490c      	ldr	r1, [pc, #48]	; (800422c <__NVIC_SetPriority+0x4c>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	440b      	add	r3, r1
 8004204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004208:	e00a      	b.n	8004220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <__NVIC_SetPriority+0x50>)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3b04      	subs	r3, #4
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	440b      	add	r3, r1
 800421e:	761a      	strb	r2, [r3, #24]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <SysTick_Handler+0x1c>)
 800423a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800423c:	f001 fcfe 	bl	8005c3c <xTaskGetSchedulerState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004246:	f002 fae7 	bl	8006818 <xPortSysTickHandler>
  }
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004258:	2100      	movs	r1, #0
 800425a:	f06f 0004 	mvn.w	r0, #4
 800425e:	f7ff ffbf 	bl	80041e0 <__NVIC_SetPriority>
#endif
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800426e:	f3ef 8305 	mrs	r3, IPSR
 8004272:	603b      	str	r3, [r7, #0]
  return(result);
 8004274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800427a:	f06f 0305 	mvn.w	r3, #5
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e00c      	b.n	800429c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <osKernelInitialize+0x44>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <osKernelInitialize+0x44>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e002      	b.n	800429c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800429a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800429c:	687b      	ldr	r3, [r7, #4]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000094 	.word	0x20000094

080042b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b6:	f3ef 8305 	mrs	r3, IPSR
 80042ba:	603b      	str	r3, [r7, #0]
  return(result);
 80042bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80042c2:	f06f 0305 	mvn.w	r3, #5
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e010      	b.n	80042ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <osKernelStart+0x48>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d109      	bne.n	80042e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042d2:	f7ff ffbf 	bl	8004254 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <osKernelStart+0x48>)
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042dc:	f001 f866 	bl	80053ac <vTaskStartScheduler>
      stat = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e002      	b.n	80042ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042ec:	687b      	ldr	r3, [r7, #4]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000094 	.word	0x20000094

080042fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08e      	sub	sp, #56	; 0x38
 8004300:	af04      	add	r7, sp, #16
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800430c:	f3ef 8305 	mrs	r3, IPSR
 8004310:	617b      	str	r3, [r7, #20]
  return(result);
 8004312:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004314:	2b00      	cmp	r3, #0
 8004316:	d17e      	bne.n	8004416 <osThreadNew+0x11a>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d07b      	beq.n	8004416 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004322:	2318      	movs	r3, #24
 8004324:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800432e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d045      	beq.n	80043c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <osThreadNew+0x48>
        name = attr->name;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <osThreadNew+0x6e>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b38      	cmp	r3, #56	; 0x38
 800435c:	d805      	bhi.n	800436a <osThreadNew+0x6e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <osThreadNew+0x72>
        return (NULL);
 800436a:	2300      	movs	r3, #0
 800436c:	e054      	b.n	8004418 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <osThreadNew+0xa8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b5b      	cmp	r3, #91	; 0x5b
 800438c:	d90a      	bls.n	80043a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <osThreadNew+0xa8>
        mem = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e010      	b.n	80043c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <osThreadNew+0xca>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <osThreadNew+0xca>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <osThreadNew+0xca>
          mem = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e001      	b.n	80043c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d110      	bne.n	80043ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d4:	9202      	str	r2, [sp, #8]
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fe0c 	bl	8005000 <xTaskCreateStatic>
 80043e8:	4603      	mov	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e013      	b.n	8004416 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fe57 	bl	80050ba <xTaskCreate>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <osThreadNew+0x11a>
            hTask = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004416:	693b      	ldr	r3, [r7, #16]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004428:	f3ef 8305 	mrs	r3, IPSR
 800442c:	60bb      	str	r3, [r7, #8]
  return(result);
 800442e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <osDelay+0x1c>
    stat = osErrorISR;
 8004434:	f06f 0305 	mvn.w	r3, #5
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e007      	b.n	800444c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 ff7c 	bl	8005344 <vTaskDelay>
    }
  }

  return (stat);
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <vApplicationGetIdleTaskMemory+0x2c>)
 8004468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <vApplicationGetIdleTaskMemory+0x30>)
 800446e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000098 	.word	0x20000098
 8004488:	200000f4 	.word	0x200000f4

0800448c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800449c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <vApplicationGetTimerTaskMemory+0x30>)
 80044a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	200002f4 	.word	0x200002f4
 80044bc:	20000350 	.word	0x20000350

080044c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f103 0208 	add.w	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 0208 	add.w	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f103 0208 	add.w	r2, r3, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004578:	d103      	bne.n	8004582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e00c      	b.n	800459c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3308      	adds	r3, #8
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e002      	b.n	8004590 <vListInsert+0x2e>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d2f6      	bcs.n	800458a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d103      	bne.n	8004608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	1e5a      	subs	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004652:	f002 f84f 	bl	80066f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	3b01      	subs	r3, #1
 8004684:	68f9      	ldr	r1, [r7, #12]
 8004686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	441a      	add	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d114      	bne.n	80046d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3310      	adds	r3, #16
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f903 	bl	80058c0 <xTaskRemoveFromEventList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <xQueueGenericReset+0xcc>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	e009      	b.n	80046e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3310      	adds	r3, #16
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fef2 	bl	80044c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3324      	adds	r3, #36	; 0x24
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff feed 	bl	80044c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046e6:	f002 f835 	bl	8006754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046ea:	2301      	movs	r3, #1
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	; 0x38
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <xQueueGenericCreateStatic+0x52>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <xQueueGenericCreateStatic+0x56>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericCreateStatic+0x58>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	623b      	str	r3, [r7, #32]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <xQueueGenericCreateStatic+0x7e>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <xQueueGenericCreateStatic+0x82>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <xQueueGenericCreateStatic+0x84>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61fb      	str	r3, [r7, #28]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004796:	2350      	movs	r3, #80	; 0x50
 8004798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b50      	cmp	r3, #80	; 0x50
 800479e:	d00a      	beq.n	80047b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	61bb      	str	r3, [r7, #24]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f805 	bl	80047e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3730      	adds	r7, #48	; 0x30
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e002      	b.n	800480a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004816:	2101      	movs	r1, #1
 8004818:	69b8      	ldr	r0, [r7, #24]
 800481a:	f7ff ff05 	bl	8004628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueGenericSend+0x32>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGenericSend+0x40>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGenericSend+0x44>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGenericSend+0x46>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xQueueGenericSend+0x60>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d103      	bne.n	800489e <xQueueGenericSend+0x6e>
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSend+0x72>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSend+0x74>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericSend+0x8e>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	623b      	str	r3, [r7, #32]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048be:	f001 f9bd 	bl	8005c3c <xTaskGetSchedulerState>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <xQueueGenericSend+0x9e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSend+0xa2>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSend+0xa4>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueGenericSend+0xbe>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61fb      	str	r3, [r7, #28]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ee:	f001 ff01 	bl	80066f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <xQueueGenericSend+0xd4>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d129      	bne.n	8004958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490a:	f000 fa0b 	bl	8004d24 <prvCopyDataToQueue>
 800490e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	4618      	mov	r0, r3
 800491e:	f000 ffcf 	bl	80058c0 <xTaskRemoveFromEventList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004928:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <xQueueGenericSend+0x1f8>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	e00a      	b.n	8004950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <xQueueGenericSend+0x1f8>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004950:	f001 ff00 	bl	8006754 <vPortExitCritical>
				return pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	e063      	b.n	8004a20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800495e:	f001 fef9 	bl	8006754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004962:	2300      	movs	r3, #0
 8004964:	e05c      	b.n	8004a20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f809 	bl	8005988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004976:	2301      	movs	r3, #1
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800497a:	f001 feeb 	bl	8006754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497e:	f000 fd7b 	bl	8005478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004982:	f001 feb7 	bl	80066f4 <vPortEnterCritical>
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004992:	d103      	bne.n	800499c <xQueueGenericSend+0x16c>
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a2:	b25b      	sxtb	r3, r3
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x182>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b2:	f001 fecf 	bl	8006754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b6:	1d3a      	adds	r2, r7, #4
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fff8 	bl	80059b4 <xTaskCheckForTimeOut>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d124      	bne.n	8004a14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049cc:	f000 faa2 	bl	8004f14 <prvIsQueueFull>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	3310      	adds	r3, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ff1e 	bl	8005820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 fa2d 	bl	8004e44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f000 fd53 	bl	8005494 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f47f af7c 	bne.w	80048ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <xQueueGenericSend+0x1f8>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	e772      	b.n	80048ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0a:	f000 fa1b 	bl	8004e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a0e:	f000 fd41 	bl	8005494 <xTaskResumeAll>
 8004a12:	e76c      	b.n	80048ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a16:	f000 fa15 	bl	8004e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a1a:	f000 fd3b 	bl	8005494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3738      	adds	r7, #56	; 0x38
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b090      	sub	sp, #64	; 0x40
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <xQueueGenericSendFromISR+0x3c>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <xQueueGenericSendFromISR+0x40>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <xQueueGenericSendFromISR+0x42>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <xQueueGenericSendFromISR+0x6a>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSendFromISR+0x6e>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSendFromISR+0x70>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	623b      	str	r3, [r7, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ab6:	f001 feff 	bl	80068b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aba:	f3ef 8211 	mrs	r2, BASEPRI
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <xQueueGenericSendFromISR+0xbc>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d12f      	bne.n	8004b48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004afe:	f000 f911 	bl	8004d24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0a:	d112      	bne.n	8004b32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fed1 	bl	80058c0 <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00e      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e007      	b.n	8004b42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b36:	3301      	adds	r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	b25a      	sxtb	r2, r3
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b42:	2301      	movs	r3, #1
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b46:	e001      	b.n	8004b4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3740      	adds	r7, #64	; 0x40
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <xQueueReceive+0x30>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	623b      	str	r3, [r7, #32]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <xQueueReceive+0x3e>
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueReceive+0x42>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueReceive+0x44>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueReceive+0x5e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc2:	f001 f83b 	bl	8005c3c <xTaskGetSchedulerState>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <xQueueReceive+0x6e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueReceive+0x72>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueReceive+0x74>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueReceive+0x8e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	61bb      	str	r3, [r7, #24]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf2:	f001 fd7f 	bl	80066f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01f      	beq.n	8004c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c06:	f000 f8f7 	bl	8004df8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00f      	beq.n	8004c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fe4e 	bl	80058c0 <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <xQueueReceive+0x1bc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c3a:	f001 fd8b 	bl	8006754 <vPortExitCritical>
				return pdPASS;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e069      	b.n	8004d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c48:	f001 fd84 	bl	8006754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e062      	b.n	8004d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c56:	f107 0310 	add.w	r3, r7, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fe94 	bl	8005988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c64:	f001 fd76 	bl	8006754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c68:	f000 fc06 	bl	8005478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6c:	f001 fd42 	bl	80066f4 <vPortEnterCritical>
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7c:	d103      	bne.n	8004c86 <xQueueReceive+0x122>
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x138>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	f001 fd5a 	bl	8006754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca0:	1d3a      	adds	r2, r7, #4
 8004ca2:	f107 0310 	add.w	r3, r7, #16
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fe83 	bl	80059b4 <xTaskCheckForTimeOut>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f000 f917 	bl	8004ee8 <prvIsQueueEmpty>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d017      	beq.n	8004cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	3324      	adds	r3, #36	; 0x24
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fda9 	bl	8005820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd0:	f000 f8b8 	bl	8004e44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cd4:	f000 fbde 	bl	8005494 <xTaskResumeAll>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d189      	bne.n	8004bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xQueueReceive+0x1bc>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e780      	b.n	8004bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	f000 f8a7 	bl	8004e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf6:	f000 fbcd 	bl	8005494 <xTaskResumeAll>
 8004cfa:	e77a      	b.n	8004bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f8a1 	bl	8004e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d02:	f000 fbc7 	bl	8005494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d08:	f000 f8ee 	bl	8004ee8 <prvIsQueueEmpty>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f43f af6f 	beq.w	8004bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3730      	adds	r7, #48	; 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d14d      	bne.n	8004de6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 ff92 	bl	8005c78 <xTaskPriorityDisinherit>
 8004d54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	e043      	b.n	8004de6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d119      	bne.n	8004d98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6858      	ldr	r0, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	f001 fff6 	bl	8006d60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d32b      	bcc.n	8004de6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	e026      	b.n	8004de6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68d8      	ldr	r0, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	461a      	mov	r2, r3
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	f001 ffdc 	bl	8006d60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	425b      	negs	r3, r3
 8004db2:	441a      	add	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d207      	bcs.n	8004dd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	425b      	negs	r3, r3
 8004dce:	441a      	add	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d105      	bne.n	8004de6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d018      	beq.n	8004e3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d303      	bcc.n	8004e2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68d9      	ldr	r1, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	461a      	mov	r2, r3
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	f001 ff92 	bl	8006d60 <memcpy>
	}
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e4c:	f001 fc52 	bl	80066f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e58:	e011      	b.n	8004e7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fd2a 	bl	80058c0 <xTaskRemoveFromEventList>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e72:	f000 fe01 	bl	8005a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	dce9      	bgt.n	8004e5a <prvUnlockQueue+0x16>
 8004e86:	e000      	b.n	8004e8a <prvUnlockQueue+0x46>
					break;
 8004e88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	22ff      	movs	r2, #255	; 0xff
 8004e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e92:	f001 fc5f 	bl	8006754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e96:	f001 fc2d 	bl	80066f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ea2:	e011      	b.n	8004ec8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3310      	adds	r3, #16
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fd05 	bl	80058c0 <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ebc:	f000 fddc 	bl	8005a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dce9      	bgt.n	8004ea4 <prvUnlockQueue+0x60>
 8004ed0:	e000      	b.n	8004ed4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ed2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	22ff      	movs	r2, #255	; 0xff
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004edc:	f001 fc3a 	bl	8006754 <vPortExitCritical>
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ef0:	f001 fc00 	bl	80066f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e001      	b.n	8004f06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f06:	f001 fc25 	bl	8006754 <vPortExitCritical>

	return xReturn;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f1c:	f001 fbea 	bl	80066f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d102      	bne.n	8004f32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e001      	b.n	8004f36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f36:	f001 fc0d 	bl	8006754 <vPortExitCritical>

	return xReturn;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e014      	b.n	8004f7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f54:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <vQueueAddToRegistry+0x50>)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f60:	490c      	ldr	r1, [pc, #48]	; (8004f94 <vQueueAddToRegistry+0x50>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <vQueueAddToRegistry+0x50>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f76:	e006      	b.n	8004f86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	d9e7      	bls.n	8004f54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20001b50 	.word	0x20001b50

08004f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fa8:	f001 fba4 	bl	80066f4 <vPortEnterCritical>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fb2:	b25b      	sxtb	r3, r3
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb8:	d103      	bne.n	8004fc2 <vQueueWaitForMessageRestricted+0x2a>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fce:	d103      	bne.n	8004fd8 <vQueueWaitForMessageRestricted+0x40>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd8:	f001 fbbc 	bl	8006754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fc3b 	bl	8005868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7ff ff26 	bl	8004e44 <prvUnlockQueue>
	}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08e      	sub	sp, #56	; 0x38
 8005004:	af04      	add	r7, sp, #16
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	623b      	str	r3, [r7, #32]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xTaskCreateStatic+0x46>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61fb      	str	r3, [r7, #28]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005046:	235c      	movs	r3, #92	; 0x5c
 8005048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b5c      	cmp	r3, #92	; 0x5c
 800504e:	d00a      	beq.n	8005066 <xTaskCreateStatic+0x66>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01e      	beq.n	80050ac <xTaskCreateStatic+0xac>
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01b      	beq.n	80050ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005086:	2300      	movs	r3, #0
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f850 	bl	8005144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a6:	f000 f8dd 	bl	8005264 <prvAddNewTaskToReadyList>
 80050aa:	e001      	b.n	80050b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050b0:	697b      	ldr	r3, [r7, #20]
	}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b08c      	sub	sp, #48	; 0x30
 80050be:	af04      	add	r7, sp, #16
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 fc32 	bl	8006938 <pvPortMalloc>
 80050d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050dc:	205c      	movs	r0, #92	; 0x5c
 80050de:	f001 fc2b 	bl	8006938 <pvPortMalloc>
 80050e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
 80050f0:	e005      	b.n	80050fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f001 fcec 	bl	8006ad0 <vPortFree>
 80050f8:	e001      	b.n	80050fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d017      	beq.n	8005134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	2300      	movs	r3, #0
 8005110:	9303      	str	r3, [sp, #12]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f80e 	bl	8005144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005128:	69f8      	ldr	r0, [r7, #28]
 800512a:	f000 f89b 	bl	8005264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800512e:	2301      	movs	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e002      	b.n	800513a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800513a:	69bb      	ldr	r3, [r7, #24]
	}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	461a      	mov	r2, r3
 800515c:	21a5      	movs	r1, #165	; 0xa5
 800515e:	f001 fe0d 	bl	8006d7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800516c:	3b01      	subs	r3, #1
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	617b      	str	r3, [r7, #20]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01f      	beq.n	80051e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e012      	b.n	80051ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	7819      	ldrb	r1, [r3, #0]
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	3334      	adds	r3, #52	; 0x34
 80051b8:	460a      	mov	r2, r1
 80051ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d006      	beq.n	80051d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b0f      	cmp	r3, #15
 80051d2:	d9e9      	bls.n	80051a8 <prvInitialiseNewTask+0x64>
 80051d4:	e000      	b.n	80051d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80051d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e0:	e003      	b.n	80051ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b37      	cmp	r3, #55	; 0x37
 80051ee:	d901      	bls.n	80051f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051f0:	2337      	movs	r3, #55	; 0x37
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f978 	bl	8004500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	3318      	adds	r3, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff f973 	bl	8004500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	2200      	movs	r2, #0
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	69b8      	ldr	r0, [r7, #24]
 8005244:	f001 f928 	bl	8006498 <pxPortInitialiseStack>
 8005248:	4602      	mov	r2, r0
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800525a:	bf00      	nop
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800526c:	f001 fa42 	bl	80066f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005270:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <prvAddNewTaskToReadyList+0xc4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <prvAddNewTaskToReadyList+0xc4>)
 8005278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800527a:	4b2c      	ldr	r3, [pc, #176]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005282:	4a2a      	ldr	r2, [pc, #168]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <prvAddNewTaskToReadyList+0xc4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d110      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005290:	f000 fc16 	bl	8005ac0 <prvInitialiseTaskLists>
 8005294:	e00d      	b.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <prvAddNewTaskToReadyList+0xcc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800529e:	4b23      	ldr	r3, [pc, #140]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d802      	bhi.n	80052b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <prvAddNewTaskToReadyList+0xd0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <prvAddNewTaskToReadyList+0xd0>)
 80052ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <prvAddNewTaskToReadyList+0xd0>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <prvAddNewTaskToReadyList+0xd4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d903      	bls.n	80052d8 <prvAddNewTaskToReadyList+0x74>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <prvAddNewTaskToReadyList+0xd4>)
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <prvAddNewTaskToReadyList+0xd8>)
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f7ff f913 	bl	800451a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f4:	f001 fa2e 	bl	8006754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052f8:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <prvAddNewTaskToReadyList+0xcc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00e      	beq.n	800531e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <prvAddNewTaskToReadyList+0xc8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d207      	bcs.n	800531e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <prvAddNewTaskToReadyList+0xdc>)
 8005310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000c24 	.word	0x20000c24
 800532c:	20000750 	.word	0x20000750
 8005330:	20000c30 	.word	0x20000c30
 8005334:	20000c40 	.word	0x20000c40
 8005338:	20000c2c 	.word	0x20000c2c
 800533c:	20000754 	.word	0x20000754
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d017      	beq.n	8005386 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <vTaskDelay+0x60>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <vTaskDelay+0x30>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005374:	f000 f880 	bl	8005478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005378:	2100      	movs	r1, #0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fcea 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005380:	f000 f888 	bl	8005494 <xTaskResumeAll>
 8005384:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <vTaskDelay+0x64>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000c4c 	.word	0x20000c4c
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ba:	463a      	mov	r2, r7
 80053bc:	1d39      	adds	r1, r7, #4
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff f848 	bl	8004458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	9202      	str	r2, [sp, #8]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	460a      	mov	r2, r1
 80053da:	4921      	ldr	r1, [pc, #132]	; (8005460 <vTaskStartScheduler+0xb4>)
 80053dc:	4821      	ldr	r0, [pc, #132]	; (8005464 <vTaskStartScheduler+0xb8>)
 80053de:	f7ff fe0f 	bl	8005000 <xTaskCreateStatic>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <vTaskStartScheduler+0xbc>)
 80053e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053e8:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <vTaskStartScheduler+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e001      	b.n	80053fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d102      	bne.n	8005406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005400:	f000 fcfc 	bl	8005dfc <xTimerCreateTimerTask>
 8005404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d116      	bne.n	800543a <vTaskStartScheduler+0x8e>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	613b      	str	r3, [r7, #16]
}
 800541e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <vTaskStartScheduler+0xc0>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <vTaskStartScheduler+0xc4>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <vTaskStartScheduler+0xc8>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005434:	f001 f8bc 	bl	80065b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005438:	e00e      	b.n	8005458 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005440:	d10a      	bne.n	8005458 <vTaskStartScheduler+0xac>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60fb      	str	r3, [r7, #12]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <vTaskStartScheduler+0xaa>
}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	08007748 	.word	0x08007748
 8005464:	08005a91 	.word	0x08005a91
 8005468:	20000c48 	.word	0x20000c48
 800546c:	20000c44 	.word	0x20000c44
 8005470:	20000c30 	.word	0x20000c30
 8005474:	20000c28 	.word	0x20000c28

08005478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <vTaskSuspendAll+0x18>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a03      	ldr	r2, [pc, #12]	; (8005490 <vTaskSuspendAll+0x18>)
 8005484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000c4c 	.word	0x20000c4c

08005494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054a2:	4b42      	ldr	r3, [pc, #264]	; (80055ac <xTaskResumeAll+0x118>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	603b      	str	r3, [r7, #0]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054c0:	f001 f918 	bl	80066f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054c4:	4b39      	ldr	r3, [pc, #228]	; (80055ac <xTaskResumeAll+0x118>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	4a38      	ldr	r2, [pc, #224]	; (80055ac <xTaskResumeAll+0x118>)
 80054cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ce:	4b37      	ldr	r3, [pc, #220]	; (80055ac <xTaskResumeAll+0x118>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d162      	bne.n	800559c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <xTaskResumeAll+0x11c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d05e      	beq.n	800559c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054de:	e02f      	b.n	8005540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e0:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <xTaskResumeAll+0x120>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3318      	adds	r3, #24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff f871 	bl	80045d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f86c 	bl	80045d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <xTaskResumeAll+0x124>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d903      	bls.n	8005510 <xTaskResumeAll+0x7c>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <xTaskResumeAll+0x124>)
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4a27      	ldr	r2, [pc, #156]	; (80055bc <xTaskResumeAll+0x128>)
 800551e:	441a      	add	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f7fe fff7 	bl	800451a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <xTaskResumeAll+0x12c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <xTaskResumeAll+0x130>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005540:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <xTaskResumeAll+0x120>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1cb      	bne.n	80054e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800554e:	f000 fb55 	bl	8005bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <xTaskResumeAll+0x134>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800555e:	f000 f847 	bl	80055f0 <xTaskIncrementTick>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <xTaskResumeAll+0x130>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3b01      	subs	r3, #1
 8005572:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f1      	bne.n	800555e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <xTaskResumeAll+0x134>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <xTaskResumeAll+0x130>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800558c:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <xTaskResumeAll+0x138>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800559c:	f001 f8da 	bl	8006754 <vPortExitCritical>

	return xAlreadyYielded;
 80055a0:	68bb      	ldr	r3, [r7, #8]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000c4c 	.word	0x20000c4c
 80055b0:	20000c24 	.word	0x20000c24
 80055b4:	20000be4 	.word	0x20000be4
 80055b8:	20000c2c 	.word	0x20000c2c
 80055bc:	20000754 	.word	0x20000754
 80055c0:	20000750 	.word	0x20000750
 80055c4:	20000c38 	.word	0x20000c38
 80055c8:	20000c34 	.word	0x20000c34
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <xTaskGetTickCount+0x1c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000c28 	.word	0x20000c28

080055f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fa:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <xTaskIncrementTick+0x148>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 808f 	bne.w	8005722 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005604:	4b4d      	ldr	r3, [pc, #308]	; (800573c <xTaskIncrementTick+0x14c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800560c:	4a4b      	ldr	r2, [pc, #300]	; (800573c <xTaskIncrementTick+0x14c>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d120      	bne.n	800565a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005618:	4b49      	ldr	r3, [pc, #292]	; (8005740 <xTaskIncrementTick+0x150>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <xTaskIncrementTick+0x48>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	603b      	str	r3, [r7, #0]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xTaskIncrementTick+0x46>
 8005638:	4b41      	ldr	r3, [pc, #260]	; (8005740 <xTaskIncrementTick+0x150>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b41      	ldr	r3, [pc, #260]	; (8005744 <xTaskIncrementTick+0x154>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a3f      	ldr	r2, [pc, #252]	; (8005740 <xTaskIncrementTick+0x150>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4a3f      	ldr	r2, [pc, #252]	; (8005744 <xTaskIncrementTick+0x154>)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b3e      	ldr	r3, [pc, #248]	; (8005748 <xTaskIncrementTick+0x158>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a3d      	ldr	r2, [pc, #244]	; (8005748 <xTaskIncrementTick+0x158>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	f000 fad1 	bl	8005bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800565a:	4b3c      	ldr	r3, [pc, #240]	; (800574c <xTaskIncrementTick+0x15c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d349      	bcc.n	80056f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <xTaskIncrementTick+0x150>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <xTaskIncrementTick+0x15c>)
 8005670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005674:	601a      	str	r2, [r3, #0]
					break;
 8005676:	e03f      	b.n	80056f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b31      	ldr	r3, [pc, #196]	; (8005740 <xTaskIncrementTick+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d203      	bcs.n	8005698 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005690:	4a2e      	ldr	r2, [pc, #184]	; (800574c <xTaskIncrementTick+0x15c>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005696:	e02f      	b.n	80056f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3304      	adds	r3, #4
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe ff99 	bl	80045d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3318      	adds	r3, #24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe ff90 	bl	80045d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <xTaskIncrementTick+0x160>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <xTaskIncrementTick+0xd8>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <xTaskIncrementTick+0x160>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <xTaskIncrementTick+0x164>)
 80056d6:	441a      	add	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe ff1b 	bl	800451a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <xTaskIncrementTick+0x168>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3b8      	bcc.n	8005664 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f6:	e7b5      	b.n	8005664 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056f8:	4b17      	ldr	r3, [pc, #92]	; (8005758 <xTaskIncrementTick+0x168>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fe:	4915      	ldr	r1, [pc, #84]	; (8005754 <xTaskIncrementTick+0x164>)
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d901      	bls.n	8005714 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <xTaskIncrementTick+0x16c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e004      	b.n	800572c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <xTaskIncrementTick+0x170>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <xTaskIncrementTick+0x170>)
 800572a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800572c:	697b      	ldr	r3, [r7, #20]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000c4c 	.word	0x20000c4c
 800573c:	20000c28 	.word	0x20000c28
 8005740:	20000bdc 	.word	0x20000bdc
 8005744:	20000be0 	.word	0x20000be0
 8005748:	20000c3c 	.word	0x20000c3c
 800574c:	20000c44 	.word	0x20000c44
 8005750:	20000c2c 	.word	0x20000c2c
 8005754:	20000754 	.word	0x20000754
 8005758:	20000750 	.word	0x20000750
 800575c:	20000c38 	.word	0x20000c38
 8005760:	20000c34 	.word	0x20000c34

08005764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <vTaskSwitchContext+0xa8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005772:	4b27      	ldr	r3, [pc, #156]	; (8005810 <vTaskSwitchContext+0xac>)
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005778:	e041      	b.n	80057fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <vTaskSwitchContext+0xac>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <vTaskSwitchContext+0xb0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e010      	b.n	80057aa <vTaskSwitchContext+0x46>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vTaskSwitchContext+0x3e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	491b      	ldr	r1, [pc, #108]	; (8005818 <vTaskSwitchContext+0xb4>)
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0e4      	beq.n	8005788 <vTaskSwitchContext+0x24>
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <vTaskSwitchContext+0xb4>)
 80057ca:	4413      	add	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	605a      	str	r2, [r3, #4]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	3308      	adds	r3, #8
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d104      	bne.n	80057ee <vTaskSwitchContext+0x8a>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a09      	ldr	r2, [pc, #36]	; (800581c <vTaskSwitchContext+0xb8>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4a06      	ldr	r2, [pc, #24]	; (8005814 <vTaskSwitchContext+0xb0>)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6013      	str	r3, [r2, #0]
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000c4c 	.word	0x20000c4c
 8005810:	20000c38 	.word	0x20000c38
 8005814:	20000c2c 	.word	0x20000c2c
 8005818:	20000754 	.word	0x20000754
 800581c:	20000750 	.word	0x20000750

08005820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <vTaskPlaceOnEventList+0x44>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3318      	adds	r3, #24
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fe fe87 	bl	8004562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005854:	2101      	movs	r1, #1
 8005856:	6838      	ldr	r0, [r7, #0]
 8005858:	f000 fa7c 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000750 	.word	0x20000750

08005868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	617b      	str	r3, [r7, #20]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3318      	adds	r3, #24
 8005896:	4619      	mov	r1, r3
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7fe fe3e 	bl	800451a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68b8      	ldr	r0, [r7, #8]
 80058ae:	f000 fa51 	bl	8005d54 <prvAddCurrentTaskToDelayedList>
	}
 80058b2:	bf00      	nop
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000750 	.word	0x20000750

080058c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3318      	adds	r3, #24
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fe6f 	bl	80045d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <xTaskRemoveFromEventList+0xb0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11d      	bne.n	800593a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fe66 	bl	80045d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <xTaskRemoveFromEventList+0xb4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <xTaskRemoveFromEventList+0x5c>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <xTaskRemoveFromEventList+0xb4>)
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <xTaskRemoveFromEventList+0xb8>)
 800592a:	441a      	add	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fe fdf1 	bl	800451a <vListInsertEnd>
 8005938:	e005      	b.n	8005946 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3318      	adds	r3, #24
 800593e:	4619      	mov	r1, r3
 8005940:	480e      	ldr	r0, [pc, #56]	; (800597c <xTaskRemoveFromEventList+0xbc>)
 8005942:	f7fe fdea 	bl	800451a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <xTaskRemoveFromEventList+0xc0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	429a      	cmp	r2, r3
 8005952:	d905      	bls.n	8005960 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <xTaskRemoveFromEventList+0xc4>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e001      	b.n	8005964 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005964:	697b      	ldr	r3, [r7, #20]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000c4c 	.word	0x20000c4c
 8005974:	20000c2c 	.word	0x20000c2c
 8005978:	20000754 	.word	0x20000754
 800597c:	20000be4 	.word	0x20000be4
 8005980:	20000750 	.word	0x20000750
 8005984:	20000c38 	.word	0x20000c38

08005988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <vTaskInternalSetTimeOutState+0x24>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <vTaskInternalSetTimeOutState+0x28>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000c3c 	.word	0x20000c3c
 80059b0:	20000c28 	.word	0x20000c28

080059b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	613b      	str	r3, [r7, #16]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059f6:	f000 fe7d 	bl	80066f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <xTaskCheckForTimeOut+0xbc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a12:	d102      	bne.n	8005a1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	e023      	b.n	8005a62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <xTaskCheckForTimeOut+0xc0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d007      	beq.n	8005a36 <xTaskCheckForTimeOut+0x82>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e015      	b.n	8005a62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d20b      	bcs.n	8005a58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ff9b 	bl	8005988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e004      	b.n	8005a62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a62:	f000 fe77 	bl	8006754 <vPortExitCritical>

	return xReturn;
 8005a66:	69fb      	ldr	r3, [r7, #28]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000c28 	.word	0x20000c28
 8005a74:	20000c3c 	.word	0x20000c3c

08005a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <vTaskMissedYield+0x14>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000c38 	.word	0x20000c38

08005a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a98:	f000 f852 	bl	8005b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <prvIdleTask+0x28>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d9f9      	bls.n	8005a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <prvIdleTask+0x2c>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ab4:	e7f0      	b.n	8005a98 <prvIdleTask+0x8>
 8005ab6:	bf00      	nop
 8005ab8:	20000754 	.word	0x20000754
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e00c      	b.n	8005ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <prvInitialiseTaskLists+0x60>)
 8005ad8:	4413      	add	r3, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fcf0 	bl	80044c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b37      	cmp	r3, #55	; 0x37
 8005aea:	d9ef      	bls.n	8005acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aec:	480d      	ldr	r0, [pc, #52]	; (8005b24 <prvInitialiseTaskLists+0x64>)
 8005aee:	f7fe fce7 	bl	80044c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005af2:	480d      	ldr	r0, [pc, #52]	; (8005b28 <prvInitialiseTaskLists+0x68>)
 8005af4:	f7fe fce4 	bl	80044c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005af8:	480c      	ldr	r0, [pc, #48]	; (8005b2c <prvInitialiseTaskLists+0x6c>)
 8005afa:	f7fe fce1 	bl	80044c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005afe:	480c      	ldr	r0, [pc, #48]	; (8005b30 <prvInitialiseTaskLists+0x70>)
 8005b00:	f7fe fcde 	bl	80044c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b04:	480b      	ldr	r0, [pc, #44]	; (8005b34 <prvInitialiseTaskLists+0x74>)
 8005b06:	f7fe fcdb 	bl	80044c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <prvInitialiseTaskLists+0x78>)
 8005b0c:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <prvInitialiseTaskLists+0x64>)
 8005b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvInitialiseTaskLists+0x7c>)
 8005b12:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <prvInitialiseTaskLists+0x68>)
 8005b14:	601a      	str	r2, [r3, #0]
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000754 	.word	0x20000754
 8005b24:	20000bb4 	.word	0x20000bb4
 8005b28:	20000bc8 	.word	0x20000bc8
 8005b2c:	20000be4 	.word	0x20000be4
 8005b30:	20000bf8 	.word	0x20000bf8
 8005b34:	20000c10 	.word	0x20000c10
 8005b38:	20000bdc 	.word	0x20000bdc
 8005b3c:	20000be0 	.word	0x20000be0

08005b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b46:	e019      	b.n	8005b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b48:	f000 fdd4 	bl	80066f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <prvCheckTasksWaitingTermination+0x50>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe fd3b 	bl	80045d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <prvCheckTasksWaitingTermination+0x54>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4a0b      	ldr	r2, [pc, #44]	; (8005b94 <prvCheckTasksWaitingTermination+0x54>)
 8005b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b72:	f000 fdef 	bl	8006754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f810 	bl	8005b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <prvCheckTasksWaitingTermination+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e1      	bne.n	8005b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000bf8 	.word	0x20000bf8
 8005b94:	20000c24 	.word	0x20000c24
 8005b98:	20000c0c 	.word	0x20000c0c

08005b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 ff8c 	bl	8006ad0 <vPortFree>
				vPortFree( pxTCB );
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 ff89 	bl	8006ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bbe:	e018      	b.n	8005bf2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d103      	bne.n	8005bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 ff80 	bl	8006ad0 <vPortFree>
	}
 8005bd0:	e00f      	b.n	8005bf2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d00a      	beq.n	8005bf2 <prvDeleteTCB+0x56>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	60fb      	str	r3, [r7, #12]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <prvDeleteTCB+0x54>
	}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <prvResetNextTaskUnblockTime+0x38>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <prvResetNextTaskUnblockTime+0x3c>)
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c14:	e008      	b.n	8005c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <prvResetNextTaskUnblockTime+0x38>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <prvResetNextTaskUnblockTime+0x3c>)
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	20000bdc 	.word	0x20000bdc
 8005c38:	20000c44 	.word	0x20000c44

08005c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <xTaskGetSchedulerState+0x34>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d102      	bne.n	8005c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	e008      	b.n	8005c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <xTaskGetSchedulerState+0x38>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	e001      	b.n	8005c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c62:	687b      	ldr	r3, [r7, #4]
	}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000c30 	.word	0x20000c30
 8005c74:	20000c4c 	.word	0x20000c4c

08005c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d056      	beq.n	8005d3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c8e:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <xTaskPriorityDisinherit+0xd0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d00a      	beq.n	8005cae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	60bb      	str	r3, [r7, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	1e5a      	subs	r2, r3, #1
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d02c      	beq.n	8005d3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d128      	bne.n	8005d3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fc70 	bl	80045d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTaskPriorityDisinherit+0xd4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <xTaskPriorityDisinherit+0xa4>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a0c      	ldr	r2, [pc, #48]	; (8005d4c <xTaskPriorityDisinherit+0xd4>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <xTaskPriorityDisinherit+0xd8>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fbf1 	bl	800451a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d3c:	697b      	ldr	r3, [r7, #20]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000750 	.word	0x20000750
 8005d4c:	20000c2c 	.word	0x20000c2c
 8005d50:	20000754 	.word	0x20000754

08005d54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d5e:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d64:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fc32 	bl	80045d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d76:	d10a      	bne.n	8005d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4819      	ldr	r0, [pc, #100]	; (8005dec <prvAddCurrentTaskToDelayedList+0x98>)
 8005d88:	f7fe fbc7 	bl	800451a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d8c:	e026      	b.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d209      	bcs.n	8005dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fbd5 	bl	8004562 <vListInsert>
}
 8005db8:	e010      	b.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fbcb 	bl	8004562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d202      	bcs.n	8005ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dd6:	4a08      	ldr	r2, [pc, #32]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000c28 	.word	0x20000c28
 8005de8:	20000750 	.word	0x20000750
 8005dec:	20000c10 	.word	0x20000c10
 8005df0:	20000be0 	.word	0x20000be0
 8005df4:	20000bdc 	.word	0x20000bdc
 8005df8:	20000c44 	.word	0x20000c44

08005dfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e06:	f000 fb07 	bl	8006418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <xTimerCreateTimerTask+0x80>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d021      	beq.n	8005e56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e1a:	1d3a      	adds	r2, r7, #4
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	f107 030c 	add.w	r3, r7, #12
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe fb31 	bl	800448c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2302      	movs	r3, #2
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	460a      	mov	r2, r1
 8005e3c:	4910      	ldr	r1, [pc, #64]	; (8005e80 <xTimerCreateTimerTask+0x84>)
 8005e3e:	4811      	ldr	r0, [pc, #68]	; (8005e84 <xTimerCreateTimerTask+0x88>)
 8005e40:	f7ff f8de 	bl	8005000 <xTaskCreateStatic>
 8005e44:	4603      	mov	r3, r0
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <xTimerCreateTimerTask+0x8c>)
 8005e48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <xTimerCreateTimerTask+0x8c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	613b      	str	r3, [r7, #16]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e72:	697b      	ldr	r3, [r7, #20]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000c80 	.word	0x20000c80
 8005e80:	08007750 	.word	0x08007750
 8005e84:	08005fc1 	.word	0x08005fc1
 8005e88:	20000c84 	.word	0x20000c84

08005e8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	623b      	str	r3, [r7, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eba:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <xTimerGenericCommand+0x98>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d02a      	beq.n	8005f18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	dc18      	bgt.n	8005f06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ed4:	f7ff feb2 	bl	8005c3c <xTaskGetSchedulerState>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d109      	bne.n	8005ef2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <xTimerGenericCommand+0x98>)
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	f107 0110 	add.w	r1, r7, #16
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	f7fe fca1 	bl	8004830 <xQueueGenericSend>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24
 8005ef0:	e012      	b.n	8005f18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <xTimerGenericCommand+0x98>)
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f107 0110 	add.w	r1, r7, #16
 8005efa:	2300      	movs	r3, #0
 8005efc:	2200      	movs	r2, #0
 8005efe:	f7fe fc97 	bl	8004830 <xQueueGenericSend>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24
 8005f04:	e008      	b.n	8005f18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <xTimerGenericCommand+0x98>)
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f107 0110 	add.w	r1, r7, #16
 8005f0e:	2300      	movs	r3, #0
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	f7fe fd8b 	bl	8004a2c <xQueueGenericSendFromISR>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	; 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000c80 	.word	0x20000c80

08005f28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f32:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <prvProcessExpiredTimer+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fb47 	bl	80045d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d022      	beq.n	8005f9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	18d1      	adds	r1, r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	6978      	ldr	r0, [r7, #20]
 8005f62:	f000 f8d1 	bl	8006108 <prvInsertTimerInActiveList>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01f      	beq.n	8005fac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	2100      	movs	r1, #0
 8005f76:	6978      	ldr	r0, [r7, #20]
 8005f78:	f7ff ff88 	bl	8005e8c <xTimerGenericCommand>
 8005f7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d113      	bne.n	8005fac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	4798      	blx	r3
}
 8005fb4:	bf00      	nop
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000c78 	.word	0x20000c78

08005fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fc8:	f107 0308 	add.w	r3, r7, #8
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 f857 	bl	8006080 <prvGetNextExpireTime>
 8005fd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f803 	bl	8005fe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fde:	f000 f8d5 	bl	800618c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fe2:	e7f1      	b.n	8005fc8 <prvTimerTask+0x8>

08005fe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fee:	f7ff fa43 	bl	8005478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f866 	bl	80060c8 <prvSampleTimeNow>
 8005ffc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d130      	bne.n	8006066 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <prvProcessTimerOrBlockTask+0x3c>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	429a      	cmp	r2, r3
 8006010:	d806      	bhi.n	8006020 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006012:	f7ff fa3f 	bl	8005494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff85 	bl	8005f28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800601e:	e024      	b.n	800606a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <prvProcessTimerOrBlockTask+0x90>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <prvProcessTimerOrBlockTask+0x50>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <prvProcessTimerOrBlockTask+0x52>
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <prvProcessTimerOrBlockTask+0x94>)
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	4619      	mov	r1, r3
 8006046:	f7fe ffa7 	bl	8004f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800604a:	f7ff fa23 	bl	8005494 <xTaskResumeAll>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006054:	4b09      	ldr	r3, [pc, #36]	; (800607c <prvProcessTimerOrBlockTask+0x98>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
}
 8006064:	e001      	b.n	800606a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006066:	f7ff fa15 	bl	8005494 <xTaskResumeAll>
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000c7c 	.word	0x20000c7c
 8006078:	20000c80 	.word	0x20000c80
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006088:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <prvGetNextExpireTime+0x44>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <prvGetNextExpireTime+0x16>
 8006092:	2201      	movs	r2, #1
 8006094:	e000      	b.n	8006098 <prvGetNextExpireTime+0x18>
 8006096:	2200      	movs	r2, #0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <prvGetNextExpireTime+0x44>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e001      	b.n	80060b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000c78 	.word	0x20000c78

080060c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060d0:	f7ff fa7e 	bl	80055d0 <xTaskGetTickCount>
 80060d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <prvSampleTimeNow+0x3c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d205      	bcs.n	80060ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060e0:	f000 f936 	bl	8006350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060f2:	4a04      	ldr	r2, [pc, #16]	; (8006104 <prvSampleTimeNow+0x3c>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000c88 	.word	0x20000c88

08006108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d812      	bhi.n	8006154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad2      	subs	r2, r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800613c:	2301      	movs	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e01b      	b.n	800617a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <prvInsertTimerInActiveList+0x7c>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fa08 	bl	8004562 <vListInsert>
 8006152:	e012      	b.n	800617a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d206      	bcs.n	800616a <prvInsertTimerInActiveList+0x62>
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d302      	bcc.n	800616a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e007      	b.n	800617a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <prvInsertTimerInActiveList+0x80>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe f9f4 	bl	8004562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800617a:	697b      	ldr	r3, [r7, #20]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000c7c 	.word	0x20000c7c
 8006188:	20000c78 	.word	0x20000c78

0800618c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	; 0x38
 8006190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006192:	e0ca      	b.n	800632a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da18      	bge.n	80061cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800619a:	1d3b      	adds	r3, r7, #4
 800619c:	3304      	adds	r3, #4
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	61fb      	str	r3, [r7, #28]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c2:	6850      	ldr	r0, [r2, #4]
 80061c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c6:	6892      	ldr	r2, [r2, #8]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f2c0 80aa 	blt.w	8006328 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe f9f5 	bl	80045d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ea:	463b      	mov	r3, r7
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff ff6b 	bl	80060c8 <prvSampleTimeNow>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	f200 8097 	bhi.w	800632a <prvProcessReceivedCommands+0x19e>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <prvProcessReceivedCommands+0x78>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	0800622d 	.word	0x0800622d
 8006208:	0800622d 	.word	0x0800622d
 800620c:	0800622d 	.word	0x0800622d
 8006210:	080062a1 	.word	0x080062a1
 8006214:	080062b5 	.word	0x080062b5
 8006218:	080062ff 	.word	0x080062ff
 800621c:	0800622d 	.word	0x0800622d
 8006220:	0800622d 	.word	0x0800622d
 8006224:	080062a1 	.word	0x080062a1
 8006228:	080062b5 	.word	0x080062b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	18d1      	adds	r1, r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624c:	f7ff ff5c 	bl	8006108 <prvInsertTimerInActiveList>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d069      	beq.n	800632a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05e      	beq.n	800632a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	441a      	add	r2, r3
 8006274:	2300      	movs	r3, #0
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	2300      	movs	r3, #0
 800627a:	2100      	movs	r1, #0
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f7ff fe05 	bl	8005e8c <xTimerGenericCommand>
 8006282:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d14f      	bne.n	800632a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	61bb      	str	r3, [r7, #24]
}
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062b2:	e03a      	b.n	800632a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	617b      	str	r3, [r7, #20]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	18d1      	adds	r1, r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f8:	f7ff ff06 	bl	8006108 <prvInsertTimerInActiveList>
					break;
 80062fc:	e015      	b.n	800632a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800630c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630e:	f000 fbdf 	bl	8006ad0 <vPortFree>
 8006312:	e00a      	b.n	800632a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006326:	e000      	b.n	800632a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <prvProcessReceivedCommands+0x1c0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1d39      	adds	r1, r7, #4
 8006330:	2200      	movs	r2, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fc16 	bl	8004b64 <xQueueReceive>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	f47f af2a 	bne.w	8006194 <prvProcessReceivedCommands+0x8>
	}
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3730      	adds	r7, #48	; 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000c80 	.word	0x20000c80

08006350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006356:	e048      	b.n	80063ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006358:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <prvSwitchTimerLists+0xc0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006362:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <prvSwitchTimerLists+0xc0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3304      	adds	r3, #4
 8006370:	4618      	mov	r0, r3
 8006372:	f7fe f92f 	bl	80045d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d02e      	beq.n	80063ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d90e      	bls.n	80063bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063aa:	4b19      	ldr	r3, [pc, #100]	; (8006410 <prvSwitchTimerLists+0xc0>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7fe f8d4 	bl	8004562 <vListInsert>
 80063ba:	e016      	b.n	80063ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063bc:	2300      	movs	r3, #0
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	2100      	movs	r1, #0
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff fd60 	bl	8005e8c <xTimerGenericCommand>
 80063cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	603b      	str	r3, [r7, #0]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <prvSwitchTimerLists+0xc0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1b1      	bne.n	8006358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvSwitchTimerLists+0xc0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <prvSwitchTimerLists+0xc4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a04      	ldr	r2, [pc, #16]	; (8006410 <prvSwitchTimerLists+0xc0>)
 8006400:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006402:	4a04      	ldr	r2, [pc, #16]	; (8006414 <prvSwitchTimerLists+0xc4>)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000c78 	.word	0x20000c78
 8006414:	20000c7c 	.word	0x20000c7c

08006418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800641e:	f000 f969 	bl	80066f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <prvCheckForValidListAndQueue+0x60>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d120      	bne.n	800646c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800642a:	4814      	ldr	r0, [pc, #80]	; (800647c <prvCheckForValidListAndQueue+0x64>)
 800642c:	f7fe f848 	bl	80044c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006430:	4813      	ldr	r0, [pc, #76]	; (8006480 <prvCheckForValidListAndQueue+0x68>)
 8006432:	f7fe f845 	bl	80044c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <prvCheckForValidListAndQueue+0x6c>)
 8006438:	4a10      	ldr	r2, [pc, #64]	; (800647c <prvCheckForValidListAndQueue+0x64>)
 800643a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <prvCheckForValidListAndQueue+0x70>)
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <prvCheckForValidListAndQueue+0x68>)
 8006440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006442:	2300      	movs	r3, #0
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <prvCheckForValidListAndQueue+0x74>)
 8006448:	4a11      	ldr	r2, [pc, #68]	; (8006490 <prvCheckForValidListAndQueue+0x78>)
 800644a:	2110      	movs	r1, #16
 800644c:	200a      	movs	r0, #10
 800644e:	f7fe f953 	bl	80046f8 <xQueueGenericCreateStatic>
 8006452:	4603      	mov	r3, r0
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <prvCheckForValidListAndQueue+0x60>)
 8006456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <prvCheckForValidListAndQueue+0x60>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <prvCheckForValidListAndQueue+0x60>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	490b      	ldr	r1, [pc, #44]	; (8006494 <prvCheckForValidListAndQueue+0x7c>)
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fd6c 	bl	8004f44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800646c:	f000 f972 	bl	8006754 <vPortExitCritical>
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000c80 	.word	0x20000c80
 800647c:	20000c50 	.word	0x20000c50
 8006480:	20000c64 	.word	0x20000c64
 8006484:	20000c78 	.word	0x20000c78
 8006488:	20000c7c 	.word	0x20000c7c
 800648c:	20000d2c 	.word	0x20000d2c
 8006490:	20000c8c 	.word	0x20000c8c
 8006494:	08007758 	.word	0x08007758

08006498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3b04      	subs	r3, #4
 80064a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 0201 	bic.w	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064c8:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <pxPortInitialiseStack+0x64>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3b14      	subs	r3, #20
 80064d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f06f 0202 	mvn.w	r2, #2
 80064e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3b20      	subs	r3, #32
 80064ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ee:	68fb      	ldr	r3, [r7, #12]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	08006501 	.word	0x08006501

08006500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <prvTaskExitError+0x54>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d00a      	beq.n	800652a <prvTaskExitError+0x2a>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <prvTaskExitError+0x28>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	60bb      	str	r3, [r7, #8]
}
 800653c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800653e:	bf00      	nop
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0fc      	beq.n	8006540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	2000000c 	.word	0x2000000c
	...

08006560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006560:	4b07      	ldr	r3, [pc, #28]	; (8006580 <pxCurrentTCBConst2>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	6808      	ldr	r0, [r1, #0]
 8006566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	f380 8809 	msr	PSP, r0
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	4770      	bx	lr
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst2>:
 8006580:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006588:	4808      	ldr	r0, [pc, #32]	; (80065ac <prvPortStartFirstTask+0x24>)
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	f380 8808 	msr	MSP, r0
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8814 	msr	CONTROL, r0
 800659a:	b662      	cpsie	i
 800659c:	b661      	cpsie	f
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	df00      	svc	0
 80065a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065aa:	bf00      	nop
 80065ac:	e000ed08 	.word	0xe000ed08

080065b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065b6:	4b46      	ldr	r3, [pc, #280]	; (80066d0 <xPortStartScheduler+0x120>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a46      	ldr	r2, [pc, #280]	; (80066d4 <xPortStartScheduler+0x124>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10a      	bne.n	80065d6 <xPortStartScheduler+0x26>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065d6:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <xPortStartScheduler+0x120>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a3f      	ldr	r2, [pc, #252]	; (80066d8 <xPortStartScheduler+0x128>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10a      	bne.n	80065f6 <xPortStartScheduler+0x46>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <xPortStartScheduler+0x12c>)
 80065f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <xPortStartScheduler+0x130>)
 800661c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800661e:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <xPortStartScheduler+0x134>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006624:	e009      	b.n	800663a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006626:	4b2f      	ldr	r3, [pc, #188]	; (80066e4 <xPortStartScheduler+0x134>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3b01      	subs	r3, #1
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <xPortStartScheduler+0x134>)
 800662e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d0ef      	beq.n	8006626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006646:	4b27      	ldr	r3, [pc, #156]	; (80066e4 <xPortStartScheduler+0x134>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1c3 0307 	rsb	r3, r3, #7
 800664e:	2b04      	cmp	r3, #4
 8006650:	d00a      	beq.n	8006668 <xPortStartScheduler+0xb8>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60bb      	str	r3, [r7, #8]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006668:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <xPortStartScheduler+0x134>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <xPortStartScheduler+0x134>)
 8006670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <xPortStartScheduler+0x134>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <xPortStartScheduler+0x134>)
 800667c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006686:	4b18      	ldr	r3, [pc, #96]	; (80066e8 <xPortStartScheduler+0x138>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <xPortStartScheduler+0x138>)
 800668c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <xPortStartScheduler+0x138>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <xPortStartScheduler+0x138>)
 8006698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800669c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800669e:	f000 f8dd 	bl	800685c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <xPortStartScheduler+0x13c>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066a8:	f000 f8fc 	bl	80068a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066ac:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <xPortStartScheduler+0x140>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0f      	ldr	r2, [pc, #60]	; (80066f0 <xPortStartScheduler+0x140>)
 80066b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066b8:	f7ff ff66 	bl	8006588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066bc:	f7ff f852 	bl	8005764 <vTaskSwitchContext>
	prvTaskExitError();
 80066c0:	f7ff ff1e 	bl	8006500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000ed00 	.word	0xe000ed00
 80066d4:	410fc271 	.word	0x410fc271
 80066d8:	410fc270 	.word	0x410fc270
 80066dc:	e000e400 	.word	0xe000e400
 80066e0:	20000d7c 	.word	0x20000d7c
 80066e4:	20000d80 	.word	0x20000d80
 80066e8:	e000ed20 	.word	0xe000ed20
 80066ec:	2000000c 	.word	0x2000000c
 80066f0:	e000ef34 	.word	0xe000ef34

080066f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	607b      	str	r3, [r7, #4]
}
 800670c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <vPortEnterCritical+0x58>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <vPortEnterCritical+0x58>)
 8006716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <vPortEnterCritical+0x58>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d10f      	bne.n	8006740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortEnterCritical+0x5c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <vPortEnterCritical+0x4c>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	603b      	str	r3, [r7, #0]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <vPortEnterCritical+0x4a>
	}
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	2000000c 	.word	0x2000000c
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800675a:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <vPortExitCritical+0x50>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <vPortExitCritical+0x24>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	607b      	str	r3, [r7, #4]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <vPortExitCritical+0x50>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3b01      	subs	r3, #1
 800677e:	4a09      	ldr	r2, [pc, #36]	; (80067a4 <vPortExitCritical+0x50>)
 8006780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <vPortExitCritical+0x50>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <vPortExitCritical+0x42>
 800678a:	2300      	movs	r3, #0
 800678c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f383 8811 	msr	BASEPRI, r3
}
 8006794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000000c 	.word	0x2000000c
	...

080067b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	; (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067d4:	f380 8811 	msr	BASEPRI, r0
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f7fe ffc0 	bl	8005764 <vTaskSwitchContext>
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	bc09      	pop	{r0, r3}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f6:	f01e 0f10 	tst.w	lr, #16
 80067fa:	bf08      	it	eq
 80067fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006800:	f380 8809 	msr	PSP, r0
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst>:
 8006810:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006832:	f7fe fedd 	bl	80055f0 <xTaskIncrementTick>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <xPortSysTickHandler+0x40>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <vPortSetupTimerInterrupt+0x38>)
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <vPortSetupTimerInterrupt+0x3c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0a      	ldr	r2, [pc, #40]	; (800689c <vPortSetupTimerInterrupt+0x40>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <vPortSetupTimerInterrupt+0x44>)
 800687a:	3b01      	subs	r3, #1
 800687c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000e010 	.word	0xe000e010
 8006894:	e000e018 	.word	0xe000e018
 8006898:	20000000 	.word	0x20000000
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	e000e014 	.word	0xe000e014

080068a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068b4 <vPortEnableVFP+0x10>
 80068a8:	6801      	ldr	r1, [r0, #0]
 80068aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068ae:	6001      	str	r1, [r0, #0]
 80068b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed88 	.word	0xe000ed88

080068b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d914      	bls.n	80068f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ca:	4a17      	ldr	r2, [pc, #92]	; (8006928 <vPortValidateInterruptPriority+0x70>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068d4:	4b15      	ldr	r3, [pc, #84]	; (800692c <vPortValidateInterruptPriority+0x74>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	7afa      	ldrb	r2, [r7, #11]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d20a      	bcs.n	80068f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <vPortValidateInterruptPriority+0x78>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068fc:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <vPortValidateInterruptPriority+0x7c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d90a      	bls.n	800691a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	603b      	str	r3, [r7, #0]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <vPortValidateInterruptPriority+0x60>
	}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	e000e3f0 	.word	0xe000e3f0
 800692c:	20000d7c 	.word	0x20000d7c
 8006930:	e000ed0c 	.word	0xe000ed0c
 8006934:	20000d80 	.word	0x20000d80

08006938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006944:	f7fe fd98 	bl	8005478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006948:	4b5b      	ldr	r3, [pc, #364]	; (8006ab8 <pvPortMalloc+0x180>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006950:	f000 f920 	bl	8006b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006954:	4b59      	ldr	r3, [pc, #356]	; (8006abc <pvPortMalloc+0x184>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8093 	bne.w	8006a88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01d      	beq.n	80069a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006968:	2208      	movs	r2, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	2b00      	cmp	r3, #0
 8006978:	d014      	beq.n	80069a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f023 0307 	bic.w	r3, r3, #7
 8006980:	3308      	adds	r3, #8
 8006982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <pvPortMalloc+0x6c>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	617b      	str	r3, [r7, #20]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d06e      	beq.n	8006a88 <pvPortMalloc+0x150>
 80069aa:	4b45      	ldr	r3, [pc, #276]	; (8006ac0 <pvPortMalloc+0x188>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d869      	bhi.n	8006a88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069b4:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <pvPortMalloc+0x18c>)
 80069b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069b8:	4b42      	ldr	r3, [pc, #264]	; (8006ac4 <pvPortMalloc+0x18c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069be:	e004      	b.n	80069ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d903      	bls.n	80069dc <pvPortMalloc+0xa4>
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f1      	bne.n	80069c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069dc:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <pvPortMalloc+0x180>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d050      	beq.n	8006a88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2208      	movs	r2, #8
 80069ec:	4413      	add	r3, r2
 80069ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	2308      	movs	r3, #8
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d91f      	bls.n	8006a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <pvPortMalloc+0xf8>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	613b      	str	r3, [r7, #16]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a42:	69b8      	ldr	r0, [r7, #24]
 8006a44:	f000 f908 	bl	8006c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a48:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <pvPortMalloc+0x188>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <pvPortMalloc+0x188>)
 8006a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <pvPortMalloc+0x188>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <pvPortMalloc+0x190>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d203      	bcs.n	8006a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <pvPortMalloc+0x188>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <pvPortMalloc+0x190>)
 8006a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <pvPortMalloc+0x184>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <pvPortMalloc+0x194>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a11      	ldr	r2, [pc, #68]	; (8006acc <pvPortMalloc+0x194>)
 8006a86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a88:	f7fe fd04 	bl	8005494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <pvPortMalloc+0x174>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	60fb      	str	r3, [r7, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <pvPortMalloc+0x172>
	return pvReturn;
 8006aac:	69fb      	ldr	r3, [r7, #28]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3728      	adds	r7, #40	; 0x28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20001944 	.word	0x20001944
 8006abc:	20001958 	.word	0x20001958
 8006ac0:	20001948 	.word	0x20001948
 8006ac4:	2000193c 	.word	0x2000193c
 8006ac8:	2000194c 	.word	0x2000194c
 8006acc:	20001950 	.word	0x20001950

08006ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d04d      	beq.n	8006b7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	425b      	negs	r3, r3
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <vPortFree+0xb8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <vPortFree+0x44>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	60fb      	str	r3, [r7, #12]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <vPortFree+0x62>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60bb      	str	r3, [r7, #8]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <vPortFree+0xb8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01e      	beq.n	8006b7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11a      	bne.n	8006b7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <vPortFree+0xb8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b58:	f7fe fc8e 	bl	8005478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <vPortFree+0xbc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4413      	add	r3, r2
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <vPortFree+0xbc>)
 8006b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b6a:	6938      	ldr	r0, [r7, #16]
 8006b6c:	f000 f874 	bl	8006c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <vPortFree+0xc0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a06      	ldr	r2, [pc, #24]	; (8006b90 <vPortFree+0xc0>)
 8006b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b7a:	f7fe fc8b 	bl	8005494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b7e:	bf00      	nop
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20001958 	.word	0x20001958
 8006b8c:	20001948 	.word	0x20001948
 8006b90:	20001954 	.word	0x20001954

08006b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ba0:	4b27      	ldr	r3, [pc, #156]	; (8006c40 <prvHeapInit+0xac>)
 8006ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3307      	adds	r3, #7
 8006bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0307 	bic.w	r3, r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <prvHeapInit+0xac>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <prvHeapInit+0xb0>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bd2:	4b1c      	ldr	r3, [pc, #112]	; (8006c44 <prvHeapInit+0xb0>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	4413      	add	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006be0:	2208      	movs	r2, #8
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <prvHeapInit+0xb4>)
 8006bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <prvHeapInit+0xb4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <prvHeapInit+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <prvHeapInit+0xb4>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <prvHeapInit+0xb8>)
 8006c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <prvHeapInit+0xbc>)
 8006c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <prvHeapInit+0xc0>)
 8006c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000d84 	.word	0x20000d84
 8006c44:	2000193c 	.word	0x2000193c
 8006c48:	20001944 	.word	0x20001944
 8006c4c:	2000194c 	.word	0x2000194c
 8006c50:	20001948 	.word	0x20001948
 8006c54:	20001958 	.word	0x20001958

08006c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <prvInsertBlockIntoFreeList+0xac>)
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e002      	b.n	8006c6c <prvInsertBlockIntoFreeList+0x14>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d8f7      	bhi.n	8006c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d108      	bne.n	8006c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	441a      	add	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d118      	bne.n	8006ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <prvInsertBlockIntoFreeList+0xb0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d00d      	beq.n	8006cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e008      	b.n	8006ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <prvInsertBlockIntoFreeList+0xb0>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e003      	b.n	8006ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d002      	beq.n	8006cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000193c 	.word	0x2000193c
 8006d08:	20001944 	.word	0x20001944

08006d0c <__errno>:
 8006d0c:	4b01      	ldr	r3, [pc, #4]	; (8006d14 <__errno+0x8>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20000010 	.word	0x20000010

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4d0d      	ldr	r5, [pc, #52]	; (8006d50 <__libc_init_array+0x38>)
 8006d1c:	4c0d      	ldr	r4, [pc, #52]	; (8006d54 <__libc_init_array+0x3c>)
 8006d1e:	1b64      	subs	r4, r4, r5
 8006d20:	10a4      	asrs	r4, r4, #2
 8006d22:	2600      	movs	r6, #0
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	4d0b      	ldr	r5, [pc, #44]	; (8006d58 <__libc_init_array+0x40>)
 8006d2a:	4c0c      	ldr	r4, [pc, #48]	; (8006d5c <__libc_init_array+0x44>)
 8006d2c:	f000 fcf4 	bl	8007718 <_init>
 8006d30:	1b64      	subs	r4, r4, r5
 8006d32:	10a4      	asrs	r4, r4, #2
 8006d34:	2600      	movs	r6, #0
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d40:	4798      	blx	r3
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4a:	4798      	blx	r3
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08007838 	.word	0x08007838
 8006d54:	08007838 	.word	0x08007838
 8006d58:	08007838 	.word	0x08007838
 8006d5c:	0800783c 	.word	0x0800783c

08006d60 <memcpy>:
 8006d60:	440a      	add	r2, r1
 8006d62:	4291      	cmp	r1, r2
 8006d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d68:	d100      	bne.n	8006d6c <memcpy+0xc>
 8006d6a:	4770      	bx	lr
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d76:	4291      	cmp	r1, r2
 8006d78:	d1f9      	bne.n	8006d6e <memcpy+0xe>
 8006d7a:	bd10      	pop	{r4, pc}

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <_puts_r>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	4605      	mov	r5, r0
 8006d92:	b118      	cbz	r0, 8006d9c <_puts_r+0x10>
 8006d94:	6983      	ldr	r3, [r0, #24]
 8006d96:	b90b      	cbnz	r3, 8006d9c <_puts_r+0x10>
 8006d98:	f000 fa48 	bl	800722c <__sinit>
 8006d9c:	69ab      	ldr	r3, [r5, #24]
 8006d9e:	68ac      	ldr	r4, [r5, #8]
 8006da0:	b913      	cbnz	r3, 8006da8 <_puts_r+0x1c>
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 fa42 	bl	800722c <__sinit>
 8006da8:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <_puts_r+0xd0>)
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d120      	bne.n	8006df0 <_puts_r+0x64>
 8006dae:	686c      	ldr	r4, [r5, #4]
 8006db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db2:	07db      	lsls	r3, r3, #31
 8006db4:	d405      	bmi.n	8006dc2 <_puts_r+0x36>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	0598      	lsls	r0, r3, #22
 8006dba:	d402      	bmi.n	8006dc2 <_puts_r+0x36>
 8006dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dbe:	f000 fad3 	bl	8007368 <__retarget_lock_acquire_recursive>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	0719      	lsls	r1, r3, #28
 8006dc6:	d51d      	bpl.n	8006e04 <_puts_r+0x78>
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	b1db      	cbz	r3, 8006e04 <_puts_r+0x78>
 8006dcc:	3e01      	subs	r6, #1
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60a3      	str	r3, [r4, #8]
 8006dd8:	bb39      	cbnz	r1, 8006e2a <_puts_r+0x9e>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da38      	bge.n	8006e50 <_puts_r+0xc4>
 8006dde:	4622      	mov	r2, r4
 8006de0:	210a      	movs	r1, #10
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f848 	bl	8006e78 <__swbuf_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d011      	beq.n	8006e10 <_puts_r+0x84>
 8006dec:	250a      	movs	r5, #10
 8006dee:	e011      	b.n	8006e14 <_puts_r+0x88>
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <_puts_r+0xd4>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d101      	bne.n	8006dfa <_puts_r+0x6e>
 8006df6:	68ac      	ldr	r4, [r5, #8]
 8006df8:	e7da      	b.n	8006db0 <_puts_r+0x24>
 8006dfa:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <_puts_r+0xd8>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	bf08      	it	eq
 8006e00:	68ec      	ldreq	r4, [r5, #12]
 8006e02:	e7d5      	b.n	8006db0 <_puts_r+0x24>
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 f888 	bl	8006f1c <__swsetup_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d0dd      	beq.n	8006dcc <_puts_r+0x40>
 8006e10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e16:	07da      	lsls	r2, r3, #31
 8006e18:	d405      	bmi.n	8006e26 <_puts_r+0x9a>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	059b      	lsls	r3, r3, #22
 8006e1e:	d402      	bmi.n	8006e26 <_puts_r+0x9a>
 8006e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e22:	f000 faa2 	bl	800736a <__retarget_lock_release_recursive>
 8006e26:	4628      	mov	r0, r5
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da04      	bge.n	8006e38 <_puts_r+0xac>
 8006e2e:	69a2      	ldr	r2, [r4, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dc06      	bgt.n	8006e42 <_puts_r+0xb6>
 8006e34:	290a      	cmp	r1, #10
 8006e36:	d004      	beq.n	8006e42 <_puts_r+0xb6>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	7019      	strb	r1, [r3, #0]
 8006e40:	e7c5      	b.n	8006dce <_puts_r+0x42>
 8006e42:	4622      	mov	r2, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f817 	bl	8006e78 <__swbuf_r>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d1bf      	bne.n	8006dce <_puts_r+0x42>
 8006e4e:	e7df      	b.n	8006e10 <_puts_r+0x84>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	250a      	movs	r5, #10
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	701d      	strb	r5, [r3, #0]
 8006e5a:	e7db      	b.n	8006e14 <_puts_r+0x88>
 8006e5c:	080077f0 	.word	0x080077f0
 8006e60:	08007810 	.word	0x08007810
 8006e64:	080077d0 	.word	0x080077d0

08006e68 <puts>:
 8006e68:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <puts+0xc>)
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f7ff bf8d 	b.w	8006d8c <_puts_r>
 8006e72:	bf00      	nop
 8006e74:	20000010 	.word	0x20000010

08006e78 <__swbuf_r>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	460e      	mov	r6, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	4605      	mov	r5, r0
 8006e80:	b118      	cbz	r0, 8006e8a <__swbuf_r+0x12>
 8006e82:	6983      	ldr	r3, [r0, #24]
 8006e84:	b90b      	cbnz	r3, 8006e8a <__swbuf_r+0x12>
 8006e86:	f000 f9d1 	bl	800722c <__sinit>
 8006e8a:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <__swbuf_r+0x98>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d12b      	bne.n	8006ee8 <__swbuf_r+0x70>
 8006e90:	686c      	ldr	r4, [r5, #4]
 8006e92:	69a3      	ldr	r3, [r4, #24]
 8006e94:	60a3      	str	r3, [r4, #8]
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	071a      	lsls	r2, r3, #28
 8006e9a:	d52f      	bpl.n	8006efc <__swbuf_r+0x84>
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	b36b      	cbz	r3, 8006efc <__swbuf_r+0x84>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	1ac0      	subs	r0, r0, r3
 8006ea6:	6963      	ldr	r3, [r4, #20]
 8006ea8:	b2f6      	uxtb	r6, r6
 8006eaa:	4283      	cmp	r3, r0
 8006eac:	4637      	mov	r7, r6
 8006eae:	dc04      	bgt.n	8006eba <__swbuf_r+0x42>
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f926 	bl	8007104 <_fflush_r>
 8006eb8:	bb30      	cbnz	r0, 8006f08 <__swbuf_r+0x90>
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	6022      	str	r2, [r4, #0]
 8006ec6:	701e      	strb	r6, [r3, #0]
 8006ec8:	6963      	ldr	r3, [r4, #20]
 8006eca:	3001      	adds	r0, #1
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	d004      	beq.n	8006eda <__swbuf_r+0x62>
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	07db      	lsls	r3, r3, #31
 8006ed4:	d506      	bpl.n	8006ee4 <__swbuf_r+0x6c>
 8006ed6:	2e0a      	cmp	r6, #10
 8006ed8:	d104      	bne.n	8006ee4 <__swbuf_r+0x6c>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f911 	bl	8007104 <_fflush_r>
 8006ee2:	b988      	cbnz	r0, 8006f08 <__swbuf_r+0x90>
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <__swbuf_r+0x9c>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d101      	bne.n	8006ef2 <__swbuf_r+0x7a>
 8006eee:	68ac      	ldr	r4, [r5, #8]
 8006ef0:	e7cf      	b.n	8006e92 <__swbuf_r+0x1a>
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <__swbuf_r+0xa0>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	68ec      	ldreq	r4, [r5, #12]
 8006efa:	e7ca      	b.n	8006e92 <__swbuf_r+0x1a>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 f80c 	bl	8006f1c <__swsetup_r>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d0cb      	beq.n	8006ea0 <__swbuf_r+0x28>
 8006f08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f0c:	e7ea      	b.n	8006ee4 <__swbuf_r+0x6c>
 8006f0e:	bf00      	nop
 8006f10:	080077f0 	.word	0x080077f0
 8006f14:	08007810 	.word	0x08007810
 8006f18:	080077d0 	.word	0x080077d0

08006f1c <__swsetup_r>:
 8006f1c:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <__swsetup_r+0xcc>)
 8006f1e:	b570      	push	{r4, r5, r6, lr}
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	4606      	mov	r6, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	b125      	cbz	r5, 8006f32 <__swsetup_r+0x16>
 8006f28:	69ab      	ldr	r3, [r5, #24]
 8006f2a:	b913      	cbnz	r3, 8006f32 <__swsetup_r+0x16>
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f97d 	bl	800722c <__sinit>
 8006f32:	4b2e      	ldr	r3, [pc, #184]	; (8006fec <__swsetup_r+0xd0>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d10f      	bne.n	8006f58 <__swsetup_r+0x3c>
 8006f38:	686c      	ldr	r4, [r5, #4]
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f40:	0719      	lsls	r1, r3, #28
 8006f42:	d42c      	bmi.n	8006f9e <__swsetup_r+0x82>
 8006f44:	06dd      	lsls	r5, r3, #27
 8006f46:	d411      	bmi.n	8006f6c <__swsetup_r+0x50>
 8006f48:	2309      	movs	r3, #9
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f50:	81a3      	strh	r3, [r4, #12]
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f56:	e03e      	b.n	8006fd6 <__swsetup_r+0xba>
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <__swsetup_r+0xd4>)
 8006f5a:	429c      	cmp	r4, r3
 8006f5c:	d101      	bne.n	8006f62 <__swsetup_r+0x46>
 8006f5e:	68ac      	ldr	r4, [r5, #8]
 8006f60:	e7eb      	b.n	8006f3a <__swsetup_r+0x1e>
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <__swsetup_r+0xd8>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	bf08      	it	eq
 8006f68:	68ec      	ldreq	r4, [r5, #12]
 8006f6a:	e7e6      	b.n	8006f3a <__swsetup_r+0x1e>
 8006f6c:	0758      	lsls	r0, r3, #29
 8006f6e:	d512      	bpl.n	8006f96 <__swsetup_r+0x7a>
 8006f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f72:	b141      	cbz	r1, 8006f86 <__swsetup_r+0x6a>
 8006f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f78:	4299      	cmp	r1, r3
 8006f7a:	d002      	beq.n	8006f82 <__swsetup_r+0x66>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 fa59 	bl	8007434 <_free_r>
 8006f82:	2300      	movs	r3, #0
 8006f84:	6363      	str	r3, [r4, #52]	; 0x34
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f043 0308 	orr.w	r3, r3, #8
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	b94b      	cbnz	r3, 8006fb6 <__swsetup_r+0x9a>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fac:	d003      	beq.n	8006fb6 <__swsetup_r+0x9a>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f9ff 	bl	80073b4 <__smakebuf_r>
 8006fb6:	89a0      	ldrh	r0, [r4, #12]
 8006fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fbc:	f010 0301 	ands.w	r3, r0, #1
 8006fc0:	d00a      	beq.n	8006fd8 <__swsetup_r+0xbc>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	6963      	ldr	r3, [r4, #20]
 8006fc8:	425b      	negs	r3, r3
 8006fca:	61a3      	str	r3, [r4, #24]
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	b943      	cbnz	r3, 8006fe2 <__swsetup_r+0xc6>
 8006fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fd4:	d1ba      	bne.n	8006f4c <__swsetup_r+0x30>
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	0781      	lsls	r1, r0, #30
 8006fda:	bf58      	it	pl
 8006fdc:	6963      	ldrpl	r3, [r4, #20]
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	e7f4      	b.n	8006fcc <__swsetup_r+0xb0>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e7f7      	b.n	8006fd6 <__swsetup_r+0xba>
 8006fe6:	bf00      	nop
 8006fe8:	20000010 	.word	0x20000010
 8006fec:	080077f0 	.word	0x080077f0
 8006ff0:	08007810 	.word	0x08007810
 8006ff4:	080077d0 	.word	0x080077d0

08006ff8 <__sflush_r>:
 8006ff8:	898a      	ldrh	r2, [r1, #12]
 8006ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffe:	4605      	mov	r5, r0
 8007000:	0710      	lsls	r0, r2, #28
 8007002:	460c      	mov	r4, r1
 8007004:	d458      	bmi.n	80070b8 <__sflush_r+0xc0>
 8007006:	684b      	ldr	r3, [r1, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	dc05      	bgt.n	8007018 <__sflush_r+0x20>
 800700c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	dc02      	bgt.n	8007018 <__sflush_r+0x20>
 8007012:	2000      	movs	r0, #0
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800701a:	2e00      	cmp	r6, #0
 800701c:	d0f9      	beq.n	8007012 <__sflush_r+0x1a>
 800701e:	2300      	movs	r3, #0
 8007020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007024:	682f      	ldr	r7, [r5, #0]
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	d032      	beq.n	8007090 <__sflush_r+0x98>
 800702a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	075a      	lsls	r2, r3, #29
 8007030:	d505      	bpl.n	800703e <__sflush_r+0x46>
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007038:	b10b      	cbz	r3, 800703e <__sflush_r+0x46>
 800703a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800703c:	1ac0      	subs	r0, r0, r3
 800703e:	2300      	movs	r3, #0
 8007040:	4602      	mov	r2, r0
 8007042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007044:	6a21      	ldr	r1, [r4, #32]
 8007046:	4628      	mov	r0, r5
 8007048:	47b0      	blx	r6
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	d106      	bne.n	800705e <__sflush_r+0x66>
 8007050:	6829      	ldr	r1, [r5, #0]
 8007052:	291d      	cmp	r1, #29
 8007054:	d82c      	bhi.n	80070b0 <__sflush_r+0xb8>
 8007056:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <__sflush_r+0x108>)
 8007058:	40ca      	lsrs	r2, r1
 800705a:	07d6      	lsls	r6, r2, #31
 800705c:	d528      	bpl.n	80070b0 <__sflush_r+0xb8>
 800705e:	2200      	movs	r2, #0
 8007060:	6062      	str	r2, [r4, #4]
 8007062:	04d9      	lsls	r1, r3, #19
 8007064:	6922      	ldr	r2, [r4, #16]
 8007066:	6022      	str	r2, [r4, #0]
 8007068:	d504      	bpl.n	8007074 <__sflush_r+0x7c>
 800706a:	1c42      	adds	r2, r0, #1
 800706c:	d101      	bne.n	8007072 <__sflush_r+0x7a>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	b903      	cbnz	r3, 8007074 <__sflush_r+0x7c>
 8007072:	6560      	str	r0, [r4, #84]	; 0x54
 8007074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007076:	602f      	str	r7, [r5, #0]
 8007078:	2900      	cmp	r1, #0
 800707a:	d0ca      	beq.n	8007012 <__sflush_r+0x1a>
 800707c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007080:	4299      	cmp	r1, r3
 8007082:	d002      	beq.n	800708a <__sflush_r+0x92>
 8007084:	4628      	mov	r0, r5
 8007086:	f000 f9d5 	bl	8007434 <_free_r>
 800708a:	2000      	movs	r0, #0
 800708c:	6360      	str	r0, [r4, #52]	; 0x34
 800708e:	e7c1      	b.n	8007014 <__sflush_r+0x1c>
 8007090:	6a21      	ldr	r1, [r4, #32]
 8007092:	2301      	movs	r3, #1
 8007094:	4628      	mov	r0, r5
 8007096:	47b0      	blx	r6
 8007098:	1c41      	adds	r1, r0, #1
 800709a:	d1c7      	bne.n	800702c <__sflush_r+0x34>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0c4      	beq.n	800702c <__sflush_r+0x34>
 80070a2:	2b1d      	cmp	r3, #29
 80070a4:	d001      	beq.n	80070aa <__sflush_r+0xb2>
 80070a6:	2b16      	cmp	r3, #22
 80070a8:	d101      	bne.n	80070ae <__sflush_r+0xb6>
 80070aa:	602f      	str	r7, [r5, #0]
 80070ac:	e7b1      	b.n	8007012 <__sflush_r+0x1a>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	e7ad      	b.n	8007014 <__sflush_r+0x1c>
 80070b8:	690f      	ldr	r7, [r1, #16]
 80070ba:	2f00      	cmp	r7, #0
 80070bc:	d0a9      	beq.n	8007012 <__sflush_r+0x1a>
 80070be:	0793      	lsls	r3, r2, #30
 80070c0:	680e      	ldr	r6, [r1, #0]
 80070c2:	bf08      	it	eq
 80070c4:	694b      	ldreq	r3, [r1, #20]
 80070c6:	600f      	str	r7, [r1, #0]
 80070c8:	bf18      	it	ne
 80070ca:	2300      	movne	r3, #0
 80070cc:	eba6 0807 	sub.w	r8, r6, r7
 80070d0:	608b      	str	r3, [r1, #8]
 80070d2:	f1b8 0f00 	cmp.w	r8, #0
 80070d6:	dd9c      	ble.n	8007012 <__sflush_r+0x1a>
 80070d8:	6a21      	ldr	r1, [r4, #32]
 80070da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070dc:	4643      	mov	r3, r8
 80070de:	463a      	mov	r2, r7
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b0      	blx	r6
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dc06      	bgt.n	80070f6 <__sflush_r+0xfe>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f4:	e78e      	b.n	8007014 <__sflush_r+0x1c>
 80070f6:	4407      	add	r7, r0
 80070f8:	eba8 0800 	sub.w	r8, r8, r0
 80070fc:	e7e9      	b.n	80070d2 <__sflush_r+0xda>
 80070fe:	bf00      	nop
 8007100:	20400001 	.word	0x20400001

08007104 <_fflush_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	4605      	mov	r5, r0
 800710a:	460c      	mov	r4, r1
 800710c:	b913      	cbnz	r3, 8007114 <_fflush_r+0x10>
 800710e:	2500      	movs	r5, #0
 8007110:	4628      	mov	r0, r5
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	b118      	cbz	r0, 800711e <_fflush_r+0x1a>
 8007116:	6983      	ldr	r3, [r0, #24]
 8007118:	b90b      	cbnz	r3, 800711e <_fflush_r+0x1a>
 800711a:	f000 f887 	bl	800722c <__sinit>
 800711e:	4b14      	ldr	r3, [pc, #80]	; (8007170 <_fflush_r+0x6c>)
 8007120:	429c      	cmp	r4, r3
 8007122:	d11b      	bne.n	800715c <_fflush_r+0x58>
 8007124:	686c      	ldr	r4, [r5, #4]
 8007126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ef      	beq.n	800710e <_fflush_r+0xa>
 800712e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007130:	07d0      	lsls	r0, r2, #31
 8007132:	d404      	bmi.n	800713e <_fflush_r+0x3a>
 8007134:	0599      	lsls	r1, r3, #22
 8007136:	d402      	bmi.n	800713e <_fflush_r+0x3a>
 8007138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713a:	f000 f915 	bl	8007368 <__retarget_lock_acquire_recursive>
 800713e:	4628      	mov	r0, r5
 8007140:	4621      	mov	r1, r4
 8007142:	f7ff ff59 	bl	8006ff8 <__sflush_r>
 8007146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007148:	07da      	lsls	r2, r3, #31
 800714a:	4605      	mov	r5, r0
 800714c:	d4e0      	bmi.n	8007110 <_fflush_r+0xc>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	059b      	lsls	r3, r3, #22
 8007152:	d4dd      	bmi.n	8007110 <_fflush_r+0xc>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f000 f908 	bl	800736a <__retarget_lock_release_recursive>
 800715a:	e7d9      	b.n	8007110 <_fflush_r+0xc>
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <_fflush_r+0x70>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <_fflush_r+0x62>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7df      	b.n	8007126 <_fflush_r+0x22>
 8007166:	4b04      	ldr	r3, [pc, #16]	; (8007178 <_fflush_r+0x74>)
 8007168:	429c      	cmp	r4, r3
 800716a:	bf08      	it	eq
 800716c:	68ec      	ldreq	r4, [r5, #12]
 800716e:	e7da      	b.n	8007126 <_fflush_r+0x22>
 8007170:	080077f0 	.word	0x080077f0
 8007174:	08007810 	.word	0x08007810
 8007178:	080077d0 	.word	0x080077d0

0800717c <std>:
 800717c:	2300      	movs	r3, #0
 800717e:	b510      	push	{r4, lr}
 8007180:	4604      	mov	r4, r0
 8007182:	e9c0 3300 	strd	r3, r3, [r0]
 8007186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800718a:	6083      	str	r3, [r0, #8]
 800718c:	8181      	strh	r1, [r0, #12]
 800718e:	6643      	str	r3, [r0, #100]	; 0x64
 8007190:	81c2      	strh	r2, [r0, #14]
 8007192:	6183      	str	r3, [r0, #24]
 8007194:	4619      	mov	r1, r3
 8007196:	2208      	movs	r2, #8
 8007198:	305c      	adds	r0, #92	; 0x5c
 800719a:	f7ff fdef 	bl	8006d7c <memset>
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <std+0x38>)
 80071a0:	6263      	str	r3, [r4, #36]	; 0x24
 80071a2:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <std+0x3c>)
 80071a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <std+0x40>)
 80071a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <std+0x44>)
 80071ac:	6224      	str	r4, [r4, #32]
 80071ae:	6323      	str	r3, [r4, #48]	; 0x30
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	bf00      	nop
 80071b4:	080075a9 	.word	0x080075a9
 80071b8:	080075cb 	.word	0x080075cb
 80071bc:	08007603 	.word	0x08007603
 80071c0:	08007627 	.word	0x08007627

080071c4 <_cleanup_r>:
 80071c4:	4901      	ldr	r1, [pc, #4]	; (80071cc <_cleanup_r+0x8>)
 80071c6:	f000 b8af 	b.w	8007328 <_fwalk_reent>
 80071ca:	bf00      	nop
 80071cc:	08007105 	.word	0x08007105

080071d0 <__sfmoreglue>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	1e4a      	subs	r2, r1, #1
 80071d4:	2568      	movs	r5, #104	; 0x68
 80071d6:	4355      	muls	r5, r2
 80071d8:	460e      	mov	r6, r1
 80071da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071de:	f000 f979 	bl	80074d4 <_malloc_r>
 80071e2:	4604      	mov	r4, r0
 80071e4:	b140      	cbz	r0, 80071f8 <__sfmoreglue+0x28>
 80071e6:	2100      	movs	r1, #0
 80071e8:	e9c0 1600 	strd	r1, r6, [r0]
 80071ec:	300c      	adds	r0, #12
 80071ee:	60a0      	str	r0, [r4, #8]
 80071f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071f4:	f7ff fdc2 	bl	8006d7c <memset>
 80071f8:	4620      	mov	r0, r4
 80071fa:	bd70      	pop	{r4, r5, r6, pc}

080071fc <__sfp_lock_acquire>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__sfp_lock_acquire+0x8>)
 80071fe:	f000 b8b3 	b.w	8007368 <__retarget_lock_acquire_recursive>
 8007202:	bf00      	nop
 8007204:	20001b98 	.word	0x20001b98

08007208 <__sfp_lock_release>:
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <__sfp_lock_release+0x8>)
 800720a:	f000 b8ae 	b.w	800736a <__retarget_lock_release_recursive>
 800720e:	bf00      	nop
 8007210:	20001b98 	.word	0x20001b98

08007214 <__sinit_lock_acquire>:
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <__sinit_lock_acquire+0x8>)
 8007216:	f000 b8a7 	b.w	8007368 <__retarget_lock_acquire_recursive>
 800721a:	bf00      	nop
 800721c:	20001b93 	.word	0x20001b93

08007220 <__sinit_lock_release>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__sinit_lock_release+0x8>)
 8007222:	f000 b8a2 	b.w	800736a <__retarget_lock_release_recursive>
 8007226:	bf00      	nop
 8007228:	20001b93 	.word	0x20001b93

0800722c <__sinit>:
 800722c:	b510      	push	{r4, lr}
 800722e:	4604      	mov	r4, r0
 8007230:	f7ff fff0 	bl	8007214 <__sinit_lock_acquire>
 8007234:	69a3      	ldr	r3, [r4, #24]
 8007236:	b11b      	cbz	r3, 8007240 <__sinit+0x14>
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f7ff bff0 	b.w	8007220 <__sinit_lock_release>
 8007240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007244:	6523      	str	r3, [r4, #80]	; 0x50
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <__sinit+0x68>)
 8007248:	4a13      	ldr	r2, [pc, #76]	; (8007298 <__sinit+0x6c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	62a2      	str	r2, [r4, #40]	; 0x28
 800724e:	42a3      	cmp	r3, r4
 8007250:	bf04      	itt	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	61a3      	streq	r3, [r4, #24]
 8007256:	4620      	mov	r0, r4
 8007258:	f000 f820 	bl	800729c <__sfp>
 800725c:	6060      	str	r0, [r4, #4]
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f81c 	bl	800729c <__sfp>
 8007264:	60a0      	str	r0, [r4, #8]
 8007266:	4620      	mov	r0, r4
 8007268:	f000 f818 	bl	800729c <__sfp>
 800726c:	2200      	movs	r2, #0
 800726e:	60e0      	str	r0, [r4, #12]
 8007270:	2104      	movs	r1, #4
 8007272:	6860      	ldr	r0, [r4, #4]
 8007274:	f7ff ff82 	bl	800717c <std>
 8007278:	68a0      	ldr	r0, [r4, #8]
 800727a:	2201      	movs	r2, #1
 800727c:	2109      	movs	r1, #9
 800727e:	f7ff ff7d 	bl	800717c <std>
 8007282:	68e0      	ldr	r0, [r4, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	2112      	movs	r1, #18
 8007288:	f7ff ff78 	bl	800717c <std>
 800728c:	2301      	movs	r3, #1
 800728e:	61a3      	str	r3, [r4, #24]
 8007290:	e7d2      	b.n	8007238 <__sinit+0xc>
 8007292:	bf00      	nop
 8007294:	080077cc 	.word	0x080077cc
 8007298:	080071c5 	.word	0x080071c5

0800729c <__sfp>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	4607      	mov	r7, r0
 80072a0:	f7ff ffac 	bl	80071fc <__sfp_lock_acquire>
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <__sfp+0x84>)
 80072a6:	681e      	ldr	r6, [r3, #0]
 80072a8:	69b3      	ldr	r3, [r6, #24]
 80072aa:	b913      	cbnz	r3, 80072b2 <__sfp+0x16>
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff ffbd 	bl	800722c <__sinit>
 80072b2:	3648      	adds	r6, #72	; 0x48
 80072b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	d503      	bpl.n	80072c4 <__sfp+0x28>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	b30b      	cbz	r3, 8007304 <__sfp+0x68>
 80072c0:	6836      	ldr	r6, [r6, #0]
 80072c2:	e7f7      	b.n	80072b4 <__sfp+0x18>
 80072c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c8:	b9d5      	cbnz	r5, 8007300 <__sfp+0x64>
 80072ca:	4b16      	ldr	r3, [pc, #88]	; (8007324 <__sfp+0x88>)
 80072cc:	60e3      	str	r3, [r4, #12]
 80072ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072d2:	6665      	str	r5, [r4, #100]	; 0x64
 80072d4:	f000 f847 	bl	8007366 <__retarget_lock_init_recursive>
 80072d8:	f7ff ff96 	bl	8007208 <__sfp_lock_release>
 80072dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072e4:	6025      	str	r5, [r4, #0]
 80072e6:	61a5      	str	r5, [r4, #24]
 80072e8:	2208      	movs	r2, #8
 80072ea:	4629      	mov	r1, r5
 80072ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072f0:	f7ff fd44 	bl	8006d7c <memset>
 80072f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072fc:	4620      	mov	r0, r4
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007300:	3468      	adds	r4, #104	; 0x68
 8007302:	e7d9      	b.n	80072b8 <__sfp+0x1c>
 8007304:	2104      	movs	r1, #4
 8007306:	4638      	mov	r0, r7
 8007308:	f7ff ff62 	bl	80071d0 <__sfmoreglue>
 800730c:	4604      	mov	r4, r0
 800730e:	6030      	str	r0, [r6, #0]
 8007310:	2800      	cmp	r0, #0
 8007312:	d1d5      	bne.n	80072c0 <__sfp+0x24>
 8007314:	f7ff ff78 	bl	8007208 <__sfp_lock_release>
 8007318:	230c      	movs	r3, #12
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	e7ee      	b.n	80072fc <__sfp+0x60>
 800731e:	bf00      	nop
 8007320:	080077cc 	.word	0x080077cc
 8007324:	ffff0001 	.word	0xffff0001

08007328 <_fwalk_reent>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	4606      	mov	r6, r0
 800732e:	4688      	mov	r8, r1
 8007330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007334:	2700      	movs	r7, #0
 8007336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800733a:	f1b9 0901 	subs.w	r9, r9, #1
 800733e:	d505      	bpl.n	800734c <_fwalk_reent+0x24>
 8007340:	6824      	ldr	r4, [r4, #0]
 8007342:	2c00      	cmp	r4, #0
 8007344:	d1f7      	bne.n	8007336 <_fwalk_reent+0xe>
 8007346:	4638      	mov	r0, r7
 8007348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734c:	89ab      	ldrh	r3, [r5, #12]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d907      	bls.n	8007362 <_fwalk_reent+0x3a>
 8007352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007356:	3301      	adds	r3, #1
 8007358:	d003      	beq.n	8007362 <_fwalk_reent+0x3a>
 800735a:	4629      	mov	r1, r5
 800735c:	4630      	mov	r0, r6
 800735e:	47c0      	blx	r8
 8007360:	4307      	orrs	r7, r0
 8007362:	3568      	adds	r5, #104	; 0x68
 8007364:	e7e9      	b.n	800733a <_fwalk_reent+0x12>

08007366 <__retarget_lock_init_recursive>:
 8007366:	4770      	bx	lr

08007368 <__retarget_lock_acquire_recursive>:
 8007368:	4770      	bx	lr

0800736a <__retarget_lock_release_recursive>:
 800736a:	4770      	bx	lr

0800736c <__swhatbuf_r>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	460e      	mov	r6, r1
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	2900      	cmp	r1, #0
 8007376:	b096      	sub	sp, #88	; 0x58
 8007378:	4614      	mov	r4, r2
 800737a:	461d      	mov	r5, r3
 800737c:	da07      	bge.n	800738e <__swhatbuf_r+0x22>
 800737e:	2300      	movs	r3, #0
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	89b3      	ldrh	r3, [r6, #12]
 8007384:	061a      	lsls	r2, r3, #24
 8007386:	d410      	bmi.n	80073aa <__swhatbuf_r+0x3e>
 8007388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800738c:	e00e      	b.n	80073ac <__swhatbuf_r+0x40>
 800738e:	466a      	mov	r2, sp
 8007390:	f000 f970 	bl	8007674 <_fstat_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	dbf2      	blt.n	800737e <__swhatbuf_r+0x12>
 8007398:	9a01      	ldr	r2, [sp, #4]
 800739a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800739e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073a2:	425a      	negs	r2, r3
 80073a4:	415a      	adcs	r2, r3
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	e7ee      	b.n	8007388 <__swhatbuf_r+0x1c>
 80073aa:	2340      	movs	r3, #64	; 0x40
 80073ac:	2000      	movs	r0, #0
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	b016      	add	sp, #88	; 0x58
 80073b2:	bd70      	pop	{r4, r5, r6, pc}

080073b4 <__smakebuf_r>:
 80073b4:	898b      	ldrh	r3, [r1, #12]
 80073b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073b8:	079d      	lsls	r5, r3, #30
 80073ba:	4606      	mov	r6, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	d507      	bpl.n	80073d0 <__smakebuf_r+0x1c>
 80073c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2301      	movs	r3, #1
 80073ca:	6163      	str	r3, [r4, #20]
 80073cc:	b002      	add	sp, #8
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	ab01      	add	r3, sp, #4
 80073d2:	466a      	mov	r2, sp
 80073d4:	f7ff ffca 	bl	800736c <__swhatbuf_r>
 80073d8:	9900      	ldr	r1, [sp, #0]
 80073da:	4605      	mov	r5, r0
 80073dc:	4630      	mov	r0, r6
 80073de:	f000 f879 	bl	80074d4 <_malloc_r>
 80073e2:	b948      	cbnz	r0, 80073f8 <__smakebuf_r+0x44>
 80073e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e8:	059a      	lsls	r2, r3, #22
 80073ea:	d4ef      	bmi.n	80073cc <__smakebuf_r+0x18>
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	e7e3      	b.n	80073c0 <__smakebuf_r+0xc>
 80073f8:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <__smakebuf_r+0x7c>)
 80073fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	6020      	str	r0, [r4, #0]
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	9b00      	ldr	r3, [sp, #0]
 8007408:	6163      	str	r3, [r4, #20]
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	6120      	str	r0, [r4, #16]
 800740e:	b15b      	cbz	r3, 8007428 <__smakebuf_r+0x74>
 8007410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007414:	4630      	mov	r0, r6
 8007416:	f000 f93f 	bl	8007698 <_isatty_r>
 800741a:	b128      	cbz	r0, 8007428 <__smakebuf_r+0x74>
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	89a0      	ldrh	r0, [r4, #12]
 800742a:	4305      	orrs	r5, r0
 800742c:	81a5      	strh	r5, [r4, #12]
 800742e:	e7cd      	b.n	80073cc <__smakebuf_r+0x18>
 8007430:	080071c5 	.word	0x080071c5

08007434 <_free_r>:
 8007434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007436:	2900      	cmp	r1, #0
 8007438:	d048      	beq.n	80074cc <_free_r+0x98>
 800743a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743e:	9001      	str	r0, [sp, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f1a1 0404 	sub.w	r4, r1, #4
 8007446:	bfb8      	it	lt
 8007448:	18e4      	addlt	r4, r4, r3
 800744a:	f000 f947 	bl	80076dc <__malloc_lock>
 800744e:	4a20      	ldr	r2, [pc, #128]	; (80074d0 <_free_r+0x9c>)
 8007450:	9801      	ldr	r0, [sp, #4]
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	4615      	mov	r5, r2
 8007456:	b933      	cbnz	r3, 8007466 <_free_r+0x32>
 8007458:	6063      	str	r3, [r4, #4]
 800745a:	6014      	str	r4, [r2, #0]
 800745c:	b003      	add	sp, #12
 800745e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007462:	f000 b941 	b.w	80076e8 <__malloc_unlock>
 8007466:	42a3      	cmp	r3, r4
 8007468:	d90b      	bls.n	8007482 <_free_r+0x4e>
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	1862      	adds	r2, r4, r1
 800746e:	4293      	cmp	r3, r2
 8007470:	bf04      	itt	eq
 8007472:	681a      	ldreq	r2, [r3, #0]
 8007474:	685b      	ldreq	r3, [r3, #4]
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	bf04      	itt	eq
 800747a:	1852      	addeq	r2, r2, r1
 800747c:	6022      	streq	r2, [r4, #0]
 800747e:	602c      	str	r4, [r5, #0]
 8007480:	e7ec      	b.n	800745c <_free_r+0x28>
 8007482:	461a      	mov	r2, r3
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b10b      	cbz	r3, 800748c <_free_r+0x58>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d9fa      	bls.n	8007482 <_free_r+0x4e>
 800748c:	6811      	ldr	r1, [r2, #0]
 800748e:	1855      	adds	r5, r2, r1
 8007490:	42a5      	cmp	r5, r4
 8007492:	d10b      	bne.n	80074ac <_free_r+0x78>
 8007494:	6824      	ldr	r4, [r4, #0]
 8007496:	4421      	add	r1, r4
 8007498:	1854      	adds	r4, r2, r1
 800749a:	42a3      	cmp	r3, r4
 800749c:	6011      	str	r1, [r2, #0]
 800749e:	d1dd      	bne.n	800745c <_free_r+0x28>
 80074a0:	681c      	ldr	r4, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	6053      	str	r3, [r2, #4]
 80074a6:	4421      	add	r1, r4
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	e7d7      	b.n	800745c <_free_r+0x28>
 80074ac:	d902      	bls.n	80074b4 <_free_r+0x80>
 80074ae:	230c      	movs	r3, #12
 80074b0:	6003      	str	r3, [r0, #0]
 80074b2:	e7d3      	b.n	800745c <_free_r+0x28>
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1961      	adds	r1, r4, r5
 80074b8:	428b      	cmp	r3, r1
 80074ba:	bf04      	itt	eq
 80074bc:	6819      	ldreq	r1, [r3, #0]
 80074be:	685b      	ldreq	r3, [r3, #4]
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	bf04      	itt	eq
 80074c4:	1949      	addeq	r1, r1, r5
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	6054      	str	r4, [r2, #4]
 80074ca:	e7c7      	b.n	800745c <_free_r+0x28>
 80074cc:	b003      	add	sp, #12
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	2000195c 	.word	0x2000195c

080074d4 <_malloc_r>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	1ccd      	adds	r5, r1, #3
 80074d8:	f025 0503 	bic.w	r5, r5, #3
 80074dc:	3508      	adds	r5, #8
 80074de:	2d0c      	cmp	r5, #12
 80074e0:	bf38      	it	cc
 80074e2:	250c      	movcc	r5, #12
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	4606      	mov	r6, r0
 80074e8:	db01      	blt.n	80074ee <_malloc_r+0x1a>
 80074ea:	42a9      	cmp	r1, r5
 80074ec:	d903      	bls.n	80074f6 <_malloc_r+0x22>
 80074ee:	230c      	movs	r3, #12
 80074f0:	6033      	str	r3, [r6, #0]
 80074f2:	2000      	movs	r0, #0
 80074f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f6:	f000 f8f1 	bl	80076dc <__malloc_lock>
 80074fa:	4921      	ldr	r1, [pc, #132]	; (8007580 <_malloc_r+0xac>)
 80074fc:	680a      	ldr	r2, [r1, #0]
 80074fe:	4614      	mov	r4, r2
 8007500:	b99c      	cbnz	r4, 800752a <_malloc_r+0x56>
 8007502:	4f20      	ldr	r7, [pc, #128]	; (8007584 <_malloc_r+0xb0>)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b923      	cbnz	r3, 8007512 <_malloc_r+0x3e>
 8007508:	4621      	mov	r1, r4
 800750a:	4630      	mov	r0, r6
 800750c:	f000 f83c 	bl	8007588 <_sbrk_r>
 8007510:	6038      	str	r0, [r7, #0]
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f837 	bl	8007588 <_sbrk_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d123      	bne.n	8007566 <_malloc_r+0x92>
 800751e:	230c      	movs	r3, #12
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	4630      	mov	r0, r6
 8007524:	f000 f8e0 	bl	80076e8 <__malloc_unlock>
 8007528:	e7e3      	b.n	80074f2 <_malloc_r+0x1e>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	1b5b      	subs	r3, r3, r5
 800752e:	d417      	bmi.n	8007560 <_malloc_r+0x8c>
 8007530:	2b0b      	cmp	r3, #11
 8007532:	d903      	bls.n	800753c <_malloc_r+0x68>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	441c      	add	r4, r3
 8007538:	6025      	str	r5, [r4, #0]
 800753a:	e004      	b.n	8007546 <_malloc_r+0x72>
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	42a2      	cmp	r2, r4
 8007540:	bf0c      	ite	eq
 8007542:	600b      	streq	r3, [r1, #0]
 8007544:	6053      	strne	r3, [r2, #4]
 8007546:	4630      	mov	r0, r6
 8007548:	f000 f8ce 	bl	80076e8 <__malloc_unlock>
 800754c:	f104 000b 	add.w	r0, r4, #11
 8007550:	1d23      	adds	r3, r4, #4
 8007552:	f020 0007 	bic.w	r0, r0, #7
 8007556:	1ac2      	subs	r2, r0, r3
 8007558:	d0cc      	beq.n	80074f4 <_malloc_r+0x20>
 800755a:	1a1b      	subs	r3, r3, r0
 800755c:	50a3      	str	r3, [r4, r2]
 800755e:	e7c9      	b.n	80074f4 <_malloc_r+0x20>
 8007560:	4622      	mov	r2, r4
 8007562:	6864      	ldr	r4, [r4, #4]
 8007564:	e7cc      	b.n	8007500 <_malloc_r+0x2c>
 8007566:	1cc4      	adds	r4, r0, #3
 8007568:	f024 0403 	bic.w	r4, r4, #3
 800756c:	42a0      	cmp	r0, r4
 800756e:	d0e3      	beq.n	8007538 <_malloc_r+0x64>
 8007570:	1a21      	subs	r1, r4, r0
 8007572:	4630      	mov	r0, r6
 8007574:	f000 f808 	bl	8007588 <_sbrk_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d1dd      	bne.n	8007538 <_malloc_r+0x64>
 800757c:	e7cf      	b.n	800751e <_malloc_r+0x4a>
 800757e:	bf00      	nop
 8007580:	2000195c 	.word	0x2000195c
 8007584:	20001960 	.word	0x20001960

08007588 <_sbrk_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d06      	ldr	r5, [pc, #24]	; (80075a4 <_sbrk_r+0x1c>)
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	f7f9 fb5a 	bl	8000c4c <_sbrk>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_sbrk_r+0x1a>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_sbrk_r+0x1a>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20001b9c 	.word	0x20001b9c

080075a8 <__sread>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	460c      	mov	r4, r1
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	f000 f8a0 	bl	80076f4 <_read_r>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	bfab      	itete	ge
 80075b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ba:	89a3      	ldrhlt	r3, [r4, #12]
 80075bc:	181b      	addge	r3, r3, r0
 80075be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075c2:	bfac      	ite	ge
 80075c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075c6:	81a3      	strhlt	r3, [r4, #12]
 80075c8:	bd10      	pop	{r4, pc}

080075ca <__swrite>:
 80075ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	461f      	mov	r7, r3
 80075d0:	898b      	ldrh	r3, [r1, #12]
 80075d2:	05db      	lsls	r3, r3, #23
 80075d4:	4605      	mov	r5, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	4616      	mov	r6, r2
 80075da:	d505      	bpl.n	80075e8 <__swrite+0x1e>
 80075dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e0:	2302      	movs	r3, #2
 80075e2:	2200      	movs	r2, #0
 80075e4:	f000 f868 	bl	80076b8 <_lseek_r>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	4632      	mov	r2, r6
 80075f6:	463b      	mov	r3, r7
 80075f8:	4628      	mov	r0, r5
 80075fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fe:	f000 b817 	b.w	8007630 <_write_r>

08007602 <__sseek>:
 8007602:	b510      	push	{r4, lr}
 8007604:	460c      	mov	r4, r1
 8007606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760a:	f000 f855 	bl	80076b8 <_lseek_r>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	bf15      	itete	ne
 8007614:	6560      	strne	r0, [r4, #84]	; 0x54
 8007616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800761a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800761e:	81a3      	strheq	r3, [r4, #12]
 8007620:	bf18      	it	ne
 8007622:	81a3      	strhne	r3, [r4, #12]
 8007624:	bd10      	pop	{r4, pc}

08007626 <__sclose>:
 8007626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762a:	f000 b813 	b.w	8007654 <_close_r>
	...

08007630 <_write_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_write_r+0x20>)
 8007634:	4604      	mov	r4, r0
 8007636:	4608      	mov	r0, r1
 8007638:	4611      	mov	r1, r2
 800763a:	2200      	movs	r2, #0
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f7f9 fab3 	bl	8000baa <_write>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_write_r+0x1e>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_write_r+0x1e>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20001b9c 	.word	0x20001b9c

08007654 <_close_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	; (8007670 <_close_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7f9 fabf 	bl	8000be2 <_close>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_close_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_close_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20001b9c 	.word	0x20001b9c

08007674 <_fstat_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	; (8007694 <_fstat_r+0x20>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	4611      	mov	r1, r2
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	f7f9 faba 	bl	8000bfa <_fstat>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	d102      	bne.n	8007690 <_fstat_r+0x1c>
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	b103      	cbz	r3, 8007690 <_fstat_r+0x1c>
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	bf00      	nop
 8007694:	20001b9c 	.word	0x20001b9c

08007698 <_isatty_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d06      	ldr	r5, [pc, #24]	; (80076b4 <_isatty_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7f9 fab9 	bl	8000c1a <_isatty>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_isatty_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_isatty_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20001b9c 	.word	0x20001b9c

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	; (80076d8 <_lseek_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7f9 fab2 	bl	8000c30 <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20001b9c 	.word	0x20001b9c

080076dc <__malloc_lock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__malloc_lock+0x8>)
 80076de:	f7ff be43 	b.w	8007368 <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	20001b94 	.word	0x20001b94

080076e8 <__malloc_unlock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_unlock+0x8>)
 80076ea:	f7ff be3e 	b.w	800736a <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	20001b94 	.word	0x20001b94

080076f4 <_read_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	; (8007714 <_read_r+0x20>)
 80076f8:	4604      	mov	r4, r0
 80076fa:	4608      	mov	r0, r1
 80076fc:	4611      	mov	r1, r2
 80076fe:	2200      	movs	r2, #0
 8007700:	602a      	str	r2, [r5, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f7f9 fa34 	bl	8000b70 <_read>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_read_r+0x1e>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_read_r+0x1e>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	20001b9c 	.word	0x20001b9c

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
