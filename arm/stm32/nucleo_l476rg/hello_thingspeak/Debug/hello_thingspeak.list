
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091c8  080091c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091d0  080091d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d0  080091d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  20000074  0800924c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002448  0800924c  00022448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021df7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c8  00000000  00000000  00041e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00045f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00047810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b22  00000000  00000000  00048f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a193  00000000  00000000  0004ea62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100147  00000000  00000000  00068bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007114  00000000  00000000  00168d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f98 	.word	0x08008f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008f98 	.word	0x08008f98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x20>)
 800058a:	f003 fbd3 	bl	8003d34 <HAL_UART_Transmit>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20001b0c 	.word	0x20001b0c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 f804 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f826 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f932 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f8fa 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8c8 	bl	8000744 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f896 	bl	80006e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vInitThingSpeak(&xThingSpeak, &huart1, &hdma_usart1_rx);
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <main+0x40>)
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <main+0x44>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x48>)
 80005be:	f000 fc93 	bl	8000ee8 <vInitThingSpeak>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c2:	f004 fda5 	bl	8005110 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of thingspeakTask */
  thingspeakTaskHandle = osThreadNew(StartThingSpeakTask, NULL, &thingspeakTask_attributes);
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <main+0x4c>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x50>)
 80005cc:	f004 fdea 	bl	80051a4 <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <main+0x54>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f004 fdbf 	bl	8005158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x3e>
 80005dc:	200019f8 	.word	0x200019f8
 80005e0:	20001a88 	.word	0x20001a88
 80005e4:	20001bdc 	.word	0x20001bdc
 80005e8:	080090c4 	.word	0x080090c4
 80005ec:	080008bd 	.word	0x080008bd
 80005f0:	200019f4 	.word	0x200019f4

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0b8      	sub	sp, #224	; 0xe0
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 fb0a 	bl	8007c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2288      	movs	r2, #136	; 0x88
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fafc 	bl	8007c1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd6a 	bl	8002140 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000672:	f000 f947 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f936 	bl	800290c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a6:	f000 f92d 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006aa:	2303      	movs	r3, #3
 80006ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fb5f 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006c4:	f000 f91e 	bl	8000904 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006cc:	f001 fce2 	bl	8002094 <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006d6:	f000 f915 	bl	8000904 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	37e0      	adds	r7, #224	; 0xe0
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART1_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART1_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000728:	f003 fab6 	bl	8003c98 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8e7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20001a88 	.word	0x20001a88
 8000740:	40013800 	.word	0x40013800

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f003 fa86 	bl	8003c98 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8b7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20001b0c 	.word	0x20001b0c
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_DMA_Init+0x68>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_DMA_Init+0x68>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6493      	str	r3, [r2, #72]	; 0x48
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_DMA_Init+0x68>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2105      	movs	r1, #5
 80007c6:	200e      	movs	r0, #14
 80007c8:	f000 ffe8 	bl	800179c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f001 f801 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 ffe0 	bl	800179c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007dc:	200f      	movs	r0, #15
 80007de:	f000 fff9 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	2010      	movs	r0, #16
 80007e8:	f000 ffd8 	bl	800179c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007ec:	2010      	movs	r0, #16
 80007ee:	f000 fff1 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	2011      	movs	r0, #17
 80007f8:	f000 ffd0 	bl	800179c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007fc:	2011      	movs	r0, #17
 80007fe:	f000 ffe9 	bl	80017d4 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <MX_GPIO_Init+0xa4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_GPIO_Init+0xa4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <MX_GPIO_Init+0xa4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <MX_GPIO_Init+0xa4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_GPIO_Init+0xa4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0xa8>)
 800088c:	f001 fbdc 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0xa8>)
 80008a8:	f001 fa24 	bl	8001cf4 <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <StartThingSpeakTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThingSpeakTask */
void StartThingSpeakTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  	//bTransmitCommand(&xThingSpeak, "AT+CWLAP\r\n", 4 + 6);
  	//bTransmitCommand(&xThingSpeak, "AT\r\n", 4);

  	//bTransmitCommand(&xThingSpeak, "AT+CIFSR\r\n", 4 + 6);

  	bTransmitThingSpeakData("HE3ZUVZ1MKI1FOPB", 1, 543);
 80008c4:	f240 221f 	movw	r2, #543	; 0x21f
 80008c8:	2101      	movs	r1, #1
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <StartThingSpeakTask+0x20>)
 80008cc:	f000 fdd2 	bl	8001474 <bTransmitThingSpeakData>


  	osDelay(20000);
 80008d0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80008d4:	f004 fcf8 	bl	80052c8 <osDelay>
  	bTransmitThingSpeakData("HE3ZUVZ1MKI1FOPB", 1, 543);
 80008d8:	e7f4      	b.n	80008c4 <StartThingSpeakTask+0x8>
 80008da:	bf00      	nop
 80008dc:	08008fc0 	.word	0x08008fc0

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 fe7b 	bl	80015ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40001000 	.word	0x40001000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_MspInit+0x4c>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x4c>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x4c>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 ff25 	bl	800179c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a8a      	ldr	r2, [pc, #552]	; (8000ba8 <HAL_UART_MspInit+0x248>)
 800097e:	4293      	cmp	r3, r2
 8000980:	f040 8085 	bne.w	8000a8e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000984:	4b89      	ldr	r3, [pc, #548]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000988:	4a88      	ldr	r2, [pc, #544]	; (8000bac <HAL_UART_MspInit+0x24c>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6613      	str	r3, [r2, #96]	; 0x60
 8000990:	4b86      	ldr	r3, [pc, #536]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b83      	ldr	r3, [pc, #524]	; (8000bac <HAL_UART_MspInit+0x24c>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a82      	ldr	r2, [pc, #520]	; (8000bac <HAL_UART_MspInit+0x24c>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b80      	ldr	r3, [pc, #512]	; (8000bac <HAL_UART_MspInit+0x24c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c6:	2307      	movs	r3, #7
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 f98e 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009d8:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009da:	4a76      	ldr	r2, [pc, #472]	; (8000bb4 <HAL_UART_MspInit+0x254>)
 80009dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80009de:	4b74      	ldr	r3, [pc, #464]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e4:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fc:	4b6c      	ldr	r3, [pc, #432]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a02:	4b6b      	ldr	r3, [pc, #428]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 8000a04:	2220      	movs	r2, #32
 8000a06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a08:	4b69      	ldr	r3, [pc, #420]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a0e:	4868      	ldr	r0, [pc, #416]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 8000a10:	f000 feee 	bl	80017f0 <HAL_DMA_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000a1a:	f7ff ff73 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a63      	ldr	r2, [pc, #396]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 8000a22:	671a      	str	r2, [r3, #112]	; 0x70
 8000a24:	4a62      	ldr	r2, [pc, #392]	; (8000bb0 <HAL_UART_MspInit+0x250>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a2c:	4a63      	ldr	r2, [pc, #396]	; (8000bbc <HAL_UART_MspInit+0x25c>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000a30:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a36:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a38:	2210      	movs	r2, #16
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b5d      	ldr	r3, [pc, #372]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a48:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4e:	4b5a      	ldr	r3, [pc, #360]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a54:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a60:	4855      	ldr	r0, [pc, #340]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a62:	f000 fec5 	bl	80017f0 <HAL_DMA_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000a6c:	f7ff ff4a 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a51      	ldr	r2, [pc, #324]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a74:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a76:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <HAL_UART_MspInit+0x258>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2105      	movs	r1, #5
 8000a80:	2025      	movs	r0, #37	; 0x25
 8000a82:	f000 fe8b 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a86:	2025      	movs	r0, #37	; 0x25
 8000a88:	f000 fea4 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8c:	e088      	b.n	8000ba0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a4b      	ldr	r2, [pc, #300]	; (8000bc0 <HAL_UART_MspInit+0x260>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	f040 8083 	bne.w	8000ba0 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	4b44      	ldr	r3, [pc, #272]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a43      	ldr	r2, [pc, #268]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <HAL_UART_MspInit+0x24c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aca:	230c      	movs	r3, #12
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ada:	2307      	movs	r3, #7
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f001 f904 	bl	8001cf4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <HAL_UART_MspInit+0x268>)
 8000af0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b18:	2220      	movs	r2, #32
 8000b1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b22:	4828      	ldr	r0, [pc, #160]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b24:	f000 fe64 	bl	80017f0 <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000b2e:	f7ff fee9 	bl	8000904 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b36:	671a      	str	r2, [r3, #112]	; 0x70
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <HAL_UART_MspInit+0x264>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b40:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_UART_MspInit+0x270>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b76:	f000 fe3b 	bl	80017f0 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8000b80:	f7ff fec0 	bl	8000904 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b88:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0x26c>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2105      	movs	r1, #5
 8000b94:	2026      	movs	r0, #38	; 0x26
 8000b96:	f000 fe01 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b9a:	2026      	movs	r0, #38	; 0x26
 8000b9c:	f000 fe1a 	bl	80017d4 <HAL_NVIC_EnableIRQ>
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	200019f8 	.word	0x200019f8
 8000bb4:	40020058 	.word	0x40020058
 8000bb8:	200019ac 	.word	0x200019ac
 8000bbc:	40020044 	.word	0x40020044
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	20001964 	.word	0x20001964
 8000bc8:	4002006c 	.word	0x4002006c
 8000bcc:	20001a40 	.word	0x20001a40
 8000bd0:	40020080 	.word	0x40020080

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2036      	movs	r0, #54	; 0x36
 8000bea:	f000 fdd7 	bl	800179c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f000 fdf0 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_InitTick+0x9c>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <HAL_InitTick+0x9c>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_InitTick+0x9c>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 0210 	add.w	r2, r7, #16
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f81e 	bl	8002c58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c1c:	f001 fff0 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8000c20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_InitTick+0xa0>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	0c9b      	lsrs	r3, r3, #18
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c52:	f002 fd4f 	bl	80036f4 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c5e:	f002 fdab 	bl	80037b8 <HAL_TIM_Base_Start_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	e000      	b.n	8000c68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	20001b90 	.word	0x20001b90
 8000c7c:	40001000 	.word	0x40001000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <DMA1_Channel4_IRQHandler+0x10>)
 8000cb2:	f000 ff34 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200019ac 	.word	0x200019ac

08000cc0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel5_IRQHandler+0x10>)
 8000cc6:	f000 ff2a 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200019f8 	.word	0x200019f8

08000cd4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel6_IRQHandler+0x10>)
 8000cda:	f000 ff20 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20001964 	.word	0x20001964

08000ce8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Channel7_IRQHandler+0x10>)
 8000cee:	f000 ff16 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20001a40 	.word	0x20001a40

08000cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <USART1_IRQHandler+0x14>)
 8000d02:	f003 f9db 	bl	80040bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_ThingSpeak_IRQHandler(&huart1);
 8000d06:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART1_IRQHandler+0x14>)
 8000d08:	f000 fb76 	bl	80013f8 <USER_ThingSpeak_IRQHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20001a88 	.word	0x20001a88

08000d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <USART2_IRQHandler+0x10>)
 8000d1a:	f003 f9cf 	bl	80040bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //USER_ThingSpeak_IRQHandler(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20001b0c 	.word	0x20001b0c

08000d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM6_DAC_IRQHandler+0x10>)
 8000d2e:	f002 fdb3 	bl	8003898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001b90 	.word	0x20001b90

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e009      	b.n	8000d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbf1 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf1      	blt.n	8000d88 <_write+0x12>
	}
	return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f006 feb0 	bl	8007bac <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20018000 	.word	0x20018000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000090 	.word	0x20000090
 8000e80:	20002448 	.word	0x20002448

08000e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <SystemInit+0x5c>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <SystemInit+0x5c>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <SystemInit+0x60>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <SystemInit+0x60>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <SystemInit+0x60>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <SystemInit+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <SystemInit+0x60>)
 8000eb0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000eb4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <SystemInit+0x60>)
 8000ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <SystemInit+0x60>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <SystemInit+0x60>)
 8000ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SystemInit+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <vInitThingSpeak>:
/* IMPLEMENTATION */
ThingSpeakHandle_t xThingSpeak;


void vInitThingSpeak(ThingSpeakHandle_t *pxThingSpeak, UART_HandleTypeDef *huart, DMA_HandleTypeDef *pxUART_DMA_RX)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	// Structure
	pxThingSpeak->huart = huart;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	601a      	str	r2, [r3, #0]
	pxThingSpeak->pxUART_DMA_RX = pxUART_DMA_RX;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	605a      	str	r2, [r3, #4]
	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3308      	adds	r3, #8
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fe86 	bl	8007c1c <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8000f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 fe71 	bl	8007c1c <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816

	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0210 	orr.w	r2, r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3308      	adds	r3, #8
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68b8      	ldr	r0, [r7, #8]
 8000f6e:	f002 fff3 	bl	8003f58 <HAL_UART_Receive_DMA>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(ThingSpeakHandle_t *pxThingSpeak)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	// Tail catch up to head
	pxThingSpeak->xRXBuffer.uHeadIndex = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - __HAL_DMA_GET_COUNTER(pxThingSpeak->pxUART_DMA_RX);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a

	// [!] To be Task deferred...
	uint16_t uTailIndex = pxThingSpeak->xRXBuffer.uTailIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000fa0:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t uHeadIndex = pxThingSpeak->xRXBuffer.uHeadIndex;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000fa8:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t uRollOver = pxThingSpeak->xRXBuffer.uRollOver;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8000fb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t uParseIndex = uTailIndex;
 8000fb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fb6:	86bb      	strh	r3, [r7, #52]	; 0x34

	if (uRollOver == 0)
 8000fb8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d12e      	bne.n	800101e <USER_UART_IDLECallback+0xa2>
	{
		while (uParseIndex != uHeadIndex)
 8000fc0:	e028      	b.n	8001014 <USER_UART_IDLECallback+0x98>
		{
			//if (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
			if (bEndMatch(pxThingSpeak, uParseIndex))
 8000fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f8e0 	bl	800118c <bEndMatch>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01d      	beq.n	800100e <USER_UART_IDLECallback+0x92>
			{
				if (uParseIndex - uTailIndex > 0)
 8000fd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	dd0e      	ble.n	8000ffa <USER_UART_IDLECallback+0x7e>
				{
					char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 0208 	add.w	r2, r3, #8
 8000fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
					size_t candidateLength = uParseIndex - uTailIndex - 1;
 8000fe8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]

					vHandleCandidateCommand(candidate, candidateLength);
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f931 	bl	800125c <vHandleCandidateCommand>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) ;
 8000ffa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001004:	86fb      	strh	r3, [r7, #54]	; 0x36
				pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800100a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
			}
			uParseIndex++;
 800100e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001010:	3301      	adds	r3, #1
 8001012:	86bb      	strh	r3, [r7, #52]	; 0x34
		while (uParseIndex != uHeadIndex)
 8001014:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001016:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001018:	429a      	cmp	r2, r3
 800101a:	d1d2      	bne.n	8000fc2 <USER_UART_IDLECallback+0x46>
 800101c:	e0a5      	b.n	800116a <USER_UART_IDLECallback+0x1ee>
		}
	}
	else if (uRollOver == 1)
 800101e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001022:	2b01      	cmp	r3, #1
 8001024:	f040 8094 	bne.w	8001150 <USER_UART_IDLECallback+0x1d4>
	{
		if (uParseIndex > uHeadIndex)
 8001028:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800102a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800102c:	429a      	cmp	r2, r3
 800102e:	f240 8081 	bls.w	8001134 <USER_UART_IDLECallback+0x1b8>
		{
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8001032:	e028      	b.n	8001086 <USER_UART_IDLECallback+0x10a>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8001034:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8a7 	bl	800118c <bEndMatch>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01d      	beq.n	8001080 <USER_UART_IDLECallback+0x104>
				{
					if (uParseIndex - uTailIndex > 0)
 8001044:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	dd0e      	ble.n	800106c <USER_UART_IDLECallback+0xf0>
					{
						char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0208 	add.w	r2, r3, #8
 8001054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001056:	4413      	add	r3, r2
 8001058:	617b      	str	r3, [r7, #20]
						size_t candidateLength = uParseIndex - uTailIndex - 1;
 800105a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800105c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]

						vHandleCandidateCommand(candidate, candidateLength);
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f000 f8f8 	bl	800125c <vHandleCandidateCommand>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 800106c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800106e:	3301      	adds	r3, #1
 8001070:	b29b      	uxth	r3, r3
 8001072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001076:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800107c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
				}
				uParseIndex++;
 8001080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001082:	3301      	adds	r3, #1
 8001084:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8001086:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108c:	d3d2      	bcc.n	8001034 <USER_UART_IDLECallback+0xb8>
			}

			uParseIndex = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	86bb      	strh	r3, [r7, #52]	; 0x34

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 8001092:	e04a      	b.n	800112a <USER_UART_IDLECallback+0x1ae>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8001094:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f877 	bl	800118c <bEndMatch>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d03f      	beq.n	8001124 <USER_UART_IDLECallback+0x1a8>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 80010a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80010a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d91d      	bls.n	80010e8 <USER_UART_IDLECallback+0x16c>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 80010ac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d02d      	beq.n	8001110 <USER_UART_IDLECallback+0x194>
						{
							char *candidateFirst = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f103 0208 	add.w	r2, r3, #8
 80010ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010bc:	4413      	add	r3, r2
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateFirstLength = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - uTailIndex;
 80010c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010c2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010c6:	623b      	str	r3, [r7, #32]
							char *candidateSecond = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3308      	adds	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
							size_t candidateSecondLength = uParseIndex;
 80010ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010d0:	61bb      	str	r3, [r7, #24]

							vHandleCandidateCommandSplit(candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	6a39      	ldr	r1, [r7, #32]
 80010d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010da:	f000 f90b 	bl	80012f4 <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							pxThingSpeak->xRXBuffer.uRollOver = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80010e6:	e013      	b.n	8001110 <USER_UART_IDLECallback+0x194>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 80010e8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd0e      	ble.n	8001110 <USER_UART_IDLECallback+0x194>
						{
							char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0208 	add.w	r2, r3, #8
 80010f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010fa:	4413      	add	r3, r2
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t candidateLength = uParseIndex - uTailIndex - 1;
 80010fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

							vHandleCandidateCommand(candidate, candidateLength);
 8001108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800110a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110c:	f000 f8a6 	bl	800125c <vHandleCandidateCommand>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 8001110:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001112:	3301      	adds	r3, #1
 8001114:	b29b      	uxth	r3, r3
 8001116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800111a:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001120:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
				}

				uParseIndex++;
 8001124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001126:	3301      	adds	r3, #1
 8001128:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex != uHeadIndex)
 800112a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800112c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800112e:	429a      	cmp	r2, r3
 8001130:	d1b0      	bne.n	8001094 <USER_UART_IDLECallback+0x118>
 8001132:	e01a      	b.n	800116a <USER_UART_IDLECallback+0x1ee>
			}
		}
		else
		{
			// Reset due to too overflow rx buffer due to too much data received before it could all process
			HAL_UART_DMAStop(pxThingSpeak->huart);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f002 ff51 	bl	8003fe0 <HAL_UART_DMAStop>
			vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fecd 	bl	8000ee8 <vInitThingSpeak>
 800114e:	e00c      	b.n	800116a <USER_UART_IDLECallback+0x1ee>
		}
	}
	else
	{
		// Reset due to too overflow rx buffer due to too much data received before it could all process
		HAL_UART_DMAStop(pxThingSpeak->huart);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f002 ff43 	bl	8003fe0 <HAL_UART_DMAStop>
		vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff febf 	bl	8000ee8 <vInitThingSpeak>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", pxThingSpeak->xRXBuffer.uTailIndex, pxThingSpeak->xRXBuffer.uHeadIndex);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001170:	4619      	mov	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8001178:	461a      	mov	r2, r3
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <USER_UART_IDLECallback+0x20c>)
 800117c:	f006 fd56 	bl	8007c2c <iprintf>

}
 8001180:	bf00      	nop
 8001182:	3738      	adds	r7, #56	; 0x38
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08008fd4 	.word	0x08008fd4

0800118c <bEndMatch>:


uint8_t bEndMatch(ThingSpeakHandle_t *pxThingSpeak, uint16_t uParseIndex)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	7a1b      	ldrb	r3, [r3, #8]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d10a      	bne.n	80011ba <bEndMatch+0x2e>
			(pxThingSpeak->xRXBuffer.puDMABuffer[(uParseIndex - 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer)] == '\r');
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 80011b2:	2b0d      	cmp	r3, #13
 80011b4:	d101      	bne.n	80011ba <bEndMatch+0x2e>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <bEndMatch+0x30>
 80011ba:	2300      	movs	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <bCommandMatch>:


uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7fe fffa 	bl	80001d0 <strlen>
 80011dc:	4602      	mov	r2, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d109      	bne.n	80011f8 <bCommandMatch+0x2e>
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f006 fdcd 	bl	8007d88 <strncmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <bCommandMatch+0x2e>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <bCommandMatch+0x30>
 80011f8:	2300      	movs	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7fe ffdc 	bl	80001d0 <strlen>
 8001218:	4601      	mov	r1, r0
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 8001220:	4299      	cmp	r1, r3
 8001222:	d114      	bne.n	800124e <bCommandSplitMatch+0x4a>
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f006 fdad 	bl	8007d88 <strncmp>
 800122e:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10c      	bne.n	800124e <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fda2 	bl	8007d88 <strncmp>
 8001244:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <bCommandSplitMatch+0x4a>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <bCommandSplitMatch+0x4c>
 800124e:	2300      	movs	r3, #0
 8001250:	b2db      	uxtb	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <vHandleCandidateCommand>:
/* Debug purposes on serial monitor */
extern UART_HandleTypeDef huart2;


void vHandleCandidateCommand(const char *candidate, size_t candidateLength)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	if (bCommandMatch("ON", candidate, candidateLength))
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <vHandleCandidateCommand+0x78>)
 800126c:	f7ff ffad 	bl	80011ca <bCommandMatch>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <vHandleCandidateCommand+0x22>
	{
		printf("SET LIGHT\r\n");
 8001276:	4818      	ldr	r0, [pc, #96]	; (80012d8 <vHandleCandidateCommand+0x7c>)
 8001278:	f006 fd5e 	bl	8007d38 <puts>
		//HAL_UART_Transmit(&huart2, "INVLD: ", 7, 1000);
		HAL_UART_Transmit(&huart2, (char *)candidate, candidateLength, 1000);
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
		//printf("INVLD\r\n");
	}
}
 800127c:	e026      	b.n	80012cc <vHandleCandidateCommand+0x70>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <vHandleCandidateCommand+0x80>)
 8001284:	f7ff ffa1 	bl	80011ca <bCommandMatch>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <vHandleCandidateCommand+0x3a>
		printf("UNSET LIGHT\r\n");
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <vHandleCandidateCommand+0x84>)
 8001290:	f006 fd52 	bl	8007d38 <puts>
}
 8001294:	e01a      	b.n	80012cc <vHandleCandidateCommand+0x70>
	else if (bCommandMatch("OK", candidate, candidateLength))
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4812      	ldr	r0, [pc, #72]	; (80012e4 <vHandleCandidateCommand+0x88>)
 800129c:	f7ff ff95 	bl	80011ca <bCommandMatch>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <vHandleCandidateCommand+0x52>
		printf("OK Received\r\n");
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <vHandleCandidateCommand+0x8c>)
 80012a8:	f006 fd46 	bl	8007d38 <puts>
}
 80012ac:	e00e      	b.n	80012cc <vHandleCandidateCommand+0x70>
		HAL_UART_Transmit(&huart2, (char *)candidate, candidateLength, 1000);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <vHandleCandidateCommand+0x90>)
 80012ba:	f002 fd3b 	bl	8003d34 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2202      	movs	r2, #2
 80012c4:	490a      	ldr	r1, [pc, #40]	; (80012f0 <vHandleCandidateCommand+0x94>)
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <vHandleCandidateCommand+0x90>)
 80012c8:	f002 fd34 	bl	8003d34 <HAL_UART_Transmit>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08008ff4 	.word	0x08008ff4
 80012d8:	08008ff8 	.word	0x08008ff8
 80012dc:	08009004 	.word	0x08009004
 80012e0:	08009008 	.word	0x08009008
 80012e4:	08009018 	.word	0x08009018
 80012e8:	0800901c 	.word	0x0800901c
 80012ec:	20001b0c 	.word	0x20001b0c
 80012f0:	0800902c 	.word	0x0800902c

080012f4 <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	4821      	ldr	r0, [pc, #132]	; (8001394 <vHandleCandidateCommandSplit+0xa0>)
 800130e:	f7ff ff79 	bl	8001204 <bCommandSplitMatch>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <vHandleCandidateCommandSplit+0xa4>)
 800131a:	f006 fd0d 	bl	8007d38 <puts>
		HAL_UART_Transmit(&huart2, (char *)candidateFirst, candidateFirstLength, 1000);
		HAL_UART_Transmit(&huart2, (char *)candidateSecond, candidateSecondLength, 1000);
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
		//printf("INVLD\r\n");
	}
}
 800131e:	e034      	b.n	800138a <vHandleCandidateCommandSplit+0x96>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	481c      	ldr	r0, [pc, #112]	; (800139c <vHandleCandidateCommandSplit+0xa8>)
 800132c:	f7ff ff6a 	bl	8001204 <bCommandSplitMatch>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 8001336:	481a      	ldr	r0, [pc, #104]	; (80013a0 <vHandleCandidateCommandSplit+0xac>)
 8001338:	f006 fcfe 	bl	8007d38 <puts>
}
 800133c:	e025      	b.n	800138a <vHandleCandidateCommandSplit+0x96>
	else if (bCommandSplitMatch("OK", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <vHandleCandidateCommandSplit+0xb0>)
 800134a:	f7ff ff5b 	bl	8001204 <bCommandSplitMatch>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <vHandleCandidateCommandSplit+0x68>
		printf("OK Received\r\n");
 8001354:	4814      	ldr	r0, [pc, #80]	; (80013a8 <vHandleCandidateCommandSplit+0xb4>)
 8001356:	f006 fcef 	bl	8007d38 <puts>
}
 800135a:	e016      	b.n	800138a <vHandleCandidateCommandSplit+0x96>
		HAL_UART_Transmit(&huart2, (char *)candidateFirst, candidateFirstLength, 1000);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	b29a      	uxth	r2, r3
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <vHandleCandidateCommandSplit+0xb8>)
 8001368:	f002 fce4 	bl	8003d34 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (char *)candidateSecond, candidateSecondLength, 1000);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b29a      	uxth	r2, r3
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <vHandleCandidateCommandSplit+0xb8>)
 8001378:	f002 fcdc 	bl	8003d34 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	2202      	movs	r2, #2
 8001382:	490b      	ldr	r1, [pc, #44]	; (80013b0 <vHandleCandidateCommandSplit+0xbc>)
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <vHandleCandidateCommandSplit+0xb8>)
 8001386:	f002 fcd5 	bl	8003d34 <HAL_UART_Transmit>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08008ff4 	.word	0x08008ff4
 8001398:	08008ff8 	.word	0x08008ff8
 800139c:	08009004 	.word	0x08009004
 80013a0:	08009008 	.word	0x08009008
 80013a4:	08009018 	.word	0x08009018
 80013a8:	0800901c 	.word	0x0800901c
 80013ac:	20001b0c 	.word	0x20001b0c
 80013b0:	0800902c 	.word	0x0800902c

080013b4 <bTransmitCommand>:


uint8_t bTransmitCommand(ThingSpeakHandle_t *pxThingSpeak, const char *command, size_t numElements)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	/* [!] Could also add a wait for a semaphore, and semaphore released from isr on transmit complete callback */
	strncpy((char *)pxThingSpeak->xTXBuffer.puDMABuffer, command, numElements);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fcee 	bl	8007dac <strncpy>
	if (HAL_UART_Transmit_DMA(pxThingSpeak->huart, (uint8_t *)pxThingSpeak->xTXBuffer.puDMABuffer, numElements) == HAL_OK)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	b292      	uxth	r2, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f002 fd3c 	bl	8003e5c <HAL_UART_Transmit_DMA>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <bTransmitCommand+0x3a>
	{
		return 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <bTransmitCommand+0x3c>
	}
	else
	{
		return 0;
 80013ee:	2300      	movs	r3, #0
	}
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <USER_ThingSpeak_IRQHandler>:


void USER_ThingSpeak_IRQHandler(UART_HandleTypeDef *pxHUART)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(pxHUART, UART_FLAG_IDLE) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b10      	cmp	r3, #16
 800140c:	d106      	bne.n	800141c <USER_ThingSpeak_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(pxHUART);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2210      	movs	r2, #16
 8001414:	621a      	str	r2, [r3, #32]

		USER_UART_IDLECallback(&xThingSpeak);
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <USER_ThingSpeak_IRQHandler+0x2c>)
 8001418:	f7ff fdb0 	bl	8000f7c <USER_UART_IDLECallback>
	}
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20001bdc 	.word	0x20001bdc

08001428 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (pxHUART == xThingSpeak.huart)
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_UART_RxCpltCallback+0x30>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	d108      	bne.n	800144c <HAL_UART_RxCpltCallback+0x24>
	{
		xThingSpeak.xRXBuffer.uRollOver++;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_UART_RxCpltCallback+0x30>)
 800143c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_UART_RxCpltCallback+0x30>)
 8001448:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
	}
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20001bdc 	.word	0x20001bdc

0800145c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	__NOP();
 8001464:	bf00      	nop
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <bTransmitThingSpeakData>:



uint8_t bTransmitThingSpeakData(char *apiKey, uint8_t field, uint16_t value)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0a6      	sub	sp, #152	; 0x98
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	803b      	strh	r3, [r7, #0]
	char local_buf[100] = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
 8001488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148c:	2260      	movs	r2, #96	; 0x60
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f006 fbc3 	bl	8007c1c <memset>
	char local_buf2[30] = {0};
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	831a      	strh	r2, [r3, #24]

	bTransmitCommand(&xThingSpeak, "AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 80014ae:	2229      	movs	r2, #41	; 0x29
 80014b0:	4925      	ldr	r1, [pc, #148]	; (8001548 <bTransmitThingSpeakData+0xd4>)
 80014b2:	4826      	ldr	r0, [pc, #152]	; (800154c <bTransmitThingSpeakData+0xd8>)
 80014b4:	f7ff ff7e 	bl	80013b4 <bTransmitCommand>
	osDelay(3000);
 80014b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014bc:	f003 ff04 	bl	80052c8 <osDelay>

	//sprintf(local_buf, "GET /update?api_key=%sfield%u=%u\r\n", apiKey, field, value);
	sprintf(local_buf, "GET https://api.thingspeak.com/update?api_key=%s&field%u=%u\r\n", apiKey, field, value);
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4613      	mov	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4920      	ldr	r1, [pc, #128]	; (8001550 <bTransmitThingSpeakData+0xdc>)
 80014d0:	f006 fc3a 	bl	8007d48 <siprintf>
	int len = strlen(local_buf);
 80014d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe79 	bl	80001d0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014ec:	4919      	ldr	r1, [pc, #100]	; (8001554 <bTransmitThingSpeakData+0xe0>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fc2a 	bl	8007d48 <siprintf>
	bTransmitCommand(&xThingSpeak, local_buf2, strlen(local_buf2));
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe69 	bl	80001d0 <strlen>
 80014fe:	4602      	mov	r2, r0
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <bTransmitThingSpeakData+0xd8>)
 8001508:	f7ff ff54 	bl	80013b4 <bTransmitCommand>
	osDelay(3000);
 800150c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001510:	f003 feda 	bl	80052c8 <osDelay>

	bTransmitCommand(&xThingSpeak, local_buf, strlen(local_buf));
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe59 	bl	80001d0 <strlen>
 800151e:	4602      	mov	r2, r0
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	4619      	mov	r1, r3
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <bTransmitThingSpeakData+0xd8>)
 8001528:	f7ff ff44 	bl	80013b4 <bTransmitCommand>
	osDelay(3000);
 800152c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001530:	f003 feca 	bl	80052c8 <osDelay>


	osDelay(3000);
 8001534:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001538:	f003 fec6 	bl	80052c8 <osDelay>

	return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	3790      	adds	r7, #144	; 0x90
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08009030 	.word	0x08009030
 800154c:	20001bdc 	.word	0x20001bdc
 8001550:	0800905c 	.word	0x0800905c
 8001554:	0800909c 	.word	0x0800909c

08001558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff fc92 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001562:	e003      	b.n	800156c <LoopCopyDataInit>

08001564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800156a:	3104      	adds	r1, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <LoopForever+0xa>)
	ldr	r3, =_edata
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001574:	d3f6      	bcc.n	8001564 <CopyDataInit>
	ldr	r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001578:	e002      	b.n	8001580 <LoopFillZerobss>

0800157a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800157a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800157c:	f842 3b04 	str.w	r3, [r2], #4

08001580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001584:	d3f9      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f006 fb17 	bl	8007bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158a:	f7ff f807 	bl	800059c <main>

0800158e <LoopForever>:

LoopForever:
    b LoopForever
 800158e:	e7fe      	b.n	800158e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001590:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001594:	080091d8 	.word	0x080091d8
	ldr	r0, =_sdata
 8001598:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800159c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80015a0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80015a4:	20002448 	.word	0x20002448

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_Init+0x3c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_Init+0x3c>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 f8df 	bl	8001786 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fb03 	bl	8000bd4 <HAL_InitTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	e001      	b.n	80015de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015da:	f7ff f999 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015de:	79fb      	ldrb	r3, [r7, #7]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	200023f4 	.word	0x200023f4

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200023f4 	.word	0x200023f4

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff4c 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ae:	f7ff ff61 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	6978      	ldr	r0, [r7, #20]
 80017ba:	f7ff ffb1 	bl	8001720 <NVIC_EncodePriority>
 80017be:	4602      	mov	r2, r0
 80017c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff80 	bl	80016cc <__NVIC_SetPriority>
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff54 	bl	8001690 <__NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e098      	b.n	8001934 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_DMA_Init+0x150>)
 800180a:	429a      	cmp	r2, r3
 800180c:	d80f      	bhi.n	800182e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <HAL_DMA_Init+0x154>)
 8001816:	4413      	add	r3, r2
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_DMA_Init+0x158>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_DMA_Init+0x15c>)
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
 800182c:	e00e      	b.n	800184c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_DMA_Init+0x160>)
 8001836:	4413      	add	r3, r2
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <HAL_DMA_Init+0x158>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	009a      	lsls	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a42      	ldr	r2, [pc, #264]	; (8001954 <HAL_DMA_Init+0x164>)
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018a6:	d039      	beq.n	800191c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <HAL_DMA_Init+0x15c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11a      	bne.n	80018e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_DMA_Init+0x168>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 031c 	and.w	r3, r3, #28
 80018be:	210f      	movs	r1, #15
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4924      	ldr	r1, [pc, #144]	; (8001958 <HAL_DMA_Init+0x168>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_DMA_Init+0x168>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f003 031c 	and.w	r3, r3, #28
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	491d      	ldr	r1, [pc, #116]	; (8001958 <HAL_DMA_Init+0x168>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
 80018e6:	e019      	b.n	800191c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_DMA_Init+0x16c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	f003 031c 	and.w	r3, r3, #28
 80018f4:	210f      	movs	r1, #15
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4917      	ldr	r1, [pc, #92]	; (800195c <HAL_DMA_Init+0x16c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_DMA_Init+0x16c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 031c 	and.w	r3, r3, #28
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <HAL_DMA_Init+0x16c>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40020407 	.word	0x40020407
 8001944:	bffdfff8 	.word	0xbffdfff8
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	40020000 	.word	0x40020000
 8001950:	bffdfbf8 	.word	0xbffdfbf8
 8001954:	40020400 	.word	0x40020400
 8001958:	400200a8 	.word	0x400200a8
 800195c:	400204a8 	.word	0x400204a8

08001960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Start_IT+0x20>
 800197c:	2302      	movs	r3, #2
 800197e:	e04b      	b.n	8001a18 <HAL_DMA_Start_IT+0xb8>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d13a      	bne.n	8001a0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f96b 	bl	8001c94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 020e 	orr.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e00f      	b.n	80019f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 020a 	orr.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e005      	b.n	8001a16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e022      	b.n	8001a90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020e 	bic.w	r2, r2, #14
 8001a58:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f003 021c 	and.w	r2, r3, #28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d005      	beq.n	8001ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e029      	b.n	8001b14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020e 	bic.w	r2, r2, #14
 8001ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    }
  }
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 031c 	and.w	r3, r3, #28
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d026      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d021      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0204 	bic.w	r2, r2, #4
 8001b70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f003 021c 	and.w	r2, r3, #28
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2104      	movs	r1, #4
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d071      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b96:	e06c      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d029      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020a 	bic.w	r2, r2, #10
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f003 021c 	and.w	r2, r3, #28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2102      	movs	r1, #2
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d038      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c08:	e033      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f003 031c 	and.w	r3, r3, #28
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d025      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 020e 	bic.w	r2, r2, #14
 8001c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f003 021c 	and.w	r2, r3, #28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 021c 	and.w	r2, r3, #28
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d108      	bne.n	8001cd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cd6:	e007      	b.n	8001ce8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e17f      	b.n	8002004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8171 	beq.w	8001ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d00b      	beq.n	8001d3c <HAL_GPIO_Init+0x48>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d118      	bne.n	8001ddc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x128>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b12      	cmp	r3, #18
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	6939      	ldr	r1, [r7, #16]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80ac 	beq.w	8001ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <HAL_GPIO_Init+0x330>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eaa:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <HAL_GPIO_Init+0x330>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb2:	4b5c      	ldr	r3, [pc, #368]	; (8002024 <HAL_GPIO_Init+0x330>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_GPIO_Init+0x334>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ee8:	d025      	beq.n	8001f36 <HAL_GPIO_Init+0x242>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_GPIO_Init+0x338>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_GPIO_Init+0x23e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_GPIO_Init+0x33c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x23a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_GPIO_Init+0x340>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x236>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4c      	ldr	r2, [pc, #304]	; (8002038 <HAL_GPIO_Init+0x344>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x232>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4b      	ldr	r2, [pc, #300]	; (800203c <HAL_GPIO_Init+0x348>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_GPIO_Init+0x34c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x22a>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e00c      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x244>
 8001f36:	2300      	movs	r3, #0
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f48:	4937      	ldr	r1, [pc, #220]	; (8002028 <HAL_GPIO_Init+0x334>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f7a:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fce:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_GPIO_Init+0x350>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae78 	bne.w	8001d04 <HAL_GPIO_Init+0x10>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	40010000 	.word	0x40010000
 800202c:	48000400 	.word	0x48000400
 8002030:	48000800 	.word	0x48000800
 8002034:	48000c00 	.word	0x48000c00
 8002038:	48001000 	.word	0x48001000
 800203c:	48001400 	.word	0x48001400
 8002040:	48001800 	.word	0x48001800
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002064:	e002      	b.n	800206c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_PWREx_GetVoltageRange+0x18>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40007000 	.word	0x40007000

08002094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a2:	d130      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	d038      	beq.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2232      	movs	r2, #50	; 0x32
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d8:	e002      	b.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d102      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f2      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	d110      	bne.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e00f      	b.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d007      	beq.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002122:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40007000 	.word	0x40007000
 8002138:	20000000 	.word	0x20000000
 800213c:	431bde83 	.word	0x431bde83

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e3d4      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002152:	4ba1      	ldr	r3, [pc, #644]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215c:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80e4 	beq.w	800233c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_RCC_OscConfig+0x4a>
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	f040 808b 	bne.w	8002298 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b01      	cmp	r3, #1
 8002186:	f040 8087 	bne.w	8002298 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800218a:	4b93      	ldr	r3, [pc, #588]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x62>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e3ac      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_RCC_OscConfig+0x7c>
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ba:	e005      	b.n	80021c8 <HAL_RCC_OscConfig+0x88>
 80021bc:	4b86      	ldr	r3, [pc, #536]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d223      	bcs.n	8002214 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fd73 	bl	8002cbc <RCC_SetFlashLatencyFromMSIRange>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e38d      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e0:	4b7d      	ldr	r3, [pc, #500]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a7c      	ldr	r2, [pc, #496]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4977      	ldr	r1, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	4972      	ldr	r1, [pc, #456]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
 8002212:	e025      	b.n	8002260 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002214:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6f      	ldr	r2, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	496a      	ldr	r1, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002232:	4b69      	ldr	r3, [pc, #420]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4965      	ldr	r1, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fd33 	bl	8002cbc <RCC_SetFlashLatencyFromMSIRange>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e34d      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002260:	f000 fc36 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	495a      	ldr	r1, [pc, #360]	; (80023dc <HAL_RCC_OscConfig+0x29c>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_OscConfig+0x2a0>)
 800227e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x2a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fca5 	bl	8000bd4 <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d052      	beq.n	800233a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	e331      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d032      	beq.n	8002306 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4c      	ldr	r2, [pc, #304]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ac:	f7ff f9b2 	bl	8001614 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b4:	f7ff f9ae 	bl	8001614 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e31a      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	493b      	ldr	r1, [pc, #236]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e01a      	b.n	800233c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002312:	f7ff f97f 	bl	8001614 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231a:	f7ff f97b 	bl	8001614 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e2e7      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x1da>
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800233a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d074      	beq.n	8002432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x21a>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d10e      	bne.n	8002372 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d10b      	bne.n	8002372 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d064      	beq.n	8002430 <HAL_RCC_OscConfig+0x2f0>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d160      	bne.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e2c4      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x24a>
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e01d      	b.n	80023c6 <HAL_RCC_OscConfig+0x286>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x26e>
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 800239a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x286>
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x298>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01c      	beq.n	8002408 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff f921 	bl	8001614 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d4:	e011      	b.n	80023fa <HAL_RCC_OscConfig+0x2ba>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	080090e8 	.word	0x080090e8
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f914 	bl	8001614 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e280      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	4baf      	ldr	r3, [pc, #700]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2a8>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f904 	bl	8001614 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f900 	bl	8001614 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e26c      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	4ba5      	ldr	r3, [pc, #660]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d0>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d060      	beq.n	8002500 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x310>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d119      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d116      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	4b99      	ldr	r3, [pc, #612]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x328>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e249      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b93      	ldr	r3, [pc, #588]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4990      	ldr	r1, [pc, #576]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	e040      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d023      	beq.n	80024ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002486:	4b8c      	ldr	r3, [pc, #560]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8b      	ldr	r2, [pc, #556]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff f8bf 	bl	8001614 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff f8bb 	bl	8001614 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e227      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	497c      	ldr	r1, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a79      	ldr	r2, [pc, #484]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f89b 	bl	8001614 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f897 	bl	8001614 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e203      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f4:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03c      	beq.n	8002586 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff f876 	bl	8001614 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff f872 	bl	8001614 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1de      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253e:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCC_OscConfig+0x3ec>
 800254c:	e01b      	b.n	8002586 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7ff f859 	bl	8001614 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7ff f855 	bl	8001614 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1c1      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a6 	beq.w	80026e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58
 80025b0:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCC_OscConfig+0x57c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d118      	bne.n	80025fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x57c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <HAL_RCC_OscConfig+0x57c>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d8:	f7ff f81c 	bl	8001614 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7ff f818 	bl	8001614 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e184      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f2:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_RCC_OscConfig+0x57c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d8>
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002616:	e024      	b.n	8002662 <HAL_RCC_OscConfig+0x522>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d110      	bne.n	8002642 <HAL_RCC_OscConfig+0x502>
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	e00f      	b.n	8002662 <HAL_RCC_OscConfig+0x522>
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe ffd3 	bl	8001614 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe ffcf 	bl	8001614 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e139      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x578>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ed      	beq.n	8002672 <HAL_RCC_OscConfig+0x532>
 8002696:	e01a      	b.n	80026ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe ffbc 	bl	8001614 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800269e:	e00f      	b.n	80026c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe ffb8 	bl	8001614 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d906      	bls.n	80026c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e122      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c0:	4b90      	ldr	r3, [pc, #576]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e8      	bne.n	80026a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a8a      	ldr	r2, [pc, #552]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8108 	beq.w	80028fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f040 80d0 	bne.w	8002894 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026f4:	4b83      	ldr	r3, [pc, #524]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	429a      	cmp	r2, r3
 8002706:	d130      	bne.n	800276a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	3b01      	subs	r3, #1
 8002714:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d127      	bne.n	800276a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d11f      	bne.n	800276a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002734:	2a07      	cmp	r2, #7
 8002736:	bf14      	ite	ne
 8002738:	2201      	movne	r2, #1
 800273a:	2200      	moveq	r2, #0
 800273c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273e:	4293      	cmp	r3, r2
 8002740:	d113      	bne.n	800276a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d109      	bne.n	800276a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d06e      	beq.n	8002848 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d069      	beq.n	8002844 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b7      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800278c:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002798:	f7fe ff3c 	bl	8001614 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe ff38 	bl	8001614 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0a4      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x7c8>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027ce:	3a01      	subs	r2, #1
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027d8:	0212      	lsls	r2, r2, #8
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027e0:	0852      	lsrs	r2, r2, #1
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0552      	lsls	r2, r2, #21
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ec:	0852      	lsrs	r2, r2, #1
 80027ee:	3a01      	subs	r2, #1
 80027f0:	0652      	lsls	r2, r2, #25
 80027f2:	4311      	orrs	r1, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027f8:	0912      	lsrs	r2, r2, #4
 80027fa:	0452      	lsls	r2, r2, #17
 80027fc:	430a      	orrs	r2, r1
 80027fe:	4941      	ldr	r1, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002804:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3e      	ldr	r2, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002810:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800281c:	f7fe fefa 	bl	8001614 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fef6 	bl	8001614 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e062      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002842:	e05a      	b.n	80028fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e059      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d152      	bne.n	80028fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002860:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800286c:	f7fe fed2 	bl	8001614 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fece 	bl	8001614 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e03a      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x734>
 8002892:	e032      	b.n	80028fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d02d      	beq.n	80028f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a19      	ldr	r2, [pc, #100]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fea1 	bl	8001614 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fe9d 	bl	8001614 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e009      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_OscConfig+0x7c4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x796>
 80028f4:	e001      	b.n	80028fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	f99d808c 	.word	0xf99d808c

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0c8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d910      	bls.n	8002950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4961      	ldr	r1, [pc, #388]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b5f      	ldr	r3, [pc, #380]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b0      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04c      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002964:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e09e      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d107      	bne.n	800298c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d115      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e092      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002994:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e086      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e07e      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 0203 	bic.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	493f      	ldr	r1, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c6:	f7fe fe25 	bl	8001614 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ce:	f7fe fe21 	bl	8001614 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e066      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 020c 	and.w	r2, r3, #12
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d1eb      	bne.n	80029ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	492c      	ldr	r1, [pc, #176]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4924      	ldr	r1, [pc, #144]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1b0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e036      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4910      	ldr	r1, [pc, #64]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a82:	f000 f825 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f894 	bl	8000bd4 <HAL_InitTick>
 8002aac:	4603      	mov	r3, r0
 8002aae:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080090e8 	.word	0x080090e8
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d121      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d11e      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d134      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d003      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xac>
 8002b74:	e005      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b78:	617b      	str	r3, [r7, #20]
      break;
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7e:	617b      	str	r3, [r7, #20]
      break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	617b      	str	r3, [r7, #20]
      break;
 8002b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	fb02 f203 	mul.w	r2, r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0e5b      	lsrs	r3, r3, #25
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08009100 	.word	0x08009100
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000000 	.word	0x20000000

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c04:	f7ff fff0 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	080090f8 	.word	0x080090f8

08002c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c30:	f7ff ffda 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0adb      	lsrs	r3, r3, #11
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	080090f8 	.word	0x080090f8

08002c58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	220f      	movs	r2, #15
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_RCC_GetClockConfig+0x60>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40022000 	.word	0x40022000

08002cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cd4:	f7ff f9d0 	bl	8002078 <HAL_PWREx_GetVoltageRange>
 8002cd8:	6178      	str	r0, [r7, #20]
 8002cda:	e014      	b.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cf4:	f7ff f9c0 	bl	8002078 <HAL_PWREx_GetVoltageRange>
 8002cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d10b      	bne.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d919      	bls.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2ba0      	cmp	r3, #160	; 0xa0
 8002d18:	d902      	bls.n	8002d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e013      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e010      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	d902      	bls.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e00a      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d102      	bne.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d38:	2302      	movs	r3, #2
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e004      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b70      	cmp	r3, #112	; 0x70
 8002d42:	d101      	bne.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4909      	ldr	r1, [pc, #36]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40022000 	.word	0x40022000

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d041      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da0:	d02a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da6:	d824      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002db2:	d81e      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dbe:	e018      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc0:	4b86      	ldr	r3, [pc, #536]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a85      	ldr	r2, [pc, #532]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dcc:	e015      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fabb 	bl	8003350 <RCCEx_PLLSAI1_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dde:	e00c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3320      	adds	r3, #32
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fba6 	bl	8003538 <RCCEx_PLLSAI2_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	74fb      	strb	r3, [r7, #19]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e00:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0e:	4973      	ldr	r1, [pc, #460]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e16:	e001      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d041      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e30:	d02a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e36:	d824      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e42:	d81e      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e4e:	e018      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e50:	4b62      	ldr	r3, [pc, #392]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e5c:	e015      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fa73 	bl	8003350 <RCCEx_PLLSAI1_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6e:	e00c      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3320      	adds	r3, #32
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fb5e 	bl	8003538 <RCCEx_PLLSAI2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	74fb      	strb	r3, [r7, #19]
      break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9e:	494f      	ldr	r1, [pc, #316]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80a0 	beq.w	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002efc:	f7fe fb8a 	bl	8001614 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f02:	e009      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe fb86 	bl	8001614 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d902      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	74fb      	strb	r3, [r7, #19]
        break;
 8002f16:	e005      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ef      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d15c      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d019      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fb45 	bl	8001614 <HAL_GetTick>
 8002f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fb41 	bl	8001614 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d902      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fa4:	e006      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ec      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fca:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
 8002fd8:	e006      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe8:	7c7b      	ldrb	r3, [r7, #17]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b9e      	ldr	r3, [pc, #632]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	4a9d      	ldr	r2, [pc, #628]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003006:	4b98      	ldr	r3, [pc, #608]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 0203 	bic.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	4994      	ldr	r1, [pc, #592]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f023 020c 	bic.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	498c      	ldr	r1, [pc, #560]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304a:	4b87      	ldr	r3, [pc, #540]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4983      	ldr	r1, [pc, #524]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800306c:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	497b      	ldr	r1, [pc, #492]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	4972      	ldr	r1, [pc, #456]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b0:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	496a      	ldr	r1, [pc, #424]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	4961      	ldr	r1, [pc, #388]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003102:	4959      	ldr	r1, [pc, #356]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003116:	4b54      	ldr	r3, [pc, #336]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	4950      	ldr	r1, [pc, #320]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003138:	4b4b      	ldr	r3, [pc, #300]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	4948      	ldr	r1, [pc, #288]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	493f      	ldr	r1, [pc, #252]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d028      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318a:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319a:	d106      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a31      	ldr	r2, [pc, #196]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]
 80031a8:	e011      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b2:	d10c      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f8c8 	bl	8003350 <RCCEx_PLLSAI1_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d028      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	491f      	ldr	r1, [pc, #124]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f8:	d106      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003204:	60d3      	str	r3, [r2, #12]
 8003206:	e011      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003210:	d10c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f899 	bl	8003350 <RCCEx_PLLSAI1_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003256:	d109      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a02      	ldr	r2, [pc, #8]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
 8003264:	e014      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003274:	d10c      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f867 	bl	8003350 <RCCEx_PLLSAI1_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02f      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032aa:	4928      	ldr	r1, [pc, #160]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f844 	bl	8003350 <RCCEx_PLLSAI1_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	74bb      	strb	r3, [r7, #18]
 80032d6:	e011      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3320      	adds	r3, #32
 80032e6:	2102      	movs	r1, #2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f925 	bl	8003538 <RCCEx_PLLSAI2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003316:	490d      	ldr	r1, [pc, #52]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333a:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003342:	7cbb      	ldrb	r3, [r7, #18]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000

08003350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800335e:	4b75      	ldr	r3, [pc, #468]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d10d      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
       ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
       ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d047      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	e044      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d018      	beq.n	80033d6 <RCCEx_PLLSAI1_Config+0x86>
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d825      	bhi.n	80033f4 <RCCEx_PLLSAI1_Config+0xa4>
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d002      	beq.n	80033b2 <RCCEx_PLLSAI1_Config+0x62>
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d009      	beq.n	80033c4 <RCCEx_PLLSAI1_Config+0x74>
 80033b0:	e020      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033b2:	4b60      	ldr	r3, [pc, #384]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11d      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c2:	e01a      	b.n	80033fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033c4:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e013      	b.n	80033fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033f2:	e006      	b.n	8003402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e004      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033fa:	bf00      	nop
 80033fc:	e002      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003402:	bf00      	nop
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	430b      	orrs	r3, r1
 8003420:	4944      	ldr	r1, [pc, #272]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d17d      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a40      	ldr	r2, [pc, #256]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003438:	f7fe f8ec 	bl	8001614 <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800343e:	e009      	b.n	8003454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003440:	f7fe f8e8 	bl	8001614 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d902      	bls.n	8003454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	73fb      	strb	r3, [r7, #15]
        break;
 8003452:	e005      	b.n	8003460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003454:	4b37      	ldr	r3, [pc, #220]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ef      	bne.n	8003440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d160      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
 800347c:	0211      	lsls	r1, r2, #8
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	0912      	lsrs	r2, r2, #4
 8003484:	0452      	lsls	r2, r2, #17
 8003486:	430a      	orrs	r2, r1
 8003488:	492a      	ldr	r1, [pc, #168]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	610b      	str	r3, [r1, #16]
 800348e:	e027      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d112      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800349e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	0211      	lsls	r1, r2, #8
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6912      	ldr	r2, [r2, #16]
 80034ac:	0852      	lsrs	r2, r2, #1
 80034ae:	3a01      	subs	r2, #1
 80034b0:	0552      	lsls	r2, r2, #21
 80034b2:	430a      	orrs	r2, r1
 80034b4:	491f      	ldr	r1, [pc, #124]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	610b      	str	r3, [r1, #16]
 80034ba:	e011      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6892      	ldr	r2, [r2, #8]
 80034cc:	0211      	lsls	r1, r2, #8
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6952      	ldr	r2, [r2, #20]
 80034d2:	0852      	lsrs	r2, r2, #1
 80034d4:	3a01      	subs	r2, #1
 80034d6:	0652      	lsls	r2, r2, #25
 80034d8:	430a      	orrs	r2, r1
 80034da:	4916      	ldr	r1, [pc, #88]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a13      	ldr	r2, [pc, #76]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe f892 	bl	8001614 <HAL_GetTick>
 80034f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f2:	e009      	b.n	8003508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f4:	f7fe f88e 	bl	8001614 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	73fb      	strb	r3, [r7, #15]
          break;
 8003506:	e005      	b.n	8003514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	4904      	ldr	r1, [pc, #16]	; (8003534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000

08003538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003546:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003552:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0203 	and.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d10d      	bne.n	800357e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
       ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800356a:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
       ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d047      	beq.n	800360e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
 8003582:	e044      	b.n	800360e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d018      	beq.n	80035be <RCCEx_PLLSAI2_Config+0x86>
 800358c:	2b03      	cmp	r3, #3
 800358e:	d825      	bhi.n	80035dc <RCCEx_PLLSAI2_Config+0xa4>
 8003590:	2b01      	cmp	r3, #1
 8003592:	d002      	beq.n	800359a <RCCEx_PLLSAI2_Config+0x62>
 8003594:	2b02      	cmp	r3, #2
 8003596:	d009      	beq.n	80035ac <RCCEx_PLLSAI2_Config+0x74>
 8003598:	e020      	b.n	80035dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800359a:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11d      	bne.n	80035e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035aa:	e01a      	b.n	80035e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035bc:	e013      	b.n	80035e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035be:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ca:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035da:	e006      	b.n	80035ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e004      	b.n	80035ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	430b      	orrs	r3, r1
 8003608:	4939      	ldr	r1, [pc, #228]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d167      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a35      	ldr	r2, [pc, #212]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fd fff8 	bl	8001614 <HAL_GetTick>
 8003624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003626:	e009      	b.n	800363c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003628:	f7fd fff4 	bl	8001614 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d902      	bls.n	800363c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	73fb      	strb	r3, [r7, #15]
        break;
 800363a:	e005      	b.n	8003648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ef      	bne.n	8003628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d14a      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d111      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003654:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	0211      	lsls	r1, r2, #8
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68d2      	ldr	r2, [r2, #12]
 800366a:	0912      	lsrs	r2, r2, #4
 800366c:	0452      	lsls	r2, r2, #17
 800366e:	430a      	orrs	r2, r1
 8003670:	491f      	ldr	r1, [pc, #124]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	614b      	str	r3, [r1, #20]
 8003676:	e011      	b.n	800369c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	0211      	lsls	r1, r2, #8
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6912      	ldr	r2, [r2, #16]
 800368e:	0852      	lsrs	r2, r2, #1
 8003690:	3a01      	subs	r2, #1
 8003692:	0652      	lsls	r2, r2, #25
 8003694:	430a      	orrs	r2, r1
 8003696:	4916      	ldr	r1, [pc, #88]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd ffb4 	bl	8001614 <HAL_GetTick>
 80036ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ae:	e009      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036b0:	f7fd ffb0 	bl	8001614 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	73fb      	strb	r3, [r7, #15]
          break;
 80036c2:	e005      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e049      	b.n	800379a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f841 	bl	80037a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f000 f9f8 	bl	8003b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04f      	b.n	8003870 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_TIM_Base_Start_IT+0xc4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01d      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d018      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_TIM_Base_Start_IT+0xc8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_TIM_Base_Start_IT+0xcc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_TIM_Base_Start_IT+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_TIM_Base_Start_IT+0xd4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_TIM_Base_Start_IT+0x76>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_TIM_Base_Start_IT+0xd8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d115      	bne.n	800385a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_TIM_Base_Start_IT+0xdc>)
 8003836:	4013      	ands	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b06      	cmp	r3, #6
 800383e:	d015      	beq.n	800386c <HAL_TIM_Base_Start_IT+0xb4>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d011      	beq.n	800386c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	e008      	b.n	800386c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e000      	b.n	800386e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40013400 	.word	0x40013400
 8003890:	40014000 	.word	0x40014000
 8003894:	00010007 	.word	0x00010007

08003898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0202 	mvn.w	r2, #2
 80038c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f905 	bl	8003aea <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8f7 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f908 	bl	8003afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0204 	mvn.w	r2, #4
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8db 	bl	8003aea <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8cd 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8de 	bl	8003afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d122      	bne.n	800399c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d11b      	bne.n	800399c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0208 	mvn.w	r2, #8
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8b1 	bl	8003aea <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8a3 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8b4 	bl	8003afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0210 	mvn.w	r2, #16
 80039c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2208      	movs	r2, #8
 80039c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f887 	bl	8003aea <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f879 	bl	8003ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f88a 	bl	8003afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0201 	mvn.w	r2, #1
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fc ff62 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b80      	cmp	r3, #128	; 0x80
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f914 	bl	8003c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f907 	bl	8003c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d107      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f838 	bl	8003b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d10e      	bne.n	8003ace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d107      	bne.n	8003ace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f06f 0220 	mvn.w	r2, #32
 8003ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8c7 	bl	8003c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <TIM_Base_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d00f      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <TIM_Base_SetConfig+0x118>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3c      	ldr	r2, [pc, #240]	; (8003c44 <TIM_Base_SetConfig+0x11c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3b      	ldr	r2, [pc, #236]	; (8003c48 <TIM_Base_SetConfig+0x120>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <TIM_Base_SetConfig+0x124>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2f      	ldr	r2, [pc, #188]	; (8003c3c <TIM_Base_SetConfig+0x114>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <TIM_Base_SetConfig+0x118>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <TIM_Base_SetConfig+0x11c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <TIM_Base_SetConfig+0x120>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <TIM_Base_SetConfig+0x124>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <TIM_Base_SetConfig+0x128>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <TIM_Base_SetConfig+0x130>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <TIM_Base_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <TIM_Base_SetConfig+0x124>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <TIM_Base_SetConfig+0x128>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <TIM_Base_SetConfig+0x12c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0xf8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <TIM_Base_SetConfig+0x130>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e040      	b.n	8003d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fe50 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fc1c 	bl	8004514 <UART_SetConfig>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fe9a 	bl	8004a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 ff21 	bl	8004b6c <UART_CheckIdleState>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	f040 8082 	bne.w	8003e52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Transmit+0x26>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07a      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x38>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e073      	b.n	8003e54 <HAL_UART_Transmit+0x120>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d82:	f7fd fc47 	bl	8001614 <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d108      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dc4:	e02d      	b.n	8003e22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 ff14 	bl	8004bfe <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e039      	b.n	8003e54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	b292      	uxth	r2, r2
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b292      	uxth	r2, r2
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1cb      	bne.n	8003dc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fee0 	bl	8004bfe <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e005      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d166      	bne.n	8003f40 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_Transmit_DMA+0x22>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e05f      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit_DMA+0x34>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e058      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xe6>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	; 0x21
 8003eba:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02b      	beq.n	8003f1c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <HAL_UART_Transmit_DMA+0xf0>)
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_UART_Transmit_DMA+0xf4>)
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <HAL_UART_Transmit_DMA+0xf8>)
 8003eda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	4619      	mov	r1, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3328      	adds	r3, #40	; 0x28
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	f7fd fd32 	bl	8001960 <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2210      	movs	r2, #16
 8003f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e012      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f3a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08004e59 	.word	0x08004e59
 8003f50:	08004ead 	.word	0x08004ead
 8003f54:	08004f99 	.word	0x08004f99

08003f58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d131      	bne.n	8003fd2 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Receive_DMA+0x22>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02a      	b.n	8003fd4 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Receive_DMA+0x34>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e023      	b.n	8003fd4 <HAL_UART_Receive_DMA+0x7c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <HAL_UART_Receive_DMA+0x84>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fc0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fe95 	bl	8004cf8 <UART_Start_Receive_DMA>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40008000 	.word	0x40008000

08003fe0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fec:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d127      	bne.n	8004052 <HAL_UART_DMAStop+0x72>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d124      	bne.n	8004052 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004016:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd fcfb 	bl	8001a20 <HAL_DMA_Abort>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd fe21 	bl	8001c7c <HAL_DMA_GetError>
 800403a:	4603      	mov	r3, r0
 800403c:	2b20      	cmp	r3, #32
 800403e:	d105      	bne.n	800404c <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2210      	movs	r2, #16
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e032      	b.n	80040b2 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 febf 	bl	8004dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d127      	bne.n	80040b0 <HAL_UART_DMAStop+0xd0>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b22      	cmp	r3, #34	; 0x22
 8004064:	d124      	bne.n	80040b0 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	2b00      	cmp	r3, #0
 800407c:	d015      	beq.n	80040aa <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fccc 	bl	8001a20 <HAL_DMA_Abort>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fdf2 	bl	8001c7c <HAL_DMA_GetError>
 8004098:	4603      	mov	r3, r0
 800409a:	2b20      	cmp	r3, #32
 800409c:	d105      	bne.n	80040aa <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2210      	movs	r2, #16
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e003      	b.n	80040b2 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fea5 	bl	8004dfa <UART_EndRxTransfer>
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f640 030f 	movw	r3, #2063	; 0x80f
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d113      	bne.n	8004114 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 81ce 	beq.w	80044a6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
      }
      return;
 8004112:	e1c8      	b.n	80044a6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80e3 	beq.w	80042e2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4ba6      	ldr	r3, [pc, #664]	; (80043c4 <HAL_UART_IRQHandler+0x308>)
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80d8 	beq.w	80042e2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_UART_IRQHandler+0xa2>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2201      	movs	r2, #1
 800414c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_UART_IRQHandler+0xce>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2202      	movs	r2, #2
 8004178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <HAL_UART_IRQHandler+0xfa>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2204      	movs	r2, #4
 80041a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ac:	f043 0202 	orr.w	r2, r3, #2
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2208      	movs	r2, #8
 80041da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	f043 0208 	orr.w	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_UART_IRQHandler+0x15e>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8142 	beq.w	80044aa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00c      	beq.n	800424a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004250:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d004      	beq.n	800426a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004266:	2b00      	cmp	r3, #0
 8004268:	d031      	beq.n	80042ce <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fdc5 	bl	8004dfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d123      	bne.n	80042c6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a4b      	ldr	r2, [pc, #300]	; (80043c8 <HAL_UART_IRQHandler+0x30c>)
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fbfa 	bl	8001a9c <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00f      	b.n	80042de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f912 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00b      	b.n	80042de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f90e 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e007      	b.n	80042de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f90a 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042dc:	e0e5      	b.n	80044aa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	bf00      	nop
    return;
 80042e0:	e0e3      	b.n	80044aa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	f040 80a9 	bne.w	800443e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a3 	beq.w	800443e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 809d 	beq.w	800443e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d158      	bne.n	80043cc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004324:	893b      	ldrh	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80c1 	beq.w	80044ae <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004332:	893a      	ldrh	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	f080 80ba 	bcs.w	80044ae <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12a      	bne.n	80043a8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004380:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0210 	bic.w	r2, r2, #16
 800439c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fb3c 	bl	8001a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f89d 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043c2:	e074      	b.n	80044ae <HAL_UART_IRQHandler+0x3f2>
 80043c4:	04000120 	.word	0x04000120
 80043c8:	08005015 	.word	0x08005015
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d063      	beq.n	80044b2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d060      	beq.n	80044b2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0210 	bic.w	r2, r2, #16
 8004430:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f860 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800443c:	e039      	b.n	80044b2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_UART_IRQHandler+0x3a8>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800445a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fe08 	bl	8005072 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004462:	e029      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
    }
    return;
 8004488:	e015      	b.n	80044b6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fdce 	bl	8005040 <UART_EndTransmit_IT>
    return;
 80044a4:	e008      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80044a6:	bf00      	nop
 80044a8:	e006      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80044b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	b5b0      	push	{r4, r5, r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4bad      	ldr	r3, [pc, #692]	; (80047f4 <UART_SetConfig+0x2e0>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	430b      	orrs	r3, r1
 800454a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4aa2      	ldr	r2, [pc, #648]	; (80047f8 <UART_SetConfig+0x2e4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	4313      	orrs	r3, r2
 800457a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a99      	ldr	r2, [pc, #612]	; (80047fc <UART_SetConfig+0x2e8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d121      	bne.n	80045de <UART_SetConfig+0xca>
 800459a:	4b99      	ldr	r3, [pc, #612]	; (8004800 <UART_SetConfig+0x2ec>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d817      	bhi.n	80045d8 <UART_SetConfig+0xc4>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x9c>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045c7 	.word	0x080045c7
 80045bc:	080045d3 	.word	0x080045d3
 80045c0:	2301      	movs	r3, #1
 80045c2:	76fb      	strb	r3, [r7, #27]
 80045c4:	e0e7      	b.n	8004796 <UART_SetConfig+0x282>
 80045c6:	2302      	movs	r3, #2
 80045c8:	76fb      	strb	r3, [r7, #27]
 80045ca:	e0e4      	b.n	8004796 <UART_SetConfig+0x282>
 80045cc:	2304      	movs	r3, #4
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	e0e1      	b.n	8004796 <UART_SetConfig+0x282>
 80045d2:	2308      	movs	r3, #8
 80045d4:	76fb      	strb	r3, [r7, #27]
 80045d6:	e0de      	b.n	8004796 <UART_SetConfig+0x282>
 80045d8:	2310      	movs	r3, #16
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e0db      	b.n	8004796 <UART_SetConfig+0x282>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a88      	ldr	r2, [pc, #544]	; (8004804 <UART_SetConfig+0x2f0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d132      	bne.n	800464e <UART_SetConfig+0x13a>
 80045e8:	4b85      	ldr	r3, [pc, #532]	; (8004800 <UART_SetConfig+0x2ec>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d828      	bhi.n	8004648 <UART_SetConfig+0x134>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0xe8>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004649 	.word	0x08004649
 8004604:	08004649 	.word	0x08004649
 8004608:	08004649 	.word	0x08004649
 800460c:	0800463d 	.word	0x0800463d
 8004610:	08004649 	.word	0x08004649
 8004614:	08004649 	.word	0x08004649
 8004618:	08004649 	.word	0x08004649
 800461c:	08004637 	.word	0x08004637
 8004620:	08004649 	.word	0x08004649
 8004624:	08004649 	.word	0x08004649
 8004628:	08004649 	.word	0x08004649
 800462c:	08004643 	.word	0x08004643
 8004630:	2300      	movs	r3, #0
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	e0af      	b.n	8004796 <UART_SetConfig+0x282>
 8004636:	2302      	movs	r3, #2
 8004638:	76fb      	strb	r3, [r7, #27]
 800463a:	e0ac      	b.n	8004796 <UART_SetConfig+0x282>
 800463c:	2304      	movs	r3, #4
 800463e:	76fb      	strb	r3, [r7, #27]
 8004640:	e0a9      	b.n	8004796 <UART_SetConfig+0x282>
 8004642:	2308      	movs	r3, #8
 8004644:	76fb      	strb	r3, [r7, #27]
 8004646:	e0a6      	b.n	8004796 <UART_SetConfig+0x282>
 8004648:	2310      	movs	r3, #16
 800464a:	76fb      	strb	r3, [r7, #27]
 800464c:	e0a3      	b.n	8004796 <UART_SetConfig+0x282>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6d      	ldr	r2, [pc, #436]	; (8004808 <UART_SetConfig+0x2f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d120      	bne.n	800469a <UART_SetConfig+0x186>
 8004658:	4b69      	ldr	r3, [pc, #420]	; (8004800 <UART_SetConfig+0x2ec>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004662:	2b30      	cmp	r3, #48	; 0x30
 8004664:	d013      	beq.n	800468e <UART_SetConfig+0x17a>
 8004666:	2b30      	cmp	r3, #48	; 0x30
 8004668:	d814      	bhi.n	8004694 <UART_SetConfig+0x180>
 800466a:	2b20      	cmp	r3, #32
 800466c:	d009      	beq.n	8004682 <UART_SetConfig+0x16e>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d810      	bhi.n	8004694 <UART_SetConfig+0x180>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <UART_SetConfig+0x168>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d006      	beq.n	8004688 <UART_SetConfig+0x174>
 800467a:	e00b      	b.n	8004694 <UART_SetConfig+0x180>
 800467c:	2300      	movs	r3, #0
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e089      	b.n	8004796 <UART_SetConfig+0x282>
 8004682:	2302      	movs	r3, #2
 8004684:	76fb      	strb	r3, [r7, #27]
 8004686:	e086      	b.n	8004796 <UART_SetConfig+0x282>
 8004688:	2304      	movs	r3, #4
 800468a:	76fb      	strb	r3, [r7, #27]
 800468c:	e083      	b.n	8004796 <UART_SetConfig+0x282>
 800468e:	2308      	movs	r3, #8
 8004690:	76fb      	strb	r3, [r7, #27]
 8004692:	e080      	b.n	8004796 <UART_SetConfig+0x282>
 8004694:	2310      	movs	r3, #16
 8004696:	76fb      	strb	r3, [r7, #27]
 8004698:	e07d      	b.n	8004796 <UART_SetConfig+0x282>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a5b      	ldr	r2, [pc, #364]	; (800480c <UART_SetConfig+0x2f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <UART_SetConfig+0x1d2>
 80046a4:	4b56      	ldr	r3, [pc, #344]	; (8004800 <UART_SetConfig+0x2ec>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ae:	2bc0      	cmp	r3, #192	; 0xc0
 80046b0:	d013      	beq.n	80046da <UART_SetConfig+0x1c6>
 80046b2:	2bc0      	cmp	r3, #192	; 0xc0
 80046b4:	d814      	bhi.n	80046e0 <UART_SetConfig+0x1cc>
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d009      	beq.n	80046ce <UART_SetConfig+0x1ba>
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d810      	bhi.n	80046e0 <UART_SetConfig+0x1cc>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <UART_SetConfig+0x1b4>
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d006      	beq.n	80046d4 <UART_SetConfig+0x1c0>
 80046c6:	e00b      	b.n	80046e0 <UART_SetConfig+0x1cc>
 80046c8:	2300      	movs	r3, #0
 80046ca:	76fb      	strb	r3, [r7, #27]
 80046cc:	e063      	b.n	8004796 <UART_SetConfig+0x282>
 80046ce:	2302      	movs	r3, #2
 80046d0:	76fb      	strb	r3, [r7, #27]
 80046d2:	e060      	b.n	8004796 <UART_SetConfig+0x282>
 80046d4:	2304      	movs	r3, #4
 80046d6:	76fb      	strb	r3, [r7, #27]
 80046d8:	e05d      	b.n	8004796 <UART_SetConfig+0x282>
 80046da:	2308      	movs	r3, #8
 80046dc:	76fb      	strb	r3, [r7, #27]
 80046de:	e05a      	b.n	8004796 <UART_SetConfig+0x282>
 80046e0:	2310      	movs	r3, #16
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e057      	b.n	8004796 <UART_SetConfig+0x282>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a49      	ldr	r2, [pc, #292]	; (8004810 <UART_SetConfig+0x2fc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d125      	bne.n	800473c <UART_SetConfig+0x228>
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <UART_SetConfig+0x2ec>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fe:	d017      	beq.n	8004730 <UART_SetConfig+0x21c>
 8004700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004704:	d817      	bhi.n	8004736 <UART_SetConfig+0x222>
 8004706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470a:	d00b      	beq.n	8004724 <UART_SetConfig+0x210>
 800470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004710:	d811      	bhi.n	8004736 <UART_SetConfig+0x222>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <UART_SetConfig+0x20a>
 8004716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471a:	d006      	beq.n	800472a <UART_SetConfig+0x216>
 800471c:	e00b      	b.n	8004736 <UART_SetConfig+0x222>
 800471e:	2300      	movs	r3, #0
 8004720:	76fb      	strb	r3, [r7, #27]
 8004722:	e038      	b.n	8004796 <UART_SetConfig+0x282>
 8004724:	2302      	movs	r3, #2
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e035      	b.n	8004796 <UART_SetConfig+0x282>
 800472a:	2304      	movs	r3, #4
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e032      	b.n	8004796 <UART_SetConfig+0x282>
 8004730:	2308      	movs	r3, #8
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e02f      	b.n	8004796 <UART_SetConfig+0x282>
 8004736:	2310      	movs	r3, #16
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e02c      	b.n	8004796 <UART_SetConfig+0x282>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <UART_SetConfig+0x2e4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d125      	bne.n	8004792 <UART_SetConfig+0x27e>
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <UART_SetConfig+0x2ec>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004754:	d017      	beq.n	8004786 <UART_SetConfig+0x272>
 8004756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800475a:	d817      	bhi.n	800478c <UART_SetConfig+0x278>
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004760:	d00b      	beq.n	800477a <UART_SetConfig+0x266>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004766:	d811      	bhi.n	800478c <UART_SetConfig+0x278>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <UART_SetConfig+0x260>
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004770:	d006      	beq.n	8004780 <UART_SetConfig+0x26c>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x278>
 8004774:	2300      	movs	r3, #0
 8004776:	76fb      	strb	r3, [r7, #27]
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0x282>
 800477a:	2302      	movs	r3, #2
 800477c:	76fb      	strb	r3, [r7, #27]
 800477e:	e00a      	b.n	8004796 <UART_SetConfig+0x282>
 8004780:	2304      	movs	r3, #4
 8004782:	76fb      	strb	r3, [r7, #27]
 8004784:	e007      	b.n	8004796 <UART_SetConfig+0x282>
 8004786:	2308      	movs	r3, #8
 8004788:	76fb      	strb	r3, [r7, #27]
 800478a:	e004      	b.n	8004796 <UART_SetConfig+0x282>
 800478c:	2310      	movs	r3, #16
 800478e:	76fb      	strb	r3, [r7, #27]
 8004790:	e001      	b.n	8004796 <UART_SetConfig+0x282>
 8004792:	2310      	movs	r3, #16
 8004794:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <UART_SetConfig+0x2e4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	f040 8087 	bne.w	80048b0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d837      	bhi.n	8004818 <UART_SetConfig+0x304>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x29c>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	08004819 	.word	0x08004819
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	08004819 	.word	0x08004819
 80047c0:	080047e3 	.word	0x080047e3
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004819 	.word	0x08004819
 80047cc:	08004819 	.word	0x08004819
 80047d0:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe fa14 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80047d8:	6178      	str	r0, [r7, #20]
        break;
 80047da:	e022      	b.n	8004822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <UART_SetConfig+0x300>)
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e01f      	b.n	8004822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe f975 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 80047e6:	6178      	str	r0, [r7, #20]
        break;
 80047e8:	e01b      	b.n	8004822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	617b      	str	r3, [r7, #20]
        break;
 80047f0:	e017      	b.n	8004822 <UART_SetConfig+0x30e>
 80047f2:	bf00      	nop
 80047f4:	efff69f3 	.word	0xefff69f3
 80047f8:	40008000 	.word	0x40008000
 80047fc:	40013800 	.word	0x40013800
 8004800:	40021000 	.word	0x40021000
 8004804:	40004400 	.word	0x40004400
 8004808:	40004800 	.word	0x40004800
 800480c:	40004c00 	.word	0x40004c00
 8004810:	40005000 	.word	0x40005000
 8004814:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	76bb      	strb	r3, [r7, #26]
        break;
 8004820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80f1 	beq.w	8004a0c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	429a      	cmp	r2, r3
 8004838:	d305      	bcc.n	8004846 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d902      	bls.n	800484c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76bb      	strb	r3, [r7, #26]
 800484a:	e0df      	b.n	8004a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4618      	mov	r0, r3
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	020b      	lsls	r3, r1, #8
 800485e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004862:	0202      	lsls	r2, r0, #8
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6849      	ldr	r1, [r1, #4]
 8004868:	0849      	lsrs	r1, r1, #1
 800486a:	4608      	mov	r0, r1
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	1814      	adds	r4, r2, r0
 8004872:	eb43 0501 	adc.w	r5, r3, r1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fcfc 	bl	8000280 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d308      	bcc.n	80048aa <UART_SetConfig+0x396>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d204      	bcs.n	80048aa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e0b0      	b.n	8004a0c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	76bb      	strb	r3, [r7, #26]
 80048ae:	e0ad      	b.n	8004a0c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d15c      	bne.n	8004974 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80048ba:	7efb      	ldrb	r3, [r7, #27]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d828      	bhi.n	8004912 <UART_SetConfig+0x3fe>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x3b4>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048ed 	.word	0x080048ed
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004913 	.word	0x08004913
 80048d8:	08004903 	.word	0x08004903
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe f988 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80048f0:	6178      	str	r0, [r7, #20]
        break;
 80048f2:	e013      	b.n	800491c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe f99a 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 80048f8:	6178      	str	r0, [r7, #20]
        break;
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <UART_SetConfig+0x510>)
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e00c      	b.n	800491c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fe f8e5 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8004906:	6178      	str	r0, [r7, #20]
        break;
 8004908:	e008      	b.n	800491c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	617b      	str	r3, [r7, #20]
        break;
 8004910:	e004      	b.n	800491c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
        break;
 800491a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d074      	beq.n	8004a0c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	005a      	lsls	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d916      	bls.n	800496e <UART_SetConfig+0x45a>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d212      	bcs.n	800496e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f023 030f 	bic.w	r3, r3, #15
 8004950:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	b29a      	uxth	r2, r3
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	4313      	orrs	r3, r2
 8004962:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	89fa      	ldrh	r2, [r7, #14]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e04e      	b.n	8004a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	76bb      	strb	r3, [r7, #26]
 8004972:	e04b      	b.n	8004a0c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004974:	7efb      	ldrb	r3, [r7, #27]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d827      	bhi.n	80049ca <UART_SetConfig+0x4b6>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0x46c>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049cb 	.word	0x080049cb
 80049a0:	080049c3 	.word	0x080049c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fe f92c 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80049a8:	6178      	str	r0, [r7, #20]
        break;
 80049aa:	e013      	b.n	80049d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe f93e 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 80049b0:	6178      	str	r0, [r7, #20]
        break;
 80049b2:	e00f      	b.n	80049d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <UART_SetConfig+0x510>)
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	e00c      	b.n	80049d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ba:	f7fe f889 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 80049be:	6178      	str	r0, [r7, #20]
        break;
 80049c0:	e008      	b.n	80049d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	617b      	str	r3, [r7, #20]
        break;
 80049c8:	e004      	b.n	80049d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	76bb      	strb	r3, [r7, #26]
        break;
 80049d2:	bf00      	nop
    }

    if (pclk != 0U)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	085a      	lsrs	r2, r3, #1
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	441a      	add	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d908      	bls.n	8004a08 <UART_SetConfig+0x4f4>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d204      	bcs.n	8004a08 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	e001      	b.n	8004a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a18:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d10a      	bne.n	8004b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b7c:	f7fc fd4a 	bl	8001614 <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d10e      	bne.n	8004bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f82d 	bl	8004bfe <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e023      	b.n	8004bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d10e      	bne.n	8004bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f817 	bl	8004bfe <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e00d      	b.n	8004bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0e:	e05e      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d05a      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fc fcfc 	bl	8001614 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11b      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e043      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02c      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d124      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c9c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d091      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2222      	movs	r2, #34	; 0x22
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02b      	beq.n	8004d82 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <UART_Start_Receive_DMA+0xcc>)
 8004d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <UART_Start_Receive_DMA+0xd0>)
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <UART_Start_Receive_DMA+0xd4>)
 8004d40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	2200      	movs	r2, #0
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	4619      	mov	r1, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	f7fc fdff 	bl	8001960 <HAL_DMA_Start_IT>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e01c      	b.n	8004dbc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08004ec9 	.word	0x08004ec9
 8004dc8:	08004f61 	.word	0x08004f61
 8004dcc:	08004f99 	.word	0x08004f99

08004dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004de6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0210 	bic.w	r2, r2, #16
 8004e38:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d114      	bne.n	8004e9e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e8a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e9c:	e002      	b.n	8004ea4 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7fc fadc 	bl	800145c <HAL_UART_TxCpltCallback>
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fb00 	bl	80044c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d12a      	bne.n	8004f3a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0210 	bic.w	r2, r2, #16
 8004f38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f48:	4619      	mov	r1, r3
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff fad6 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f50:	e002      	b.n	8004f58 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fc fa68 	bl	8001428 <HAL_UART_RxCpltCallback>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d109      	bne.n	8004f8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4619      	mov	r1, r3
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff faba 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f88:	e002      	b.n	8004f90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff faa2 	bl	80044d4 <HAL_UART_RxHalfCpltCallback>
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004faa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d109      	bne.n	8004fd4 <UART_DMAError+0x3c>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b21      	cmp	r3, #33	; 0x21
 8004fc4:	d106      	bne.n	8004fd4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f7ff fefe 	bl	8004dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d109      	bne.n	8004ff6 <UART_DMAError+0x5e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b22      	cmp	r3, #34	; 0x22
 8004fe6:	d106      	bne.n	8004ff6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004ff0:	6978      	ldr	r0, [r7, #20]
 8004ff2:	f7ff ff02 	bl	8004dfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffc:	f043 0210 	orr.w	r2, r3, #16
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff fa6e 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff fa58 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fc f9f9 	bl	800145c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <__NVIC_SetPriority>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	6039      	str	r1, [r7, #0]
 8005092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005098:	2b00      	cmp	r3, #0
 800509a:	db0a      	blt.n	80050b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	490c      	ldr	r1, [pc, #48]	; (80050d4 <__NVIC_SetPriority+0x4c>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	0112      	lsls	r2, r2, #4
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050b0:	e00a      	b.n	80050c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4908      	ldr	r1, [pc, #32]	; (80050d8 <__NVIC_SetPriority+0x50>)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3b04      	subs	r3, #4
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	440b      	add	r3, r1
 80050c6:	761a      	strb	r2, [r3, #24]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000e100 	.word	0xe000e100
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <SysTick_Handler+0x1c>)
 80050e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050e4:	f001 fcfe 	bl	8006ae4 <xTaskGetSchedulerState>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d001      	beq.n	80050f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050ee:	f002 fae3 	bl	80076b8 <xPortSysTickHandler>
  }
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	e000e010 	.word	0xe000e010

080050fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005100:	2100      	movs	r1, #0
 8005102:	f06f 0004 	mvn.w	r0, #4
 8005106:	f7ff ffbf 	bl	8005088 <__NVIC_SetPriority>
#endif
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005116:	f3ef 8305 	mrs	r3, IPSR
 800511a:	603b      	str	r3, [r7, #0]
  return(result);
 800511c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005122:	f06f 0305 	mvn.w	r3, #5
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	e00c      	b.n	8005144 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <osKernelInitialize+0x44>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <osKernelInitialize+0x44>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e002      	b.n	8005144 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005144:	687b      	ldr	r3, [r7, #4]
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000094 	.word	0x20000094

08005158 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515e:	f3ef 8305 	mrs	r3, IPSR
 8005162:	603b      	str	r3, [r7, #0]
  return(result);
 8005164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <osKernelStart+0x1a>
    stat = osErrorISR;
 800516a:	f06f 0305 	mvn.w	r3, #5
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	e010      	b.n	8005194 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005172:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <osKernelStart+0x48>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d109      	bne.n	800518e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800517a:	f7ff ffbf 	bl	80050fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <osKernelStart+0x48>)
 8005180:	2202      	movs	r2, #2
 8005182:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005184:	f001 f866 	bl	8006254 <vTaskStartScheduler>
      stat = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e002      	b.n	8005194 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005194:	687b      	ldr	r3, [r7, #4]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000094 	.word	0x20000094

080051a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af04      	add	r7, sp, #16
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b4:	f3ef 8305 	mrs	r3, IPSR
 80051b8:	617b      	str	r3, [r7, #20]
  return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d17e      	bne.n	80052be <osThreadNew+0x11a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d07b      	beq.n	80052be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051ca:	2318      	movs	r3, #24
 80051cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d045      	beq.n	800526a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <osThreadNew+0x48>
        name = attr->name;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <osThreadNew+0x6e>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b38      	cmp	r3, #56	; 0x38
 8005204:	d805      	bhi.n	8005212 <osThreadNew+0x6e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <osThreadNew+0x72>
        return (NULL);
 8005212:	2300      	movs	r3, #0
 8005214:	e054      	b.n	80052c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00e      	beq.n	800524c <osThreadNew+0xa8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b5b      	cmp	r3, #91	; 0x5b
 8005234:	d90a      	bls.n	800524c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <osThreadNew+0xa8>
        mem = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e010      	b.n	800526e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <osThreadNew+0xca>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <osThreadNew+0xca>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <osThreadNew+0xca>
          mem = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e001      	b.n	800526e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d110      	bne.n	8005296 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800527c:	9202      	str	r2, [sp, #8]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fe0c 	bl	8005ea8 <xTaskCreateStatic>
 8005290:	4603      	mov	r3, r0
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e013      	b.n	80052be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d110      	bne.n	80052be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	f107 0310 	add.w	r3, r7, #16
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fe57 	bl	8005f62 <xTaskCreate>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d001      	beq.n	80052be <osThreadNew+0x11a>
            hTask = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052be:	693b      	ldr	r3, [r7, #16]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d0:	f3ef 8305 	mrs	r3, IPSR
 80052d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <osDelay+0x1c>
    stat = osErrorISR;
 80052dc:	f06f 0305 	mvn.w	r3, #5
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e007      	b.n	80052f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 ff7c 	bl	80061ec <vTaskDelay>
    }
  }

  return (stat);
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <vApplicationGetIdleTaskMemory+0x2c>)
 8005310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a06      	ldr	r2, [pc, #24]	; (8005330 <vApplicationGetIdleTaskMemory+0x30>)
 8005316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000098 	.word	0x20000098
 8005330:	200000f4 	.word	0x200000f4

08005334 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <vApplicationGetTimerTaskMemory+0x2c>)
 8005344:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a06      	ldr	r2, [pc, #24]	; (8005364 <vApplicationGetTimerTaskMemory+0x30>)
 800534a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	200002f4 	.word	0x200002f4
 8005364:	20000350 	.word	0x20000350

08005368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f103 0208 	add.w	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f103 0208 	add.w	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 0208 	add.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005420:	d103      	bne.n	800542a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e00c      	b.n	8005444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3308      	adds	r3, #8
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e002      	b.n	8005438 <vListInsert+0x2e>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	d2f6      	bcs.n	8005432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6892      	ldr	r2, [r2, #8]
 8005492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6852      	ldr	r2, [r2, #4]
 800549c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d103      	bne.n	80054b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054fa:	f002 f84b 	bl	8007594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	441a      	add	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	3b01      	subs	r3, #1
 800552c:	68f9      	ldr	r1, [r7, #12]
 800552e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d114      	bne.n	800557a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01a      	beq.n	800558e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3310      	adds	r3, #16
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f903 	bl	8006768 <xTaskRemoveFromEventList>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <xQueueGenericReset+0xcc>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	e009      	b.n	800558e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3310      	adds	r3, #16
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fef2 	bl	8005368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3324      	adds	r3, #36	; 0x24
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff feed 	bl	8005368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f002 f831 	bl	80075f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	; 0x38
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <xQueueGenericCreateStatic+0x52>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <xQueueGenericCreateStatic+0x56>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericCreateStatic+0x58>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	623b      	str	r3, [r7, #32]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <xQueueGenericCreateStatic+0x7e>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <xQueueGenericCreateStatic+0x82>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericCreateStatic+0x84>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	61fb      	str	r3, [r7, #28]
}
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800563e:	2350      	movs	r3, #80	; 0x50
 8005640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b50      	cmp	r3, #80	; 0x50
 8005646:	d00a      	beq.n	800565e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800565e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005672:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f805 	bl	8005690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005688:	4618      	mov	r0, r3
 800568a:	3730      	adds	r7, #48	; 0x30
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056be:	2101      	movs	r1, #1
 80056c0:	69b8      	ldr	r0, [r7, #24]
 80056c2:	f7ff ff05 	bl	80054d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericSend+0x32>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <xQueueGenericSend+0x40>
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <xQueueGenericSend+0x44>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <xQueueGenericSend+0x46>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueGenericSend+0x60>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d103      	bne.n	8005746 <xQueueGenericSend+0x6e>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <xQueueGenericSend+0x72>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueGenericSend+0x74>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueGenericSend+0x8e>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	623b      	str	r3, [r7, #32]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005766:	f001 f9bd 	bl	8006ae4 <xTaskGetSchedulerState>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <xQueueGenericSend+0x9e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <xQueueGenericSend+0xa2>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <xQueueGenericSend+0xa4>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xQueueGenericSend+0xbe>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61fb      	str	r3, [r7, #28]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005796:	f001 fefd 	bl	8007594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <xQueueGenericSend+0xd4>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d129      	bne.n	8005800 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b2:	f000 fa0b 	bl	8005bcc <prvCopyDataToQueue>
 80057b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ffcf 	bl	8006768 <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <xQueueGenericSend+0x1f8>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e00a      	b.n	80057f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <xQueueGenericSend+0x1f8>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f8:	f001 fefc 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e063      	b.n	80058c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005806:	f001 fef5 	bl	80075f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800580a:	2300      	movs	r3, #0
 800580c:	e05c      	b.n	80058c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	4618      	mov	r0, r3
 800581a:	f001 f809 	bl	8006830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005822:	f001 fee7 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005826:	f000 fd7b 	bl	8006320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582a:	f001 feb3 	bl	8007594 <vPortEnterCritical>
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583a:	d103      	bne.n	8005844 <xQueueGenericSend+0x16c>
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005850:	d103      	bne.n	800585a <xQueueGenericSend+0x182>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585a:	f001 fecb 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585e:	1d3a      	adds	r2, r7, #4
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fff8 	bl	800685c <xTaskCheckForTimeOut>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d124      	bne.n	80058bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005874:	f000 faa2 	bl	8005dbc <prvIsQueueFull>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	3310      	adds	r3, #16
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 ff1e 	bl	80066c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800588c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800588e:	f000 fa2d 	bl	8005cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005892:	f000 fd53 	bl	800633c <xTaskResumeAll>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f af7c 	bne.w	8005796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <xQueueGenericSend+0x1f8>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	e772      	b.n	8005796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 fa1b 	bl	8005cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b6:	f000 fd41 	bl	800633c <xTaskResumeAll>
 80058ba:	e76c      	b.n	8005796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058be:	f000 fa15 	bl	8005cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c2:	f000 fd3b 	bl	800633c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3738      	adds	r7, #56	; 0x38
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b090      	sub	sp, #64	; 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <xQueueGenericSendFromISR+0x3c>
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <xQueueGenericSendFromISR+0x40>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <xQueueGenericSendFromISR+0x42>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d103      	bne.n	800593e <xQueueGenericSendFromISR+0x6a>
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <xQueueGenericSendFromISR+0x6e>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xQueueGenericSendFromISR+0x70>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	623b      	str	r3, [r7, #32]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800595e:	f001 fefb 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005962:	f3ef 8211 	mrs	r2, BASEPRI
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	61fa      	str	r2, [r7, #28]
 8005978:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800597a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <xQueueGenericSendFromISR+0xbc>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d12f      	bne.n	80059f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059a6:	f000 f911 	bl	8005bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b2:	d112      	bne.n	80059da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	3324      	adds	r3, #36	; 0x24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fed1 	bl	8006768 <xTaskRemoveFromEventList>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e007      	b.n	80059ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059de:	3301      	adds	r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	b25a      	sxtb	r2, r3
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059ea:	2301      	movs	r3, #1
 80059ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059ee:	e001      	b.n	80059f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3740      	adds	r7, #64	; 0x40
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <xQueueReceive+0x30>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	623b      	str	r3, [r7, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0x3e>
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueReceive+0x42>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueReceive+0x44>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueReceive+0x5e>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61fb      	str	r3, [r7, #28]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a6a:	f001 f83b 	bl	8006ae4 <xTaskGetSchedulerState>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <xQueueReceive+0x6e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <xQueueReceive+0x72>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueReceive+0x74>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <xQueueReceive+0x8e>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61bb      	str	r3, [r7, #24]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a9a:	f001 fd7b 	bl	8007594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01f      	beq.n	8005aea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aae:	f000 f8f7 	bl	8005ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00f      	beq.n	8005ae2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	3310      	adds	r3, #16
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fe4e 	bl	8006768 <xTaskRemoveFromEventList>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <xQueueReceive+0x1bc>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ae2:	f001 fd87 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e069      	b.n	8005bbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005af0:	f001 fd80 	bl	80075f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e062      	b.n	8005bbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005afe:	f107 0310 	add.w	r3, r7, #16
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fe94 	bl	8006830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b0c:	f001 fd72 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b10:	f000 fc06 	bl	8006320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b14:	f001 fd3e 	bl	8007594 <vPortEnterCritical>
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b24:	d103      	bne.n	8005b2e <xQueueReceive+0x122>
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b3a:	d103      	bne.n	8005b44 <xQueueReceive+0x138>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b44:	f001 fd56 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b48:	1d3a      	adds	r2, r7, #4
 8005b4a:	f107 0310 	add.w	r3, r7, #16
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fe83 	bl	800685c <xTaskCheckForTimeOut>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d123      	bne.n	8005ba4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5e:	f000 f917 	bl	8005d90 <prvIsQueueEmpty>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d017      	beq.n	8005b98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	3324      	adds	r3, #36	; 0x24
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fda9 	bl	80066c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b78:	f000 f8b8 	bl	8005cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b7c:	f000 fbde 	bl	800633c <xTaskResumeAll>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d189      	bne.n	8005a9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <xQueueReceive+0x1bc>)
 8005b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	e780      	b.n	8005a9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f000 f8a7 	bl	8005cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b9e:	f000 fbcd 	bl	800633c <xTaskResumeAll>
 8005ba2:	e77a      	b.n	8005a9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba6:	f000 f8a1 	bl	8005cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005baa:	f000 fbc7 	bl	800633c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb0:	f000 f8ee 	bl	8005d90 <prvIsQueueEmpty>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f43f af6f 	beq.w	8005a9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3730      	adds	r7, #48	; 0x30
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d14d      	bne.n	8005c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ff92 	bl	8006b20 <xTaskPriorityDisinherit>
 8005bfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	e043      	b.n	8005c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d119      	bne.n	8005c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6858      	ldr	r0, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	461a      	mov	r2, r3
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	f001 fff2 	bl	8007c00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	441a      	add	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d32b      	bcc.n	8005c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e026      	b.n	8005c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68d8      	ldr	r0, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	f001 ffd8 	bl	8007c00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	425b      	negs	r3, r3
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d207      	bcs.n	8005c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	425b      	negs	r3, r3
 8005c76:	441a      	add	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d105      	bne.n	8005c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c96:	697b      	ldr	r3, [r7, #20]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	441a      	add	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d303      	bcc.n	8005cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68d9      	ldr	r1, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6838      	ldr	r0, [r7, #0]
 8005ce0:	f001 ff8e 	bl	8007c00 <memcpy>
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf4:	f001 fc4e 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d00:	e011      	b.n	8005d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d012      	beq.n	8005d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3324      	adds	r3, #36	; 0x24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fd2a 	bl	8006768 <xTaskRemoveFromEventList>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1a:	f000 fe01 	bl	8006920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dce9      	bgt.n	8005d02 <prvUnlockQueue+0x16>
 8005d2e:	e000      	b.n	8005d32 <prvUnlockQueue+0x46>
					break;
 8005d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d3a:	f001 fc5b 	bl	80075f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d3e:	f001 fc29 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4a:	e011      	b.n	8005d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d012      	beq.n	8005d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3310      	adds	r3, #16
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fd05 	bl	8006768 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d64:	f000 fddc 	bl	8006920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dce9      	bgt.n	8005d4c <prvUnlockQueue+0x60>
 8005d78:	e000      	b.n	8005d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	22ff      	movs	r2, #255	; 0xff
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d84:	f001 fc36 	bl	80075f4 <vPortExitCritical>
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d98:	f001 fbfc 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e001      	b.n	8005dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f001 fc21 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc4:	f001 fbe6 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d102      	bne.n	8005dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e001      	b.n	8005dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dde:	f001 fc09 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e014      	b.n	8005e26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dfc:	4a0f      	ldr	r2, [pc, #60]	; (8005e3c <vQueueAddToRegistry+0x50>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e08:	490c      	ldr	r1, [pc, #48]	; (8005e3c <vQueueAddToRegistry+0x50>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <vQueueAddToRegistry+0x50>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e1e:	e006      	b.n	8005e2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b07      	cmp	r3, #7
 8005e2a:	d9e7      	bls.n	8005dfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	200023f8 	.word	0x200023f8

08005e40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e50:	f001 fba0 	bl	8007594 <vPortEnterCritical>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e5a:	b25b      	sxtb	r3, r3
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e60:	d103      	bne.n	8005e6a <vQueueWaitForMessageRestricted+0x2a>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e76:	d103      	bne.n	8005e80 <vQueueWaitForMessageRestricted+0x40>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e80:	f001 fbb8 	bl	80075f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	3324      	adds	r3, #36	; 0x24
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc3b 	bl	8006710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff ff26 	bl	8005cec <prvUnlockQueue>
	}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08e      	sub	sp, #56	; 0x38
 8005eac:	af04      	add	r7, sp, #16
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	623b      	str	r3, [r7, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xTaskCreateStatic+0x46>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	61fb      	str	r3, [r7, #28]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eee:	235c      	movs	r3, #92	; 0x5c
 8005ef0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ef6:	d00a      	beq.n	8005f0e <xTaskCreateStatic+0x66>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	61bb      	str	r3, [r7, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01e      	beq.n	8005f54 <xTaskCreateStatic+0xac>
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9303      	str	r3, [sp, #12]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	f107 0314 	add.w	r3, r7, #20
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f850 	bl	8005fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f4e:	f000 f8dd 	bl	800610c <prvAddNewTaskToReadyList>
 8005f52:	e001      	b.n	8005f58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f58:	697b      	ldr	r3, [r7, #20]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3728      	adds	r7, #40	; 0x28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b08c      	sub	sp, #48	; 0x30
 8005f66:	af04      	add	r7, sp, #16
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fc2e 	bl	80077d8 <pvPortMalloc>
 8005f7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f84:	205c      	movs	r0, #92	; 0x5c
 8005f86:	f001 fc27 	bl	80077d8 <pvPortMalloc>
 8005f8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
 8005f98:	e005      	b.n	8005fa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f001 fce8 	bl	8007970 <vPortFree>
 8005fa0:	e001      	b.n	8005fa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d017      	beq.n	8005fdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9303      	str	r3, [sp, #12]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	9302      	str	r3, [sp, #8]
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f80e 	bl	8005fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd0:	69f8      	ldr	r0, [r7, #28]
 8005fd2:	f000 f89b 	bl	800610c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e002      	b.n	8005fe2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	461a      	mov	r2, r3
 8006004:	21a5      	movs	r1, #165	; 0xa5
 8006006:	f001 fe09 	bl	8007c1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006014:	3b01      	subs	r3, #1
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	f023 0307 	bic.w	r3, r3, #7
 8006022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <prvInitialiseNewTask+0x58>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	617b      	str	r3, [r7, #20]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01f      	beq.n	800608a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	e012      	b.n	8006076 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	7819      	ldrb	r1, [r3, #0]
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	3334      	adds	r3, #52	; 0x34
 8006060:	460a      	mov	r2, r1
 8006062:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	d9e9      	bls.n	8006050 <prvInitialiseNewTask+0x64>
 800607c:	e000      	b.n	8006080 <prvInitialiseNewTask+0x94>
			{
				break;
 800607e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006088:	e003      	b.n	8006092 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	2b37      	cmp	r3, #55	; 0x37
 8006096:	d901      	bls.n	800609c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006098:	2337      	movs	r3, #55	; 0x37
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2200      	movs	r2, #0
 80060ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff f978 	bl	80053a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	3318      	adds	r3, #24
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f973 	bl	80053a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2200      	movs	r2, #0
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	68f9      	ldr	r1, [r7, #12]
 80060ea:	69b8      	ldr	r0, [r7, #24]
 80060ec:	f001 f928 	bl	8007340 <pxPortInitialiseStack>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006102:	bf00      	nop
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006114:	f001 fa3e 	bl	8007594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006122:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612a:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d110      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006138:	f000 fc16 	bl	8006968 <prvInitialiseTaskLists>
 800613c:	e00d      	b.n	800615a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d802      	bhi.n	800615a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006164:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <prvAddNewTaskToReadyList+0x74>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <prvAddNewTaskToReadyList+0xd8>)
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7ff f913 	bl	80053c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800619c:	f001 fa2a 	bl	80075f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d207      	bcs.n	80061c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvAddNewTaskToReadyList+0xdc>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000c24 	.word	0x20000c24
 80061d4:	20000750 	.word	0x20000750
 80061d8:	20000c30 	.word	0x20000c30
 80061dc:	20000c40 	.word	0x20000c40
 80061e0:	20000c2c 	.word	0x20000c2c
 80061e4:	20000754 	.word	0x20000754
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d017      	beq.n	800622e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <vTaskDelay+0x60>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <vTaskDelay+0x30>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800621c:	f000 f880 	bl	8006320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006220:	2100      	movs	r1, #0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fcea 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006228:	f000 f888 	bl	800633c <xTaskResumeAll>
 800622c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d107      	bne.n	8006244 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <vTaskDelay+0x64>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000c4c 	.word	0x20000c4c
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006262:	463a      	mov	r2, r7
 8006264:	1d39      	adds	r1, r7, #4
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff f848 	bl	8005300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	9202      	str	r2, [sp, #8]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	2300      	movs	r3, #0
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	460a      	mov	r2, r1
 8006282:	4921      	ldr	r1, [pc, #132]	; (8006308 <vTaskStartScheduler+0xb4>)
 8006284:	4821      	ldr	r0, [pc, #132]	; (800630c <vTaskStartScheduler+0xb8>)
 8006286:	f7ff fe0f 	bl	8005ea8 <xTaskCreateStatic>
 800628a:	4603      	mov	r3, r0
 800628c:	4a20      	ldr	r2, [pc, #128]	; (8006310 <vTaskStartScheduler+0xbc>)
 800628e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006290:	4b1f      	ldr	r3, [pc, #124]	; (8006310 <vTaskStartScheduler+0xbc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e001      	b.n	80062a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062a8:	f000 fcfc 	bl	8006ca4 <xTimerCreateTimerTask>
 80062ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d116      	bne.n	80062e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
}
 80062c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <vTaskStartScheduler+0xc0>)
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <vTaskStartScheduler+0xc4>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062d6:	4b11      	ldr	r3, [pc, #68]	; (800631c <vTaskStartScheduler+0xc8>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062dc:	f001 f8b8 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062e0:	e00e      	b.n	8006300 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e8:	d10a      	bne.n	8006300 <vTaskStartScheduler+0xac>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <vTaskStartScheduler+0xaa>
}
 8006300:	bf00      	nop
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	080090ac 	.word	0x080090ac
 800630c:	08006939 	.word	0x08006939
 8006310:	20000c48 	.word	0x20000c48
 8006314:	20000c44 	.word	0x20000c44
 8006318:	20000c30 	.word	0x20000c30
 800631c:	20000c28 	.word	0x20000c28

08006320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006324:	4b04      	ldr	r3, [pc, #16]	; (8006338 <vTaskSuspendAll+0x18>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	4a03      	ldr	r2, [pc, #12]	; (8006338 <vTaskSuspendAll+0x18>)
 800632c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800632e:	bf00      	nop
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	20000c4c 	.word	0x20000c4c

0800633c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800634a:	4b42      	ldr	r3, [pc, #264]	; (8006454 <xTaskResumeAll+0x118>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <xTaskResumeAll+0x2c>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	603b      	str	r3, [r7, #0]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006368:	f001 f914 	bl	8007594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800636c:	4b39      	ldr	r3, [pc, #228]	; (8006454 <xTaskResumeAll+0x118>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	4a38      	ldr	r2, [pc, #224]	; (8006454 <xTaskResumeAll+0x118>)
 8006374:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006376:	4b37      	ldr	r3, [pc, #220]	; (8006454 <xTaskResumeAll+0x118>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d162      	bne.n	8006444 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800637e:	4b36      	ldr	r3, [pc, #216]	; (8006458 <xTaskResumeAll+0x11c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d05e      	beq.n	8006444 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006386:	e02f      	b.n	80063e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006388:	4b34      	ldr	r3, [pc, #208]	; (800645c <xTaskResumeAll+0x120>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3318      	adds	r3, #24
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff f871 	bl	800547c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f86c 	bl	800547c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4b2d      	ldr	r3, [pc, #180]	; (8006460 <xTaskResumeAll+0x124>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <xTaskResumeAll+0x7c>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <xTaskResumeAll+0x124>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a27      	ldr	r2, [pc, #156]	; (8006464 <xTaskResumeAll+0x128>)
 80063c6:	441a      	add	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7fe fff7 	bl	80053c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	4b23      	ldr	r3, [pc, #140]	; (8006468 <xTaskResumeAll+0x12c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <xTaskResumeAll+0x130>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e8:	4b1c      	ldr	r3, [pc, #112]	; (800645c <xTaskResumeAll+0x120>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1cb      	bne.n	8006388 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063f6:	f000 fb55 	bl	8006aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <xTaskResumeAll+0x134>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d010      	beq.n	8006428 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006406:	f000 f847 	bl	8006498 <xTaskIncrementTick>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006410:	4b16      	ldr	r3, [pc, #88]	; (800646c <xTaskResumeAll+0x130>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3b01      	subs	r3, #1
 800641a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f1      	bne.n	8006406 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <xTaskResumeAll+0x134>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006428:	4b10      	ldr	r3, [pc, #64]	; (800646c <xTaskResumeAll+0x130>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <xTaskResumeAll+0x138>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006444:	f001 f8d6 	bl	80075f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006448:	68bb      	ldr	r3, [r7, #8]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000c4c 	.word	0x20000c4c
 8006458:	20000c24 	.word	0x20000c24
 800645c:	20000be4 	.word	0x20000be4
 8006460:	20000c2c 	.word	0x20000c2c
 8006464:	20000754 	.word	0x20000754
 8006468:	20000750 	.word	0x20000750
 800646c:	20000c38 	.word	0x20000c38
 8006470:	20000c34 	.word	0x20000c34
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <xTaskGetTickCount+0x1c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006484:	687b      	ldr	r3, [r7, #4]
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000c28 	.word	0x20000c28

08006498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a2:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <xTaskIncrementTick+0x148>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 808f 	bne.w	80065ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064ac:	4b4d      	ldr	r3, [pc, #308]	; (80065e4 <xTaskIncrementTick+0x14c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b4:	4a4b      	ldr	r2, [pc, #300]	; (80065e4 <xTaskIncrementTick+0x14c>)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d120      	bne.n	8006502 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064c0:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <xTaskIncrementTick+0x150>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <xTaskIncrementTick+0x46>
 80064e0:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <xTaskIncrementTick+0x150>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	4b41      	ldr	r3, [pc, #260]	; (80065ec <xTaskIncrementTick+0x154>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <xTaskIncrementTick+0x150>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	4a3f      	ldr	r2, [pc, #252]	; (80065ec <xTaskIncrementTick+0x154>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <xTaskIncrementTick+0x158>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <xTaskIncrementTick+0x158>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	f000 fad1 	bl	8006aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006502:	4b3c      	ldr	r3, [pc, #240]	; (80065f4 <xTaskIncrementTick+0x15c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d349      	bcc.n	80065a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <xTaskIncrementTick+0x150>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006516:	4b37      	ldr	r3, [pc, #220]	; (80065f4 <xTaskIncrementTick+0x15c>)
 8006518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800651c:	601a      	str	r2, [r3, #0]
					break;
 800651e:	e03f      	b.n	80065a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <xTaskIncrementTick+0x150>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d203      	bcs.n	8006540 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006538:	4a2e      	ldr	r2, [pc, #184]	; (80065f4 <xTaskIncrementTick+0x15c>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800653e:	e02f      	b.n	80065a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe ff99 	bl	800547c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	3318      	adds	r3, #24
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe ff90 	bl	800547c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <xTaskIncrementTick+0x160>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d903      	bls.n	8006570 <xTaskIncrementTick+0xd8>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <xTaskIncrementTick+0x160>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <xTaskIncrementTick+0x164>)
 800657e:	441a      	add	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe ff1b 	bl	80053c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <xTaskIncrementTick+0x168>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	429a      	cmp	r2, r3
 8006598:	d3b8      	bcc.n	800650c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659e:	e7b5      	b.n	800650c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <xTaskIncrementTick+0x168>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4915      	ldr	r1, [pc, #84]	; (80065fc <xTaskIncrementTick+0x164>)
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d901      	bls.n	80065bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <xTaskIncrementTick+0x16c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e004      	b.n	80065d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTaskIncrementTick+0x170>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	4a0d      	ldr	r2, [pc, #52]	; (8006608 <xTaskIncrementTick+0x170>)
 80065d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000c4c 	.word	0x20000c4c
 80065e4:	20000c28 	.word	0x20000c28
 80065e8:	20000bdc 	.word	0x20000bdc
 80065ec:	20000be0 	.word	0x20000be0
 80065f0:	20000c3c 	.word	0x20000c3c
 80065f4:	20000c44 	.word	0x20000c44
 80065f8:	20000c2c 	.word	0x20000c2c
 80065fc:	20000754 	.word	0x20000754
 8006600:	20000750 	.word	0x20000750
 8006604:	20000c38 	.word	0x20000c38
 8006608:	20000c34 	.word	0x20000c34

0800660c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006612:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <vTaskSwitchContext+0xa8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800661a:	4b27      	ldr	r3, [pc, #156]	; (80066b8 <vTaskSwitchContext+0xac>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006620:	e041      	b.n	80066a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006622:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <vTaskSwitchContext+0xac>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	4b24      	ldr	r3, [pc, #144]	; (80066bc <vTaskSwitchContext+0xb0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e010      	b.n	8006652 <vTaskSwitchContext+0x46>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <vTaskSwitchContext+0x40>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	607b      	str	r3, [r7, #4]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <vTaskSwitchContext+0x3e>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3b01      	subs	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	491b      	ldr	r1, [pc, #108]	; (80066c0 <vTaskSwitchContext+0xb4>)
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0e4      	beq.n	8006630 <vTaskSwitchContext+0x24>
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <vTaskSwitchContext+0xb4>)
 8006672:	4413      	add	r3, r2
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3308      	adds	r3, #8
 8006688:	429a      	cmp	r2, r3
 800668a:	d104      	bne.n	8006696 <vTaskSwitchContext+0x8a>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <vTaskSwitchContext+0xb8>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4a06      	ldr	r2, [pc, #24]	; (80066bc <vTaskSwitchContext+0xb0>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6013      	str	r3, [r2, #0]
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000c4c 	.word	0x20000c4c
 80066b8:	20000c38 	.word	0x20000c38
 80066bc:	20000c2c 	.word	0x20000c2c
 80066c0:	20000754 	.word	0x20000754
 80066c4:	20000750 	.word	0x20000750

080066c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	60fb      	str	r3, [r7, #12]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <vTaskPlaceOnEventList+0x44>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3318      	adds	r3, #24
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fe fe87 	bl	800540a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066fc:	2101      	movs	r1, #1
 80066fe:	6838      	ldr	r0, [r7, #0]
 8006700:	f000 fa7c 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000750 	.word	0x20000750

08006710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	617b      	str	r3, [r7, #20]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <vTaskPlaceOnEventListRestricted+0x54>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3318      	adds	r3, #24
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7fe fe3e 	bl	80053c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006750:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	68b8      	ldr	r0, [r7, #8]
 8006756:	f000 fa51 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
	}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000750 	.word	0x20000750

08006768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60fb      	str	r3, [r7, #12]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3318      	adds	r3, #24
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fe6f 	bl	800547c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679e:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <xTaskRemoveFromEventList+0xb0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11d      	bne.n	80067e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fe66 	bl	800547c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <xTaskRemoveFromEventList+0xb4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <xTaskRemoveFromEventList+0x5c>
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4a16      	ldr	r2, [pc, #88]	; (800681c <xTaskRemoveFromEventList+0xb4>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <xTaskRemoveFromEventList+0xb8>)
 80067d2:	441a      	add	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7fe fdf1 	bl	80053c2 <vListInsertEnd>
 80067e0:	e005      	b.n	80067ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3318      	adds	r3, #24
 80067e6:	4619      	mov	r1, r3
 80067e8:	480e      	ldr	r0, [pc, #56]	; (8006824 <xTaskRemoveFromEventList+0xbc>)
 80067ea:	f7fe fdea 	bl	80053c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <xTaskRemoveFromEventList+0xc0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d905      	bls.n	8006808 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067fc:	2301      	movs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <xTaskRemoveFromEventList+0xc4>)
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e001      	b.n	800680c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800680c:	697b      	ldr	r3, [r7, #20]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000c4c 	.word	0x20000c4c
 800681c:	20000c2c 	.word	0x20000c2c
 8006820:	20000754 	.word	0x20000754
 8006824:	20000be4 	.word	0x20000be4
 8006828:	20000750 	.word	0x20000750
 800682c:	20000c38 	.word	0x20000c38

08006830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <vTaskInternalSetTimeOutState+0x24>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <vTaskInternalSetTimeOutState+0x28>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	605a      	str	r2, [r3, #4]
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	20000c3c 	.word	0x20000c3c
 8006858:	20000c28 	.word	0x20000c28

0800685c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	60fb      	str	r3, [r7, #12]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800689e:	f000 fe79 	bl	8007594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <xTaskCheckForTimeOut+0xbc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ba:	d102      	bne.n	80068c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e023      	b.n	800690a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <xTaskCheckForTimeOut+0xc0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d007      	beq.n	80068de <xTaskCheckForTimeOut+0x82>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d302      	bcc.n	80068de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e015      	b.n	800690a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d20b      	bcs.n	8006900 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff ff9b 	bl	8006830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e004      	b.n	800690a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800690a:	f000 fe73 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 800690e:	69fb      	ldr	r3, [r7, #28]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000c28 	.word	0x20000c28
 800691c:	20000c3c 	.word	0x20000c3c

08006920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <vTaskMissedYield+0x14>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	bf00      	nop
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20000c38 	.word	0x20000c38

08006938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006940:	f000 f852 	bl	80069e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <prvIdleTask+0x28>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d9f9      	bls.n	8006940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <prvIdleTask+0x2c>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800695c:	e7f0      	b.n	8006940 <prvIdleTask+0x8>
 800695e:	bf00      	nop
 8006960:	20000754 	.word	0x20000754
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	e00c      	b.n	800698e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <prvInitialiseTaskLists+0x60>)
 8006980:	4413      	add	r3, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fcf0 	bl	8005368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3301      	adds	r3, #1
 800698c:	607b      	str	r3, [r7, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b37      	cmp	r3, #55	; 0x37
 8006992:	d9ef      	bls.n	8006974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006994:	480d      	ldr	r0, [pc, #52]	; (80069cc <prvInitialiseTaskLists+0x64>)
 8006996:	f7fe fce7 	bl	8005368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800699a:	480d      	ldr	r0, [pc, #52]	; (80069d0 <prvInitialiseTaskLists+0x68>)
 800699c:	f7fe fce4 	bl	8005368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069a0:	480c      	ldr	r0, [pc, #48]	; (80069d4 <prvInitialiseTaskLists+0x6c>)
 80069a2:	f7fe fce1 	bl	8005368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069a6:	480c      	ldr	r0, [pc, #48]	; (80069d8 <prvInitialiseTaskLists+0x70>)
 80069a8:	f7fe fcde 	bl	8005368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069ac:	480b      	ldr	r0, [pc, #44]	; (80069dc <prvInitialiseTaskLists+0x74>)
 80069ae:	f7fe fcdb 	bl	8005368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <prvInitialiseTaskLists+0x78>)
 80069b4:	4a05      	ldr	r2, [pc, #20]	; (80069cc <prvInitialiseTaskLists+0x64>)
 80069b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <prvInitialiseTaskLists+0x7c>)
 80069ba:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <prvInitialiseTaskLists+0x68>)
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000754 	.word	0x20000754
 80069cc:	20000bb4 	.word	0x20000bb4
 80069d0:	20000bc8 	.word	0x20000bc8
 80069d4:	20000be4 	.word	0x20000be4
 80069d8:	20000bf8 	.word	0x20000bf8
 80069dc:	20000c10 	.word	0x20000c10
 80069e0:	20000bdc 	.word	0x20000bdc
 80069e4:	20000be0 	.word	0x20000be0

080069e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ee:	e019      	b.n	8006a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069f0:	f000 fdd0 	bl	8007594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <prvCheckTasksWaitingTermination+0x50>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fd3b 	bl	800547c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <prvCheckTasksWaitingTermination+0x54>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	4a0b      	ldr	r2, [pc, #44]	; (8006a3c <prvCheckTasksWaitingTermination+0x54>)
 8006a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <prvCheckTasksWaitingTermination+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <prvCheckTasksWaitingTermination+0x58>)
 8006a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a1a:	f000 fdeb 	bl	80075f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f810 	bl	8006a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <prvCheckTasksWaitingTermination+0x58>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e1      	bne.n	80069f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000bf8 	.word	0x20000bf8
 8006a3c:	20000c24 	.word	0x20000c24
 8006a40:	20000c0c 	.word	0x20000c0c

08006a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d108      	bne.n	8006a68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 ff88 	bl	8007970 <vPortFree>
				vPortFree( pxTCB );
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 ff85 	bl	8007970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a66:	e018      	b.n	8006a9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d103      	bne.n	8006a7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 ff7c 	bl	8007970 <vPortFree>
	}
 8006a78:	e00f      	b.n	8006a9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d00a      	beq.n	8006a9a <prvDeleteTCB+0x56>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <prvDeleteTCB+0x54>
	}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <prvResetNextTaskUnblockTime+0x38>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006abc:	e008      	b.n	8006ad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <prvResetNextTaskUnblockTime+0x38>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	20000bdc 	.word	0x20000bdc
 8006ae0:	20000c44 	.word	0x20000c44

08006ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <xTaskGetSchedulerState+0x34>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006af2:	2301      	movs	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	e008      	b.n	8006b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <xTaskGetSchedulerState+0x38>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b00:	2302      	movs	r3, #2
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	e001      	b.n	8006b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b0a:	687b      	ldr	r3, [r7, #4]
	}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000c30 	.word	0x20000c30
 8006b1c:	20000c4c 	.word	0x20000c4c

08006b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d056      	beq.n	8006be4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b36:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <xTaskPriorityDisinherit+0xd0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d00a      	beq.n	8006b56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60fb      	str	r3, [r7, #12]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60bb      	str	r3, [r7, #8]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	1e5a      	subs	r2, r3, #1
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d02c      	beq.n	8006be4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d128      	bne.n	8006be4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fc70 	bl	800547c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <xTaskPriorityDisinherit+0xd4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d903      	bls.n	8006bc4 <xTaskPriorityDisinherit+0xa4>
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <xTaskPriorityDisinherit+0xd4>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <xTaskPriorityDisinherit+0xd8>)
 8006bd2:	441a      	add	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f7fe fbf1 	bl	80053c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be4:	697b      	ldr	r3, [r7, #20]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000750 	.word	0x20000750
 8006bf4:	20000c2c 	.word	0x20000c2c
 8006bf8:	20000754 	.word	0x20000754

08006bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fc32 	bl	800547c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c1e:	d10a      	bne.n	8006c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4819      	ldr	r0, [pc, #100]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c30:	f7fe fbc7 	bl	80053c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c34:	e026      	b.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d209      	bcs.n	8006c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fe fbd5 	bl	800540a <vListInsert>
}
 8006c60:	e010      	b.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c62:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fbcb 	bl	800540a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d202      	bcs.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c7e:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6013      	str	r3, [r2, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000c28 	.word	0x20000c28
 8006c90:	20000750 	.word	0x20000750
 8006c94:	20000c10 	.word	0x20000c10
 8006c98:	20000be0 	.word	0x20000be0
 8006c9c:	20000bdc 	.word	0x20000bdc
 8006ca0:	20000c44 	.word	0x20000c44

08006ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cae:	f000 fb07 	bl	80072c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cb2:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <xTimerCreateTimerTask+0x80>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d021      	beq.n	8006cfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cc2:	1d3a      	adds	r2, r7, #4
 8006cc4:	f107 0108 	add.w	r1, r7, #8
 8006cc8:	f107 030c 	add.w	r3, r7, #12
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fb31 	bl	8005334 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	9202      	str	r2, [sp, #8]
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	2302      	movs	r3, #2
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	4910      	ldr	r1, [pc, #64]	; (8006d28 <xTimerCreateTimerTask+0x84>)
 8006ce6:	4811      	ldr	r0, [pc, #68]	; (8006d2c <xTimerCreateTimerTask+0x88>)
 8006ce8:	f7ff f8de 	bl	8005ea8 <xTaskCreateStatic>
 8006cec:	4603      	mov	r3, r0
 8006cee:	4a10      	ldr	r2, [pc, #64]	; (8006d30 <xTimerCreateTimerTask+0x8c>)
 8006cf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <xTimerCreateTimerTask+0x8c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	613b      	str	r3, [r7, #16]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d1a:	697b      	ldr	r3, [r7, #20]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000c80 	.word	0x20000c80
 8006d28:	080090b4 	.word	0x080090b4
 8006d2c:	08006e69 	.word	0x08006e69
 8006d30:	20000c84 	.word	0x20000c84

08006d34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	623b      	str	r3, [r7, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d62:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <xTimerGenericCommand+0x98>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d02a      	beq.n	8006dc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	dc18      	bgt.n	8006dae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d7c:	f7ff feb2 	bl	8006ae4 <xTaskGetSchedulerState>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d109      	bne.n	8006d9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <xTimerGenericCommand+0x98>)
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f107 0110 	add.w	r1, r7, #16
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d92:	f7fe fca1 	bl	80056d8 <xQueueGenericSend>
 8006d96:	6278      	str	r0, [r7, #36]	; 0x24
 8006d98:	e012      	b.n	8006dc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <xTimerGenericCommand+0x98>)
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f107 0110 	add.w	r1, r7, #16
 8006da2:	2300      	movs	r3, #0
 8006da4:	2200      	movs	r2, #0
 8006da6:	f7fe fc97 	bl	80056d8 <xQueueGenericSend>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24
 8006dac:	e008      	b.n	8006dc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <xTimerGenericCommand+0x98>)
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	f107 0110 	add.w	r1, r7, #16
 8006db6:	2300      	movs	r3, #0
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	f7fe fd8b 	bl	80058d4 <xQueueGenericSendFromISR>
 8006dbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3728      	adds	r7, #40	; 0x28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000c80 	.word	0x20000c80

08006dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dda:	4b22      	ldr	r3, [pc, #136]	; (8006e64 <prvProcessExpiredTimer+0x94>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fb47 	bl	800547c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d022      	beq.n	8006e42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	18d1      	adds	r1, r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	6978      	ldr	r0, [r7, #20]
 8006e0a:	f000 f8d1 	bl	8006fb0 <prvInsertTimerInActiveList>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01f      	beq.n	8006e54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	6978      	ldr	r0, [r7, #20]
 8006e20:	f7ff ff88 	bl	8006d34 <xTimerGenericCommand>
 8006e24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d113      	bne.n	8006e54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60fb      	str	r3, [r7, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	6978      	ldr	r0, [r7, #20]
 8006e5a:	4798      	blx	r3
}
 8006e5c:	bf00      	nop
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000c78 	.word	0x20000c78

08006e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e70:	f107 0308 	add.w	r3, r7, #8
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f857 	bl	8006f28 <prvGetNextExpireTime>
 8006e7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f803 	bl	8006e8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e86:	f000 f8d5 	bl	8007034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e8a:	e7f1      	b.n	8006e70 <prvTimerTask+0x8>

08006e8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e96:	f7ff fa43 	bl	8006320 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 f866 	bl	8006f70 <prvSampleTimeNow>
 8006ea4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d130      	bne.n	8006f0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <prvProcessTimerOrBlockTask+0x3c>
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d806      	bhi.n	8006ec8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006eba:	f7ff fa3f 	bl	800633c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ff85 	bl	8006dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ec6:	e024      	b.n	8006f12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <prvProcessTimerOrBlockTask+0x90>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <prvProcessTimerOrBlockTask+0x50>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <prvProcessTimerOrBlockTask+0x52>
 8006edc:	2300      	movs	r3, #0
 8006ede:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <prvProcessTimerOrBlockTask+0x94>)
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4619      	mov	r1, r3
 8006eee:	f7fe ffa7 	bl	8005e40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ef2:	f7ff fa23 	bl	800633c <xTaskResumeAll>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <prvProcessTimerOrBlockTask+0x98>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
}
 8006f0c:	e001      	b.n	8006f12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f0e:	f7ff fa15 	bl	800633c <xTaskResumeAll>
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000c7c 	.word	0x20000c7c
 8006f20:	20000c80 	.word	0x20000c80
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <prvGetNextExpireTime+0x44>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <prvGetNextExpireTime+0x16>
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	e000      	b.n	8006f40 <prvGetNextExpireTime+0x18>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d105      	bne.n	8006f58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f4c:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <prvGetNextExpireTime+0x44>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e001      	b.n	8006f5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000c78 	.word	0x20000c78

08006f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f78:	f7ff fa7e 	bl	8006478 <xTaskGetTickCount>
 8006f7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <prvSampleTimeNow+0x3c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d205      	bcs.n	8006f94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f88:	f000 f936 	bl	80071f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e002      	b.n	8006f9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f9a:	4a04      	ldr	r2, [pc, #16]	; (8006fac <prvSampleTimeNow+0x3c>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000c88 	.word	0x20000c88

08006fb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d812      	bhi.n	8006ffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e01b      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <prvInsertTimerInActiveList+0x7c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe fa08 	bl	800540a <vListInsert>
 8006ffa:	e012      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d206      	bcs.n	8007012 <prvInsertTimerInActiveList+0x62>
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d302      	bcc.n	8007012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e007      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <prvInsertTimerInActiveList+0x80>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7fe f9f4 	bl	800540a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007022:	697b      	ldr	r3, [r7, #20]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000c7c 	.word	0x20000c7c
 8007030:	20000c78 	.word	0x20000c78

08007034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08e      	sub	sp, #56	; 0x38
 8007038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800703a:	e0ca      	b.n	80071d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	da18      	bge.n	8007074 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007042:	1d3b      	adds	r3, r7, #4
 8007044:	3304      	adds	r3, #4
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706a:	6850      	ldr	r0, [r2, #4]
 800706c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706e:	6892      	ldr	r2, [r2, #8]
 8007070:	4611      	mov	r1, r2
 8007072:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f2c0 80aa 	blt.w	80071d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe f9f5 	bl	800547c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007092:	463b      	mov	r3, r7
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff ff6b 	bl	8006f70 <prvSampleTimeNow>
 800709a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b09      	cmp	r3, #9
 80070a0:	f200 8097 	bhi.w	80071d2 <prvProcessReceivedCommands+0x19e>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <prvProcessReceivedCommands+0x78>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070d5 	.word	0x080070d5
 80070b8:	08007149 	.word	0x08007149
 80070bc:	0800715d 	.word	0x0800715d
 80070c0:	080071a7 	.word	0x080071a7
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070d5 	.word	0x080070d5
 80070cc:	08007149 	.word	0x08007149
 80070d0:	0800715d 	.word	0x0800715d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	18d1      	adds	r1, r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f4:	f7ff ff5c 	bl	8006fb0 <prvInsertTimerInActiveList>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d069      	beq.n	80071d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d05e      	beq.n	80071d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	441a      	add	r2, r3
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	2100      	movs	r1, #0
 8007124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007126:	f7ff fe05 	bl	8006d34 <xTimerGenericCommand>
 800712a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d14f      	bne.n	80071d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	61bb      	str	r3, [r7, #24]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800715a:	e03a      	b.n	80071d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	b2da      	uxtb	r2, r3
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	617b      	str	r3, [r7, #20]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	18d1      	adds	r1, r2, r3
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a0:	f7ff ff06 	bl	8006fb0 <prvInsertTimerInActiveList>
					break;
 80071a4:	e015      	b.n	80071d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b6:	f000 fbdb 	bl	8007970 <vPortFree>
 80071ba:	e00a      	b.n	80071d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071ce:	e000      	b.n	80071d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <prvProcessReceivedCommands+0x1c0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1d39      	adds	r1, r7, #4
 80071d8:	2200      	movs	r2, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fc16 	bl	8005a0c <xQueueReceive>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f47f af2a 	bne.w	800703c <prvProcessReceivedCommands+0x8>
	}
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	3730      	adds	r7, #48	; 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000c80 	.word	0x20000c80

080071f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071fe:	e048      	b.n	8007292 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007200:	4b2d      	ldr	r3, [pc, #180]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720a:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3304      	adds	r3, #4
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe f92f 	bl	800547c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d02e      	beq.n	8007292 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4413      	add	r3, r2
 800723c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d90e      	bls.n	8007264 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007252:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fe f8d4 	bl	800540a <vListInsert>
 8007262:	e016      	b.n	8007292 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	2100      	movs	r1, #0
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fd60 	bl	8006d34 <xTimerGenericCommand>
 8007274:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	603b      	str	r3, [r7, #0]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1b1      	bne.n	8007200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <prvSwitchTimerLists+0xc4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <prvSwitchTimerLists+0xc0>)
 80072a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072aa:	4a04      	ldr	r2, [pc, #16]	; (80072bc <prvSwitchTimerLists+0xc4>)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000c78 	.word	0x20000c78
 80072bc:	20000c7c 	.word	0x20000c7c

080072c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072c6:	f000 f965 	bl	8007594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ca:	4b15      	ldr	r3, [pc, #84]	; (8007320 <prvCheckForValidListAndQueue+0x60>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d120      	bne.n	8007314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072d2:	4814      	ldr	r0, [pc, #80]	; (8007324 <prvCheckForValidListAndQueue+0x64>)
 80072d4:	f7fe f848 	bl	8005368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072d8:	4813      	ldr	r0, [pc, #76]	; (8007328 <prvCheckForValidListAndQueue+0x68>)
 80072da:	f7fe f845 	bl	8005368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <prvCheckForValidListAndQueue+0x6c>)
 80072e0:	4a10      	ldr	r2, [pc, #64]	; (8007324 <prvCheckForValidListAndQueue+0x64>)
 80072e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072e4:	4b12      	ldr	r3, [pc, #72]	; (8007330 <prvCheckForValidListAndQueue+0x70>)
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <prvCheckForValidListAndQueue+0x68>)
 80072e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ea:	2300      	movs	r3, #0
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4b11      	ldr	r3, [pc, #68]	; (8007334 <prvCheckForValidListAndQueue+0x74>)
 80072f0:	4a11      	ldr	r2, [pc, #68]	; (8007338 <prvCheckForValidListAndQueue+0x78>)
 80072f2:	2110      	movs	r1, #16
 80072f4:	200a      	movs	r0, #10
 80072f6:	f7fe f953 	bl	80055a0 <xQueueGenericCreateStatic>
 80072fa:	4603      	mov	r3, r0
 80072fc:	4a08      	ldr	r2, [pc, #32]	; (8007320 <prvCheckForValidListAndQueue+0x60>)
 80072fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <prvCheckForValidListAndQueue+0x60>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <prvCheckForValidListAndQueue+0x60>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	490b      	ldr	r1, [pc, #44]	; (800733c <prvCheckForValidListAndQueue+0x7c>)
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fd6c 	bl	8005dec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007314:	f000 f96e 	bl	80075f4 <vPortExitCritical>
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000c80 	.word	0x20000c80
 8007324:	20000c50 	.word	0x20000c50
 8007328:	20000c64 	.word	0x20000c64
 800732c:	20000c78 	.word	0x20000c78
 8007330:	20000c7c 	.word	0x20000c7c
 8007334:	20000d2c 	.word	0x20000d2c
 8007338:	20000c8c 	.word	0x20000c8c
 800733c:	080090bc 	.word	0x080090bc

08007340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3b04      	subs	r3, #4
 8007350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3b04      	subs	r3, #4
 800735e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f023 0201 	bic.w	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b04      	subs	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007370:	4a0c      	ldr	r2, [pc, #48]	; (80073a4 <pxPortInitialiseStack+0x64>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3b14      	subs	r3, #20
 800737a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b04      	subs	r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f06f 0202 	mvn.w	r2, #2
 800738e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3b20      	subs	r3, #32
 8007394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	080073a9 	.word	0x080073a9

080073a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <prvTaskExitError+0x54>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ba:	d00a      	beq.n	80073d2 <prvTaskExitError+0x2a>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60fb      	str	r3, [r7, #12]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <prvTaskExitError+0x28>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	60bb      	str	r3, [r7, #8]
}
 80073e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073e6:	bf00      	nop
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0fc      	beq.n	80073e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	2000000c 	.word	0x2000000c

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b46      	ldr	r3, [pc, #280]	; (8007570 <xPortStartScheduler+0x120>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a46      	ldr	r2, [pc, #280]	; (8007574 <xPortStartScheduler+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10a      	bne.n	8007476 <xPortStartScheduler+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007476:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <xPortStartScheduler+0x120>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a3f      	ldr	r2, [pc, #252]	; (8007578 <xPortStartScheduler+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10a      	bne.n	8007496 <xPortStartScheduler+0x46>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <xPortStartScheduler+0x12c>)
 8007498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	4b31      	ldr	r3, [pc, #196]	; (8007580 <xPortStartScheduler+0x130>)
 80074bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <xPortStartScheduler+0x134>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c4:	e009      	b.n	80074da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <xPortStartScheduler+0x134>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <xPortStartScheduler+0x134>)
 80074ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d0ef      	beq.n	80074c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074e6:	4b27      	ldr	r3, [pc, #156]	; (8007584 <xPortStartScheduler+0x134>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1c3 0307 	rsb	r3, r3, #7
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00a      	beq.n	8007508 <xPortStartScheduler+0xb8>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <xPortStartScheduler+0x134>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <xPortStartScheduler+0x134>)
 8007510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <xPortStartScheduler+0x134>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800751a:	4a1a      	ldr	r2, [pc, #104]	; (8007584 <xPortStartScheduler+0x134>)
 800751c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <xPortStartScheduler+0x138>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <xPortStartScheduler+0x138>)
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <xPortStartScheduler+0x138>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a14      	ldr	r2, [pc, #80]	; (8007588 <xPortStartScheduler+0x138>)
 8007538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800753c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800753e:	f000 f8dd 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <xPortStartScheduler+0x13c>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007548:	f000 f8fc 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <xPortStartScheduler+0x140>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <xPortStartScheduler+0x140>)
 8007552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007558:	f7ff ff66 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800755c:	f7ff f856 	bl	800660c <vTaskSwitchContext>
	prvTaskExitError();
 8007560:	f7ff ff22 	bl	80073a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	410fc271 	.word	0x410fc271
 8007578:	410fc270 	.word	0x410fc270
 800757c:	e000e400 	.word	0xe000e400
 8007580:	20000d7c 	.word	0x20000d7c
 8007584:	20000d80 	.word	0x20000d80
 8007588:	e000ed20 	.word	0xe000ed20
 800758c:	2000000c 	.word	0x2000000c
 8007590:	e000ef34 	.word	0xe000ef34

08007594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	607b      	str	r3, [r7, #4]
}
 80075ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <vPortEnterCritical+0x58>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <vPortEnterCritical+0x58>)
 80075b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <vPortEnterCritical+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortEnterCritical+0x5c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortEnterCritical+0x4a>
	}
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	2000000c 	.word	0x2000000c
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <vPortExitCritical+0x50>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <vPortExitCritical+0x24>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	607b      	str	r3, [r7, #4]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <vPortExitCritical+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3b01      	subs	r3, #1
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <vPortExitCritical+0x50>)
 8007620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <vPortExitCritical+0x42>
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f383 8811 	msr	BASEPRI, r3
}
 8007634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000000c 	.word	0x2000000c
	...

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7fe ffc4 	bl	800660c <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe fee1 	bl	8006498 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <xPortSysTickHandler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	20000000 	.word	0x20000000
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d914      	bls.n	8007794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <vPortValidateInterruptPriority+0x70>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vPortValidateInterruptPriority+0x74>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20a      	bcs.n	8007794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <vPortValidateInterruptPriority+0x7c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d90a      	bls.n	80077ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	603b      	str	r3, [r7, #0]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <vPortValidateInterruptPriority+0x60>
	}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	e000e3f0 	.word	0xe000e3f0
 80077cc:	20000d7c 	.word	0x20000d7c
 80077d0:	e000ed0c 	.word	0xe000ed0c
 80077d4:	20000d80 	.word	0x20000d80

080077d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e4:	f7fe fd9c 	bl	8006320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077e8:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <pvPortMalloc+0x180>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f0:	f000 f920 	bl	8007a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f4:	4b59      	ldr	r3, [pc, #356]	; (800795c <pvPortMalloc+0x184>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8093 	bne.w	8007928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01d      	beq.n	8007844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007808:	2208      	movs	r2, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	3308      	adds	r3, #8
 8007822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <pvPortMalloc+0x6c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d06e      	beq.n	8007928 <pvPortMalloc+0x150>
 800784a:	4b45      	ldr	r3, [pc, #276]	; (8007960 <pvPortMalloc+0x188>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d869      	bhi.n	8007928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007854:	4b43      	ldr	r3, [pc, #268]	; (8007964 <pvPortMalloc+0x18c>)
 8007856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007858:	4b42      	ldr	r3, [pc, #264]	; (8007964 <pvPortMalloc+0x18c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785e:	e004      	b.n	800786a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <pvPortMalloc+0xa4>
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <pvPortMalloc+0x180>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	429a      	cmp	r2, r3
 8007884:	d050      	beq.n	8007928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2208      	movs	r2, #8
 800788c:	4413      	add	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	2308      	movs	r3, #8
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d91f      	bls.n	80078e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <pvPortMalloc+0xf8>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	613b      	str	r3, [r7, #16]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078e2:	69b8      	ldr	r0, [r7, #24]
 80078e4:	f000 f908 	bl	8007af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <pvPortMalloc+0x188>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <pvPortMalloc+0x188>)
 80078f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <pvPortMalloc+0x188>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <pvPortMalloc+0x190>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d203      	bcs.n	800790a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007902:	4b17      	ldr	r3, [pc, #92]	; (8007960 <pvPortMalloc+0x188>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a18      	ldr	r2, [pc, #96]	; (8007968 <pvPortMalloc+0x190>)
 8007908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x184>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	431a      	orrs	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <pvPortMalloc+0x194>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a11      	ldr	r2, [pc, #68]	; (800796c <pvPortMalloc+0x194>)
 8007926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007928:	f7fe fd08 	bl	800633c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <pvPortMalloc+0x174>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <pvPortMalloc+0x172>
	return pvReturn;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20001944 	.word	0x20001944
 800795c:	20001958 	.word	0x20001958
 8007960:	20001948 	.word	0x20001948
 8007964:	2000193c 	.word	0x2000193c
 8007968:	2000194c 	.word	0x2000194c
 800796c:	20001950 	.word	0x20001950

08007970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04d      	beq.n	8007a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007982:	2308      	movs	r3, #8
 8007984:	425b      	negs	r3, r3
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <vPortFree+0xb8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <vPortFree+0x44>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <vPortFree+0x62>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <vPortFree+0xb8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d11a      	bne.n	8007a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <vPortFree+0xb8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	401a      	ands	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f8:	f7fe fc92 	bl	8006320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <vPortFree+0xbc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <vPortFree+0xbc>)
 8007a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f874 	bl	8007af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <vPortFree+0xc0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	4a06      	ldr	r2, [pc, #24]	; (8007a30 <vPortFree+0xc0>)
 8007a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a1a:	f7fe fc8f 	bl	800633c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20001958 	.word	0x20001958
 8007a2c:	20001948 	.word	0x20001948
 8007a30:	20001954 	.word	0x20001954

08007a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a40:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <prvHeapInit+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <prvHeapInit+0xac>)
 8007a64:	4413      	add	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a80:	2208      	movs	r2, #8
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a9e:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <prvHeapInit+0xb4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <prvHeapInit+0xb4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <prvHeapInit+0xb8>)
 8007ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <prvHeapInit+0xbc>)
 8007aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007acc:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <prvHeapInit+0xc0>)
 8007ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000d84 	.word	0x20000d84
 8007ae4:	2000193c 	.word	0x2000193c
 8007ae8:	20001944 	.word	0x20001944
 8007aec:	2000194c 	.word	0x2000194c
 8007af0:	20001948 	.word	0x20001948
 8007af4:	20001958 	.word	0x20001958

08007af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <prvInsertBlockIntoFreeList+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x14>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8f7      	bhi.n	8007b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d108      	bne.n	8007b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	441a      	add	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d118      	bne.n	8007b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b15      	ldr	r3, [pc, #84]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d00d      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e008      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d002      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000193c 	.word	0x2000193c
 8007ba8:	20001944 	.word	0x20001944

08007bac <__errno>:
 8007bac:	4b01      	ldr	r3, [pc, #4]	; (8007bb4 <__errno+0x8>)
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000010 	.word	0x20000010

08007bb8 <__libc_init_array>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4d0d      	ldr	r5, [pc, #52]	; (8007bf0 <__libc_init_array+0x38>)
 8007bbc:	4c0d      	ldr	r4, [pc, #52]	; (8007bf4 <__libc_init_array+0x3c>)
 8007bbe:	1b64      	subs	r4, r4, r5
 8007bc0:	10a4      	asrs	r4, r4, #2
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	42a6      	cmp	r6, r4
 8007bc6:	d109      	bne.n	8007bdc <__libc_init_array+0x24>
 8007bc8:	4d0b      	ldr	r5, [pc, #44]	; (8007bf8 <__libc_init_array+0x40>)
 8007bca:	4c0c      	ldr	r4, [pc, #48]	; (8007bfc <__libc_init_array+0x44>)
 8007bcc:	f001 f9e4 	bl	8008f98 <_init>
 8007bd0:	1b64      	subs	r4, r4, r5
 8007bd2:	10a4      	asrs	r4, r4, #2
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	42a6      	cmp	r6, r4
 8007bd8:	d105      	bne.n	8007be6 <__libc_init_array+0x2e>
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be0:	4798      	blx	r3
 8007be2:	3601      	adds	r6, #1
 8007be4:	e7ee      	b.n	8007bc4 <__libc_init_array+0xc>
 8007be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bea:	4798      	blx	r3
 8007bec:	3601      	adds	r6, #1
 8007bee:	e7f2      	b.n	8007bd6 <__libc_init_array+0x1e>
 8007bf0:	080091d0 	.word	0x080091d0
 8007bf4:	080091d0 	.word	0x080091d0
 8007bf8:	080091d0 	.word	0x080091d0
 8007bfc:	080091d4 	.word	0x080091d4

08007c00 <memcpy>:
 8007c00:	440a      	add	r2, r1
 8007c02:	4291      	cmp	r1, r2
 8007c04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c08:	d100      	bne.n	8007c0c <memcpy+0xc>
 8007c0a:	4770      	bx	lr
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c16:	4291      	cmp	r1, r2
 8007c18:	d1f9      	bne.n	8007c0e <memcpy+0xe>
 8007c1a:	bd10      	pop	{r4, pc}

08007c1c <memset>:
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d100      	bne.n	8007c26 <memset+0xa>
 8007c24:	4770      	bx	lr
 8007c26:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2a:	e7f9      	b.n	8007c20 <memset+0x4>

08007c2c <iprintf>:
 8007c2c:	b40f      	push	{r0, r1, r2, r3}
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <iprintf+0x2c>)
 8007c30:	b513      	push	{r0, r1, r4, lr}
 8007c32:	681c      	ldr	r4, [r3, #0]
 8007c34:	b124      	cbz	r4, 8007c40 <iprintf+0x14>
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	b913      	cbnz	r3, 8007c40 <iprintf+0x14>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 faa4 	bl	8008188 <__sinit>
 8007c40:	ab05      	add	r3, sp, #20
 8007c42:	9a04      	ldr	r2, [sp, #16]
 8007c44:	68a1      	ldr	r1, [r4, #8]
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fdd1 	bl	80087f0 <_vfiprintf_r>
 8007c4e:	b002      	add	sp, #8
 8007c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c54:	b004      	add	sp, #16
 8007c56:	4770      	bx	lr
 8007c58:	20000010 	.word	0x20000010

08007c5c <_puts_r>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	460e      	mov	r6, r1
 8007c60:	4605      	mov	r5, r0
 8007c62:	b118      	cbz	r0, 8007c6c <_puts_r+0x10>
 8007c64:	6983      	ldr	r3, [r0, #24]
 8007c66:	b90b      	cbnz	r3, 8007c6c <_puts_r+0x10>
 8007c68:	f000 fa8e 	bl	8008188 <__sinit>
 8007c6c:	69ab      	ldr	r3, [r5, #24]
 8007c6e:	68ac      	ldr	r4, [r5, #8]
 8007c70:	b913      	cbnz	r3, 8007c78 <_puts_r+0x1c>
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fa88 	bl	8008188 <__sinit>
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <_puts_r+0xd0>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d120      	bne.n	8007cc0 <_puts_r+0x64>
 8007c7e:	686c      	ldr	r4, [r5, #4]
 8007c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c82:	07db      	lsls	r3, r3, #31
 8007c84:	d405      	bmi.n	8007c92 <_puts_r+0x36>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	0598      	lsls	r0, r3, #22
 8007c8a:	d402      	bmi.n	8007c92 <_puts_r+0x36>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8e:	f000 fb19 	bl	80082c4 <__retarget_lock_acquire_recursive>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	0719      	lsls	r1, r3, #28
 8007c96:	d51d      	bpl.n	8007cd4 <_puts_r+0x78>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	b1db      	cbz	r3, 8007cd4 <_puts_r+0x78>
 8007c9c:	3e01      	subs	r6, #1
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	bb39      	cbnz	r1, 8007cfa <_puts_r+0x9e>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da38      	bge.n	8007d20 <_puts_r+0xc4>
 8007cae:	4622      	mov	r2, r4
 8007cb0:	210a      	movs	r1, #10
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f88e 	bl	8007dd4 <__swbuf_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d011      	beq.n	8007ce0 <_puts_r+0x84>
 8007cbc:	250a      	movs	r5, #10
 8007cbe:	e011      	b.n	8007ce4 <_puts_r+0x88>
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <_puts_r+0xd4>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <_puts_r+0x6e>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7da      	b.n	8007c80 <_puts_r+0x24>
 8007cca:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <_puts_r+0xd8>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7d5      	b.n	8007c80 <_puts_r+0x24>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f8ce 	bl	8007e78 <__swsetup_r>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d0dd      	beq.n	8007c9c <_puts_r+0x40>
 8007ce0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce6:	07da      	lsls	r2, r3, #31
 8007ce8:	d405      	bmi.n	8007cf6 <_puts_r+0x9a>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	059b      	lsls	r3, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_puts_r+0x9a>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f000 fae8 	bl	80082c6 <__retarget_lock_release_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	da04      	bge.n	8007d08 <_puts_r+0xac>
 8007cfe:	69a2      	ldr	r2, [r4, #24]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	dc06      	bgt.n	8007d12 <_puts_r+0xb6>
 8007d04:	290a      	cmp	r1, #10
 8007d06:	d004      	beq.n	8007d12 <_puts_r+0xb6>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	7019      	strb	r1, [r3, #0]
 8007d10:	e7c5      	b.n	8007c9e <_puts_r+0x42>
 8007d12:	4622      	mov	r2, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 f85d 	bl	8007dd4 <__swbuf_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d1bf      	bne.n	8007c9e <_puts_r+0x42>
 8007d1e:	e7df      	b.n	8007ce0 <_puts_r+0x84>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	250a      	movs	r5, #10
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	6022      	str	r2, [r4, #0]
 8007d28:	701d      	strb	r5, [r3, #0]
 8007d2a:	e7db      	b.n	8007ce4 <_puts_r+0x88>
 8007d2c:	08009154 	.word	0x08009154
 8007d30:	08009174 	.word	0x08009174
 8007d34:	08009134 	.word	0x08009134

08007d38 <puts>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <puts+0xc>)
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f7ff bf8d 	b.w	8007c5c <_puts_r>
 8007d42:	bf00      	nop
 8007d44:	20000010 	.word	0x20000010

08007d48 <siprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b500      	push	{lr}
 8007d4c:	b09c      	sub	sp, #112	; 0x70
 8007d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	9006      	str	r0, [sp, #24]
 8007d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <siprintf+0x38>)
 8007d5a:	9107      	str	r1, [sp, #28]
 8007d5c:	9104      	str	r1, [sp, #16]
 8007d5e:	4909      	ldr	r1, [pc, #36]	; (8007d84 <siprintf+0x3c>)
 8007d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d64:	9105      	str	r1, [sp, #20]
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	a902      	add	r1, sp, #8
 8007d6c:	f000 fc16 	bl	800859c <_svfiprintf_r>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	b01c      	add	sp, #112	; 0x70
 8007d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d7c:	b003      	add	sp, #12
 8007d7e:	4770      	bx	lr
 8007d80:	20000010 	.word	0x20000010
 8007d84:	ffff0208 	.word	0xffff0208

08007d88 <strncmp>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	b16a      	cbz	r2, 8007da8 <strncmp+0x20>
 8007d8c:	3901      	subs	r1, #1
 8007d8e:	1884      	adds	r4, r0, r2
 8007d90:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007d94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d103      	bne.n	8007da4 <strncmp+0x1c>
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d001      	beq.n	8007da4 <strncmp+0x1c>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f5      	bne.n	8007d90 <strncmp+0x8>
 8007da4:	1a98      	subs	r0, r3, r2
 8007da6:	bd10      	pop	{r4, pc}
 8007da8:	4610      	mov	r0, r2
 8007daa:	e7fc      	b.n	8007da6 <strncmp+0x1e>

08007dac <strncpy>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	3901      	subs	r1, #1
 8007db0:	4603      	mov	r3, r0
 8007db2:	b132      	cbz	r2, 8007dc2 <strncpy+0x16>
 8007db4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007db8:	f803 4b01 	strb.w	r4, [r3], #1
 8007dbc:	3a01      	subs	r2, #1
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d1f7      	bne.n	8007db2 <strncpy+0x6>
 8007dc2:	441a      	add	r2, r3
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d100      	bne.n	8007dcc <strncpy+0x20>
 8007dca:	bd10      	pop	{r4, pc}
 8007dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd0:	e7f9      	b.n	8007dc6 <strncpy+0x1a>
	...

08007dd4 <__swbuf_r>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	460e      	mov	r6, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	4605      	mov	r5, r0
 8007ddc:	b118      	cbz	r0, 8007de6 <__swbuf_r+0x12>
 8007dde:	6983      	ldr	r3, [r0, #24]
 8007de0:	b90b      	cbnz	r3, 8007de6 <__swbuf_r+0x12>
 8007de2:	f000 f9d1 	bl	8008188 <__sinit>
 8007de6:	4b21      	ldr	r3, [pc, #132]	; (8007e6c <__swbuf_r+0x98>)
 8007de8:	429c      	cmp	r4, r3
 8007dea:	d12b      	bne.n	8007e44 <__swbuf_r+0x70>
 8007dec:	686c      	ldr	r4, [r5, #4]
 8007dee:	69a3      	ldr	r3, [r4, #24]
 8007df0:	60a3      	str	r3, [r4, #8]
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	071a      	lsls	r2, r3, #28
 8007df6:	d52f      	bpl.n	8007e58 <__swbuf_r+0x84>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	b36b      	cbz	r3, 8007e58 <__swbuf_r+0x84>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	1ac0      	subs	r0, r0, r3
 8007e02:	6963      	ldr	r3, [r4, #20]
 8007e04:	b2f6      	uxtb	r6, r6
 8007e06:	4283      	cmp	r3, r0
 8007e08:	4637      	mov	r7, r6
 8007e0a:	dc04      	bgt.n	8007e16 <__swbuf_r+0x42>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f926 	bl	8008060 <_fflush_r>
 8007e14:	bb30      	cbnz	r0, 8007e64 <__swbuf_r+0x90>
 8007e16:	68a3      	ldr	r3, [r4, #8]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	60a3      	str	r3, [r4, #8]
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	6022      	str	r2, [r4, #0]
 8007e22:	701e      	strb	r6, [r3, #0]
 8007e24:	6963      	ldr	r3, [r4, #20]
 8007e26:	3001      	adds	r0, #1
 8007e28:	4283      	cmp	r3, r0
 8007e2a:	d004      	beq.n	8007e36 <__swbuf_r+0x62>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	07db      	lsls	r3, r3, #31
 8007e30:	d506      	bpl.n	8007e40 <__swbuf_r+0x6c>
 8007e32:	2e0a      	cmp	r6, #10
 8007e34:	d104      	bne.n	8007e40 <__swbuf_r+0x6c>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 f911 	bl	8008060 <_fflush_r>
 8007e3e:	b988      	cbnz	r0, 8007e64 <__swbuf_r+0x90>
 8007e40:	4638      	mov	r0, r7
 8007e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <__swbuf_r+0x9c>)
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d101      	bne.n	8007e4e <__swbuf_r+0x7a>
 8007e4a:	68ac      	ldr	r4, [r5, #8]
 8007e4c:	e7cf      	b.n	8007dee <__swbuf_r+0x1a>
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <__swbuf_r+0xa0>)
 8007e50:	429c      	cmp	r4, r3
 8007e52:	bf08      	it	eq
 8007e54:	68ec      	ldreq	r4, [r5, #12]
 8007e56:	e7ca      	b.n	8007dee <__swbuf_r+0x1a>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f80c 	bl	8007e78 <__swsetup_r>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d0cb      	beq.n	8007dfc <__swbuf_r+0x28>
 8007e64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e68:	e7ea      	b.n	8007e40 <__swbuf_r+0x6c>
 8007e6a:	bf00      	nop
 8007e6c:	08009154 	.word	0x08009154
 8007e70:	08009174 	.word	0x08009174
 8007e74:	08009134 	.word	0x08009134

08007e78 <__swsetup_r>:
 8007e78:	4b32      	ldr	r3, [pc, #200]	; (8007f44 <__swsetup_r+0xcc>)
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	b125      	cbz	r5, 8007e8e <__swsetup_r+0x16>
 8007e84:	69ab      	ldr	r3, [r5, #24]
 8007e86:	b913      	cbnz	r3, 8007e8e <__swsetup_r+0x16>
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f97d 	bl	8008188 <__sinit>
 8007e8e:	4b2e      	ldr	r3, [pc, #184]	; (8007f48 <__swsetup_r+0xd0>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	d10f      	bne.n	8007eb4 <__swsetup_r+0x3c>
 8007e94:	686c      	ldr	r4, [r5, #4]
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e9c:	0719      	lsls	r1, r3, #28
 8007e9e:	d42c      	bmi.n	8007efa <__swsetup_r+0x82>
 8007ea0:	06dd      	lsls	r5, r3, #27
 8007ea2:	d411      	bmi.n	8007ec8 <__swsetup_r+0x50>
 8007ea4:	2309      	movs	r3, #9
 8007ea6:	6033      	str	r3, [r6, #0]
 8007ea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb2:	e03e      	b.n	8007f32 <__swsetup_r+0xba>
 8007eb4:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <__swsetup_r+0xd4>)
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d101      	bne.n	8007ebe <__swsetup_r+0x46>
 8007eba:	68ac      	ldr	r4, [r5, #8]
 8007ebc:	e7eb      	b.n	8007e96 <__swsetup_r+0x1e>
 8007ebe:	4b24      	ldr	r3, [pc, #144]	; (8007f50 <__swsetup_r+0xd8>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	bf08      	it	eq
 8007ec4:	68ec      	ldreq	r4, [r5, #12]
 8007ec6:	e7e6      	b.n	8007e96 <__swsetup_r+0x1e>
 8007ec8:	0758      	lsls	r0, r3, #29
 8007eca:	d512      	bpl.n	8007ef2 <__swsetup_r+0x7a>
 8007ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ece:	b141      	cbz	r1, 8007ee2 <__swsetup_r+0x6a>
 8007ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	d002      	beq.n	8007ede <__swsetup_r+0x66>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 fa59 	bl	8008390 <_free_r>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	2300      	movs	r3, #0
 8007eec:	6063      	str	r3, [r4, #4]
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f043 0308 	orr.w	r3, r3, #8
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	b94b      	cbnz	r3, 8007f12 <__swsetup_r+0x9a>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f08:	d003      	beq.n	8007f12 <__swsetup_r+0x9a>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f9ff 	bl	8008310 <__smakebuf_r>
 8007f12:	89a0      	ldrh	r0, [r4, #12]
 8007f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f18:	f010 0301 	ands.w	r3, r0, #1
 8007f1c:	d00a      	beq.n	8007f34 <__swsetup_r+0xbc>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60a3      	str	r3, [r4, #8]
 8007f22:	6963      	ldr	r3, [r4, #20]
 8007f24:	425b      	negs	r3, r3
 8007f26:	61a3      	str	r3, [r4, #24]
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	b943      	cbnz	r3, 8007f3e <__swsetup_r+0xc6>
 8007f2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f30:	d1ba      	bne.n	8007ea8 <__swsetup_r+0x30>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	0781      	lsls	r1, r0, #30
 8007f36:	bf58      	it	pl
 8007f38:	6963      	ldrpl	r3, [r4, #20]
 8007f3a:	60a3      	str	r3, [r4, #8]
 8007f3c:	e7f4      	b.n	8007f28 <__swsetup_r+0xb0>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e7f7      	b.n	8007f32 <__swsetup_r+0xba>
 8007f42:	bf00      	nop
 8007f44:	20000010 	.word	0x20000010
 8007f48:	08009154 	.word	0x08009154
 8007f4c:	08009174 	.word	0x08009174
 8007f50:	08009134 	.word	0x08009134

08007f54 <__sflush_r>:
 8007f54:	898a      	ldrh	r2, [r1, #12]
 8007f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	0710      	lsls	r0, r2, #28
 8007f5e:	460c      	mov	r4, r1
 8007f60:	d458      	bmi.n	8008014 <__sflush_r+0xc0>
 8007f62:	684b      	ldr	r3, [r1, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dc05      	bgt.n	8007f74 <__sflush_r+0x20>
 8007f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dc02      	bgt.n	8007f74 <__sflush_r+0x20>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	d0f9      	beq.n	8007f6e <__sflush_r+0x1a>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f80:	682f      	ldr	r7, [r5, #0]
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	d032      	beq.n	8007fec <__sflush_r+0x98>
 8007f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	075a      	lsls	r2, r3, #29
 8007f8c:	d505      	bpl.n	8007f9a <__sflush_r+0x46>
 8007f8e:	6863      	ldr	r3, [r4, #4]
 8007f90:	1ac0      	subs	r0, r0, r3
 8007f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f94:	b10b      	cbz	r3, 8007f9a <__sflush_r+0x46>
 8007f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f98:	1ac0      	subs	r0, r0, r3
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fa0:	6a21      	ldr	r1, [r4, #32]
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b0      	blx	r6
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	d106      	bne.n	8007fba <__sflush_r+0x66>
 8007fac:	6829      	ldr	r1, [r5, #0]
 8007fae:	291d      	cmp	r1, #29
 8007fb0:	d82c      	bhi.n	800800c <__sflush_r+0xb8>
 8007fb2:	4a2a      	ldr	r2, [pc, #168]	; (800805c <__sflush_r+0x108>)
 8007fb4:	40ca      	lsrs	r2, r1
 8007fb6:	07d6      	lsls	r6, r2, #31
 8007fb8:	d528      	bpl.n	800800c <__sflush_r+0xb8>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	6062      	str	r2, [r4, #4]
 8007fbe:	04d9      	lsls	r1, r3, #19
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	6022      	str	r2, [r4, #0]
 8007fc4:	d504      	bpl.n	8007fd0 <__sflush_r+0x7c>
 8007fc6:	1c42      	adds	r2, r0, #1
 8007fc8:	d101      	bne.n	8007fce <__sflush_r+0x7a>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	b903      	cbnz	r3, 8007fd0 <__sflush_r+0x7c>
 8007fce:	6560      	str	r0, [r4, #84]	; 0x54
 8007fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd2:	602f      	str	r7, [r5, #0]
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d0ca      	beq.n	8007f6e <__sflush_r+0x1a>
 8007fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fdc:	4299      	cmp	r1, r3
 8007fde:	d002      	beq.n	8007fe6 <__sflush_r+0x92>
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f9d5 	bl	8008390 <_free_r>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8007fea:	e7c1      	b.n	8007f70 <__sflush_r+0x1c>
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b0      	blx	r6
 8007ff4:	1c41      	adds	r1, r0, #1
 8007ff6:	d1c7      	bne.n	8007f88 <__sflush_r+0x34>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0c4      	beq.n	8007f88 <__sflush_r+0x34>
 8007ffe:	2b1d      	cmp	r3, #29
 8008000:	d001      	beq.n	8008006 <__sflush_r+0xb2>
 8008002:	2b16      	cmp	r3, #22
 8008004:	d101      	bne.n	800800a <__sflush_r+0xb6>
 8008006:	602f      	str	r7, [r5, #0]
 8008008:	e7b1      	b.n	8007f6e <__sflush_r+0x1a>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	e7ad      	b.n	8007f70 <__sflush_r+0x1c>
 8008014:	690f      	ldr	r7, [r1, #16]
 8008016:	2f00      	cmp	r7, #0
 8008018:	d0a9      	beq.n	8007f6e <__sflush_r+0x1a>
 800801a:	0793      	lsls	r3, r2, #30
 800801c:	680e      	ldr	r6, [r1, #0]
 800801e:	bf08      	it	eq
 8008020:	694b      	ldreq	r3, [r1, #20]
 8008022:	600f      	str	r7, [r1, #0]
 8008024:	bf18      	it	ne
 8008026:	2300      	movne	r3, #0
 8008028:	eba6 0807 	sub.w	r8, r6, r7
 800802c:	608b      	str	r3, [r1, #8]
 800802e:	f1b8 0f00 	cmp.w	r8, #0
 8008032:	dd9c      	ble.n	8007f6e <__sflush_r+0x1a>
 8008034:	6a21      	ldr	r1, [r4, #32]
 8008036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008038:	4643      	mov	r3, r8
 800803a:	463a      	mov	r2, r7
 800803c:	4628      	mov	r0, r5
 800803e:	47b0      	blx	r6
 8008040:	2800      	cmp	r0, #0
 8008042:	dc06      	bgt.n	8008052 <__sflush_r+0xfe>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008050:	e78e      	b.n	8007f70 <__sflush_r+0x1c>
 8008052:	4407      	add	r7, r0
 8008054:	eba8 0800 	sub.w	r8, r8, r0
 8008058:	e7e9      	b.n	800802e <__sflush_r+0xda>
 800805a:	bf00      	nop
 800805c:	20400001 	.word	0x20400001

08008060 <_fflush_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	690b      	ldr	r3, [r1, #16]
 8008064:	4605      	mov	r5, r0
 8008066:	460c      	mov	r4, r1
 8008068:	b913      	cbnz	r3, 8008070 <_fflush_r+0x10>
 800806a:	2500      	movs	r5, #0
 800806c:	4628      	mov	r0, r5
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	b118      	cbz	r0, 800807a <_fflush_r+0x1a>
 8008072:	6983      	ldr	r3, [r0, #24]
 8008074:	b90b      	cbnz	r3, 800807a <_fflush_r+0x1a>
 8008076:	f000 f887 	bl	8008188 <__sinit>
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <_fflush_r+0x6c>)
 800807c:	429c      	cmp	r4, r3
 800807e:	d11b      	bne.n	80080b8 <_fflush_r+0x58>
 8008080:	686c      	ldr	r4, [r5, #4]
 8008082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0ef      	beq.n	800806a <_fflush_r+0xa>
 800808a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800808c:	07d0      	lsls	r0, r2, #31
 800808e:	d404      	bmi.n	800809a <_fflush_r+0x3a>
 8008090:	0599      	lsls	r1, r3, #22
 8008092:	d402      	bmi.n	800809a <_fflush_r+0x3a>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f000 f915 	bl	80082c4 <__retarget_lock_acquire_recursive>
 800809a:	4628      	mov	r0, r5
 800809c:	4621      	mov	r1, r4
 800809e:	f7ff ff59 	bl	8007f54 <__sflush_r>
 80080a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080a4:	07da      	lsls	r2, r3, #31
 80080a6:	4605      	mov	r5, r0
 80080a8:	d4e0      	bmi.n	800806c <_fflush_r+0xc>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	059b      	lsls	r3, r3, #22
 80080ae:	d4dd      	bmi.n	800806c <_fflush_r+0xc>
 80080b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080b2:	f000 f908 	bl	80082c6 <__retarget_lock_release_recursive>
 80080b6:	e7d9      	b.n	800806c <_fflush_r+0xc>
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <_fflush_r+0x70>)
 80080ba:	429c      	cmp	r4, r3
 80080bc:	d101      	bne.n	80080c2 <_fflush_r+0x62>
 80080be:	68ac      	ldr	r4, [r5, #8]
 80080c0:	e7df      	b.n	8008082 <_fflush_r+0x22>
 80080c2:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <_fflush_r+0x74>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	bf08      	it	eq
 80080c8:	68ec      	ldreq	r4, [r5, #12]
 80080ca:	e7da      	b.n	8008082 <_fflush_r+0x22>
 80080cc:	08009154 	.word	0x08009154
 80080d0:	08009174 	.word	0x08009174
 80080d4:	08009134 	.word	0x08009134

080080d8 <std>:
 80080d8:	2300      	movs	r3, #0
 80080da:	b510      	push	{r4, lr}
 80080dc:	4604      	mov	r4, r0
 80080de:	e9c0 3300 	strd	r3, r3, [r0]
 80080e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080e6:	6083      	str	r3, [r0, #8]
 80080e8:	8181      	strh	r1, [r0, #12]
 80080ea:	6643      	str	r3, [r0, #100]	; 0x64
 80080ec:	81c2      	strh	r2, [r0, #14]
 80080ee:	6183      	str	r3, [r0, #24]
 80080f0:	4619      	mov	r1, r3
 80080f2:	2208      	movs	r2, #8
 80080f4:	305c      	adds	r0, #92	; 0x5c
 80080f6:	f7ff fd91 	bl	8007c1c <memset>
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <std+0x38>)
 80080fc:	6263      	str	r3, [r4, #36]	; 0x24
 80080fe:	4b05      	ldr	r3, [pc, #20]	; (8008114 <std+0x3c>)
 8008100:	62a3      	str	r3, [r4, #40]	; 0x28
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <std+0x40>)
 8008104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <std+0x44>)
 8008108:	6224      	str	r4, [r4, #32]
 800810a:	6323      	str	r3, [r4, #48]	; 0x30
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	08008d99 	.word	0x08008d99
 8008114:	08008dbb 	.word	0x08008dbb
 8008118:	08008df3 	.word	0x08008df3
 800811c:	08008e17 	.word	0x08008e17

08008120 <_cleanup_r>:
 8008120:	4901      	ldr	r1, [pc, #4]	; (8008128 <_cleanup_r+0x8>)
 8008122:	f000 b8af 	b.w	8008284 <_fwalk_reent>
 8008126:	bf00      	nop
 8008128:	08008061 	.word	0x08008061

0800812c <__sfmoreglue>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	1e4a      	subs	r2, r1, #1
 8008130:	2568      	movs	r5, #104	; 0x68
 8008132:	4355      	muls	r5, r2
 8008134:	460e      	mov	r6, r1
 8008136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800813a:	f000 f979 	bl	8008430 <_malloc_r>
 800813e:	4604      	mov	r4, r0
 8008140:	b140      	cbz	r0, 8008154 <__sfmoreglue+0x28>
 8008142:	2100      	movs	r1, #0
 8008144:	e9c0 1600 	strd	r1, r6, [r0]
 8008148:	300c      	adds	r0, #12
 800814a:	60a0      	str	r0, [r4, #8]
 800814c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008150:	f7ff fd64 	bl	8007c1c <memset>
 8008154:	4620      	mov	r0, r4
 8008156:	bd70      	pop	{r4, r5, r6, pc}

08008158 <__sfp_lock_acquire>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__sfp_lock_acquire+0x8>)
 800815a:	f000 b8b3 	b.w	80082c4 <__retarget_lock_acquire_recursive>
 800815e:	bf00      	nop
 8008160:	20002440 	.word	0x20002440

08008164 <__sfp_lock_release>:
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <__sfp_lock_release+0x8>)
 8008166:	f000 b8ae 	b.w	80082c6 <__retarget_lock_release_recursive>
 800816a:	bf00      	nop
 800816c:	20002440 	.word	0x20002440

08008170 <__sinit_lock_acquire>:
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <__sinit_lock_acquire+0x8>)
 8008172:	f000 b8a7 	b.w	80082c4 <__retarget_lock_acquire_recursive>
 8008176:	bf00      	nop
 8008178:	2000243b 	.word	0x2000243b

0800817c <__sinit_lock_release>:
 800817c:	4801      	ldr	r0, [pc, #4]	; (8008184 <__sinit_lock_release+0x8>)
 800817e:	f000 b8a2 	b.w	80082c6 <__retarget_lock_release_recursive>
 8008182:	bf00      	nop
 8008184:	2000243b 	.word	0x2000243b

08008188 <__sinit>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4604      	mov	r4, r0
 800818c:	f7ff fff0 	bl	8008170 <__sinit_lock_acquire>
 8008190:	69a3      	ldr	r3, [r4, #24]
 8008192:	b11b      	cbz	r3, 800819c <__sinit+0x14>
 8008194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008198:	f7ff bff0 	b.w	800817c <__sinit_lock_release>
 800819c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081a0:	6523      	str	r3, [r4, #80]	; 0x50
 80081a2:	4b13      	ldr	r3, [pc, #76]	; (80081f0 <__sinit+0x68>)
 80081a4:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <__sinit+0x6c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	bf04      	itt	eq
 80081ae:	2301      	moveq	r3, #1
 80081b0:	61a3      	streq	r3, [r4, #24]
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f820 	bl	80081f8 <__sfp>
 80081b8:	6060      	str	r0, [r4, #4]
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f81c 	bl	80081f8 <__sfp>
 80081c0:	60a0      	str	r0, [r4, #8]
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f818 	bl	80081f8 <__sfp>
 80081c8:	2200      	movs	r2, #0
 80081ca:	60e0      	str	r0, [r4, #12]
 80081cc:	2104      	movs	r1, #4
 80081ce:	6860      	ldr	r0, [r4, #4]
 80081d0:	f7ff ff82 	bl	80080d8 <std>
 80081d4:	68a0      	ldr	r0, [r4, #8]
 80081d6:	2201      	movs	r2, #1
 80081d8:	2109      	movs	r1, #9
 80081da:	f7ff ff7d 	bl	80080d8 <std>
 80081de:	68e0      	ldr	r0, [r4, #12]
 80081e0:	2202      	movs	r2, #2
 80081e2:	2112      	movs	r1, #18
 80081e4:	f7ff ff78 	bl	80080d8 <std>
 80081e8:	2301      	movs	r3, #1
 80081ea:	61a3      	str	r3, [r4, #24]
 80081ec:	e7d2      	b.n	8008194 <__sinit+0xc>
 80081ee:	bf00      	nop
 80081f0:	08009130 	.word	0x08009130
 80081f4:	08008121 	.word	0x08008121

080081f8 <__sfp>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	4607      	mov	r7, r0
 80081fc:	f7ff ffac 	bl	8008158 <__sfp_lock_acquire>
 8008200:	4b1e      	ldr	r3, [pc, #120]	; (800827c <__sfp+0x84>)
 8008202:	681e      	ldr	r6, [r3, #0]
 8008204:	69b3      	ldr	r3, [r6, #24]
 8008206:	b913      	cbnz	r3, 800820e <__sfp+0x16>
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff ffbd 	bl	8008188 <__sinit>
 800820e:	3648      	adds	r6, #72	; 0x48
 8008210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008214:	3b01      	subs	r3, #1
 8008216:	d503      	bpl.n	8008220 <__sfp+0x28>
 8008218:	6833      	ldr	r3, [r6, #0]
 800821a:	b30b      	cbz	r3, 8008260 <__sfp+0x68>
 800821c:	6836      	ldr	r6, [r6, #0]
 800821e:	e7f7      	b.n	8008210 <__sfp+0x18>
 8008220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008224:	b9d5      	cbnz	r5, 800825c <__sfp+0x64>
 8008226:	4b16      	ldr	r3, [pc, #88]	; (8008280 <__sfp+0x88>)
 8008228:	60e3      	str	r3, [r4, #12]
 800822a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800822e:	6665      	str	r5, [r4, #100]	; 0x64
 8008230:	f000 f847 	bl	80082c2 <__retarget_lock_init_recursive>
 8008234:	f7ff ff96 	bl	8008164 <__sfp_lock_release>
 8008238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800823c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008240:	6025      	str	r5, [r4, #0]
 8008242:	61a5      	str	r5, [r4, #24]
 8008244:	2208      	movs	r2, #8
 8008246:	4629      	mov	r1, r5
 8008248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800824c:	f7ff fce6 	bl	8007c1c <memset>
 8008250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008258:	4620      	mov	r0, r4
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	3468      	adds	r4, #104	; 0x68
 800825e:	e7d9      	b.n	8008214 <__sfp+0x1c>
 8008260:	2104      	movs	r1, #4
 8008262:	4638      	mov	r0, r7
 8008264:	f7ff ff62 	bl	800812c <__sfmoreglue>
 8008268:	4604      	mov	r4, r0
 800826a:	6030      	str	r0, [r6, #0]
 800826c:	2800      	cmp	r0, #0
 800826e:	d1d5      	bne.n	800821c <__sfp+0x24>
 8008270:	f7ff ff78 	bl	8008164 <__sfp_lock_release>
 8008274:	230c      	movs	r3, #12
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	e7ee      	b.n	8008258 <__sfp+0x60>
 800827a:	bf00      	nop
 800827c:	08009130 	.word	0x08009130
 8008280:	ffff0001 	.word	0xffff0001

08008284 <_fwalk_reent>:
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008288:	4606      	mov	r6, r0
 800828a:	4688      	mov	r8, r1
 800828c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008290:	2700      	movs	r7, #0
 8008292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008296:	f1b9 0901 	subs.w	r9, r9, #1
 800829a:	d505      	bpl.n	80082a8 <_fwalk_reent+0x24>
 800829c:	6824      	ldr	r4, [r4, #0]
 800829e:	2c00      	cmp	r4, #0
 80082a0:	d1f7      	bne.n	8008292 <_fwalk_reent+0xe>
 80082a2:	4638      	mov	r0, r7
 80082a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a8:	89ab      	ldrh	r3, [r5, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d907      	bls.n	80082be <_fwalk_reent+0x3a>
 80082ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082b2:	3301      	adds	r3, #1
 80082b4:	d003      	beq.n	80082be <_fwalk_reent+0x3a>
 80082b6:	4629      	mov	r1, r5
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	4307      	orrs	r7, r0
 80082be:	3568      	adds	r5, #104	; 0x68
 80082c0:	e7e9      	b.n	8008296 <_fwalk_reent+0x12>

080082c2 <__retarget_lock_init_recursive>:
 80082c2:	4770      	bx	lr

080082c4 <__retarget_lock_acquire_recursive>:
 80082c4:	4770      	bx	lr

080082c6 <__retarget_lock_release_recursive>:
 80082c6:	4770      	bx	lr

080082c8 <__swhatbuf_r>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	460e      	mov	r6, r1
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	b096      	sub	sp, #88	; 0x58
 80082d4:	4614      	mov	r4, r2
 80082d6:	461d      	mov	r5, r3
 80082d8:	da07      	bge.n	80082ea <__swhatbuf_r+0x22>
 80082da:	2300      	movs	r3, #0
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	89b3      	ldrh	r3, [r6, #12]
 80082e0:	061a      	lsls	r2, r3, #24
 80082e2:	d410      	bmi.n	8008306 <__swhatbuf_r+0x3e>
 80082e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e8:	e00e      	b.n	8008308 <__swhatbuf_r+0x40>
 80082ea:	466a      	mov	r2, sp
 80082ec:	f000 fdba 	bl	8008e64 <_fstat_r>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	dbf2      	blt.n	80082da <__swhatbuf_r+0x12>
 80082f4:	9a01      	ldr	r2, [sp, #4]
 80082f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082fe:	425a      	negs	r2, r3
 8008300:	415a      	adcs	r2, r3
 8008302:	602a      	str	r2, [r5, #0]
 8008304:	e7ee      	b.n	80082e4 <__swhatbuf_r+0x1c>
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	2000      	movs	r0, #0
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	b016      	add	sp, #88	; 0x58
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__smakebuf_r>:
 8008310:	898b      	ldrh	r3, [r1, #12]
 8008312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008314:	079d      	lsls	r5, r3, #30
 8008316:	4606      	mov	r6, r0
 8008318:	460c      	mov	r4, r1
 800831a:	d507      	bpl.n	800832c <__smakebuf_r+0x1c>
 800831c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	6123      	str	r3, [r4, #16]
 8008324:	2301      	movs	r3, #1
 8008326:	6163      	str	r3, [r4, #20]
 8008328:	b002      	add	sp, #8
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	ab01      	add	r3, sp, #4
 800832e:	466a      	mov	r2, sp
 8008330:	f7ff ffca 	bl	80082c8 <__swhatbuf_r>
 8008334:	9900      	ldr	r1, [sp, #0]
 8008336:	4605      	mov	r5, r0
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f879 	bl	8008430 <_malloc_r>
 800833e:	b948      	cbnz	r0, 8008354 <__smakebuf_r+0x44>
 8008340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008344:	059a      	lsls	r2, r3, #22
 8008346:	d4ef      	bmi.n	8008328 <__smakebuf_r+0x18>
 8008348:	f023 0303 	bic.w	r3, r3, #3
 800834c:	f043 0302 	orr.w	r3, r3, #2
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	e7e3      	b.n	800831c <__smakebuf_r+0xc>
 8008354:	4b0d      	ldr	r3, [pc, #52]	; (800838c <__smakebuf_r+0x7c>)
 8008356:	62b3      	str	r3, [r6, #40]	; 0x28
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	6020      	str	r0, [r4, #0]
 800835c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	6163      	str	r3, [r4, #20]
 8008366:	9b01      	ldr	r3, [sp, #4]
 8008368:	6120      	str	r0, [r4, #16]
 800836a:	b15b      	cbz	r3, 8008384 <__smakebuf_r+0x74>
 800836c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008370:	4630      	mov	r0, r6
 8008372:	f000 fd89 	bl	8008e88 <_isatty_r>
 8008376:	b128      	cbz	r0, 8008384 <__smakebuf_r+0x74>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	89a0      	ldrh	r0, [r4, #12]
 8008386:	4305      	orrs	r5, r0
 8008388:	81a5      	strh	r5, [r4, #12]
 800838a:	e7cd      	b.n	8008328 <__smakebuf_r+0x18>
 800838c:	08008121 	.word	0x08008121

08008390 <_free_r>:
 8008390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008392:	2900      	cmp	r1, #0
 8008394:	d048      	beq.n	8008428 <_free_r+0x98>
 8008396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f1a1 0404 	sub.w	r4, r1, #4
 80083a2:	bfb8      	it	lt
 80083a4:	18e4      	addlt	r4, r4, r3
 80083a6:	f000 fdab 	bl	8008f00 <__malloc_lock>
 80083aa:	4a20      	ldr	r2, [pc, #128]	; (800842c <_free_r+0x9c>)
 80083ac:	9801      	ldr	r0, [sp, #4]
 80083ae:	6813      	ldr	r3, [r2, #0]
 80083b0:	4615      	mov	r5, r2
 80083b2:	b933      	cbnz	r3, 80083c2 <_free_r+0x32>
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	6014      	str	r4, [r2, #0]
 80083b8:	b003      	add	sp, #12
 80083ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083be:	f000 bda5 	b.w	8008f0c <__malloc_unlock>
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	d90b      	bls.n	80083de <_free_r+0x4e>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	1862      	adds	r2, r4, r1
 80083ca:	4293      	cmp	r3, r2
 80083cc:	bf04      	itt	eq
 80083ce:	681a      	ldreq	r2, [r3, #0]
 80083d0:	685b      	ldreq	r3, [r3, #4]
 80083d2:	6063      	str	r3, [r4, #4]
 80083d4:	bf04      	itt	eq
 80083d6:	1852      	addeq	r2, r2, r1
 80083d8:	6022      	streq	r2, [r4, #0]
 80083da:	602c      	str	r4, [r5, #0]
 80083dc:	e7ec      	b.n	80083b8 <_free_r+0x28>
 80083de:	461a      	mov	r2, r3
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	b10b      	cbz	r3, 80083e8 <_free_r+0x58>
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d9fa      	bls.n	80083de <_free_r+0x4e>
 80083e8:	6811      	ldr	r1, [r2, #0]
 80083ea:	1855      	adds	r5, r2, r1
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d10b      	bne.n	8008408 <_free_r+0x78>
 80083f0:	6824      	ldr	r4, [r4, #0]
 80083f2:	4421      	add	r1, r4
 80083f4:	1854      	adds	r4, r2, r1
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	d1dd      	bne.n	80083b8 <_free_r+0x28>
 80083fc:	681c      	ldr	r4, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	6053      	str	r3, [r2, #4]
 8008402:	4421      	add	r1, r4
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	e7d7      	b.n	80083b8 <_free_r+0x28>
 8008408:	d902      	bls.n	8008410 <_free_r+0x80>
 800840a:	230c      	movs	r3, #12
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	e7d3      	b.n	80083b8 <_free_r+0x28>
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	1961      	adds	r1, r4, r5
 8008414:	428b      	cmp	r3, r1
 8008416:	bf04      	itt	eq
 8008418:	6819      	ldreq	r1, [r3, #0]
 800841a:	685b      	ldreq	r3, [r3, #4]
 800841c:	6063      	str	r3, [r4, #4]
 800841e:	bf04      	itt	eq
 8008420:	1949      	addeq	r1, r1, r5
 8008422:	6021      	streq	r1, [r4, #0]
 8008424:	6054      	str	r4, [r2, #4]
 8008426:	e7c7      	b.n	80083b8 <_free_r+0x28>
 8008428:	b003      	add	sp, #12
 800842a:	bd30      	pop	{r4, r5, pc}
 800842c:	2000195c 	.word	0x2000195c

08008430 <_malloc_r>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	1ccd      	adds	r5, r1, #3
 8008434:	f025 0503 	bic.w	r5, r5, #3
 8008438:	3508      	adds	r5, #8
 800843a:	2d0c      	cmp	r5, #12
 800843c:	bf38      	it	cc
 800843e:	250c      	movcc	r5, #12
 8008440:	2d00      	cmp	r5, #0
 8008442:	4606      	mov	r6, r0
 8008444:	db01      	blt.n	800844a <_malloc_r+0x1a>
 8008446:	42a9      	cmp	r1, r5
 8008448:	d903      	bls.n	8008452 <_malloc_r+0x22>
 800844a:	230c      	movs	r3, #12
 800844c:	6033      	str	r3, [r6, #0]
 800844e:	2000      	movs	r0, #0
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008452:	f000 fd55 	bl	8008f00 <__malloc_lock>
 8008456:	4921      	ldr	r1, [pc, #132]	; (80084dc <_malloc_r+0xac>)
 8008458:	680a      	ldr	r2, [r1, #0]
 800845a:	4614      	mov	r4, r2
 800845c:	b99c      	cbnz	r4, 8008486 <_malloc_r+0x56>
 800845e:	4f20      	ldr	r7, [pc, #128]	; (80084e0 <_malloc_r+0xb0>)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	b923      	cbnz	r3, 800846e <_malloc_r+0x3e>
 8008464:	4621      	mov	r1, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f000 fc86 	bl	8008d78 <_sbrk_r>
 800846c:	6038      	str	r0, [r7, #0]
 800846e:	4629      	mov	r1, r5
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fc81 	bl	8008d78 <_sbrk_r>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d123      	bne.n	80084c2 <_malloc_r+0x92>
 800847a:	230c      	movs	r3, #12
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	4630      	mov	r0, r6
 8008480:	f000 fd44 	bl	8008f0c <__malloc_unlock>
 8008484:	e7e3      	b.n	800844e <_malloc_r+0x1e>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	1b5b      	subs	r3, r3, r5
 800848a:	d417      	bmi.n	80084bc <_malloc_r+0x8c>
 800848c:	2b0b      	cmp	r3, #11
 800848e:	d903      	bls.n	8008498 <_malloc_r+0x68>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	441c      	add	r4, r3
 8008494:	6025      	str	r5, [r4, #0]
 8008496:	e004      	b.n	80084a2 <_malloc_r+0x72>
 8008498:	6863      	ldr	r3, [r4, #4]
 800849a:	42a2      	cmp	r2, r4
 800849c:	bf0c      	ite	eq
 800849e:	600b      	streq	r3, [r1, #0]
 80084a0:	6053      	strne	r3, [r2, #4]
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 fd32 	bl	8008f0c <__malloc_unlock>
 80084a8:	f104 000b 	add.w	r0, r4, #11
 80084ac:	1d23      	adds	r3, r4, #4
 80084ae:	f020 0007 	bic.w	r0, r0, #7
 80084b2:	1ac2      	subs	r2, r0, r3
 80084b4:	d0cc      	beq.n	8008450 <_malloc_r+0x20>
 80084b6:	1a1b      	subs	r3, r3, r0
 80084b8:	50a3      	str	r3, [r4, r2]
 80084ba:	e7c9      	b.n	8008450 <_malloc_r+0x20>
 80084bc:	4622      	mov	r2, r4
 80084be:	6864      	ldr	r4, [r4, #4]
 80084c0:	e7cc      	b.n	800845c <_malloc_r+0x2c>
 80084c2:	1cc4      	adds	r4, r0, #3
 80084c4:	f024 0403 	bic.w	r4, r4, #3
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d0e3      	beq.n	8008494 <_malloc_r+0x64>
 80084cc:	1a21      	subs	r1, r4, r0
 80084ce:	4630      	mov	r0, r6
 80084d0:	f000 fc52 	bl	8008d78 <_sbrk_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1dd      	bne.n	8008494 <_malloc_r+0x64>
 80084d8:	e7cf      	b.n	800847a <_malloc_r+0x4a>
 80084da:	bf00      	nop
 80084dc:	2000195c 	.word	0x2000195c
 80084e0:	20001960 	.word	0x20001960

080084e4 <__ssputs_r>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	688e      	ldr	r6, [r1, #8]
 80084ea:	429e      	cmp	r6, r3
 80084ec:	4682      	mov	sl, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4690      	mov	r8, r2
 80084f2:	461f      	mov	r7, r3
 80084f4:	d838      	bhi.n	8008568 <__ssputs_r+0x84>
 80084f6:	898a      	ldrh	r2, [r1, #12]
 80084f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084fc:	d032      	beq.n	8008564 <__ssputs_r+0x80>
 80084fe:	6825      	ldr	r5, [r4, #0]
 8008500:	6909      	ldr	r1, [r1, #16]
 8008502:	eba5 0901 	sub.w	r9, r5, r1
 8008506:	6965      	ldr	r5, [r4, #20]
 8008508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800850c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008510:	3301      	adds	r3, #1
 8008512:	444b      	add	r3, r9
 8008514:	106d      	asrs	r5, r5, #1
 8008516:	429d      	cmp	r5, r3
 8008518:	bf38      	it	cc
 800851a:	461d      	movcc	r5, r3
 800851c:	0553      	lsls	r3, r2, #21
 800851e:	d531      	bpl.n	8008584 <__ssputs_r+0xa0>
 8008520:	4629      	mov	r1, r5
 8008522:	f7ff ff85 	bl	8008430 <_malloc_r>
 8008526:	4606      	mov	r6, r0
 8008528:	b950      	cbnz	r0, 8008540 <__ssputs_r+0x5c>
 800852a:	230c      	movs	r3, #12
 800852c:	f8ca 3000 	str.w	r3, [sl]
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008540:	6921      	ldr	r1, [r4, #16]
 8008542:	464a      	mov	r2, r9
 8008544:	f7ff fb5c 	bl	8007c00 <memcpy>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	6126      	str	r6, [r4, #16]
 8008556:	6165      	str	r5, [r4, #20]
 8008558:	444e      	add	r6, r9
 800855a:	eba5 0509 	sub.w	r5, r5, r9
 800855e:	6026      	str	r6, [r4, #0]
 8008560:	60a5      	str	r5, [r4, #8]
 8008562:	463e      	mov	r6, r7
 8008564:	42be      	cmp	r6, r7
 8008566:	d900      	bls.n	800856a <__ssputs_r+0x86>
 8008568:	463e      	mov	r6, r7
 800856a:	4632      	mov	r2, r6
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	4641      	mov	r1, r8
 8008570:	f000 fcac 	bl	8008ecc <memmove>
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	4432      	add	r2, r6
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6022      	str	r2, [r4, #0]
 8008580:	2000      	movs	r0, #0
 8008582:	e7db      	b.n	800853c <__ssputs_r+0x58>
 8008584:	462a      	mov	r2, r5
 8008586:	f000 fcc7 	bl	8008f18 <_realloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	2800      	cmp	r0, #0
 800858e:	d1e1      	bne.n	8008554 <__ssputs_r+0x70>
 8008590:	6921      	ldr	r1, [r4, #16]
 8008592:	4650      	mov	r0, sl
 8008594:	f7ff fefc 	bl	8008390 <_free_r>
 8008598:	e7c7      	b.n	800852a <__ssputs_r+0x46>
	...

0800859c <_svfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	4698      	mov	r8, r3
 80085a2:	898b      	ldrh	r3, [r1, #12]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	b09d      	sub	sp, #116	; 0x74
 80085a8:	4607      	mov	r7, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	4614      	mov	r4, r2
 80085ae:	d50e      	bpl.n	80085ce <_svfiprintf_r+0x32>
 80085b0:	690b      	ldr	r3, [r1, #16]
 80085b2:	b963      	cbnz	r3, 80085ce <_svfiprintf_r+0x32>
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	f7ff ff3b 	bl	8008430 <_malloc_r>
 80085ba:	6028      	str	r0, [r5, #0]
 80085bc:	6128      	str	r0, [r5, #16]
 80085be:	b920      	cbnz	r0, 80085ca <_svfiprintf_r+0x2e>
 80085c0:	230c      	movs	r3, #12
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c8:	e0d1      	b.n	800876e <_svfiprintf_r+0x1d2>
 80085ca:	2340      	movs	r3, #64	; 0x40
 80085cc:	616b      	str	r3, [r5, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9309      	str	r3, [sp, #36]	; 0x24
 80085d2:	2320      	movs	r3, #32
 80085d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80085dc:	2330      	movs	r3, #48	; 0x30
 80085de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008788 <_svfiprintf_r+0x1ec>
 80085e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085e6:	f04f 0901 	mov.w	r9, #1
 80085ea:	4623      	mov	r3, r4
 80085ec:	469a      	mov	sl, r3
 80085ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f2:	b10a      	cbz	r2, 80085f8 <_svfiprintf_r+0x5c>
 80085f4:	2a25      	cmp	r2, #37	; 0x25
 80085f6:	d1f9      	bne.n	80085ec <_svfiprintf_r+0x50>
 80085f8:	ebba 0b04 	subs.w	fp, sl, r4
 80085fc:	d00b      	beq.n	8008616 <_svfiprintf_r+0x7a>
 80085fe:	465b      	mov	r3, fp
 8008600:	4622      	mov	r2, r4
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ff6d 	bl	80084e4 <__ssputs_r>
 800860a:	3001      	adds	r0, #1
 800860c:	f000 80aa 	beq.w	8008764 <_svfiprintf_r+0x1c8>
 8008610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008612:	445a      	add	r2, fp
 8008614:	9209      	str	r2, [sp, #36]	; 0x24
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80a2 	beq.w	8008764 <_svfiprintf_r+0x1c8>
 8008620:	2300      	movs	r3, #0
 8008622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862a:	f10a 0a01 	add.w	sl, sl, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008636:	931a      	str	r3, [sp, #104]	; 0x68
 8008638:	4654      	mov	r4, sl
 800863a:	2205      	movs	r2, #5
 800863c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008640:	4851      	ldr	r0, [pc, #324]	; (8008788 <_svfiprintf_r+0x1ec>)
 8008642:	f7f7 fdcd 	bl	80001e0 <memchr>
 8008646:	9a04      	ldr	r2, [sp, #16]
 8008648:	b9d8      	cbnz	r0, 8008682 <_svfiprintf_r+0xe6>
 800864a:	06d0      	lsls	r0, r2, #27
 800864c:	bf44      	itt	mi
 800864e:	2320      	movmi	r3, #32
 8008650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008654:	0711      	lsls	r1, r2, #28
 8008656:	bf44      	itt	mi
 8008658:	232b      	movmi	r3, #43	; 0x2b
 800865a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800865e:	f89a 3000 	ldrb.w	r3, [sl]
 8008662:	2b2a      	cmp	r3, #42	; 0x2a
 8008664:	d015      	beq.n	8008692 <_svfiprintf_r+0xf6>
 8008666:	9a07      	ldr	r2, [sp, #28]
 8008668:	4654      	mov	r4, sl
 800866a:	2000      	movs	r0, #0
 800866c:	f04f 0c0a 	mov.w	ip, #10
 8008670:	4621      	mov	r1, r4
 8008672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008676:	3b30      	subs	r3, #48	; 0x30
 8008678:	2b09      	cmp	r3, #9
 800867a:	d94e      	bls.n	800871a <_svfiprintf_r+0x17e>
 800867c:	b1b0      	cbz	r0, 80086ac <_svfiprintf_r+0x110>
 800867e:	9207      	str	r2, [sp, #28]
 8008680:	e014      	b.n	80086ac <_svfiprintf_r+0x110>
 8008682:	eba0 0308 	sub.w	r3, r0, r8
 8008686:	fa09 f303 	lsl.w	r3, r9, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	46a2      	mov	sl, r4
 8008690:	e7d2      	b.n	8008638 <_svfiprintf_r+0x9c>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	1d19      	adds	r1, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9103      	str	r1, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfbb      	ittet	lt
 800869e:	425b      	neglt	r3, r3
 80086a0:	f042 0202 	orrlt.w	r2, r2, #2
 80086a4:	9307      	strge	r3, [sp, #28]
 80086a6:	9307      	strlt	r3, [sp, #28]
 80086a8:	bfb8      	it	lt
 80086aa:	9204      	strlt	r2, [sp, #16]
 80086ac:	7823      	ldrb	r3, [r4, #0]
 80086ae:	2b2e      	cmp	r3, #46	; 0x2e
 80086b0:	d10c      	bne.n	80086cc <_svfiprintf_r+0x130>
 80086b2:	7863      	ldrb	r3, [r4, #1]
 80086b4:	2b2a      	cmp	r3, #42	; 0x2a
 80086b6:	d135      	bne.n	8008724 <_svfiprintf_r+0x188>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	9203      	str	r2, [sp, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bfb8      	it	lt
 80086c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086c8:	3402      	adds	r4, #2
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008798 <_svfiprintf_r+0x1fc>
 80086d0:	7821      	ldrb	r1, [r4, #0]
 80086d2:	2203      	movs	r2, #3
 80086d4:	4650      	mov	r0, sl
 80086d6:	f7f7 fd83 	bl	80001e0 <memchr>
 80086da:	b140      	cbz	r0, 80086ee <_svfiprintf_r+0x152>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	eba0 000a 	sub.w	r0, r0, sl
 80086e2:	fa03 f000 	lsl.w	r0, r3, r0
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	4303      	orrs	r3, r0
 80086ea:	3401      	adds	r4, #1
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f2:	4826      	ldr	r0, [pc, #152]	; (800878c <_svfiprintf_r+0x1f0>)
 80086f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086f8:	2206      	movs	r2, #6
 80086fa:	f7f7 fd71 	bl	80001e0 <memchr>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d038      	beq.n	8008774 <_svfiprintf_r+0x1d8>
 8008702:	4b23      	ldr	r3, [pc, #140]	; (8008790 <_svfiprintf_r+0x1f4>)
 8008704:	bb1b      	cbnz	r3, 800874e <_svfiprintf_r+0x1b2>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	3307      	adds	r3, #7
 800870a:	f023 0307 	bic.w	r3, r3, #7
 800870e:	3308      	adds	r3, #8
 8008710:	9303      	str	r3, [sp, #12]
 8008712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008714:	4433      	add	r3, r6
 8008716:	9309      	str	r3, [sp, #36]	; 0x24
 8008718:	e767      	b.n	80085ea <_svfiprintf_r+0x4e>
 800871a:	fb0c 3202 	mla	r2, ip, r2, r3
 800871e:	460c      	mov	r4, r1
 8008720:	2001      	movs	r0, #1
 8008722:	e7a5      	b.n	8008670 <_svfiprintf_r+0xd4>
 8008724:	2300      	movs	r3, #0
 8008726:	3401      	adds	r4, #1
 8008728:	9305      	str	r3, [sp, #20]
 800872a:	4619      	mov	r1, r3
 800872c:	f04f 0c0a 	mov.w	ip, #10
 8008730:	4620      	mov	r0, r4
 8008732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008736:	3a30      	subs	r2, #48	; 0x30
 8008738:	2a09      	cmp	r2, #9
 800873a:	d903      	bls.n	8008744 <_svfiprintf_r+0x1a8>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0c5      	beq.n	80086cc <_svfiprintf_r+0x130>
 8008740:	9105      	str	r1, [sp, #20]
 8008742:	e7c3      	b.n	80086cc <_svfiprintf_r+0x130>
 8008744:	fb0c 2101 	mla	r1, ip, r1, r2
 8008748:	4604      	mov	r4, r0
 800874a:	2301      	movs	r3, #1
 800874c:	e7f0      	b.n	8008730 <_svfiprintf_r+0x194>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <_svfiprintf_r+0x1f8>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	4638      	mov	r0, r7
 800875a:	f3af 8000 	nop.w
 800875e:	1c42      	adds	r2, r0, #1
 8008760:	4606      	mov	r6, r0
 8008762:	d1d6      	bne.n	8008712 <_svfiprintf_r+0x176>
 8008764:	89ab      	ldrh	r3, [r5, #12]
 8008766:	065b      	lsls	r3, r3, #25
 8008768:	f53f af2c 	bmi.w	80085c4 <_svfiprintf_r+0x28>
 800876c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876e:	b01d      	add	sp, #116	; 0x74
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b06      	ldr	r3, [pc, #24]	; (8008794 <_svfiprintf_r+0x1f8>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4638      	mov	r0, r7
 8008780:	f000 f9d4 	bl	8008b2c <_printf_i>
 8008784:	e7eb      	b.n	800875e <_svfiprintf_r+0x1c2>
 8008786:	bf00      	nop
 8008788:	08009194 	.word	0x08009194
 800878c:	0800919e 	.word	0x0800919e
 8008790:	00000000 	.word	0x00000000
 8008794:	080084e5 	.word	0x080084e5
 8008798:	0800919a 	.word	0x0800919a

0800879c <__sfputc_r>:
 800879c:	6893      	ldr	r3, [r2, #8]
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	b410      	push	{r4}
 80087a4:	6093      	str	r3, [r2, #8]
 80087a6:	da08      	bge.n	80087ba <__sfputc_r+0x1e>
 80087a8:	6994      	ldr	r4, [r2, #24]
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	db01      	blt.n	80087b2 <__sfputc_r+0x16>
 80087ae:	290a      	cmp	r1, #10
 80087b0:	d103      	bne.n	80087ba <__sfputc_r+0x1e>
 80087b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b6:	f7ff bb0d 	b.w	8007dd4 <__swbuf_r>
 80087ba:	6813      	ldr	r3, [r2, #0]
 80087bc:	1c58      	adds	r0, r3, #1
 80087be:	6010      	str	r0, [r2, #0]
 80087c0:	7019      	strb	r1, [r3, #0]
 80087c2:	4608      	mov	r0, r1
 80087c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <__sfputs_r>:
 80087ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	4614      	mov	r4, r2
 80087d2:	18d5      	adds	r5, r2, r3
 80087d4:	42ac      	cmp	r4, r5
 80087d6:	d101      	bne.n	80087dc <__sfputs_r+0x12>
 80087d8:	2000      	movs	r0, #0
 80087da:	e007      	b.n	80087ec <__sfputs_r+0x22>
 80087dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e0:	463a      	mov	r2, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ffda 	bl	800879c <__sfputc_r>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d1f3      	bne.n	80087d4 <__sfputs_r+0xa>
 80087ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087f0 <_vfiprintf_r>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	460d      	mov	r5, r1
 80087f6:	b09d      	sub	sp, #116	; 0x74
 80087f8:	4614      	mov	r4, r2
 80087fa:	4698      	mov	r8, r3
 80087fc:	4606      	mov	r6, r0
 80087fe:	b118      	cbz	r0, 8008808 <_vfiprintf_r+0x18>
 8008800:	6983      	ldr	r3, [r0, #24]
 8008802:	b90b      	cbnz	r3, 8008808 <_vfiprintf_r+0x18>
 8008804:	f7ff fcc0 	bl	8008188 <__sinit>
 8008808:	4b89      	ldr	r3, [pc, #548]	; (8008a30 <_vfiprintf_r+0x240>)
 800880a:	429d      	cmp	r5, r3
 800880c:	d11b      	bne.n	8008846 <_vfiprintf_r+0x56>
 800880e:	6875      	ldr	r5, [r6, #4]
 8008810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008812:	07d9      	lsls	r1, r3, #31
 8008814:	d405      	bmi.n	8008822 <_vfiprintf_r+0x32>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	059a      	lsls	r2, r3, #22
 800881a:	d402      	bmi.n	8008822 <_vfiprintf_r+0x32>
 800881c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800881e:	f7ff fd51 	bl	80082c4 <__retarget_lock_acquire_recursive>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	071b      	lsls	r3, r3, #28
 8008826:	d501      	bpl.n	800882c <_vfiprintf_r+0x3c>
 8008828:	692b      	ldr	r3, [r5, #16]
 800882a:	b9eb      	cbnz	r3, 8008868 <_vfiprintf_r+0x78>
 800882c:	4629      	mov	r1, r5
 800882e:	4630      	mov	r0, r6
 8008830:	f7ff fb22 	bl	8007e78 <__swsetup_r>
 8008834:	b1c0      	cbz	r0, 8008868 <_vfiprintf_r+0x78>
 8008836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008838:	07dc      	lsls	r4, r3, #31
 800883a:	d50e      	bpl.n	800885a <_vfiprintf_r+0x6a>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008840:	b01d      	add	sp, #116	; 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	4b7b      	ldr	r3, [pc, #492]	; (8008a34 <_vfiprintf_r+0x244>)
 8008848:	429d      	cmp	r5, r3
 800884a:	d101      	bne.n	8008850 <_vfiprintf_r+0x60>
 800884c:	68b5      	ldr	r5, [r6, #8]
 800884e:	e7df      	b.n	8008810 <_vfiprintf_r+0x20>
 8008850:	4b79      	ldr	r3, [pc, #484]	; (8008a38 <_vfiprintf_r+0x248>)
 8008852:	429d      	cmp	r5, r3
 8008854:	bf08      	it	eq
 8008856:	68f5      	ldreq	r5, [r6, #12]
 8008858:	e7da      	b.n	8008810 <_vfiprintf_r+0x20>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	0598      	lsls	r0, r3, #22
 800885e:	d4ed      	bmi.n	800883c <_vfiprintf_r+0x4c>
 8008860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008862:	f7ff fd30 	bl	80082c6 <__retarget_lock_release_recursive>
 8008866:	e7e9      	b.n	800883c <_vfiprintf_r+0x4c>
 8008868:	2300      	movs	r3, #0
 800886a:	9309      	str	r3, [sp, #36]	; 0x24
 800886c:	2320      	movs	r3, #32
 800886e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008872:	f8cd 800c 	str.w	r8, [sp, #12]
 8008876:	2330      	movs	r3, #48	; 0x30
 8008878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a3c <_vfiprintf_r+0x24c>
 800887c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008880:	f04f 0901 	mov.w	r9, #1
 8008884:	4623      	mov	r3, r4
 8008886:	469a      	mov	sl, r3
 8008888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888c:	b10a      	cbz	r2, 8008892 <_vfiprintf_r+0xa2>
 800888e:	2a25      	cmp	r2, #37	; 0x25
 8008890:	d1f9      	bne.n	8008886 <_vfiprintf_r+0x96>
 8008892:	ebba 0b04 	subs.w	fp, sl, r4
 8008896:	d00b      	beq.n	80088b0 <_vfiprintf_r+0xc0>
 8008898:	465b      	mov	r3, fp
 800889a:	4622      	mov	r2, r4
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff93 	bl	80087ca <__sfputs_r>
 80088a4:	3001      	adds	r0, #1
 80088a6:	f000 80aa 	beq.w	80089fe <_vfiprintf_r+0x20e>
 80088aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ac:	445a      	add	r2, fp
 80088ae:	9209      	str	r2, [sp, #36]	; 0x24
 80088b0:	f89a 3000 	ldrb.w	r3, [sl]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80a2 	beq.w	80089fe <_vfiprintf_r+0x20e>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c4:	f10a 0a01 	add.w	sl, sl, #1
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	9307      	str	r3, [sp, #28]
 80088cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d0:	931a      	str	r3, [sp, #104]	; 0x68
 80088d2:	4654      	mov	r4, sl
 80088d4:	2205      	movs	r2, #5
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4858      	ldr	r0, [pc, #352]	; (8008a3c <_vfiprintf_r+0x24c>)
 80088dc:	f7f7 fc80 	bl	80001e0 <memchr>
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	b9d8      	cbnz	r0, 800891c <_vfiprintf_r+0x12c>
 80088e4:	06d1      	lsls	r1, r2, #27
 80088e6:	bf44      	itt	mi
 80088e8:	2320      	movmi	r3, #32
 80088ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ee:	0713      	lsls	r3, r2, #28
 80088f0:	bf44      	itt	mi
 80088f2:	232b      	movmi	r3, #43	; 0x2b
 80088f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f8:	f89a 3000 	ldrb.w	r3, [sl]
 80088fc:	2b2a      	cmp	r3, #42	; 0x2a
 80088fe:	d015      	beq.n	800892c <_vfiprintf_r+0x13c>
 8008900:	9a07      	ldr	r2, [sp, #28]
 8008902:	4654      	mov	r4, sl
 8008904:	2000      	movs	r0, #0
 8008906:	f04f 0c0a 	mov.w	ip, #10
 800890a:	4621      	mov	r1, r4
 800890c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008910:	3b30      	subs	r3, #48	; 0x30
 8008912:	2b09      	cmp	r3, #9
 8008914:	d94e      	bls.n	80089b4 <_vfiprintf_r+0x1c4>
 8008916:	b1b0      	cbz	r0, 8008946 <_vfiprintf_r+0x156>
 8008918:	9207      	str	r2, [sp, #28]
 800891a:	e014      	b.n	8008946 <_vfiprintf_r+0x156>
 800891c:	eba0 0308 	sub.w	r3, r0, r8
 8008920:	fa09 f303 	lsl.w	r3, r9, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	46a2      	mov	sl, r4
 800892a:	e7d2      	b.n	80088d2 <_vfiprintf_r+0xe2>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d19      	adds	r1, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9103      	str	r1, [sp, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfbb      	ittet	lt
 8008938:	425b      	neglt	r3, r3
 800893a:	f042 0202 	orrlt.w	r2, r2, #2
 800893e:	9307      	strge	r3, [sp, #28]
 8008940:	9307      	strlt	r3, [sp, #28]
 8008942:	bfb8      	it	lt
 8008944:	9204      	strlt	r2, [sp, #16]
 8008946:	7823      	ldrb	r3, [r4, #0]
 8008948:	2b2e      	cmp	r3, #46	; 0x2e
 800894a:	d10c      	bne.n	8008966 <_vfiprintf_r+0x176>
 800894c:	7863      	ldrb	r3, [r4, #1]
 800894e:	2b2a      	cmp	r3, #42	; 0x2a
 8008950:	d135      	bne.n	80089be <_vfiprintf_r+0x1ce>
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	9203      	str	r2, [sp, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	bfb8      	it	lt
 800895e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008962:	3402      	adds	r4, #2
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a4c <_vfiprintf_r+0x25c>
 800896a:	7821      	ldrb	r1, [r4, #0]
 800896c:	2203      	movs	r2, #3
 800896e:	4650      	mov	r0, sl
 8008970:	f7f7 fc36 	bl	80001e0 <memchr>
 8008974:	b140      	cbz	r0, 8008988 <_vfiprintf_r+0x198>
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	eba0 000a 	sub.w	r0, r0, sl
 800897c:	fa03 f000 	lsl.w	r0, r3, r0
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	4303      	orrs	r3, r0
 8008984:	3401      	adds	r4, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	482c      	ldr	r0, [pc, #176]	; (8008a40 <_vfiprintf_r+0x250>)
 800898e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008992:	2206      	movs	r2, #6
 8008994:	f7f7 fc24 	bl	80001e0 <memchr>
 8008998:	2800      	cmp	r0, #0
 800899a:	d03f      	beq.n	8008a1c <_vfiprintf_r+0x22c>
 800899c:	4b29      	ldr	r3, [pc, #164]	; (8008a44 <_vfiprintf_r+0x254>)
 800899e:	bb1b      	cbnz	r3, 80089e8 <_vfiprintf_r+0x1f8>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3307      	adds	r3, #7
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	3308      	adds	r3, #8
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	443b      	add	r3, r7
 80089b0:	9309      	str	r3, [sp, #36]	; 0x24
 80089b2:	e767      	b.n	8008884 <_vfiprintf_r+0x94>
 80089b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b8:	460c      	mov	r4, r1
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7a5      	b.n	800890a <_vfiprintf_r+0x11a>
 80089be:	2300      	movs	r3, #0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d0:	3a30      	subs	r2, #48	; 0x30
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d903      	bls.n	80089de <_vfiprintf_r+0x1ee>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c5      	beq.n	8008966 <_vfiprintf_r+0x176>
 80089da:	9105      	str	r1, [sp, #20]
 80089dc:	e7c3      	b.n	8008966 <_vfiprintf_r+0x176>
 80089de:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e2:	4604      	mov	r4, r0
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7f0      	b.n	80089ca <_vfiprintf_r+0x1da>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <_vfiprintf_r+0x258>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4630      	mov	r0, r6
 80089f4:	f3af 8000 	nop.w
 80089f8:	4607      	mov	r7, r0
 80089fa:	1c78      	adds	r0, r7, #1
 80089fc:	d1d6      	bne.n	80089ac <_vfiprintf_r+0x1bc>
 80089fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	d405      	bmi.n	8008a10 <_vfiprintf_r+0x220>
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	059a      	lsls	r2, r3, #22
 8008a08:	d402      	bmi.n	8008a10 <_vfiprintf_r+0x220>
 8008a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0c:	f7ff fc5b 	bl	80082c6 <__retarget_lock_release_recursive>
 8008a10:	89ab      	ldrh	r3, [r5, #12]
 8008a12:	065b      	lsls	r3, r3, #25
 8008a14:	f53f af12 	bmi.w	800883c <_vfiprintf_r+0x4c>
 8008a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a1a:	e711      	b.n	8008840 <_vfiprintf_r+0x50>
 8008a1c:	ab03      	add	r3, sp, #12
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	462a      	mov	r2, r5
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <_vfiprintf_r+0x258>)
 8008a24:	a904      	add	r1, sp, #16
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 f880 	bl	8008b2c <_printf_i>
 8008a2c:	e7e4      	b.n	80089f8 <_vfiprintf_r+0x208>
 8008a2e:	bf00      	nop
 8008a30:	08009154 	.word	0x08009154
 8008a34:	08009174 	.word	0x08009174
 8008a38:	08009134 	.word	0x08009134
 8008a3c:	08009194 	.word	0x08009194
 8008a40:	0800919e 	.word	0x0800919e
 8008a44:	00000000 	.word	0x00000000
 8008a48:	080087cb 	.word	0x080087cb
 8008a4c:	0800919a 	.word	0x0800919a

08008a50 <_printf_common>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	4616      	mov	r6, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	688a      	ldr	r2, [r1, #8]
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bfb8      	it	lt
 8008a64:	4613      	movlt	r3, r2
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b10a      	cbz	r2, 8008a76 <_printf_common+0x26>
 8008a72:	3301      	adds	r3, #1
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	0699      	lsls	r1, r3, #26
 8008a7a:	bf42      	ittt	mi
 8008a7c:	6833      	ldrmi	r3, [r6, #0]
 8008a7e:	3302      	addmi	r3, #2
 8008a80:	6033      	strmi	r3, [r6, #0]
 8008a82:	6825      	ldr	r5, [r4, #0]
 8008a84:	f015 0506 	ands.w	r5, r5, #6
 8008a88:	d106      	bne.n	8008a98 <_printf_common+0x48>
 8008a8a:	f104 0a19 	add.w	sl, r4, #25
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	6832      	ldr	r2, [r6, #0]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dc26      	bgt.n	8008ae6 <_printf_common+0x96>
 8008a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a9c:	1e13      	subs	r3, r2, #0
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	bf18      	it	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d42b      	bmi.n	8008b00 <_printf_common+0xb0>
 8008aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aac:	4649      	mov	r1, r9
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c0      	blx	r8
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d01e      	beq.n	8008af4 <_printf_common+0xa4>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	68e5      	ldr	r5, [r4, #12]
 8008aba:	6832      	ldr	r2, [r6, #0]
 8008abc:	f003 0306 	and.w	r3, r3, #6
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	bf08      	it	eq
 8008ac4:	1aad      	subeq	r5, r5, r2
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	6922      	ldr	r2, [r4, #16]
 8008aca:	bf0c      	ite	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	2500      	movne	r5, #0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bfc4      	itt	gt
 8008ad6:	1a9b      	subgt	r3, r3, r2
 8008ad8:	18ed      	addgt	r5, r5, r3
 8008ada:	2600      	movs	r6, #0
 8008adc:	341a      	adds	r4, #26
 8008ade:	42b5      	cmp	r5, r6
 8008ae0:	d11a      	bne.n	8008b18 <_printf_common+0xc8>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e008      	b.n	8008af8 <_printf_common+0xa8>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4649      	mov	r1, r9
 8008aec:	4638      	mov	r0, r7
 8008aee:	47c0      	blx	r8
 8008af0:	3001      	adds	r0, #1
 8008af2:	d103      	bne.n	8008afc <_printf_common+0xac>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afc:	3501      	adds	r5, #1
 8008afe:	e7c6      	b.n	8008a8e <_printf_common+0x3e>
 8008b00:	18e1      	adds	r1, r4, r3
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	2030      	movs	r0, #48	; 0x30
 8008b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b0a:	4422      	add	r2, r4
 8008b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b14:	3302      	adds	r3, #2
 8008b16:	e7c7      	b.n	8008aa8 <_printf_common+0x58>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d0e6      	beq.n	8008af4 <_printf_common+0xa4>
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7d9      	b.n	8008ade <_printf_common+0x8e>
	...

08008b2c <_printf_i>:
 8008b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	460c      	mov	r4, r1
 8008b32:	4691      	mov	r9, r2
 8008b34:	7e27      	ldrb	r7, [r4, #24]
 8008b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b38:	2f78      	cmp	r7, #120	; 0x78
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	469a      	mov	sl, r3
 8008b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b42:	d807      	bhi.n	8008b54 <_printf_i+0x28>
 8008b44:	2f62      	cmp	r7, #98	; 0x62
 8008b46:	d80a      	bhi.n	8008b5e <_printf_i+0x32>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f000 80d8 	beq.w	8008cfe <_printf_i+0x1d2>
 8008b4e:	2f58      	cmp	r7, #88	; 0x58
 8008b50:	f000 80a3 	beq.w	8008c9a <_printf_i+0x16e>
 8008b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b5c:	e03a      	b.n	8008bd4 <_printf_i+0xa8>
 8008b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b62:	2b15      	cmp	r3, #21
 8008b64:	d8f6      	bhi.n	8008b54 <_printf_i+0x28>
 8008b66:	a001      	add	r0, pc, #4	; (adr r0, 8008b6c <_printf_i+0x40>)
 8008b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008b55 	.word	0x08008b55
 8008b78:	08008b55 	.word	0x08008b55
 8008b7c:	08008b55 	.word	0x08008b55
 8008b80:	08008b55 	.word	0x08008b55
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008b55 	.word	0x08008b55
 8008b8c:	08008b55 	.word	0x08008b55
 8008b90:	08008b55 	.word	0x08008b55
 8008b94:	08008b55 	.word	0x08008b55
 8008b98:	08008ce5 	.word	0x08008ce5
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008cc7 	.word	0x08008cc7
 8008ba4:	08008b55 	.word	0x08008b55
 8008ba8:	08008b55 	.word	0x08008b55
 8008bac:	08008d07 	.word	0x08008d07
 8008bb0:	08008b55 	.word	0x08008b55
 8008bb4:	08008c09 	.word	0x08008c09
 8008bb8:	08008b55 	.word	0x08008b55
 8008bbc:	08008b55 	.word	0x08008b55
 8008bc0:	08008ccf 	.word	0x08008ccf
 8008bc4:	680b      	ldr	r3, [r1, #0]
 8008bc6:	1d1a      	adds	r2, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	600a      	str	r2, [r1, #0]
 8008bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0a3      	b.n	8008d20 <_printf_i+0x1f4>
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	6808      	ldr	r0, [r1, #0]
 8008bdc:	062e      	lsls	r6, r5, #24
 8008bde:	f100 0304 	add.w	r3, r0, #4
 8008be2:	d50a      	bpl.n	8008bfa <_printf_i+0xce>
 8008be4:	6805      	ldr	r5, [r0, #0]
 8008be6:	600b      	str	r3, [r1, #0]
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	da03      	bge.n	8008bf4 <_printf_i+0xc8>
 8008bec:	232d      	movs	r3, #45	; 0x2d
 8008bee:	426d      	negs	r5, r5
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf4:	485e      	ldr	r0, [pc, #376]	; (8008d70 <_printf_i+0x244>)
 8008bf6:	230a      	movs	r3, #10
 8008bf8:	e019      	b.n	8008c2e <_printf_i+0x102>
 8008bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008bfe:	6805      	ldr	r5, [r0, #0]
 8008c00:	600b      	str	r3, [r1, #0]
 8008c02:	bf18      	it	ne
 8008c04:	b22d      	sxthne	r5, r5
 8008c06:	e7ef      	b.n	8008be8 <_printf_i+0xbc>
 8008c08:	680b      	ldr	r3, [r1, #0]
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	1d18      	adds	r0, r3, #4
 8008c0e:	6008      	str	r0, [r1, #0]
 8008c10:	0628      	lsls	r0, r5, #24
 8008c12:	d501      	bpl.n	8008c18 <_printf_i+0xec>
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	e002      	b.n	8008c1e <_printf_i+0xf2>
 8008c18:	0669      	lsls	r1, r5, #25
 8008c1a:	d5fb      	bpl.n	8008c14 <_printf_i+0xe8>
 8008c1c:	881d      	ldrh	r5, [r3, #0]
 8008c1e:	4854      	ldr	r0, [pc, #336]	; (8008d70 <_printf_i+0x244>)
 8008c20:	2f6f      	cmp	r7, #111	; 0x6f
 8008c22:	bf0c      	ite	eq
 8008c24:	2308      	moveq	r3, #8
 8008c26:	230a      	movne	r3, #10
 8008c28:	2100      	movs	r1, #0
 8008c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c2e:	6866      	ldr	r6, [r4, #4]
 8008c30:	60a6      	str	r6, [r4, #8]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	bfa2      	ittt	ge
 8008c36:	6821      	ldrge	r1, [r4, #0]
 8008c38:	f021 0104 	bicge.w	r1, r1, #4
 8008c3c:	6021      	strge	r1, [r4, #0]
 8008c3e:	b90d      	cbnz	r5, 8008c44 <_printf_i+0x118>
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	d04d      	beq.n	8008ce0 <_printf_i+0x1b4>
 8008c44:	4616      	mov	r6, r2
 8008c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c4e:	5dc7      	ldrb	r7, [r0, r7]
 8008c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c54:	462f      	mov	r7, r5
 8008c56:	42bb      	cmp	r3, r7
 8008c58:	460d      	mov	r5, r1
 8008c5a:	d9f4      	bls.n	8008c46 <_printf_i+0x11a>
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d10b      	bne.n	8008c78 <_printf_i+0x14c>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	07df      	lsls	r7, r3, #31
 8008c64:	d508      	bpl.n	8008c78 <_printf_i+0x14c>
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	6861      	ldr	r1, [r4, #4]
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	bfde      	ittt	le
 8008c6e:	2330      	movle	r3, #48	; 0x30
 8008c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c74:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008c78:	1b92      	subs	r2, r2, r6
 8008c7a:	6122      	str	r2, [r4, #16]
 8008c7c:	f8cd a000 	str.w	sl, [sp]
 8008c80:	464b      	mov	r3, r9
 8008c82:	aa03      	add	r2, sp, #12
 8008c84:	4621      	mov	r1, r4
 8008c86:	4640      	mov	r0, r8
 8008c88:	f7ff fee2 	bl	8008a50 <_printf_common>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d14c      	bne.n	8008d2a <_printf_i+0x1fe>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c94:	b004      	add	sp, #16
 8008c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9a:	4835      	ldr	r0, [pc, #212]	; (8008d70 <_printf_i+0x244>)
 8008c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	680e      	ldr	r6, [r1, #0]
 8008ca4:	061f      	lsls	r7, r3, #24
 8008ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008caa:	600e      	str	r6, [r1, #0]
 8008cac:	d514      	bpl.n	8008cd8 <_printf_i+0x1ac>
 8008cae:	07d9      	lsls	r1, r3, #31
 8008cb0:	bf44      	itt	mi
 8008cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb6:	6023      	strmi	r3, [r4, #0]
 8008cb8:	b91d      	cbnz	r5, 8008cc2 <_printf_i+0x196>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f023 0320 	bic.w	r3, r3, #32
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	2310      	movs	r3, #16
 8008cc4:	e7b0      	b.n	8008c28 <_printf_i+0xfc>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	f043 0320 	orr.w	r3, r3, #32
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	2378      	movs	r3, #120	; 0x78
 8008cd0:	4828      	ldr	r0, [pc, #160]	; (8008d74 <_printf_i+0x248>)
 8008cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd6:	e7e3      	b.n	8008ca0 <_printf_i+0x174>
 8008cd8:	065e      	lsls	r6, r3, #25
 8008cda:	bf48      	it	mi
 8008cdc:	b2ad      	uxthmi	r5, r5
 8008cde:	e7e6      	b.n	8008cae <_printf_i+0x182>
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	e7bb      	b.n	8008c5c <_printf_i+0x130>
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	6826      	ldr	r6, [r4, #0]
 8008ce8:	6960      	ldr	r0, [r4, #20]
 8008cea:	1d1d      	adds	r5, r3, #4
 8008cec:	600d      	str	r5, [r1, #0]
 8008cee:	0635      	lsls	r5, r6, #24
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_i+0x1cc>
 8008cf4:	6018      	str	r0, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <_printf_i+0x1d2>
 8008cf8:	0671      	lsls	r1, r6, #25
 8008cfa:	d5fb      	bpl.n	8008cf4 <_printf_i+0x1c8>
 8008cfc:	8018      	strh	r0, [r3, #0]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	4616      	mov	r6, r2
 8008d04:	e7ba      	b.n	8008c7c <_printf_i+0x150>
 8008d06:	680b      	ldr	r3, [r1, #0]
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	600a      	str	r2, [r1, #0]
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	6862      	ldr	r2, [r4, #4]
 8008d10:	2100      	movs	r1, #0
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7f7 fa64 	bl	80001e0 <memchr>
 8008d18:	b108      	cbz	r0, 8008d1e <_printf_i+0x1f2>
 8008d1a:	1b80      	subs	r0, r0, r6
 8008d1c:	6060      	str	r0, [r4, #4]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	2300      	movs	r3, #0
 8008d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d28:	e7a8      	b.n	8008c7c <_printf_i+0x150>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4649      	mov	r1, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	47d0      	blx	sl
 8008d34:	3001      	adds	r0, #1
 8008d36:	d0ab      	beq.n	8008c90 <_printf_i+0x164>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	079b      	lsls	r3, r3, #30
 8008d3c:	d413      	bmi.n	8008d66 <_printf_i+0x23a>
 8008d3e:	68e0      	ldr	r0, [r4, #12]
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	4298      	cmp	r0, r3
 8008d44:	bfb8      	it	lt
 8008d46:	4618      	movlt	r0, r3
 8008d48:	e7a4      	b.n	8008c94 <_printf_i+0x168>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	47d0      	blx	sl
 8008d54:	3001      	adds	r0, #1
 8008d56:	d09b      	beq.n	8008c90 <_printf_i+0x164>
 8008d58:	3501      	adds	r5, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	9903      	ldr	r1, [sp, #12]
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dcf2      	bgt.n	8008d4a <_printf_i+0x21e>
 8008d64:	e7eb      	b.n	8008d3e <_printf_i+0x212>
 8008d66:	2500      	movs	r5, #0
 8008d68:	f104 0619 	add.w	r6, r4, #25
 8008d6c:	e7f5      	b.n	8008d5a <_printf_i+0x22e>
 8008d6e:	bf00      	nop
 8008d70:	080091a5 	.word	0x080091a5
 8008d74:	080091b6 	.word	0x080091b6

08008d78 <_sbrk_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	; (8008d94 <_sbrk_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7f8 f848 	bl	8000e18 <_sbrk>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_sbrk_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_sbrk_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20002444 	.word	0x20002444

08008d98 <__sread>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	f000 f8e0 	bl	8008f64 <_read_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	bfab      	itete	ge
 8008da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008daa:	89a3      	ldrhlt	r3, [r4, #12]
 8008dac:	181b      	addge	r3, r3, r0
 8008dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008db2:	bfac      	ite	ge
 8008db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db6:	81a3      	strhlt	r3, [r4, #12]
 8008db8:	bd10      	pop	{r4, pc}

08008dba <__swrite>:
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	05db      	lsls	r3, r3, #23
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	4616      	mov	r6, r2
 8008dca:	d505      	bpl.n	8008dd8 <__swrite+0x1e>
 8008dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f000 f868 	bl	8008ea8 <_lseek_r>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	4632      	mov	r2, r6
 8008de6:	463b      	mov	r3, r7
 8008de8:	4628      	mov	r0, r5
 8008dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	f000 b817 	b.w	8008e20 <_write_r>

08008df2 <__sseek>:
 8008df2:	b510      	push	{r4, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f000 f855 	bl	8008ea8 <_lseek_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	bf15      	itete	ne
 8008e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0e:	81a3      	strheq	r3, [r4, #12]
 8008e10:	bf18      	it	ne
 8008e12:	81a3      	strhne	r3, [r4, #12]
 8008e14:	bd10      	pop	{r4, pc}

08008e16 <__sclose>:
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 b813 	b.w	8008e44 <_close_r>
	...

08008e20 <_write_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	; (8008e40 <_write_r+0x20>)
 8008e24:	4604      	mov	r4, r0
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f7 ffa1 	bl	8000d76 <_write>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_write_r+0x1e>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_write_r+0x1e>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20002444 	.word	0x20002444

08008e44 <_close_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	; (8008e60 <_close_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f7 ffad 	bl	8000dae <_close>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_close_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_close_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20002444 	.word	0x20002444

08008e64 <_fstat_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d07      	ldr	r5, [pc, #28]	; (8008e84 <_fstat_r+0x20>)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	4611      	mov	r1, r2
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	f7f7 ffa8 	bl	8000dc6 <_fstat>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d102      	bne.n	8008e80 <_fstat_r+0x1c>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	b103      	cbz	r3, 8008e80 <_fstat_r+0x1c>
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	bd38      	pop	{r3, r4, r5, pc}
 8008e82:	bf00      	nop
 8008e84:	20002444 	.word	0x20002444

08008e88 <_isatty_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d06      	ldr	r5, [pc, #24]	; (8008ea4 <_isatty_r+0x1c>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7f7 ffa7 	bl	8000de6 <_isatty>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_isatty_r+0x1a>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_isatty_r+0x1a>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20002444 	.word	0x20002444

08008ea8 <_lseek_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	; (8008ec8 <_lseek_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f7 ffa0 	bl	8000dfc <_lseek>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_lseek_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_lseek_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20002444 	.word	0x20002444

08008ecc <memmove>:
 8008ecc:	4288      	cmp	r0, r1
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	eb01 0402 	add.w	r4, r1, r2
 8008ed4:	d902      	bls.n	8008edc <memmove+0x10>
 8008ed6:	4284      	cmp	r4, r0
 8008ed8:	4623      	mov	r3, r4
 8008eda:	d807      	bhi.n	8008eec <memmove+0x20>
 8008edc:	1e43      	subs	r3, r0, #1
 8008ede:	42a1      	cmp	r1, r4
 8008ee0:	d008      	beq.n	8008ef4 <memmove+0x28>
 8008ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eea:	e7f8      	b.n	8008ede <memmove+0x12>
 8008eec:	4402      	add	r2, r0
 8008eee:	4601      	mov	r1, r0
 8008ef0:	428a      	cmp	r2, r1
 8008ef2:	d100      	bne.n	8008ef6 <memmove+0x2a>
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008efe:	e7f7      	b.n	8008ef0 <memmove+0x24>

08008f00 <__malloc_lock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__malloc_lock+0x8>)
 8008f02:	f7ff b9df 	b.w	80082c4 <__retarget_lock_acquire_recursive>
 8008f06:	bf00      	nop
 8008f08:	2000243c 	.word	0x2000243c

08008f0c <__malloc_unlock>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__malloc_unlock+0x8>)
 8008f0e:	f7ff b9da 	b.w	80082c6 <__retarget_lock_release_recursive>
 8008f12:	bf00      	nop
 8008f14:	2000243c 	.word	0x2000243c

08008f18 <_realloc_r>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	460e      	mov	r6, r1
 8008f20:	b921      	cbnz	r1, 8008f2c <_realloc_r+0x14>
 8008f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f26:	4611      	mov	r1, r2
 8008f28:	f7ff ba82 	b.w	8008430 <_malloc_r>
 8008f2c:	b922      	cbnz	r2, 8008f38 <_realloc_r+0x20>
 8008f2e:	f7ff fa2f 	bl	8008390 <_free_r>
 8008f32:	4625      	mov	r5, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	f000 f826 	bl	8008f88 <_malloc_usable_size_r>
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d20f      	bcs.n	8008f60 <_realloc_r+0x48>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff fa74 	bl	8008430 <_malloc_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0f2      	beq.n	8008f34 <_realloc_r+0x1c>
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4622      	mov	r2, r4
 8008f52:	f7fe fe55 	bl	8007c00 <memcpy>
 8008f56:	4631      	mov	r1, r6
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff fa19 	bl	8008390 <_free_r>
 8008f5e:	e7e9      	b.n	8008f34 <_realloc_r+0x1c>
 8008f60:	4635      	mov	r5, r6
 8008f62:	e7e7      	b.n	8008f34 <_realloc_r+0x1c>

08008f64 <_read_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	; (8008f84 <_read_r+0x20>)
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7f7 fee2 	bl	8000d3c <_read>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_read_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_read_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20002444 	.word	0x20002444

08008f88 <_malloc_usable_size_r>:
 8008f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8c:	1f18      	subs	r0, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbc      	itt	lt
 8008f92:	580b      	ldrlt	r3, [r1, r0]
 8008f94:	18c0      	addlt	r0, r0, r3
 8008f96:	4770      	bx	lr

08008f98 <_init>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr

08008fa4 <_fini>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr
