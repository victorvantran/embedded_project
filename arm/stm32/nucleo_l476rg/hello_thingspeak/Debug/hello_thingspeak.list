
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b84  08008b84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b8c  08008b8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000074  08008c08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08008c08  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c82  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004026  00000000  00000000  00041d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00045d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  000475d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b22  00000000  00000000  00048ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0c1  00000000  00000000  0004e80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010009b  00000000  00000000  000688cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168966  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f14  00000000  00000000  001689bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089e0 	.word	0x080089e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080089e0 	.word	0x080089e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x20>)
 800058a:	f003 fab9 	bl	8003b00 <HAL_UART_Transmit>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20001a7c 	.word	0x20001a7c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 feea 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f826 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f922 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f8fa 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8c8 	bl	8000744 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f896 	bl	80006e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vInitThingSpeak(&xThingSpeak, &huart1, &hdma_usart1_rx);
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <main+0x40>)
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <main+0x44>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x48>)
 80005be:	f000 fc03 	bl	8000dc8 <vInitThingSpeak>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c2:	f004 fc8b 	bl	8004edc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of thingspeakTask */
  thingspeakTaskHandle = osThreadNew(StartThingSpeakTask, NULL, &thingspeakTask_attributes);
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <main+0x4c>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x50>)
 80005cc:	f004 fcd0 	bl	8004f70 <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <main+0x54>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f004 fca5 	bl	8004f24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x3e>
 80005dc:	200019b0 	.word	0x200019b0
 80005e0:	200019f8 	.word	0x200019f8
 80005e4:	20001b4c 	.word	0x20001b4c
 80005e8:	08008a80 	.word	0x08008a80
 80005ec:	0800089d 	.word	0x0800089d
 80005f0:	200019ac 	.word	0x200019ac

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0b8      	sub	sp, #224	; 0xe0
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 f9f2 	bl	80079ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2288      	movs	r2, #136	; 0x88
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 f9e4 	bl	80079ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fc50 	bl	8001f0c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000672:	f000 f937 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f81c 	bl	80026d8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a6:	f000 f91d 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006aa:	2303      	movs	r3, #3
 80006ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fa45 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006c4:	f000 f90e 	bl	80008e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006cc:	f001 fbc8 	bl	8001e60 <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006d6:	f000 f905 	bl	80008e4 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	37e0      	adds	r7, #224	; 0xe0
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART1_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART1_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000728:	f003 f99c 	bl	8003a64 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8d7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200019f8 	.word	0x200019f8
 8000740:	40013800 	.word	0x40013800

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f003 f96c 	bl	8003a64 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8a7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20001a7c 	.word	0x20001a7c
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_DMA_Init+0x48>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_DMA_Init+0x48>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6493      	str	r3, [r2, #72]	; 0x48
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_DMA_Init+0x48>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2105      	movs	r1, #5
 80007c6:	200e      	movs	r0, #14
 80007c8:	f000 fece 	bl	8001568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f000 fee7 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 fec6 	bl	8001568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007dc:	200f      	movs	r0, #15
 80007de:	f000 fedf 	bl	80015a0 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a22      	ldr	r2, [pc, #136]	; (8000894 <MX_GPIO_Init+0xa4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0xa4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_GPIO_Init+0xa4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_GPIO_Init+0xa4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_GPIO_Init+0xa4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2101      	movs	r1, #1
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xa8>)
 800086c:	f001 fad2 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xa8>)
 8000888:	f001 f91a 	bl	8001ac0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <StartThingSpeakTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThingSpeakTask */
void StartThingSpeakTask(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);

  	//printf("hello task\r\n");

  	bTransmitCommand(&xThingSpeak, "AT\r\n", 4);
 80008a4:	2204      	movs	r2, #4
 80008a6:	4904      	ldr	r1, [pc, #16]	; (80008b8 <StartThingSpeakTask+0x1c>)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <StartThingSpeakTask+0x20>)
 80008aa:	f000 fcdd 	bl	8001268 <bTransmitCommand>

  	osDelay(500);
 80008ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b2:	f004 fbef 	bl	8005094 <osDelay>
  	bTransmitCommand(&xThingSpeak, "AT\r\n", 4);
 80008b6:	e7f5      	b.n	80008a4 <StartThingSpeakTask+0x8>
 80008b8:	08008a08 	.word	0x08008a08
 80008bc:	20001b4c 	.word	0x20001b4c

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fd71 	bl	80013b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_MspInit+0x4c>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x4c>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x4c>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fe1b 	bl	8001568 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a5d      	ldr	r2, [pc, #372]	; (8000ad4 <HAL_UART_MspInit+0x194>)
 800095e:	4293      	cmp	r3, r2
 8000960:	f040 8085 	bne.w	8000a6e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000964:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000968:	4a5b      	ldr	r2, [pc, #364]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6613      	str	r3, [r2, #96]	; 0x60
 8000970:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a55      	ldr	r2, [pc, #340]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000994:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a6:	2307      	movs	r3, #7
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f001 f884 	bl	8001ac0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009ba:	4a49      	ldr	r2, [pc, #292]	; (8000ae0 <HAL_UART_MspInit+0x1a0>)
 80009bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80009be:	4b47      	ldr	r3, [pc, #284]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c4:	4b45      	ldr	r3, [pc, #276]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ca:	4b44      	ldr	r3, [pc, #272]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d6:	4b41      	ldr	r3, [pc, #260]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009dc:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009e4:	2220      	movs	r2, #32
 80009e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e8:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009ee:	483b      	ldr	r0, [pc, #236]	; (8000adc <HAL_UART_MspInit+0x19c>)
 80009f0:	f000 fde4 	bl	80015bc <HAL_DMA_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80009fa:	f7ff ff73 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a36      	ldr	r2, [pc, #216]	; (8000adc <HAL_UART_MspInit+0x19c>)
 8000a02:	671a      	str	r2, [r3, #112]	; 0x70
 8000a04:	4a35      	ldr	r2, [pc, #212]	; (8000adc <HAL_UART_MspInit+0x19c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a0c:	4a36      	ldr	r2, [pc, #216]	; (8000ae8 <HAL_UART_MspInit+0x1a8>)
 8000a0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a18:	2210      	movs	r2, #16
 8000a1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a42:	f000 fdbb 	bl	80015bc <HAL_DMA_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000a4c:	f7ff ff4a 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a54:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_UART_MspInit+0x1a4>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2105      	movs	r1, #5
 8000a60:	2025      	movs	r0, #37	; 0x25
 8000a62:	f000 fd81 	bl	8001568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a66:	2025      	movs	r0, #37	; 0x25
 8000a68:	f000 fd9a 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	e02d      	b.n	8000aca <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_UART_MspInit+0x1ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d128      	bne.n	8000aca <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	6593      	str	r3, [r2, #88]	; 0x58
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_UART_MspInit+0x198>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fffb 	bl	8001ac0 <HAL_GPIO_Init>
}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	200019b0 	.word	0x200019b0
 8000ae0:	40020058 	.word	0x40020058
 8000ae4:	20001964 	.word	0x20001964
 8000ae8:	40020044 	.word	0x40020044
 8000aec:	40004400 	.word	0x40004400

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2036      	movs	r0, #54	; 0x36
 8000b06:	f000 fd2f 	bl	8001568 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b0a:	2036      	movs	r0, #54	; 0x36
 8000b0c:	f000 fd48 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_InitTick+0x9c>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_InitTick+0x9c>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_InitTick+0x9c>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 ff76 	bl	8002a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b38:	f001 ff48 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8000b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_InitTick+0xa0>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9b      	lsrs	r3, r3, #18
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_InitTick+0xa8>)
 8000b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b6e:	f002 fca7 	bl	80034c0 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d104      	bne.n	8000b82 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <HAL_InitTick+0xa4>)
 8000b7a:	f002 fd03 	bl	8003584 <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	20001b00 	.word	0x20001b00
 8000b98:	40001000 	.word	0x40001000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel4_IRQHandler+0x10>)
 8000bce:	f000 fe8c 	bl	80018ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20001964 	.word	0x20001964

08000bdc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Channel5_IRQHandler+0x10>)
 8000be2:	f000 fe82 	bl	80018ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200019b0 	.word	0x200019b0

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <USART1_IRQHandler+0x14>)
 8000bf6:	f003 f947 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_ThingSpeak_IRQHandler(&huart1);
 8000bfa:	4802      	ldr	r0, [pc, #8]	; (8000c04 <USART1_IRQHandler+0x14>)
 8000bfc:	f000 fb54 	bl	80012a8 <USER_ThingSpeak_IRQHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200019f8 	.word	0x200019f8

08000c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM6_DAC_IRQHandler+0x10>)
 8000c0e:	f002 fd29 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20001b00 	.word	0x20001b00

08000c1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2e:	f3af 8000 	nop.w
 8000c32:	4601      	mov	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
	}

return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e009      	b.n	8000c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc81 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf1      	blt.n	8000c68 <_write+0x12>
	}
	return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_isatty>:

int _isatty(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f006 fe28 	bl	800797c <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20018000 	.word	0x20018000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	20001cb0 	.word	0x20001cb0

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <SystemInit+0x5c>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <SystemInit+0x5c>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SystemInit+0x60>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <SystemInit+0x60>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <SystemInit+0x60>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <SystemInit+0x60>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <SystemInit+0x60>)
 8000d90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SystemInit+0x60>)
 8000d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SystemInit+0x60>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <SystemInit+0x60>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SystemInit+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <vInitThingSpeak>:
/* IMPLEMENTATION */
ThingSpeakHandle_t xThingSpeak;


void vInitThingSpeak(ThingSpeakHandle_t *pxThingSpeak, UART_HandleTypeDef *huart, DMA_HandleTypeDef *pxUART_DMA_RX)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
	// Structure
	pxThingSpeak->huart = huart;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	601a      	str	r2, [r3, #0]
	pxThingSpeak->pxUART_DMA_RX = pxUART_DMA_RX;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	605a      	str	r2, [r3, #4]
	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3308      	adds	r3, #8
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 fdff 	bl	80079ec <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	338b      	adds	r3, #139	; 0x8b
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fdec 	bl	80079ec <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0210 	orr.w	r2, r2, #16
 8000e3a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3308      	adds	r3, #8
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	4619      	mov	r1, r3
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	f002 ff6d 	bl	8003d24 <HAL_UART_Receive_DMA>
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(ThingSpeakHandle_t *pxThingSpeak)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	// Tail catch up to head
	pxThingSpeak->xRXBuffer.uHeadIndex = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - __HAL_DMA_GET_COUNTER(pxThingSpeak->pxUART_DMA_RX);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	// [!] To be Task deferred...
	uint16_t uTailIndex = pxThingSpeak->xRXBuffer.uTailIndex;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8000e7a:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t uHeadIndex = pxThingSpeak->xRXBuffer.uHeadIndex;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000e82:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t uRollOver = pxThingSpeak->xRXBuffer.uRollOver;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8000e8a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t uParseIndex = uTailIndex;
 8000e8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e90:	86bb      	strh	r3, [r7, #52]	; 0x34

	if (uRollOver == 0)
 8000e92:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d12e      	bne.n	8000ef8 <USER_UART_IDLECallback+0xa4>
	{
		while (uParseIndex != uHeadIndex)
 8000e9a:	e028      	b.n	8000eee <USER_UART_IDLECallback+0x9a>
		{
			//if (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
			if (bEndMatch(pxThingSpeak, uParseIndex))
 8000e9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f8df 	bl	8001064 <bEndMatch>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01d      	beq.n	8000ee8 <USER_UART_IDLECallback+0x94>
			{
				if (uParseIndex - uTailIndex > 0)
 8000eac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000eae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dd0d      	ble.n	8000ed2 <USER_UART_IDLECallback+0x7e>
				{
					char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f103 0208 	add.w	r2, r3, #8
 8000ebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
					size_t candidateLength = uParseIndex - uTailIndex;
 8000ec2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000ec4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	60bb      	str	r3, [r7, #8]

					vHandleCandidateCommand(candidate, candidateLength);
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 f931 	bl	8001134 <vHandleCandidateCommand>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) ;
 8000ed2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000edc:	86fb      	strh	r3, [r7, #54]	; 0x36
				pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8000ede:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			}
			uParseIndex++;
 8000ee8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000eea:	3301      	adds	r3, #1
 8000eec:	86bb      	strh	r3, [r7, #52]	; 0x34
		while (uParseIndex != uHeadIndex)
 8000eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000ef0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d1d2      	bne.n	8000e9c <USER_UART_IDLECallback+0x48>
 8000ef6:	e0a3      	b.n	8001040 <USER_UART_IDLECallback+0x1ec>
		}
	}
	else if (uRollOver == 1)
 8000ef8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	f040 8092 	bne.w	8001026 <USER_UART_IDLECallback+0x1d2>
	{
		if (uParseIndex > uHeadIndex)
 8000f02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d97f      	bls.n	800100a <USER_UART_IDLECallback+0x1b6>
		{
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8000f0a:	e028      	b.n	8000f5e <USER_UART_IDLECallback+0x10a>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8000f0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f8a7 	bl	8001064 <bEndMatch>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01d      	beq.n	8000f58 <USER_UART_IDLECallback+0x104>
				{
					if (uParseIndex - uTailIndex > 0)
 8000f1c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dd0d      	ble.n	8000f42 <USER_UART_IDLECallback+0xee>
					{
						char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f103 0208 	add.w	r2, r3, #8
 8000f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f2e:	4413      	add	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]
						size_t candidateLength = uParseIndex - uTailIndex;
 8000f32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	613b      	str	r3, [r7, #16]

						vHandleCandidateCommand(candidate, candidateLength);
 8000f3a:	6939      	ldr	r1, [r7, #16]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f000 f8f9 	bl	8001134 <vHandleCandidateCommand>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 8000f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f44:	3301      	adds	r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f4c:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8000f4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				}
				uParseIndex++;
 8000f58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8000f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	d9d3      	bls.n	8000f0c <USER_UART_IDLECallback+0xb8>
			}

			uParseIndex = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	86bb      	strh	r3, [r7, #52]	; 0x34

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 8000f68:	e04a      	b.n	8001000 <USER_UART_IDLECallback+0x1ac>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8000f6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f878 	bl	8001064 <bEndMatch>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d03f      	beq.n	8000ffa <USER_UART_IDLECallback+0x1a6>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 8000f7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d91d      	bls.n	8000fbe <USER_UART_IDLECallback+0x16a>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 8000f82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d02c      	beq.n	8000fe4 <USER_UART_IDLECallback+0x190>
						{
							char *candidateFirst = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f103 0208 	add.w	r2, r3, #8
 8000f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f92:	4413      	add	r3, r2
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateFirstLength = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - uTailIndex;
 8000f96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f98:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f9c:	623b      	str	r3, [r7, #32]
							char *candidateSecond = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	61fb      	str	r3, [r7, #28]
							size_t candidateSecondLength = uParseIndex;
 8000fa4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fa6:	61bb      	str	r3, [r7, #24]

							vHandleCandidateCommandSplit(candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	6a39      	ldr	r1, [r7, #32]
 8000fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb0:	f000 f904 	bl	80011bc <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							pxThingSpeak->xRXBuffer.uRollOver = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8000fbc:	e012      	b.n	8000fe4 <USER_UART_IDLECallback+0x190>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 8000fbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dd0d      	ble.n	8000fe4 <USER_UART_IDLECallback+0x190>
						{
							char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 0208 	add.w	r2, r3, #8
 8000fce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fd0:	4413      	add	r3, r2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t candidateLength = uParseIndex - uTailIndex;
 8000fd4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28

							vHandleCandidateCommand(candidate, candidateLength);
 8000fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe0:	f000 f8a8 	bl	8001134 <vHandleCandidateCommand>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 8000fe4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fee:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8000ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				}

				uParseIndex++;
 8000ffa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex != uHeadIndex)
 8001000:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001002:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001004:	429a      	cmp	r2, r3
 8001006:	d1b0      	bne.n	8000f6a <USER_UART_IDLECallback+0x116>
 8001008:	e01a      	b.n	8001040 <USER_UART_IDLECallback+0x1ec>
			}
		}
		else
		{
			// Reset due to too overflow rx buffer due to too much data received before it could all process
			HAL_UART_DMAStop(pxThingSpeak->huart);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fecc 	bl	8003dac <HAL_UART_DMAStop>
			vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fed2 	bl	8000dc8 <vInitThingSpeak>
 8001024:	e00c      	b.n	8001040 <USER_UART_IDLECallback+0x1ec>
		}
	}
	else
	{
		// Reset due to too overflow rx buffer due to too much data received before it could all process
		HAL_UART_DMAStop(pxThingSpeak->huart);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f002 febe 	bl	8003dac <HAL_UART_DMAStop>
		vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	461a      	mov	r2, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fec4 	bl	8000dc8 <vInitThingSpeak>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", pxThingSpeak->xRXBuffer.uTailIndex, pxThingSpeak->xRXBuffer.uHeadIndex);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001046:	4619      	mov	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800104e:	461a      	mov	r2, r3
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <USER_UART_IDLECallback+0x20c>)
 8001052:	f006 fcd3 	bl	80079fc <iprintf>

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	; 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08008a10 	.word	0x08008a10

08001064 <bEndMatch>:


uint8_t bEndMatch(ThingSpeakHandle_t *pxThingSpeak, uint16_t uParseIndex)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	7a1b      	ldrb	r3, [r3, #8]
 8001078:	2b0a      	cmp	r3, #10
 800107a:	d10a      	bne.n	8001092 <bEndMatch+0x2e>
			(pxThingSpeak->xRXBuffer.puDMABuffer[(uParseIndex - 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer)] == '\r');
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	3b01      	subs	r3, #1
 8001080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	7a1b      	ldrb	r3, [r3, #8]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 800108a:	2b0d      	cmp	r3, #13
 800108c:	d101      	bne.n	8001092 <bEndMatch+0x2e>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <bEndMatch+0x30>
 8001092:	2300      	movs	r3, #0
 8001094:	b2db      	uxtb	r3, r3
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <bCommandMatch>:


uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff f88e 	bl	80001d0 <strlen>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d109      	bne.n	80010d0 <bCommandMatch+0x2e>
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f006 fd29 	bl	8007b18 <strncmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <bCommandMatch+0x2e>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <bCommandMatch+0x30>
 80010d0:	2300      	movs	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff f870 	bl	80001d0 <strlen>
 80010f0:	4601      	mov	r1, r0
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d114      	bne.n	8001126 <bCommandSplitMatch+0x4a>
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f006 fd09 	bl	8007b18 <strncmp>
 8001106:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	6839      	ldr	r1, [r7, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f006 fcfe 	bl	8007b18 <strncmp>
 800111c:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <bCommandSplitMatch+0x4a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <bCommandSplitMatch+0x4c>
 8001126:	2300      	movs	r3, #0
 8001128:	b2db      	uxtb	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <vHandleCandidateCommand>:
/* Debug purposes on serial monitor */
extern UART_HandleTypeDef huart2;


void vHandleCandidateCommand(const char *candidate, size_t candidateLength)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	if (bCommandMatch("ON", candidate, candidateLength))
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <vHandleCandidateCommand+0x6c>)
 8001144:	f7ff ffad 	bl	80010a2 <bCommandMatch>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <vHandleCandidateCommand+0x22>
	{
		printf("SET LIGHT\r\n");
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <vHandleCandidateCommand+0x70>)
 8001150:	f006 fcda 	bl	8007b08 <puts>
	else
	{
		HAL_UART_Transmit(&huart2, (const char *)candidate, candidateLength, 1000);
		//printf("INVLD\r\n");
	}
}
 8001154:	e01f      	b.n	8001196 <vHandleCandidateCommand+0x62>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4813      	ldr	r0, [pc, #76]	; (80011a8 <vHandleCandidateCommand+0x74>)
 800115c:	f7ff ffa1 	bl	80010a2 <bCommandMatch>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <vHandleCandidateCommand+0x3a>
		printf("UNSET LIGHT\r\n");
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <vHandleCandidateCommand+0x78>)
 8001168:	f006 fcce 	bl	8007b08 <puts>
}
 800116c:	e013      	b.n	8001196 <vHandleCandidateCommand+0x62>
	else if (bCommandMatch("OK", candidate, candidateLength))
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <vHandleCandidateCommand+0x7c>)
 8001174:	f7ff ff95 	bl	80010a2 <bCommandMatch>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <vHandleCandidateCommand+0x52>
		printf("OK Received\r\n");
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <vHandleCandidateCommand+0x80>)
 8001180:	f006 fcc2 	bl	8007b08 <puts>
}
 8001184:	e007      	b.n	8001196 <vHandleCandidateCommand+0x62>
		HAL_UART_Transmit(&huart2, (const char *)candidate, candidateLength, 1000);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <vHandleCandidateCommand+0x84>)
 8001192:	f002 fcb5 	bl	8003b00 <HAL_UART_Transmit>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08008a30 	.word	0x08008a30
 80011a4:	08008a34 	.word	0x08008a34
 80011a8:	08008a40 	.word	0x08008a40
 80011ac:	08008a44 	.word	0x08008a44
 80011b0:	08008a54 	.word	0x08008a54
 80011b4:	08008a58 	.word	0x08008a58
 80011b8:	20001a7c 	.word	0x20001a7c

080011bc <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <vHandleCandidateCommandSplit+0x90>)
 80011d6:	f7ff ff81 	bl	80010dc <bCommandSplitMatch>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 80011e0:	481b      	ldr	r0, [pc, #108]	; (8001250 <vHandleCandidateCommandSplit+0x94>)
 80011e2:	f006 fc91 	bl	8007b08 <puts>
	{
		HAL_UART_Transmit(&huart2, (const char *)candidateFirst, candidateFirstLength, 1000);
		HAL_UART_Transmit(&huart2, (const char *)candidateSecond, candidateSecondLength, 1000);
		//printf("INVLD\r\n");
	}
}
 80011e6:	e02d      	b.n	8001244 <vHandleCandidateCommandSplit+0x88>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <vHandleCandidateCommandSplit+0x98>)
 80011f4:	f7ff ff72 	bl	80010dc <bCommandSplitMatch>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <vHandleCandidateCommandSplit+0x9c>)
 8001200:	f006 fc82 	bl	8007b08 <puts>
}
 8001204:	e01e      	b.n	8001244 <vHandleCandidateCommandSplit+0x88>
	else if (bCommandSplitMatch("OK", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <vHandleCandidateCommandSplit+0xa0>)
 8001212:	f7ff ff63 	bl	80010dc <bCommandSplitMatch>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <vHandleCandidateCommandSplit+0x68>
		printf("OK Received\r\n");
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <vHandleCandidateCommandSplit+0xa4>)
 800121e:	f006 fc73 	bl	8007b08 <puts>
}
 8001222:	e00f      	b.n	8001244 <vHandleCandidateCommandSplit+0x88>
		HAL_UART_Transmit(&huart2, (const char *)candidateFirst, candidateFirstLength, 1000);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	b29a      	uxth	r2, r3
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <vHandleCandidateCommandSplit+0xa8>)
 8001230:	f002 fc66 	bl	8003b00 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (const char *)candidateSecond, candidateSecondLength, 1000);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <vHandleCandidateCommandSplit+0xa8>)
 8001240:	f002 fc5e 	bl	8003b00 <HAL_UART_Transmit>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08008a30 	.word	0x08008a30
 8001250:	08008a34 	.word	0x08008a34
 8001254:	08008a40 	.word	0x08008a40
 8001258:	08008a44 	.word	0x08008a44
 800125c:	08008a54 	.word	0x08008a54
 8001260:	08008a58 	.word	0x08008a58
 8001264:	20001a7c 	.word	0x20001a7c

08001268 <bTransmitCommand>:


uint8_t bTransmitCommand(ThingSpeakHandle_t *pxThingSpeak, const char *command, size_t numElements)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	/* [!] Could also add a wait for a semaphore, and semaphore released from isr on transmit complete callback */
	strncpy((char *)pxThingSpeak->xTXBuffer.puDMABuffer, command, numElements);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	338b      	adds	r3, #139	; 0x8b
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f006 fc5d 	bl	8007b3c <strncpy>
	if (HAL_UART_Transmit_DMA(pxThingSpeak->huart, (uint8_t *)pxThingSpeak->xTXBuffer.puDMABuffer, numElements) == HAL_OK)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	338b      	adds	r3, #139	; 0x8b
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	b292      	uxth	r2, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f002 fcca 	bl	8003c28 <HAL_UART_Transmit_DMA>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <bTransmitCommand+0x36>
	{
		return 1;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <bTransmitCommand+0x38>
	}
	else
	{
		return 0;
 800129e:	2300      	movs	r3, #0
	}
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <USER_ThingSpeak_IRQHandler>:


void USER_ThingSpeak_IRQHandler(UART_HandleTypeDef *pxHUART)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(pxHUART, UART_FLAG_IDLE) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d106      	bne.n	80012cc <USER_ThingSpeak_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(pxHUART);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2210      	movs	r2, #16
 80012c4:	621a      	str	r2, [r3, #32]

		USER_UART_IDLECallback(&xThingSpeak);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <USER_ThingSpeak_IRQHandler+0x2c>)
 80012c8:	f7ff fdc4 	bl	8000e54 <USER_UART_IDLECallback>
	}
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20001b4c 	.word	0x20001b4c

080012d8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if (pxHUART == xThingSpeak.huart)
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_UART_RxCpltCallback+0x30>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d108      	bne.n	80012fc <HAL_UART_RxCpltCallback+0x24>
	{
		xThingSpeak.xRXBuffer.uRollOver++;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_UART_RxCpltCallback+0x30>)
 80012ec:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_UART_RxCpltCallback+0x30>)
 80012f8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	}
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	20001b4c 	.word	0x20001b4c

0800130c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	__NOP();
 8001314:	bf00      	nop
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff fd1c 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800132c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800132e:	e003      	b.n	8001338 <LoopCopyDataInit>

08001330 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001332:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001334:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001336:	3104      	adds	r1, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <LoopForever+0xa>)
	ldr	r3, =_edata
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <LoopForever+0xe>)
	adds	r2, r0, r1
 800133c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800133e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001340:	d3f6      	bcc.n	8001330 <CopyDataInit>
	ldr	r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001344:	e002      	b.n	800134c <LoopFillZerobss>

08001346 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001346:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001348:	f842 3b04 	str.w	r3, [r2], #4

0800134c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <LoopForever+0x16>)
	cmp	r2, r3
 800134e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001350:	d3f9      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f006 fb19 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff f921 	bl	800059c <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001360:	08008b94 	.word	0x08008b94
	ldr	r0, =_sdata
 8001364:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001368:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800136c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001370:	20001cb0 	.word	0x20001cb0

08001374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_2_IRQHandler>
	...

08001378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_Init+0x3c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_Init+0x3c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f000 f8df 	bl	8001552 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fbab 	bl	8000af0 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	e001      	b.n	80013aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a6:	f7ff faa3 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20001c5c 	.word	0x20001c5c

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20001c5c 	.word	0x20001c5c

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff4c 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800157a:	f7ff ff61 	bl	8001440 <__NVIC_GetPriorityGrouping>
 800157e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	6978      	ldr	r0, [r7, #20]
 8001586:	f7ff ffb1 	bl	80014ec <NVIC_EncodePriority>
 800158a:	4602      	mov	r2, r0
 800158c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff80 	bl	8001498 <__NVIC_SetPriority>
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff54 	bl	800145c <__NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e098      	b.n	8001700 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_DMA_Init+0x150>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d80f      	bhi.n	80015fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_DMA_Init+0x154>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <HAL_DMA_Init+0x158>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	009a      	lsls	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a48      	ldr	r2, [pc, #288]	; (8001718 <HAL_DMA_Init+0x15c>)
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
 80015f8:	e00e      	b.n	8001618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_DMA_Init+0x160>)
 8001602:	4413      	add	r3, r2
 8001604:	4a43      	ldr	r2, [pc, #268]	; (8001714 <HAL_DMA_Init+0x158>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <HAL_DMA_Init+0x164>)
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800162e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001672:	d039      	beq.n	80016e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_DMA_Init+0x15c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11a      	bne.n	80016b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_DMA_Init+0x168>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 031c 	and.w	r3, r3, #28
 800168a:	210f      	movs	r1, #15
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4924      	ldr	r1, [pc, #144]	; (8001724 <HAL_DMA_Init+0x168>)
 8001694:	4013      	ands	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_DMA_Init+0x168>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f003 031c 	and.w	r3, r3, #28
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	491d      	ldr	r1, [pc, #116]	; (8001724 <HAL_DMA_Init+0x168>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
 80016b2:	e019      	b.n	80016e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 031c 	and.w	r3, r3, #28
 80016c0:	210f      	movs	r1, #15
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4917      	ldr	r1, [pc, #92]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6859      	ldr	r1, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 031c 	and.w	r3, r3, #28
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	4911      	ldr	r1, [pc, #68]	; (8001728 <HAL_DMA_Init+0x16c>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40020407 	.word	0x40020407
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020000 	.word	0x40020000
 800171c:	bffdfbf8 	.word	0xbffdfbf8
 8001720:	40020400 	.word	0x40020400
 8001724:	400200a8 	.word	0x400200a8
 8001728:	400204a8 	.word	0x400204a8

0800172c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_DMA_Start_IT+0x20>
 8001748:	2302      	movs	r3, #2
 800174a:	e04b      	b.n	80017e4 <HAL_DMA_Start_IT+0xb8>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d13a      	bne.n	80017d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f96b 	bl	8001a60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 020e 	orr.w	r2, r2, #14
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e00f      	b.n	80017c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 020a 	orr.w	r2, r2, #10
 80017c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e005      	b.n	80017e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e022      	b.n	800185c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020e 	bic.w	r2, r2, #14
 8001824:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f003 021c 	and.w	r2, r3, #28
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d005      	beq.n	800188c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2204      	movs	r2, #4
 8001884:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e029      	b.n	80018e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020e 	bic.w	r2, r2, #14
 800189a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f003 021c 	and.w	r2, r3, #28
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
    }
  }
  return status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 031c 	and.w	r3, r3, #28
 800190a:	2204      	movs	r2, #4
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d026      	beq.n	8001964 <HAL_DMA_IRQHandler+0x7a>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d107      	bne.n	800193e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0204 	bic.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f003 021c 	and.w	r2, r3, #28
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2104      	movs	r1, #4
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	d071      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001962:	e06c      	b.n	8001a3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	2202      	movs	r2, #2
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02e      	beq.n	80019d6 <HAL_DMA_IRQHandler+0xec>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d029      	beq.n	80019d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10b      	bne.n	80019a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020a 	bic.w	r2, r2, #10
 800199e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	f003 021c 	and.w	r2, r3, #28
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	2102      	movs	r1, #2
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d038      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019d4:	e033      	b.n	8001a3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 031c 	and.w	r3, r3, #28
 80019de:	2208      	movs	r2, #8
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d02a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x156>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d025      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f003 021c 	and.w	r2, r3, #28
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
}
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 021c 	and.w	r2, r3, #28
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d108      	bne.n	8001aa4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aa2:	e007      	b.n	8001ab4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e17f      	b.n	8001dd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8171 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d00b      	beq.n	8001b08 <HAL_GPIO_Init+0x48>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b12      	cmp	r3, #18
 8001b06:	d130      	bne.n	8001b6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	f003 0201 	and.w	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d118      	bne.n	8001ba8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x128>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	6939      	ldr	r1, [r7, #16]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ac 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c8a:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x22a>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001d02:	2300      	movs	r3, #0
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d14:	4937      	ldr	r1, [pc, #220]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae78 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
 8001e00:	48000c00 	.word	0x48000c00
 8001e04:	48001000 	.word	0x48001000
 8001e08:	48001400 	.word	0x48001400
 8001e0c:	48001800 	.word	0x48001800
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6e:	d130      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7c:	d038      	beq.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2232      	movs	r2, #50	; 0x32
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea4:	e002      	b.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f2      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d110      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e00f      	b.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d007      	beq.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40007000 	.word	0x40007000
 8001f04:	20000000 	.word	0x20000000
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e3d4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4ba1      	ldr	r3, [pc, #644]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80e4 	beq.w	8002108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4a>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	f040 808b 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 8087 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e3ac      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_RCC_OscConfig+0x7c>
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_OscConfig+0x88>
 8001f88:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d223      	bcs.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd73 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e38d      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4977      	ldr	r1, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4972      	ldr	r1, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
 8001fde:	e025      	b.n	800202c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe0:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	496a      	ldr	r1, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffe:	4b69      	ldr	r3, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fd33 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e34d      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202c:	f000 fc36 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	495a      	ldr	r1, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x29c>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x2a0>)
 800204a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <HAL_RCC_OscConfig+0x2a4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd4d 	bl	8000af0 <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d052      	beq.n	8002106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	e331      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002078:	f7ff f9b2 	bl	80013e0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002080:	f7ff f9ae 	bl	80013e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e31a      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	493b      	ldr	r1, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e01a      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020de:	f7ff f97f 	bl	80013e0 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e6:	f7ff f97b 	bl	80013e0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e2e7      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1da>
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d074      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x21a>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d10e      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d064      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d160      	bne.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e2c4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x24a>
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e01d      	b.n	8002192 <HAL_RCC_OscConfig+0x286>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x26e>
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x286>
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x298>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f921 	bl	80013e0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08008aa4 	.word	0x08008aa4
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff f914 	bl	80013e0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e280      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	4baf      	ldr	r3, [pc, #700]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2a8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f904 	bl	80013e0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff f900 	bl	80013e0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e26c      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d0>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d060      	beq.n	80022cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x310>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d119      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d116      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	4b99      	ldr	r3, [pc, #612]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x328>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e249      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b93      	ldr	r3, [pc, #588]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4990      	ldr	r1, [pc, #576]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e040      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d023      	beq.n	800229a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b8c      	ldr	r3, [pc, #560]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a8b      	ldr	r2, [pc, #556]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f8bf 	bl	80013e0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff f8bb 	bl	80013e0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e227      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	497c      	ldr	r1, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a79      	ldr	r2, [pc, #484]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f89b 	bl	80013e0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f897 	bl	80013e0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e203      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	4a67      	ldr	r2, [pc, #412]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f876 	bl	80013e0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff f872 	bl	80013e0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1de      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3ec>
 8002318:	e01b      	b.n	8002352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff f859 	bl	80013e0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff f855 	bl	80013e0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1c1      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7ff f81c 	bl	80013e0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7ff f818 	bl	80013e0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e184      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCC_OscConfig+0x57c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d8>
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e2:	e024      	b.n	800242e <HAL_RCC_OscConfig+0x522>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d110      	bne.n	800240e <HAL_RCC_OscConfig+0x502>
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	e00f      	b.n	800242e <HAL_RCC_OscConfig+0x522>
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe ffd3 	bl	80013e0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe ffcf 	bl	80013e0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e139      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x578>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ed      	beq.n	800243e <HAL_RCC_OscConfig+0x532>
 8002462:	e01a      	b.n	800249a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe ffbc 	bl	80013e0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe ffb8 	bl	80013e0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d906      	bls.n	800248c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e122      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248c:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e8      	bne.n	800246c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a8a      	ldr	r2, [pc, #552]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8108 	beq.w	80026c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 80d0 	bne.w	8002660 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d130      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d127      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11f      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002500:	2a07      	cmp	r2, #7
 8002502:	bf14      	ite	ne
 8002504:	2201      	movne	r2, #1
 8002506:	2200      	moveq	r2, #0
 8002508:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	4293      	cmp	r3, r2
 800250c:	d113      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d06e      	beq.n	8002614 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d069      	beq.n	8002610 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800253c:	4b64      	ldr	r3, [pc, #400]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b7      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002558:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe ff3c 	bl	80013e0 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe ff38 	bl	80013e0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0a4      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x7c8>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800259a:	3a01      	subs	r2, #1
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a4:	0212      	lsls	r2, r2, #8
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b8:	0852      	lsrs	r2, r2, #1
 80025ba:	3a01      	subs	r2, #1
 80025bc:	0652      	lsls	r2, r2, #25
 80025be:	4311      	orrs	r1, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c4:	0912      	lsrs	r2, r2, #4
 80025c6:	0452      	lsls	r2, r2, #17
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4941      	ldr	r1, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025e8:	f7fe fefa 	bl	80013e0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fef6 	bl	80013e0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e062      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260e:	e05a      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e059      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d152      	bne.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002638:	f7fe fed2 	bl	80013e0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fece 	bl	80013e0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e03a      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x734>
 800265e:	e032      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d02d      	beq.n	80026c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800266c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002670:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002684:	f023 0303 	bic.w	r3, r3, #3
 8002688:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 8002690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fea1 	bl	80013e0 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fe9d 	bl	80013e0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e009      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x796>
 80026c0:	e001      	b.n	80026c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	f99d808c 	.word	0xf99d808c

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0c8      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4961      	ldr	r1, [pc, #388]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b0      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d04c      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d121      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e09e      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d107      	bne.n	8002758 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d115      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e092      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002760:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e086      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e07e      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	493f      	ldr	r1, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002792:	f7fe fe25 	bl	80013e0 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f7fe fe21 	bl	80013e0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e066      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 020c 	and.w	r2, r3, #12
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1eb      	bne.n	800279a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	492c      	ldr	r1, [pc, #176]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4924      	ldr	r1, [pc, #144]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e036      	b.n	800287e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4910      	ldr	r1, [pc, #64]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284e:	f000 f825 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490c      	ldr	r1, [pc, #48]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f93c 	bl	8000af0 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	72fb      	strb	r3, [r7, #11]

  return status;
 800287c:	7afb      	ldrb	r3, [r7, #11]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	08008aa4 	.word	0x08008aa4
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d121      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d11e      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e004      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d101      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d134      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0xa6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0xac>
 8002940:	e005      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002944:	617b      	str	r3, [r7, #20]
      break;
 8002946:	e005      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800294a:	617b      	str	r3, [r7, #20]
      break;
 800294c:	e002      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	3301      	adds	r3, #1
 8002960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0e5b      	lsrs	r3, r3, #25
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	3301      	adds	r3, #1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08008abc 	.word	0x08008abc
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200

080029b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08008ab4 	.word	0x08008ab4

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029fc:	f7ff ffda 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08008ab4 	.word	0x08008ab4

08002a24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	220f      	movs	r2, #15
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCC_GetClockConfig+0x60>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0207 	and.w	r2, r3, #7
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40022000 	.word	0x40022000

08002a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff f9d0 	bl	8001e44 <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
 8002aa6:	e014      	b.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac0:	f7ff f9c0 	bl	8001e44 <HAL_PWREx_GetVoltageRange>
 8002ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d10b      	bne.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d919      	bls.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae4:	d902      	bls.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e013      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aec:	2301      	movs	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e010      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d902      	bls.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af8:	2303      	movs	r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	e00a      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d102      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b04:	2302      	movs	r3, #2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e004      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b70      	cmp	r3, #112	; 0x70
 8002b0e:	d101      	bne.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b10:	2301      	movs	r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b50:	2300      	movs	r3, #0
 8002b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d041      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b6c:	d02a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b72:	d824      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b88:	d010      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b8c:	4b86      	ldr	r3, [pc, #536]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a85      	ldr	r2, [pc, #532]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b98:	e015      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fabb 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002baa:	e00c      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3320      	adds	r3, #32
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fba6 	bl	8003304 <RCCEx_PLLSAI2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bcc:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bda:	4973      	ldr	r1, [pc, #460]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d041      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bfc:	d02a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c02:	d824      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0e:	d81e      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d010      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c1a:	e018      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c28:	e015      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa73 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c3a:	e00c      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3320      	adds	r3, #32
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fb5e 	bl	8003304 <RCCEx_PLLSAI2_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c4c:	e003      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	74fb      	strb	r3, [r7, #19]
      break;
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c5c:	4b52      	ldr	r3, [pc, #328]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6a:	494f      	ldr	r1, [pc, #316]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a0 	beq.w	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fb8a 	bl	80013e0 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cce:	e009      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe fb86 	bl	80013e0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d15c      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d019      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fb45 	bl	80013e0 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d58:	e00b      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fb41 	bl	80013e0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ec      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	4904      	ldr	r1, [pc, #16]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7c7b      	ldrb	r3, [r7, #17]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b9e      	ldr	r3, [pc, #632]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	4a9d      	ldr	r2, [pc, #628]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd2:	4b98      	ldr	r3, [pc, #608]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	4994      	ldr	r1, [pc, #592]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df4:	4b8f      	ldr	r3, [pc, #572]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 020c 	bic.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	498c      	ldr	r1, [pc, #560]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e16:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4983      	ldr	r1, [pc, #524]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	497b      	ldr	r1, [pc, #492]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	4972      	ldr	r1, [pc, #456]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	496a      	ldr	r1, [pc, #424]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	4961      	ldr	r1, [pc, #388]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	4959      	ldr	r1, [pc, #356]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee2:	4b54      	ldr	r3, [pc, #336]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	4950      	ldr	r1, [pc, #320]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	4948      	ldr	r1, [pc, #288]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	493f      	ldr	r1, [pc, #252]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d028      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f56:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f68:	4b32      	ldr	r3, [pc, #200]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f72:	60d3      	str	r3, [r2, #12]
 8002f74:	e011      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f7e:	d10c      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f8c8 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	491f      	ldr	r1, [pc, #124]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd0:	60d3      	str	r3, [r2, #12]
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f899 	bl	800311c <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003022:	d109      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a02      	ldr	r2, [pc, #8]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e014      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f867 	bl	800311c <RCCEx_PLLSAI1_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003076:	4928      	ldr	r1, [pc, #160]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003086:	d10d      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f844 	bl	800311c <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	74bb      	strb	r3, [r7, #18]
 80030a2:	e011      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3320      	adds	r3, #32
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f925 	bl	8003304 <RCCEx_PLLSAI2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e2:	490d      	ldr	r1, [pc, #52]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	4904      	ldr	r1, [pc, #16]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800310e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312a:	4b75      	ldr	r3, [pc, #468]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d018      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003136:	4b72      	ldr	r3, [pc, #456]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
       ||
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800314e:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
       ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d047      	beq.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e044      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d018      	beq.n	80031a2 <RCCEx_PLLSAI1_Config+0x86>
 8003170:	2b03      	cmp	r3, #3
 8003172:	d825      	bhi.n	80031c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003174:	2b01      	cmp	r3, #1
 8003176:	d002      	beq.n	800317e <RCCEx_PLLSAI1_Config+0x62>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d009      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x74>
 800317c:	e020      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800317e:	4b60      	ldr	r3, [pc, #384]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11d      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e01a      	b.n	80031c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003190:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e013      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031be:	e006      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e004      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031d6:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	430b      	orrs	r3, r1
 80031ec:	4944      	ldr	r1, [pc, #272]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d17d      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fe f8ec 	bl	80013e0 <HAL_GetTick>
 8003208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800320a:	e009      	b.n	8003220 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800320c:	f7fe f8e8 	bl	80013e0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	73fb      	strb	r3, [r7, #15]
        break;
 800321e:	e005      	b.n	800322c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003220:	4b37      	ldr	r3, [pc, #220]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ef      	bne.n	800320c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d160      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6892      	ldr	r2, [r2, #8]
 8003248:	0211      	lsls	r1, r2, #8
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	0912      	lsrs	r2, r2, #4
 8003250:	0452      	lsls	r2, r2, #17
 8003252:	430a      	orrs	r2, r1
 8003254:	492a      	ldr	r1, [pc, #168]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]
 800325a:	e027      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d112      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003262:	4b27      	ldr	r3, [pc, #156]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800326a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	0211      	lsls	r1, r2, #8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6912      	ldr	r2, [r2, #16]
 8003278:	0852      	lsrs	r2, r2, #1
 800327a:	3a01      	subs	r2, #1
 800327c:	0552      	lsls	r2, r2, #21
 800327e:	430a      	orrs	r2, r1
 8003280:	491f      	ldr	r1, [pc, #124]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
 8003286:	e011      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	0211      	lsls	r1, r2, #8
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6952      	ldr	r2, [r2, #20]
 800329e:	0852      	lsrs	r2, r2, #1
 80032a0:	3a01      	subs	r2, #1
 80032a2:	0652      	lsls	r2, r2, #25
 80032a4:	430a      	orrs	r2, r1
 80032a6:	4916      	ldr	r1, [pc, #88]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe f892 	bl	80013e0 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032be:	e009      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c0:	f7fe f88e 	bl	80013e0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	73fb      	strb	r3, [r7, #15]
          break;
 80032d2:	e005      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ef      	beq.n	80032c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4904      	ldr	r1, [pc, #16]	; (8003300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000

08003304 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003312:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
       ||
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
       ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d047      	beq.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e044      	b.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d018      	beq.n	800338a <RCCEx_PLLSAI2_Config+0x86>
 8003358:	2b03      	cmp	r3, #3
 800335a:	d825      	bhi.n	80033a8 <RCCEx_PLLSAI2_Config+0xa4>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <RCCEx_PLLSAI2_Config+0x62>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d009      	beq.n	8003378 <RCCEx_PLLSAI2_Config+0x74>
 8003364:	e020      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11d      	bne.n	80033ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003376:	e01a      	b.n	80033ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e013      	b.n	80033b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033a6:	e006      	b.n	80033b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e004      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	430b      	orrs	r3, r1
 80033d4:	4939      	ldr	r1, [pc, #228]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d167      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a35      	ldr	r2, [pc, #212]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fd fff8 	bl	80013e0 <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033f4:	f7fd fff4 	bl	80013e0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
        break;
 8003406:	e005      	b.n	8003414 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ef      	bne.n	80033f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d14a      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	0211      	lsls	r1, r2, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	0912      	lsrs	r2, r2, #4
 8003438:	0452      	lsls	r2, r2, #17
 800343a:	430a      	orrs	r2, r1
 800343c:	491f      	ldr	r1, [pc, #124]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	614b      	str	r3, [r1, #20]
 8003442:	e011      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800344c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6912      	ldr	r2, [r2, #16]
 800345a:	0852      	lsrs	r2, r2, #1
 800345c:	3a01      	subs	r2, #1
 800345e:	0652      	lsls	r2, r2, #25
 8003460:	430a      	orrs	r2, r1
 8003462:	4916      	ldr	r1, [pc, #88]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fd ffb4 	bl	80013e0 <HAL_GetTick>
 8003478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800347a:	e009      	b.n	8003490 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800347c:	f7fd ffb0 	bl	80013e0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d902      	bls.n	8003490 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	73fb      	strb	r3, [r7, #15]
          break;
 800348e:	e005      	b.n	800349c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ef      	beq.n	800347c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4904      	ldr	r1, [pc, #16]	; (80034bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000

080034c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e049      	b.n	8003566 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f841 	bl	800356e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 f9f8 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04f      	b.n	800363c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_TIM_Base_Start_IT+0xc4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01d      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d018      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_TIM_Base_Start_IT+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_TIM_Base_Start_IT+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_TIM_Base_Start_IT+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_TIM_Base_Start_IT+0x76>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_TIM_Base_Start_IT+0xd8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d115      	bne.n	8003626 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_TIM_Base_Start_IT+0xdc>)
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b06      	cmp	r3, #6
 800360a:	d015      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0xb4>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d011      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	e008      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e000      	b.n	800363a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40013400 	.word	0x40013400
 800365c:	40014000 	.word	0x40014000
 8003660:	00010007 	.word	0x00010007

08003664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f905 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8f7 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f908 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0204 	mvn.w	r2, #4
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8db 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8cd 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8de 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8b1 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8a3 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8b4 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b10      	cmp	r3, #16
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f887 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f879 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f88a 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f86c 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f914 	bl	8003a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f907 	bl	8003a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f838 	bl	80038de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0220 	mvn.w	r2, #32
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8c7 	bl	8003a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d00f      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <TIM_Base_SetConfig+0x128>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <TIM_Base_SetConfig+0x130>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <TIM_Base_SetConfig+0x128>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <TIM_Base_SetConfig+0x12c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <TIM_Base_SetConfig+0x130>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e040      	b.n	8003af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fc ff5a 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fc1c 	bl	80042e0 <UART_SetConfig>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e022      	b.n	8003af8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fe9a 	bl	80047f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 ff21 	bl	8004938 <UART_CheckIdleState>
 8003af6:	4603      	mov	r3, r0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	f040 8082 	bne.w	8003c1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Transmit+0x26>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07a      	b.n	8003c20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x38>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e073      	b.n	8003c20 <HAL_UART_Transmit+0x120>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fc47 	bl	80013e0 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d108      	bne.n	8003b80 <HAL_UART_Transmit+0x80>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e003      	b.n	8003b88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b90:	e02d      	b.n	8003bee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 ff14 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e039      	b.n	8003c20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e008      	b.n	8003bdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cb      	bne.n	8003b92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fee0 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e005      	b.n	8003c20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d166      	bne.n	8003d0c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_UART_Transmit_DMA+0x22>
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e05f      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Transmit_DMA+0x34>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e058      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xe6>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2221      	movs	r2, #33	; 0x21
 8003c86:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02b      	beq.n	8003ce8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_UART_Transmit_DMA+0xf0>)
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_UART_Transmit_DMA+0xf4>)
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_UART_Transmit_DMA+0xf8>)
 8003ca6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cac:	2200      	movs	r2, #0
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb8:	4619      	mov	r1, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	f7fd fd32 	bl	800172c <HAL_DMA_Start_IT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e012      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d06:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	08004c25 	.word	0x08004c25
 8003d1c:	08004c79 	.word	0x08004c79
 8003d20:	08004d65 	.word	0x08004d65

08003d24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d131      	bne.n	8003d9e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Receive_DMA+0x22>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e02a      	b.n	8003da0 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Receive_DMA+0x34>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e023      	b.n	8003da0 <HAL_UART_Receive_DMA+0x7c>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0f      	ldr	r2, [pc, #60]	; (8003da8 <HAL_UART_Receive_DMA+0x84>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d8c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fe95 	bl	8004ac4 <UART_Start_Receive_DMA>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	e000      	b.n	8003da0 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40008000 	.word	0x40008000

08003dac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d127      	bne.n	8003e1e <HAL_UART_DMAStop+0x72>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b21      	cmp	r3, #33	; 0x21
 8003dd2:	d124      	bne.n	8003e1e <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d015      	beq.n	8003e18 <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd fcfb 	bl	80017ec <HAL_DMA_Abort>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fe21 	bl	8001a48 <HAL_DMA_GetError>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d105      	bne.n	8003e18 <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2210      	movs	r2, #16
 8003e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e032      	b.n	8003e7e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 febf 	bl	8004b9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d127      	bne.n	8003e7c <HAL_UART_DMAStop+0xd0>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b22      	cmp	r3, #34	; 0x22
 8003e30:	d124      	bne.n	8003e7c <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fccc 	bl	80017ec <HAL_DMA_Abort>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fdf2 	bl	8001a48 <HAL_DMA_GetError>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d105      	bne.n	8003e76 <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e003      	b.n	8003e7e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fea5 	bl	8004bc6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 81ce 	beq.w	8004272 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
      }
      return;
 8003ede:	e1c8      	b.n	8004272 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80e3 	beq.w	80040ae <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4ba6      	ldr	r3, [pc, #664]	; (8004190 <HAL_UART_IRQHandler+0x308>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80d8 	beq.w	80040ae <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_UART_IRQHandler+0xa2>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f20:	f043 0201 	orr.w	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_UART_IRQHandler+0xce>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2202      	movs	r2, #2
 8003f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_UART_IRQHandler+0xfa>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fae:	f043 0208 	orr.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x15e>
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8142 	beq.w	8004276 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d004      	beq.n	8004036 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004032:	2b00      	cmp	r3, #0
 8004034:	d031      	beq.n	800409a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fdc5 	bl	8004bc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d123      	bne.n	8004092 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004058:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a4b      	ldr	r2, [pc, #300]	; (8004194 <HAL_UART_IRQHandler+0x30c>)
 8004068:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fbfa 	bl	8001868 <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d017      	beq.n	80040aa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00f      	b.n	80040aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f912 	bl	80042b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00b      	b.n	80040aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f90e 	bl	80042b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e007      	b.n	80040aa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f90a 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80040a8:	e0e5      	b.n	8004276 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	bf00      	nop
    return;
 80040ac:	e0e3      	b.n	8004276 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 80a9 	bne.w	800420a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a3 	beq.w	800420a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 809d 	beq.w	800420a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2210      	movs	r2, #16
 80040d6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d158      	bne.n	8004198 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80040f0:	893b      	ldrh	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80c1 	beq.w	800427a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040fe:	893a      	ldrh	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	f080 80ba 	bcs.w	800427a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	893a      	ldrh	r2, [r7, #8]
 800410a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d12a      	bne.n	8004174 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0210 	bic.w	r2, r2, #16
 8004168:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fb3c 	bl	80017ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f89d 	bl	80042c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800418e:	e074      	b.n	800427a <HAL_UART_IRQHandler+0x3f2>
 8004190:	04000120 	.word	0x04000120
 8004194:	08004de1 	.word	0x08004de1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d060      	beq.n	800427e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ca:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0210 	bic.w	r2, r2, #16
 80041fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f860 	bl	80042c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004208:	e039      	b.n	800427e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_UART_IRQHandler+0x3a8>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004226:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fe08 	bl	8004e3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800422e:	e029      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01a      	beq.n	8004282 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
    }
    return;
 8004254:	e015      	b.n	8004282 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d011      	beq.n	8004284 <HAL_UART_IRQHandler+0x3fc>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fdce 	bl	8004e0c <UART_EndTransmit_IT>
    return;
 8004270:	e008      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004272:	bf00      	nop
 8004274:	e006      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004276:	bf00      	nop
 8004278:	e004      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
      return;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
      return;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004282:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop

0800428c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4313      	orrs	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4bad      	ldr	r3, [pc, #692]	; (80045c0 <UART_SetConfig+0x2e0>)
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	430b      	orrs	r3, r1
 8004316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4aa2      	ldr	r2, [pc, #648]	; (80045c4 <UART_SetConfig+0x2e4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	4313      	orrs	r3, r2
 8004346:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a99      	ldr	r2, [pc, #612]	; (80045c8 <UART_SetConfig+0x2e8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d121      	bne.n	80043aa <UART_SetConfig+0xca>
 8004366:	4b99      	ldr	r3, [pc, #612]	; (80045cc <UART_SetConfig+0x2ec>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b03      	cmp	r3, #3
 8004372:	d817      	bhi.n	80043a4 <UART_SetConfig+0xc4>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0x9c>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004399 	.word	0x08004399
 8004384:	08004393 	.word	0x08004393
 8004388:	0800439f 	.word	0x0800439f
 800438c:	2301      	movs	r3, #1
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e0e7      	b.n	8004562 <UART_SetConfig+0x282>
 8004392:	2302      	movs	r3, #2
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e0e4      	b.n	8004562 <UART_SetConfig+0x282>
 8004398:	2304      	movs	r3, #4
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e0e1      	b.n	8004562 <UART_SetConfig+0x282>
 800439e:	2308      	movs	r3, #8
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e0de      	b.n	8004562 <UART_SetConfig+0x282>
 80043a4:	2310      	movs	r3, #16
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e0db      	b.n	8004562 <UART_SetConfig+0x282>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a88      	ldr	r2, [pc, #544]	; (80045d0 <UART_SetConfig+0x2f0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d132      	bne.n	800441a <UART_SetConfig+0x13a>
 80043b4:	4b85      	ldr	r3, [pc, #532]	; (80045cc <UART_SetConfig+0x2ec>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d828      	bhi.n	8004414 <UART_SetConfig+0x134>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0xe8>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004415 	.word	0x08004415
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004409 	.word	0x08004409
 80043dc:	08004415 	.word	0x08004415
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004403 	.word	0x08004403
 80043ec:	08004415 	.word	0x08004415
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004415 	.word	0x08004415
 80043f8:	0800440f 	.word	0x0800440f
 80043fc:	2300      	movs	r3, #0
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e0af      	b.n	8004562 <UART_SetConfig+0x282>
 8004402:	2302      	movs	r3, #2
 8004404:	76fb      	strb	r3, [r7, #27]
 8004406:	e0ac      	b.n	8004562 <UART_SetConfig+0x282>
 8004408:	2304      	movs	r3, #4
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e0a9      	b.n	8004562 <UART_SetConfig+0x282>
 800440e:	2308      	movs	r3, #8
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e0a6      	b.n	8004562 <UART_SetConfig+0x282>
 8004414:	2310      	movs	r3, #16
 8004416:	76fb      	strb	r3, [r7, #27]
 8004418:	e0a3      	b.n	8004562 <UART_SetConfig+0x282>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6d      	ldr	r2, [pc, #436]	; (80045d4 <UART_SetConfig+0x2f4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d120      	bne.n	8004466 <UART_SetConfig+0x186>
 8004424:	4b69      	ldr	r3, [pc, #420]	; (80045cc <UART_SetConfig+0x2ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800442e:	2b30      	cmp	r3, #48	; 0x30
 8004430:	d013      	beq.n	800445a <UART_SetConfig+0x17a>
 8004432:	2b30      	cmp	r3, #48	; 0x30
 8004434:	d814      	bhi.n	8004460 <UART_SetConfig+0x180>
 8004436:	2b20      	cmp	r3, #32
 8004438:	d009      	beq.n	800444e <UART_SetConfig+0x16e>
 800443a:	2b20      	cmp	r3, #32
 800443c:	d810      	bhi.n	8004460 <UART_SetConfig+0x180>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <UART_SetConfig+0x168>
 8004442:	2b10      	cmp	r3, #16
 8004444:	d006      	beq.n	8004454 <UART_SetConfig+0x174>
 8004446:	e00b      	b.n	8004460 <UART_SetConfig+0x180>
 8004448:	2300      	movs	r3, #0
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e089      	b.n	8004562 <UART_SetConfig+0x282>
 800444e:	2302      	movs	r3, #2
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e086      	b.n	8004562 <UART_SetConfig+0x282>
 8004454:	2304      	movs	r3, #4
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e083      	b.n	8004562 <UART_SetConfig+0x282>
 800445a:	2308      	movs	r3, #8
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e080      	b.n	8004562 <UART_SetConfig+0x282>
 8004460:	2310      	movs	r3, #16
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	e07d      	b.n	8004562 <UART_SetConfig+0x282>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5b      	ldr	r2, [pc, #364]	; (80045d8 <UART_SetConfig+0x2f8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d120      	bne.n	80044b2 <UART_SetConfig+0x1d2>
 8004470:	4b56      	ldr	r3, [pc, #344]	; (80045cc <UART_SetConfig+0x2ec>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800447a:	2bc0      	cmp	r3, #192	; 0xc0
 800447c:	d013      	beq.n	80044a6 <UART_SetConfig+0x1c6>
 800447e:	2bc0      	cmp	r3, #192	; 0xc0
 8004480:	d814      	bhi.n	80044ac <UART_SetConfig+0x1cc>
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d009      	beq.n	800449a <UART_SetConfig+0x1ba>
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d810      	bhi.n	80044ac <UART_SetConfig+0x1cc>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <UART_SetConfig+0x1b4>
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d006      	beq.n	80044a0 <UART_SetConfig+0x1c0>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x1cc>
 8004494:	2300      	movs	r3, #0
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e063      	b.n	8004562 <UART_SetConfig+0x282>
 800449a:	2302      	movs	r3, #2
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e060      	b.n	8004562 <UART_SetConfig+0x282>
 80044a0:	2304      	movs	r3, #4
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e05d      	b.n	8004562 <UART_SetConfig+0x282>
 80044a6:	2308      	movs	r3, #8
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e05a      	b.n	8004562 <UART_SetConfig+0x282>
 80044ac:	2310      	movs	r3, #16
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e057      	b.n	8004562 <UART_SetConfig+0x282>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a49      	ldr	r2, [pc, #292]	; (80045dc <UART_SetConfig+0x2fc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d125      	bne.n	8004508 <UART_SetConfig+0x228>
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <UART_SetConfig+0x2ec>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ca:	d017      	beq.n	80044fc <UART_SetConfig+0x21c>
 80044cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d0:	d817      	bhi.n	8004502 <UART_SetConfig+0x222>
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d00b      	beq.n	80044f0 <UART_SetConfig+0x210>
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d811      	bhi.n	8004502 <UART_SetConfig+0x222>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <UART_SetConfig+0x20a>
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d006      	beq.n	80044f6 <UART_SetConfig+0x216>
 80044e8:	e00b      	b.n	8004502 <UART_SetConfig+0x222>
 80044ea:	2300      	movs	r3, #0
 80044ec:	76fb      	strb	r3, [r7, #27]
 80044ee:	e038      	b.n	8004562 <UART_SetConfig+0x282>
 80044f0:	2302      	movs	r3, #2
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e035      	b.n	8004562 <UART_SetConfig+0x282>
 80044f6:	2304      	movs	r3, #4
 80044f8:	76fb      	strb	r3, [r7, #27]
 80044fa:	e032      	b.n	8004562 <UART_SetConfig+0x282>
 80044fc:	2308      	movs	r3, #8
 80044fe:	76fb      	strb	r3, [r7, #27]
 8004500:	e02f      	b.n	8004562 <UART_SetConfig+0x282>
 8004502:	2310      	movs	r3, #16
 8004504:	76fb      	strb	r3, [r7, #27]
 8004506:	e02c      	b.n	8004562 <UART_SetConfig+0x282>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <UART_SetConfig+0x2e4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d125      	bne.n	800455e <UART_SetConfig+0x27e>
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <UART_SetConfig+0x2ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800451c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004520:	d017      	beq.n	8004552 <UART_SetConfig+0x272>
 8004522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004526:	d817      	bhi.n	8004558 <UART_SetConfig+0x278>
 8004528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452c:	d00b      	beq.n	8004546 <UART_SetConfig+0x266>
 800452e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004532:	d811      	bhi.n	8004558 <UART_SetConfig+0x278>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <UART_SetConfig+0x260>
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d006      	beq.n	800454c <UART_SetConfig+0x26c>
 800453e:	e00b      	b.n	8004558 <UART_SetConfig+0x278>
 8004540:	2300      	movs	r3, #0
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x282>
 8004546:	2302      	movs	r3, #2
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e00a      	b.n	8004562 <UART_SetConfig+0x282>
 800454c:	2304      	movs	r3, #4
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	e007      	b.n	8004562 <UART_SetConfig+0x282>
 8004552:	2308      	movs	r3, #8
 8004554:	76fb      	strb	r3, [r7, #27]
 8004556:	e004      	b.n	8004562 <UART_SetConfig+0x282>
 8004558:	2310      	movs	r3, #16
 800455a:	76fb      	strb	r3, [r7, #27]
 800455c:	e001      	b.n	8004562 <UART_SetConfig+0x282>
 800455e:	2310      	movs	r3, #16
 8004560:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <UART_SetConfig+0x2e4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	f040 8087 	bne.w	800467c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800456e:	7efb      	ldrb	r3, [r7, #27]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d837      	bhi.n	80045e4 <UART_SetConfig+0x304>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <UART_SetConfig+0x29c>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045e5 	.word	0x080045e5
 800458c:	080045af 	.word	0x080045af
 8004590:	080045e5 	.word	0x080045e5
 8004594:	080045e5 	.word	0x080045e5
 8004598:	080045e5 	.word	0x080045e5
 800459c:	080045b7 	.word	0x080045b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe fa14 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 80045a4:	6178      	str	r0, [r7, #20]
        break;
 80045a6:	e022      	b.n	80045ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <UART_SetConfig+0x300>)
 80045aa:	617b      	str	r3, [r7, #20]
        break;
 80045ac:	e01f      	b.n	80045ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ae:	f7fe f975 	bl	800289c <HAL_RCC_GetSysClockFreq>
 80045b2:	6178      	str	r0, [r7, #20]
        break;
 80045b4:	e01b      	b.n	80045ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	617b      	str	r3, [r7, #20]
        break;
 80045bc:	e017      	b.n	80045ee <UART_SetConfig+0x30e>
 80045be:	bf00      	nop
 80045c0:	efff69f3 	.word	0xefff69f3
 80045c4:	40008000 	.word	0x40008000
 80045c8:	40013800 	.word	0x40013800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40004800 	.word	0x40004800
 80045d8:	40004c00 	.word	0x40004c00
 80045dc:	40005000 	.word	0x40005000
 80045e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	76bb      	strb	r3, [r7, #26]
        break;
 80045ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80f1 	beq.w	80047d8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d305      	bcc.n	8004612 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	429a      	cmp	r2, r3
 8004610:	d902      	bls.n	8004618 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	76bb      	strb	r3, [r7, #26]
 8004616:	e0df      	b.n	80047d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4618      	mov	r0, r3
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	020b      	lsls	r3, r1, #8
 800462a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800462e:	0202      	lsls	r2, r0, #8
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6849      	ldr	r1, [r1, #4]
 8004634:	0849      	lsrs	r1, r1, #1
 8004636:	4608      	mov	r0, r1
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	1814      	adds	r4, r2, r0
 800463e:	eb43 0501 	adc.w	r5, r3, r1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	4620      	mov	r0, r4
 800464e:	4629      	mov	r1, r5
 8004650:	f7fb fe16 	bl	8000280 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004662:	d308      	bcc.n	8004676 <UART_SetConfig+0x396>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466a:	d204      	bcs.n	8004676 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	e0b0      	b.n	80047d8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	76bb      	strb	r3, [r7, #26]
 800467a:	e0ad      	b.n	80047d8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d15c      	bne.n	8004740 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004686:	7efb      	ldrb	r3, [r7, #27]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d828      	bhi.n	80046de <UART_SetConfig+0x3fe>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x3b4>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe f988 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 80046bc:	6178      	str	r0, [r7, #20]
        break;
 80046be:	e013      	b.n	80046e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe f99a 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 80046c4:	6178      	str	r0, [r7, #20]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <UART_SetConfig+0x510>)
 80046ca:	617b      	str	r3, [r7, #20]
        break;
 80046cc:	e00c      	b.n	80046e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fe f8e5 	bl	800289c <HAL_RCC_GetSysClockFreq>
 80046d2:	6178      	str	r0, [r7, #20]
        break;
 80046d4:	e008      	b.n	80046e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	617b      	str	r3, [r7, #20]
        break;
 80046dc:	e004      	b.n	80046e8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	76bb      	strb	r3, [r7, #26]
        break;
 80046e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d074      	beq.n	80047d8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d916      	bls.n	800473a <UART_SetConfig+0x45a>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d212      	bcs.n	800473a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f023 030f 	bic.w	r3, r3, #15
 800471c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	b29a      	uxth	r2, r3
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	4313      	orrs	r3, r2
 800472e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	89fa      	ldrh	r2, [r7, #14]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e04e      	b.n	80047d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	76bb      	strb	r3, [r7, #26]
 800473e:	e04b      	b.n	80047d8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004740:	7efb      	ldrb	r3, [r7, #27]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x4b6>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x46c>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe f92c 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8004774:	6178      	str	r0, [r7, #20]
        break;
 8004776:	e013      	b.n	80047a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe f93e 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 800477c:	6178      	str	r0, [r7, #20]
        break;
 800477e:	e00f      	b.n	80047a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <UART_SetConfig+0x510>)
 8004782:	617b      	str	r3, [r7, #20]
        break;
 8004784:	e00c      	b.n	80047a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe f889 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800478a:	6178      	str	r0, [r7, #20]
        break;
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	617b      	str	r3, [r7, #20]
        break;
 8004794:	e004      	b.n	80047a0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	76bb      	strb	r3, [r7, #26]
        break;
 800479e:	bf00      	nop
    }

    if (pclk != 0U)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d018      	beq.n	80047d8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085a      	lsrs	r2, r3, #1
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d908      	bls.n	80047d4 <UART_SetConfig+0x4f4>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d204      	bcs.n	80047d4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	e001      	b.n	80047d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bdb0      	pop	{r4, r5, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00f42400 	.word	0x00f42400

080047f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01a      	beq.n	800490a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f2:	d10a      	bne.n	800490a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004948:	f7fc fd4a 	bl	80013e0 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d10e      	bne.n	800497a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f82d 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e023      	b.n	80049c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d10e      	bne.n	80049a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f817 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e00d      	b.n	80049c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	e05e      	b.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e2:	d05a      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fc fcfc 	bl	80013e0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <UART_WaitOnFlagUntilTimeout+0x30>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11b      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e043      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02c      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d124      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a58:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e00f      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d091      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2222      	movs	r2, #34	; 0x22
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02b      	beq.n	8004b4e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <UART_Start_Receive_DMA+0xcc>)
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <UART_Start_Receive_DMA+0xd0>)
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <UART_Start_Receive_DMA+0xd4>)
 8004b0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	2200      	movs	r2, #0
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	4619      	mov	r1, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	461a      	mov	r2, r3
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	f7fc fdff 	bl	800172c <HAL_DMA_Start_IT>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2210      	movs	r2, #16
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01c      	b.n	8004b88 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b64:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b84:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	08004c95 	.word	0x08004c95
 8004b94:	08004d2d 	.word	0x08004d2d
 8004b98:	08004d65 	.word	0x08004d65

08004b9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004bb2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bdc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0210 	bic.w	r2, r2, #16
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d114      	bne.n	8004c6a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c56:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c68:	e002      	b.n	8004c70 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7fc fb4e 	bl	800130c <HAL_UART_TxCpltCallback>
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff fb00 	bl	800428c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d12a      	bne.n	8004d06 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cc6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0210 	bic.w	r2, r2, #16
 8004d04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d14:	4619      	mov	r1, r3
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff fad6 	bl	80042c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d1c:	e002      	b.n	8004d24 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7fc fada 	bl	80012d8 <HAL_UART_RxCpltCallback>
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d109      	bne.n	8004d56 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff faba 	bl	80042c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d54:	e002      	b.n	8004d5c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff faa2 	bl	80042a0 <HAL_UART_RxHalfCpltCallback>
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d76:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d109      	bne.n	8004da0 <UART_DMAError+0x3c>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b21      	cmp	r3, #33	; 0x21
 8004d90:	d106      	bne.n	8004da0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff fefe 	bl	8004b9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d109      	bne.n	8004dc2 <UART_DMAError+0x5e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b22      	cmp	r3, #34	; 0x22
 8004db2:	d106      	bne.n	8004dc2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004dbc:	6978      	ldr	r0, [r7, #20]
 8004dbe:	f7ff ff02 	bl	8004bc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc8:	f043 0210 	orr.w	r2, r3, #16
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd2:	6978      	ldr	r0, [r7, #20]
 8004dd4:	f7ff fa6e 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd8:	bf00      	nop
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fa58 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fc fa6b 	bl	800130c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <__NVIC_SetPriority>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	db0a      	blt.n	8004e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <__NVIC_SetPriority+0x4c>)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	440b      	add	r3, r1
 8004e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e7c:	e00a      	b.n	8004e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <__NVIC_SetPriority+0x50>)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	761a      	strb	r2, [r3, #24]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e100 	.word	0xe000e100
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Handler+0x1c>)
 8004eae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004eb0:	f001 fcfe 	bl	80068b0 <xTaskGetSchedulerState>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004eba:	f002 fae5 	bl	8007488 <xPortSysTickHandler>
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f06f 0004 	mvn.w	r0, #4
 8004ed2:	f7ff ffbf 	bl	8004e54 <__NVIC_SetPriority>
#endif
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee2:	f3ef 8305 	mrs	r3, IPSR
 8004ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004eee:	f06f 0305 	mvn.w	r3, #5
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	e00c      	b.n	8004f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <osKernelInitialize+0x44>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <osKernelInitialize+0x44>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	e002      	b.n	8004f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f10:	687b      	ldr	r3, [r7, #4]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000094 	.word	0x20000094

08004f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2a:	f3ef 8305 	mrs	r3, IPSR
 8004f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f36:	f06f 0305 	mvn.w	r3, #5
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e010      	b.n	8004f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <osKernelStart+0x48>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d109      	bne.n	8004f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f46:	f7ff ffbf 	bl	8004ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <osKernelStart+0x48>)
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f50:	f001 f866 	bl	8006020 <vTaskStartScheduler>
      stat = osOK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	e002      	b.n	8004f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f60:	687b      	ldr	r3, [r7, #4]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000094 	.word	0x20000094

08004f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af04      	add	r7, sp, #16
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f80:	f3ef 8305 	mrs	r3, IPSR
 8004f84:	617b      	str	r3, [r7, #20]
  return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d17e      	bne.n	800508a <osThreadNew+0x11a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d07b      	beq.n	800508a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f96:	2318      	movs	r3, #24
 8004f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d045      	beq.n	8005036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <osThreadNew+0x48>
        name = attr->name;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <osThreadNew+0x6e>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b38      	cmp	r3, #56	; 0x38
 8004fd0:	d805      	bhi.n	8004fde <osThreadNew+0x6e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <osThreadNew+0x72>
        return (NULL);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e054      	b.n	800508c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <osThreadNew+0xa8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b5b      	cmp	r3, #91	; 0x5b
 8005000:	d90a      	bls.n	8005018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <osThreadNew+0xa8>
        mem = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	e010      	b.n	800503a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10c      	bne.n	800503a <osThreadNew+0xca>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <osThreadNew+0xca>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <osThreadNew+0xca>
          mem = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e001      	b.n	800503a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d110      	bne.n	8005062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005048:	9202      	str	r2, [sp, #8]
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fe0c 	bl	8005c74 <xTaskCreateStatic>
 800505c:	4603      	mov	r3, r0
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e013      	b.n	800508a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d110      	bne.n	800508a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	b29a      	uxth	r2, r3
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fe57 	bl	8005d2e <xTaskCreate>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <osThreadNew+0x11a>
            hTask = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800508a:	693b      	ldr	r3, [r7, #16]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509c:	f3ef 8305 	mrs	r3, IPSR
 80050a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <osDelay+0x1c>
    stat = osErrorISR;
 80050a8:	f06f 0305 	mvn.w	r3, #5
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e007      	b.n	80050c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ff7c 	bl	8005fb8 <vTaskDelay>
    }
  }

  return (stat);
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80050dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4a06      	ldr	r2, [pc, #24]	; (80050fc <vApplicationGetIdleTaskMemory+0x30>)
 80050e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2280      	movs	r2, #128	; 0x80
 80050e8:	601a      	str	r2, [r3, #0]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000098 	.word	0x20000098
 80050fc:	200000f4 	.word	0x200000f4

08005100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <vApplicationGetTimerTaskMemory+0x2c>)
 8005110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a06      	ldr	r2, [pc, #24]	; (8005130 <vApplicationGetTimerTaskMemory+0x30>)
 8005116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	200002f4 	.word	0x200002f4
 8005130:	20000350 	.word	0x20000350

08005134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f103 0208 	add.w	r2, r3, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 0208 	add.w	r2, r3, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0208 	add.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ec:	d103      	bne.n	80051f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e00c      	b.n	8005210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3308      	adds	r3, #8
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e002      	b.n	8005204 <vListInsert+0x2e>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d2f6      	bcs.n	80051fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6852      	ldr	r2, [r2, #4]
 8005268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	d103      	bne.n	800527c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052c6:	f002 f84d 	bl	8007364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	441a      	add	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	3b01      	subs	r3, #1
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d114      	bne.n	8005346 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3310      	adds	r3, #16
 8005328:	4618      	mov	r0, r3
 800532a:	f001 f903 	bl	8006534 <xTaskRemoveFromEventList>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d012      	beq.n	800535a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <xQueueGenericReset+0xcc>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	e009      	b.n	800535a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3310      	adds	r3, #16
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fef2 	bl	8005134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff feed 	bl	8005134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800535a:	f002 f833 	bl	80073c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800535e:	2301      	movs	r3, #1
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <xQueueGenericCreateStatic+0x52>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <xQueueGenericCreateStatic+0x56>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueGenericCreateStatic+0x58>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	623b      	str	r3, [r7, #32]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <xQueueGenericCreateStatic+0x7e>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <xQueueGenericCreateStatic+0x82>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericCreateStatic+0x84>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	61fb      	str	r3, [r7, #28]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800540a:	2350      	movs	r3, #80	; 0x50
 800540c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d00a      	beq.n	800542a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	61bb      	str	r3, [r7, #24]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800542a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800543e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f805 	bl	800545c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	; 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e002      	b.n	800547e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800548a:	2101      	movs	r1, #1
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f7ff ff05 	bl	800529c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	; 0x38
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054b2:	2300      	movs	r3, #0
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericSend+0x32>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <xQueueGenericSend+0x40>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <xQueueGenericSend+0x44>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <xQueueGenericSend+0x46>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xQueueGenericSend+0x60>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d103      	bne.n	8005512 <xQueueGenericSend+0x6e>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <xQueueGenericSend+0x72>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericSend+0x74>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGenericSend+0x8e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	623b      	str	r3, [r7, #32]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005532:	f001 f9bd 	bl	80068b0 <xTaskGetSchedulerState>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <xQueueGenericSend+0x9e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <xQueueGenericSend+0xa2>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <xQueueGenericSend+0xa4>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xQueueGenericSend+0xbe>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61fb      	str	r3, [r7, #28]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005562:	f001 feff 	bl	8007364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <xQueueGenericSend+0xd4>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d129      	bne.n	80055cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800557e:	f000 fa0b 	bl	8005998 <prvCopyDataToQueue>
 8005582:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	4618      	mov	r0, r3
 8005592:	f000 ffcf 	bl	8006534 <xTaskRemoveFromEventList>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800559c:	4b3f      	ldr	r3, [pc, #252]	; (800569c <xQueueGenericSend+0x1f8>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e00a      	b.n	80055c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <xQueueGenericSend+0x1f8>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055c4:	f001 fefe 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e063      	b.n	8005694 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d2:	f001 fef7 	bl	80073c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e05c      	b.n	8005694 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 f809 	bl	80065fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ee:	f001 fee9 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f2:	f000 fd7b 	bl	80060ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f6:	f001 feb5 	bl	8007364 <vPortEnterCritical>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005600:	b25b      	sxtb	r3, r3
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005606:	d103      	bne.n	8005610 <xQueueGenericSend+0x16c>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561c:	d103      	bne.n	8005626 <xQueueGenericSend+0x182>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005626:	f001 fecd 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0314 	add.w	r3, r7, #20
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fff8 	bl	8006628 <xTaskCheckForTimeOut>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d124      	bne.n	8005688 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800563e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005640:	f000 faa2 	bl	8005b88 <prvIsQueueFull>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	3310      	adds	r3, #16
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ff1e 	bl	8006494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800565a:	f000 fa2d 	bl	8005ab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f000 fd53 	bl	8006108 <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f af7c 	bne.w	8005562 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <xQueueGenericSend+0x1f8>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	e772      	b.n	8005562 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800567c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567e:	f000 fa1b 	bl	8005ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005682:	f000 fd41 	bl	8006108 <xTaskResumeAll>
 8005686:	e76c      	b.n	8005562 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800568a:	f000 fa15 	bl	8005ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568e:	f000 fd3b 	bl	8006108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005692:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005694:	4618      	mov	r0, r3
 8005696:	3738      	adds	r7, #56	; 0x38
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b090      	sub	sp, #64	; 0x40
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <xQueueGenericSendFromISR+0x3c>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <xQueueGenericSendFromISR+0x40>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <xQueueGenericSendFromISR+0x42>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d103      	bne.n	800570a <xQueueGenericSendFromISR+0x6a>
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <xQueueGenericSendFromISR+0x6e>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSendFromISR+0x70>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	623b      	str	r3, [r7, #32]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800572a:	f001 fefd 	bl	8007528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800572e:	f3ef 8211 	mrs	r2, BASEPRI
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005746:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <xQueueGenericSendFromISR+0xbc>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d12f      	bne.n	80057bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005772:	f000 f911 	bl	8005998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005776:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577e:	d112      	bne.n	80057a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d016      	beq.n	80057b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	3324      	adds	r3, #36	; 0x24
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fed1 	bl	8006534 <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e007      	b.n	80057b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057aa:	3301      	adds	r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	b25a      	sxtb	r2, r3
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057b6:	2301      	movs	r3, #1
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057ba:	e001      	b.n	80057c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3740      	adds	r7, #64	; 0x40
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	; 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <xQueueReceive+0x30>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	623b      	str	r3, [r7, #32]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <xQueueReceive+0x3e>
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <xQueueReceive+0x42>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueReceive+0x44>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xQueueReceive+0x5e>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	61fb      	str	r3, [r7, #28]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005836:	f001 f83b 	bl	80068b0 <xTaskGetSchedulerState>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <xQueueReceive+0x6e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <xQueueReceive+0x72>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueReceive+0x74>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueReceive+0x8e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61bb      	str	r3, [r7, #24]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005866:	f001 fd7d 	bl	8007364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01f      	beq.n	80058b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587a:	f000 f8f7 	bl	8005a6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00f      	beq.n	80058ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	3310      	adds	r3, #16
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fe4e 	bl	8006534 <xTaskRemoveFromEventList>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <xQueueReceive+0x1bc>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058ae:	f001 fd89 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e069      	b.n	800598a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058bc:	f001 fd82 	bl	80073c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e062      	b.n	800598a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ca:	f107 0310 	add.w	r3, r7, #16
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fe94 	bl	80065fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d8:	f001 fd74 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058dc:	f000 fc06 	bl	80060ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e0:	f001 fd40 	bl	8007364 <vPortEnterCritical>
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f0:	d103      	bne.n	80058fa <xQueueReceive+0x122>
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005900:	b25b      	sxtb	r3, r3
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005906:	d103      	bne.n	8005910 <xQueueReceive+0x138>
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005910:	f001 fd58 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005914:	1d3a      	adds	r2, r7, #4
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fe83 	bl	8006628 <xTaskCheckForTimeOut>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d123      	bne.n	8005970 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592a:	f000 f917 	bl	8005b5c <prvIsQueueEmpty>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fda9 	bl	8006494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005944:	f000 f8b8 	bl	8005ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005948:	f000 fbde 	bl	8006108 <xTaskResumeAll>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d189      	bne.n	8005866 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <xQueueReceive+0x1bc>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	e780      	b.n	8005866 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005966:	f000 f8a7 	bl	8005ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596a:	f000 fbcd 	bl	8006108 <xTaskResumeAll>
 800596e:	e77a      	b.n	8005866 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005972:	f000 f8a1 	bl	8005ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005976:	f000 fbc7 	bl	8006108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800597a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597c:	f000 f8ee 	bl	8005b5c <prvIsQueueEmpty>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	f43f af6f 	beq.w	8005866 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800598a:	4618      	mov	r0, r3
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d14d      	bne.n	8005a5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ff92 	bl	80068ec <xTaskPriorityDisinherit>
 80059c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	e043      	b.n	8005a5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d119      	bne.n	8005a0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6858      	ldr	r0, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	461a      	mov	r2, r3
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	f001 fff4 	bl	80079d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d32b      	bcc.n	8005a5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	e026      	b.n	8005a5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68d8      	ldr	r0, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	461a      	mov	r2, r3
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	f001 ffda 	bl	80079d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	425b      	negs	r3, r3
 8005a26:	441a      	add	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d207      	bcs.n	8005a48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	425b      	negs	r3, r3
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d105      	bne.n	8005a5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a62:	697b      	ldr	r3, [r7, #20]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	441a      	add	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d303      	bcc.n	8005aa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68d9      	ldr	r1, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6838      	ldr	r0, [r7, #0]
 8005aac:	f001 ff90 	bl	80079d0 <memcpy>
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ac0:	f001 fc50 	bl	8007364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005acc:	e011      	b.n	8005af2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d012      	beq.n	8005afc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3324      	adds	r3, #36	; 0x24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fd2a 	bl	8006534 <xTaskRemoveFromEventList>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ae6:	f000 fe01 	bl	80066ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dce9      	bgt.n	8005ace <prvUnlockQueue+0x16>
 8005afa:	e000      	b.n	8005afe <prvUnlockQueue+0x46>
					break;
 8005afc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b06:	f001 fc5d 	bl	80073c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b0a:	f001 fc2b 	bl	8007364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b16:	e011      	b.n	8005b3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3310      	adds	r3, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fd05 	bl	8006534 <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b30:	f000 fddc 	bl	80066ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dce9      	bgt.n	8005b18 <prvUnlockQueue+0x60>
 8005b44:	e000      	b.n	8005b48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b50:	f001 fc38 	bl	80073c4 <vPortExitCritical>
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b64:	f001 fbfe 	bl	8007364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e001      	b.n	8005b7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b7a:	f001 fc23 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b90:	f001 fbe8 	bl	8007364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d102      	bne.n	8005ba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e001      	b.n	8005baa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005baa:	f001 fc0b 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e014      	b.n	8005bf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bc8:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <vQueueAddToRegistry+0x50>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bd4:	490c      	ldr	r1, [pc, #48]	; (8005c08 <vQueueAddToRegistry+0x50>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <vQueueAddToRegistry+0x50>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bea:	e006      	b.n	8005bfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b07      	cmp	r3, #7
 8005bf6:	d9e7      	bls.n	8005bc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20001c60 	.word	0x20001c60

08005c0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c1c:	f001 fba2 	bl	8007364 <vPortEnterCritical>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c2c:	d103      	bne.n	8005c36 <vQueueWaitForMessageRestricted+0x2a>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3c:	b25b      	sxtb	r3, r3
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c42:	d103      	bne.n	8005c4c <vQueueWaitForMessageRestricted+0x40>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c4c:	f001 fbba 	bl	80073c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3324      	adds	r3, #36	; 0x24
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fc3b 	bl	80064dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff26 	bl	8005ab8 <prvUnlockQueue>
	}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08e      	sub	sp, #56	; 0x38
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	623b      	str	r3, [r7, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xTaskCreateStatic+0x46>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cba:	235c      	movs	r3, #92	; 0x5c
 8005cbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b5c      	cmp	r3, #92	; 0x5c
 8005cc2:	d00a      	beq.n	8005cda <xTaskCreateStatic+0x66>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61bb      	str	r3, [r7, #24]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01e      	beq.n	8005d20 <xTaskCreateStatic+0xac>
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	9302      	str	r3, [sp, #8]
 8005d02:	f107 0314 	add.w	r3, r7, #20
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f850 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d1a:	f000 f8dd 	bl	8005ed8 <prvAddNewTaskToReadyList>
 8005d1e:	e001      	b.n	8005d24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d24:	697b      	ldr	r3, [r7, #20]
	}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	; 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08c      	sub	sp, #48	; 0x30
 8005d32:	af04      	add	r7, sp, #16
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fc30 	bl	80075a8 <pvPortMalloc>
 8005d48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d50:	205c      	movs	r0, #92	; 0x5c
 8005d52:	f001 fc29 	bl	80075a8 <pvPortMalloc>
 8005d56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
 8005d64:	e005      	b.n	8005d72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f001 fcea 	bl	8007740 <vPortFree>
 8005d6c:	e001      	b.n	8005d72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	2300      	movs	r3, #0
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f80e 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d9c:	69f8      	ldr	r0, [r7, #28]
 8005d9e:	f000 f89b 	bl	8005ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da2:	2301      	movs	r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	e002      	b.n	8005dae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dae:	69bb      	ldr	r3, [r7, #24]
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	461a      	mov	r2, r3
 8005dd0:	21a5      	movs	r1, #165	; 0xa5
 8005dd2:	f001 fe0b 	bl	80079ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005de0:	3b01      	subs	r3, #1
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	617b      	str	r3, [r7, #20]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01f      	beq.n	8005e56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e012      	b.n	8005e42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	7819      	ldrb	r1, [r3, #0]
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3334      	adds	r3, #52	; 0x34
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b0f      	cmp	r3, #15
 8005e46:	d9e9      	bls.n	8005e1c <prvInitialiseNewTask+0x64>
 8005e48:	e000      	b.n	8005e4c <prvInitialiseNewTask+0x94>
			{
				break;
 8005e4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e54:	e003      	b.n	8005e5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	2b37      	cmp	r3, #55	; 0x37
 8005e62:	d901      	bls.n	8005e68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e64:	2337      	movs	r3, #55	; 0x37
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2200      	movs	r2, #0
 8005e78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff f978 	bl	8005174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	3318      	adds	r3, #24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f973 	bl	8005174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	69b8      	ldr	r0, [r7, #24]
 8005eb8:	f001 f928 	bl	800710c <pxPortInitialiseStack>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ece:	bf00      	nop
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ee0:	f001 fa40 	bl	8007364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eee:	4b2c      	ldr	r3, [pc, #176]	; (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005efc:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <prvAddNewTaskToReadyList+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d110      	bne.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f04:	f000 fc16 	bl	8006734 <prvInitialiseTaskLists>
 8005f08:	e00d      	b.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <prvAddNewTaskToReadyList+0xcc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f12:	4b23      	ldr	r3, [pc, #140]	; (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d802      	bhi.n	8005f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f30:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <prvAddNewTaskToReadyList+0xd0>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <prvAddNewTaskToReadyList+0xd4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <prvAddNewTaskToReadyList+0x74>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <prvAddNewTaskToReadyList+0xd4>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <prvAddNewTaskToReadyList+0xd8>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7ff f913 	bl	800518e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f68:	f001 fa2c 	bl	80073c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <prvAddNewTaskToReadyList+0xcc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvAddNewTaskToReadyList+0xc8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d207      	bcs.n	8005f92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <prvAddNewTaskToReadyList+0xdc>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000c24 	.word	0x20000c24
 8005fa0:	20000750 	.word	0x20000750
 8005fa4:	20000c30 	.word	0x20000c30
 8005fa8:	20000c40 	.word	0x20000c40
 8005fac:	20000c2c 	.word	0x20000c2c
 8005fb0:	20000754 	.word	0x20000754
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d017      	beq.n	8005ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <vTaskDelay+0x60>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <vTaskDelay+0x30>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60bb      	str	r3, [r7, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	e7fe      	b.n	8005fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fe8:	f000 f880 	bl	80060ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fec:	2100      	movs	r1, #0
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fcea 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ff4:	f000 f888 	bl	8006108 <xTaskResumeAll>
 8005ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <vTaskDelay+0x64>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000c4c 	.word	0x20000c4c
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800602e:	463a      	mov	r2, r7
 8006030:	1d39      	adds	r1, r7, #4
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff f848 	bl	80050cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	9202      	str	r2, [sp, #8]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	2300      	movs	r3, #0
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2300      	movs	r3, #0
 800604c:	460a      	mov	r2, r1
 800604e:	4921      	ldr	r1, [pc, #132]	; (80060d4 <vTaskStartScheduler+0xb4>)
 8006050:	4821      	ldr	r0, [pc, #132]	; (80060d8 <vTaskStartScheduler+0xb8>)
 8006052:	f7ff fe0f 	bl	8005c74 <xTaskCreateStatic>
 8006056:	4603      	mov	r3, r0
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <vTaskStartScheduler+0xbc>)
 800605a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <vTaskStartScheduler+0xbc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e001      	b.n	800606e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006074:	f000 fcfc 	bl	8006a70 <xTimerCreateTimerTask>
 8006078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d116      	bne.n	80060ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	613b      	str	r3, [r7, #16]
}
 8006092:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <vTaskStartScheduler+0xc0>)
 8006096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800609a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <vTaskStartScheduler+0xc4>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060a2:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <vTaskStartScheduler+0xc8>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060a8:	f001 f8ba 	bl	8007220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060ac:	e00e      	b.n	80060cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d10a      	bne.n	80060cc <vTaskStartScheduler+0xac>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <vTaskStartScheduler+0xaa>
}
 80060cc:	bf00      	nop
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	08008a68 	.word	0x08008a68
 80060d8:	08006705 	.word	0x08006705
 80060dc:	20000c48 	.word	0x20000c48
 80060e0:	20000c44 	.word	0x20000c44
 80060e4:	20000c30 	.word	0x20000c30
 80060e8:	20000c28 	.word	0x20000c28

080060ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <vTaskSuspendAll+0x18>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a03      	ldr	r2, [pc, #12]	; (8006104 <vTaskSuspendAll+0x18>)
 80060f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20000c4c 	.word	0x20000c4c

08006108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006116:	4b42      	ldr	r3, [pc, #264]	; (8006220 <xTaskResumeAll+0x118>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xTaskResumeAll+0x2c>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	603b      	str	r3, [r7, #0]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006134:	f001 f916 	bl	8007364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006138:	4b39      	ldr	r3, [pc, #228]	; (8006220 <xTaskResumeAll+0x118>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <xTaskResumeAll+0x118>)
 8006140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006142:	4b37      	ldr	r3, [pc, #220]	; (8006220 <xTaskResumeAll+0x118>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d162      	bne.n	8006210 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <xTaskResumeAll+0x11c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d05e      	beq.n	8006210 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006152:	e02f      	b.n	80061b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006154:	4b34      	ldr	r3, [pc, #208]	; (8006228 <xTaskResumeAll+0x120>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3318      	adds	r3, #24
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff f871 	bl	8005248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff f86c 	bl	8005248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b2d      	ldr	r3, [pc, #180]	; (800622c <xTaskResumeAll+0x124>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <xTaskResumeAll+0x7c>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a2a      	ldr	r2, [pc, #168]	; (800622c <xTaskResumeAll+0x124>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a27      	ldr	r2, [pc, #156]	; (8006230 <xTaskResumeAll+0x128>)
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fff7 	bl	800518e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4b23      	ldr	r3, [pc, #140]	; (8006234 <xTaskResumeAll+0x12c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061ae:	4b22      	ldr	r3, [pc, #136]	; (8006238 <xTaskResumeAll+0x130>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <xTaskResumeAll+0x120>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1cb      	bne.n	8006154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061c2:	f000 fb55 	bl	8006870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061c6:	4b1d      	ldr	r3, [pc, #116]	; (800623c <xTaskResumeAll+0x134>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d010      	beq.n	80061f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061d2:	f000 f847 	bl	8006264 <xTaskIncrementTick>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <xTaskResumeAll+0x130>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f1      	bne.n	80061d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <xTaskResumeAll+0x134>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061f4:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xTaskResumeAll+0x130>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <xTaskResumeAll+0x138>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f001 f8d8 	bl	80073c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006214:	68bb      	ldr	r3, [r7, #8]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000c4c 	.word	0x20000c4c
 8006224:	20000c24 	.word	0x20000c24
 8006228:	20000be4 	.word	0x20000be4
 800622c:	20000c2c 	.word	0x20000c2c
 8006230:	20000754 	.word	0x20000754
 8006234:	20000750 	.word	0x20000750
 8006238:	20000c38 	.word	0x20000c38
 800623c:	20000c34 	.word	0x20000c34
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <xTaskGetTickCount+0x1c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000c28 	.word	0x20000c28

08006264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626e:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <xTaskIncrementTick+0x148>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 808f 	bne.w	8006396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006278:	4b4d      	ldr	r3, [pc, #308]	; (80063b0 <xTaskIncrementTick+0x14c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <xTaskIncrementTick+0x14c>)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d120      	bne.n	80062ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800628c:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <xTaskIncrementTick+0x150>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	603b      	str	r3, [r7, #0]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xTaskIncrementTick+0x46>
 80062ac:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <xTaskIncrementTick+0x154>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3f      	ldr	r2, [pc, #252]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <xTaskIncrementTick+0x154>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <xTaskIncrementTick+0x158>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	4a3d      	ldr	r2, [pc, #244]	; (80063bc <xTaskIncrementTick+0x158>)
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	f000 fad1 	bl	8006870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ce:	4b3c      	ldr	r3, [pc, #240]	; (80063c0 <xTaskIncrementTick+0x15c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d349      	bcc.n	800636c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <xTaskIncrementTick+0x15c>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e8:	601a      	str	r2, [r3, #0]
					break;
 80062ea:	e03f      	b.n	800636c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ec:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d203      	bcs.n	800630c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006304:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <xTaskIncrementTick+0x15c>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800630a:	e02f      	b.n	800636c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe ff99 	bl	8005248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	3318      	adds	r3, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe ff90 	bl	8005248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <xTaskIncrementTick+0x160>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <xTaskIncrementTick+0xd8>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <xTaskIncrementTick+0x160>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <xTaskIncrementTick+0x164>)
 800634a:	441a      	add	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe ff1b 	bl	800518e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <xTaskIncrementTick+0x168>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	429a      	cmp	r2, r3
 8006364:	d3b8      	bcc.n	80062d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	e7b5      	b.n	80062d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <xTaskIncrementTick+0x168>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	4915      	ldr	r1, [pc, #84]	; (80063c8 <xTaskIncrementTick+0x164>)
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d901      	bls.n	8006388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <xTaskIncrementTick+0x16c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e004      	b.n	80063a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <xTaskIncrementTick+0x170>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <xTaskIncrementTick+0x170>)
 800639e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063a0:	697b      	ldr	r3, [r7, #20]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000c4c 	.word	0x20000c4c
 80063b0:	20000c28 	.word	0x20000c28
 80063b4:	20000bdc 	.word	0x20000bdc
 80063b8:	20000be0 	.word	0x20000be0
 80063bc:	20000c3c 	.word	0x20000c3c
 80063c0:	20000c44 	.word	0x20000c44
 80063c4:	20000c2c 	.word	0x20000c2c
 80063c8:	20000754 	.word	0x20000754
 80063cc:	20000750 	.word	0x20000750
 80063d0:	20000c38 	.word	0x20000c38
 80063d4:	20000c34 	.word	0x20000c34

080063d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063de:	4b28      	ldr	r3, [pc, #160]	; (8006480 <vTaskSwitchContext+0xa8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <vTaskSwitchContext+0xac>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063ec:	e041      	b.n	8006472 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80063ee:	4b25      	ldr	r3, [pc, #148]	; (8006484 <vTaskSwitchContext+0xac>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <vTaskSwitchContext+0xb0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e010      	b.n	800641e <vTaskSwitchContext+0x46>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vTaskSwitchContext+0x40>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vTaskSwitchContext+0x3e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3b01      	subs	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	491b      	ldr	r1, [pc, #108]	; (800648c <vTaskSwitchContext+0xb4>)
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0e4      	beq.n	80063fc <vTaskSwitchContext+0x24>
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4a13      	ldr	r2, [pc, #76]	; (800648c <vTaskSwitchContext+0xb4>)
 800643e:	4413      	add	r3, r2
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	3308      	adds	r3, #8
 8006454:	429a      	cmp	r2, r3
 8006456:	d104      	bne.n	8006462 <vTaskSwitchContext+0x8a>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a09      	ldr	r2, [pc, #36]	; (8006490 <vTaskSwitchContext+0xb8>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	4a06      	ldr	r2, [pc, #24]	; (8006488 <vTaskSwitchContext+0xb0>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6013      	str	r3, [r2, #0]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000c4c 	.word	0x20000c4c
 8006484:	20000c38 	.word	0x20000c38
 8006488:	20000c2c 	.word	0x20000c2c
 800648c:	20000754 	.word	0x20000754
 8006490:	20000750 	.word	0x20000750

08006494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <vTaskPlaceOnEventList+0x44>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3318      	adds	r3, #24
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fe fe87 	bl	80051d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064c8:	2101      	movs	r1, #1
 80064ca:	6838      	ldr	r0, [r7, #0]
 80064cc:	f000 fa7c 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000750 	.word	0x20000750

080064dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	617b      	str	r3, [r7, #20]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006504:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <vTaskPlaceOnEventListRestricted+0x54>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3318      	adds	r3, #24
 800650a:	4619      	mov	r1, r3
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7fe fe3e 	bl	800518e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800651c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	68b8      	ldr	r0, [r7, #8]
 8006522:	f000 fa51 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
	}
 8006526:	bf00      	nop
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000750 	.word	0x20000750

08006534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60fb      	str	r3, [r7, #12]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3318      	adds	r3, #24
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fe6f 	bl	8005248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656a:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xTaskRemoveFromEventList+0xb0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11d      	bne.n	80065ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fe66 	bl	8005248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <xTaskRemoveFromEventList+0xb4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d903      	bls.n	8006590 <xTaskRemoveFromEventList+0x5c>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <xTaskRemoveFromEventList+0xb4>)
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <xTaskRemoveFromEventList+0xb8>)
 800659e:	441a      	add	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe fdf1 	bl	800518e <vListInsertEnd>
 80065ac:	e005      	b.n	80065ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3318      	adds	r3, #24
 80065b2:	4619      	mov	r1, r3
 80065b4:	480e      	ldr	r0, [pc, #56]	; (80065f0 <xTaskRemoveFromEventList+0xbc>)
 80065b6:	f7fe fdea 	bl	800518e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <xTaskRemoveFromEventList+0xc0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d905      	bls.n	80065d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <xTaskRemoveFromEventList+0xc4>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e001      	b.n	80065d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000c4c 	.word	0x20000c4c
 80065e8:	20000c2c 	.word	0x20000c2c
 80065ec:	20000754 	.word	0x20000754
 80065f0:	20000be4 	.word	0x20000be4
 80065f4:	20000750 	.word	0x20000750
 80065f8:	20000c38 	.word	0x20000c38

080065fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <vTaskInternalSetTimeOutState+0x24>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <vTaskInternalSetTimeOutState+0x28>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20000c3c 	.word	0x20000c3c
 8006624:	20000c28 	.word	0x20000c28

08006628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	613b      	str	r3, [r7, #16]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800666a:	f000 fe7b 	bl	8007364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800666e:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <xTaskCheckForTimeOut+0xbc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006686:	d102      	bne.n	800668e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e023      	b.n	80066d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <xTaskCheckForTimeOut+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d007      	beq.n	80066aa <xTaskCheckForTimeOut+0x82>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e015      	b.n	80066d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d20b      	bcs.n	80066cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ff9b 	bl	80065fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e004      	b.n	80066d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066d6:	f000 fe75 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 80066da:	69fb      	ldr	r3, [r7, #28]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000c28 	.word	0x20000c28
 80066e8:	20000c3c 	.word	0x20000c3c

080066ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <vTaskMissedYield+0x14>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	20000c38 	.word	0x20000c38

08006704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800670c:	f000 f852 	bl	80067b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <prvIdleTask+0x28>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d9f9      	bls.n	800670c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <prvIdleTask+0x2c>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006728:	e7f0      	b.n	800670c <prvIdleTask+0x8>
 800672a:	bf00      	nop
 800672c:	20000754 	.word	0x20000754
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e00c      	b.n	800675a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4a12      	ldr	r2, [pc, #72]	; (8006794 <prvInitialiseTaskLists+0x60>)
 800674c:	4413      	add	r3, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fcf0 	bl	8005134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3301      	adds	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b37      	cmp	r3, #55	; 0x37
 800675e:	d9ef      	bls.n	8006740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006760:	480d      	ldr	r0, [pc, #52]	; (8006798 <prvInitialiseTaskLists+0x64>)
 8006762:	f7fe fce7 	bl	8005134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006766:	480d      	ldr	r0, [pc, #52]	; (800679c <prvInitialiseTaskLists+0x68>)
 8006768:	f7fe fce4 	bl	8005134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800676c:	480c      	ldr	r0, [pc, #48]	; (80067a0 <prvInitialiseTaskLists+0x6c>)
 800676e:	f7fe fce1 	bl	8005134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006772:	480c      	ldr	r0, [pc, #48]	; (80067a4 <prvInitialiseTaskLists+0x70>)
 8006774:	f7fe fcde 	bl	8005134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006778:	480b      	ldr	r0, [pc, #44]	; (80067a8 <prvInitialiseTaskLists+0x74>)
 800677a:	f7fe fcdb 	bl	8005134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <prvInitialiseTaskLists+0x78>)
 8006780:	4a05      	ldr	r2, [pc, #20]	; (8006798 <prvInitialiseTaskLists+0x64>)
 8006782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <prvInitialiseTaskLists+0x7c>)
 8006786:	4a05      	ldr	r2, [pc, #20]	; (800679c <prvInitialiseTaskLists+0x68>)
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000754 	.word	0x20000754
 8006798:	20000bb4 	.word	0x20000bb4
 800679c:	20000bc8 	.word	0x20000bc8
 80067a0:	20000be4 	.word	0x20000be4
 80067a4:	20000bf8 	.word	0x20000bf8
 80067a8:	20000c10 	.word	0x20000c10
 80067ac:	20000bdc 	.word	0x20000bdc
 80067b0:	20000be0 	.word	0x20000be0

080067b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ba:	e019      	b.n	80067f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067bc:	f000 fdd2 	bl	8007364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c0:	4b10      	ldr	r3, [pc, #64]	; (8006804 <prvCheckTasksWaitingTermination+0x50>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe fd3b 	bl	8005248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <prvCheckTasksWaitingTermination+0x54>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4a0b      	ldr	r2, [pc, #44]	; (8006808 <prvCheckTasksWaitingTermination+0x54>)
 80067da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4a0a      	ldr	r2, [pc, #40]	; (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067e6:	f000 fded 	bl	80073c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f810 	bl	8006810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvCheckTasksWaitingTermination+0x58>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e1      	bne.n	80067bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000bf8 	.word	0x20000bf8
 8006808:	20000c24 	.word	0x20000c24
 800680c:	20000c0c 	.word	0x20000c0c

08006810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800681e:	2b00      	cmp	r3, #0
 8006820:	d108      	bne.n	8006834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	4618      	mov	r0, r3
 8006828:	f000 ff8a 	bl	8007740 <vPortFree>
				vPortFree( pxTCB );
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 ff87 	bl	8007740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006832:	e018      	b.n	8006866 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800683a:	2b01      	cmp	r3, #1
 800683c:	d103      	bne.n	8006846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 ff7e 	bl	8007740 <vPortFree>
	}
 8006844:	e00f      	b.n	8006866 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800684c:	2b02      	cmp	r3, #2
 800684e:	d00a      	beq.n	8006866 <prvDeleteTCB+0x56>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <prvDeleteTCB+0x54>
	}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvResetNextTaskUnblockTime+0x38>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <prvResetNextTaskUnblockTime+0x3c>)
 8006882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006888:	e008      	b.n	800689c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <prvResetNextTaskUnblockTime+0x38>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a04      	ldr	r2, [pc, #16]	; (80068ac <prvResetNextTaskUnblockTime+0x3c>)
 800689a:	6013      	str	r3, [r2, #0]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	20000bdc 	.word	0x20000bdc
 80068ac:	20000c44 	.word	0x20000c44

080068b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <xTaskGetSchedulerState+0x34>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068be:	2301      	movs	r3, #1
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	e008      	b.n	80068d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c4:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <xTaskGetSchedulerState+0x38>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068cc:	2302      	movs	r3, #2
 80068ce:	607b      	str	r3, [r7, #4]
 80068d0:	e001      	b.n	80068d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068d6:	687b      	ldr	r3, [r7, #4]
	}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	20000c30 	.word	0x20000c30
 80068e8:	20000c4c 	.word	0x20000c4c

080068ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d056      	beq.n	80069b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <xTaskPriorityDisinherit+0xd0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d00a      	beq.n	8006922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60fb      	str	r3, [r7, #12]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60bb      	str	r3, [r7, #8]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	1e5a      	subs	r2, r3, #1
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	429a      	cmp	r2, r3
 8006954:	d02c      	beq.n	80069b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	2b00      	cmp	r3, #0
 800695c:	d128      	bne.n	80069b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3304      	adds	r3, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fc70 	bl	8005248 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <xTaskPriorityDisinherit+0xd4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d903      	bls.n	8006990 <xTaskPriorityDisinherit+0xa4>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <xTaskPriorityDisinherit+0xd4>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <xTaskPriorityDisinherit+0xd8>)
 800699e:	441a      	add	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fe fbf1 	bl	800518e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069b0:	697b      	ldr	r3, [r7, #20]
	}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000750 	.word	0x20000750
 80069c0:	20000c2c 	.word	0x20000c2c
 80069c4:	20000754 	.word	0x20000754

080069c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3304      	adds	r3, #4
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fc32 	bl	8005248 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ea:	d10a      	bne.n	8006a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4819      	ldr	r0, [pc, #100]	; (8006a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80069fc:	f7fe fbc7 	bl	800518e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a00:	e026      	b.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d209      	bcs.n	8006a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fe fbd5 	bl	80051d6 <vListInsert>
}
 8006a2c:	e010      	b.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe fbcb 	bl	80051d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d202      	bcs.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000c28 	.word	0x20000c28
 8006a5c:	20000750 	.word	0x20000750
 8006a60:	20000c10 	.word	0x20000c10
 8006a64:	20000be0 	.word	0x20000be0
 8006a68:	20000bdc 	.word	0x20000bdc
 8006a6c:	20000c44 	.word	0x20000c44

08006a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a7a:	f000 fb07 	bl	800708c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <xTimerCreateTimerTask+0x80>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d021      	beq.n	8006aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a8e:	1d3a      	adds	r2, r7, #4
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	f107 030c 	add.w	r3, r7, #12
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fb31 	bl	8005100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	9202      	str	r2, [sp, #8]
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	460a      	mov	r2, r1
 8006ab0:	4910      	ldr	r1, [pc, #64]	; (8006af4 <xTimerCreateTimerTask+0x84>)
 8006ab2:	4811      	ldr	r0, [pc, #68]	; (8006af8 <xTimerCreateTimerTask+0x88>)
 8006ab4:	f7ff f8de 	bl	8005c74 <xTaskCreateStatic>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4a10      	ldr	r2, [pc, #64]	; (8006afc <xTimerCreateTimerTask+0x8c>)
 8006abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTimerCreateTimerTask+0x8c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ae6:	697b      	ldr	r3, [r7, #20]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000c80 	.word	0x20000c80
 8006af4:	08008a70 	.word	0x08008a70
 8006af8:	08006c35 	.word	0x08006c35
 8006afc:	20000c84 	.word	0x20000c84

08006b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d02a      	beq.n	8006b8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b05      	cmp	r3, #5
 8006b46:	dc18      	bgt.n	8006b7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b48:	f7ff feb2 	bl	80068b0 <xTaskGetSchedulerState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d109      	bne.n	8006b66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f107 0110 	add.w	r1, r7, #16
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5e:	f7fe fca1 	bl	80054a4 <xQueueGenericSend>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24
 8006b64:	e012      	b.n	8006b8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f107 0110 	add.w	r1, r7, #16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7fe fc97 	bl	80054a4 <xQueueGenericSend>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
 8006b78:	e008      	b.n	8006b8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	f107 0110 	add.w	r1, r7, #16
 8006b82:	2300      	movs	r3, #0
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	f7fe fd8b 	bl	80056a0 <xQueueGenericSendFromISR>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3728      	adds	r7, #40	; 0x28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000c80 	.word	0x20000c80

08006b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <prvProcessExpiredTimer+0x94>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fb47 	bl	8005248 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	18d1      	adds	r1, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6978      	ldr	r0, [r7, #20]
 8006bd6:	f000 f8d1 	bl	8006d7c <prvInsertTimerInActiveList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01f      	beq.n	8006c20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	2100      	movs	r1, #0
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f7ff ff88 	bl	8006b00 <xTimerGenericCommand>
 8006bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d113      	bne.n	8006c20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60fb      	str	r3, [r7, #12]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	6978      	ldr	r0, [r7, #20]
 8006c26:	4798      	blx	r3
}
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000c78 	.word	0x20000c78

08006c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 f857 	bl	8006cf4 <prvGetNextExpireTime>
 8006c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f803 	bl	8006c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c52:	f000 f8d5 	bl	8006e00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c56:	e7f1      	b.n	8006c3c <prvTimerTask+0x8>

08006c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c62:	f7ff fa43 	bl	80060ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 f866 	bl	8006d3c <prvSampleTimeNow>
 8006c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d130      	bne.n	8006cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <prvProcessTimerOrBlockTask+0x3c>
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d806      	bhi.n	8006c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c86:	f7ff fa3f 	bl	8006108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff85 	bl	8006b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c92:	e024      	b.n	8006cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <prvProcessTimerOrBlockTask+0x90>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <prvProcessTimerOrBlockTask+0x50>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <prvProcessTimerOrBlockTask+0x52>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <prvProcessTimerOrBlockTask+0x94>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7fe ffa7 	bl	8005c0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cbe:	f7ff fa23 	bl	8006108 <xTaskResumeAll>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <prvProcessTimerOrBlockTask+0x98>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
}
 8006cd8:	e001      	b.n	8006cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cda:	f7ff fa15 	bl	8006108 <xTaskResumeAll>
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000c7c 	.word	0x20000c7c
 8006cec:	20000c80 	.word	0x20000c80
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <prvGetNextExpireTime+0x44>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <prvGetNextExpireTime+0x16>
 8006d06:	2201      	movs	r2, #1
 8006d08:	e000      	b.n	8006d0c <prvGetNextExpireTime+0x18>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <prvGetNextExpireTime+0x44>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e001      	b.n	8006d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d28:	68fb      	ldr	r3, [r7, #12]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000c78 	.word	0x20000c78

08006d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d44:	f7ff fa7e 	bl	8006244 <xTaskGetTickCount>
 8006d48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <prvSampleTimeNow+0x3c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d205      	bcs.n	8006d60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d54:	f000 f936 	bl	8006fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e002      	b.n	8006d66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d66:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <prvSampleTimeNow+0x3c>)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000c88 	.word	0x20000c88

08006d7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d812      	bhi.n	8006dc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e01b      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <prvInsertTimerInActiveList+0x7c>)
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7fe fa08 	bl	80051d6 <vListInsert>
 8006dc6:	e012      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d206      	bcs.n	8006dde <prvInsertTimerInActiveList+0x62>
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d302      	bcc.n	8006dde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e007      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvInsertTimerInActiveList+0x80>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fe f9f4 	bl	80051d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000c7c 	.word	0x20000c7c
 8006dfc:	20000c78 	.word	0x20000c78

08006e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	; 0x38
 8006e04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e06:	e0ca      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da18      	bge.n	8006e40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	3304      	adds	r3, #4
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	61fb      	str	r3, [r7, #28]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e36:	6850      	ldr	r0, [r2, #4]
 8006e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f2c0 80aa 	blt.w	8006f9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe f9f5 	bl	8005248 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e5e:	463b      	mov	r3, r7
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff ff6b 	bl	8006d3c <prvSampleTimeNow>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	f200 8097 	bhi.w	8006f9e <prvProcessReceivedCommands+0x19e>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <prvProcessReceivedCommands+0x78>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006f15 	.word	0x08006f15
 8006e88:	08006f29 	.word	0x08006f29
 8006e8c:	08006f73 	.word	0x08006f73
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006ea1 	.word	0x08006ea1
 8006e98:	08006f15 	.word	0x08006f15
 8006e9c:	08006f29 	.word	0x08006f29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	18d1      	adds	r1, r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec0:	f7ff ff5c 	bl	8006d7c <prvInsertTimerInActiveList>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d069      	beq.n	8006f9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05e      	beq.n	8006f9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	441a      	add	r2, r3
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	2300      	movs	r3, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef2:	f7ff fe05 	bl	8006b00 <xTimerGenericCommand>
 8006ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14f      	bne.n	8006f9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	61bb      	str	r3, [r7, #24]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f26:	e03a      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	617b      	str	r3, [r7, #20]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	18d1      	adds	r1, r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6c:	f7ff ff06 	bl	8006d7c <prvInsertTimerInActiveList>
					break;
 8006f70:	e015      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f000 fbdd 	bl	8007740 <vPortFree>
 8006f86:	e00a      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f9a:	e000      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <prvProcessReceivedCommands+0x1c0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	1d39      	adds	r1, r7, #4
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fc16 	bl	80057d8 <xQueueReceive>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f47f af2a 	bne.w	8006e08 <prvProcessReceivedCommands+0x8>
	}
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	3730      	adds	r7, #48	; 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000c80 	.word	0x20000c80

08006fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fca:	e048      	b.n	800705e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fcc:	4b2d      	ldr	r3, [pc, #180]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe f92f 	bl	8005248 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02e      	beq.n	800705e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d90e      	bls.n	8007030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7fe f8d4 	bl	80051d6 <vListInsert>
 800702e:	e016      	b.n	800705e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007030:	2300      	movs	r3, #0
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fd60 	bl	8006b00 <xTimerGenericCommand>
 8007040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	603b      	str	r3, [r7, #0]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1b1      	bne.n	8006fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <prvSwitchTimerLists+0xc0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <prvSwitchTimerLists+0xc4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007076:	4a04      	ldr	r2, [pc, #16]	; (8007088 <prvSwitchTimerLists+0xc4>)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6013      	str	r3, [r2, #0]
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000c78 	.word	0x20000c78
 8007088:	20000c7c 	.word	0x20000c7c

0800708c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007092:	f000 f967 	bl	8007364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d120      	bne.n	80070e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800709e:	4814      	ldr	r0, [pc, #80]	; (80070f0 <prvCheckForValidListAndQueue+0x64>)
 80070a0:	f7fe f848 	bl	8005134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070a4:	4813      	ldr	r0, [pc, #76]	; (80070f4 <prvCheckForValidListAndQueue+0x68>)
 80070a6:	f7fe f845 	bl	8005134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <prvCheckForValidListAndQueue+0x6c>)
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <prvCheckForValidListAndQueue+0x64>)
 80070ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <prvCheckForValidListAndQueue+0x70>)
 80070b2:	4a10      	ldr	r2, [pc, #64]	; (80070f4 <prvCheckForValidListAndQueue+0x68>)
 80070b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070b6:	2300      	movs	r3, #0
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <prvCheckForValidListAndQueue+0x74>)
 80070bc:	4a11      	ldr	r2, [pc, #68]	; (8007104 <prvCheckForValidListAndQueue+0x78>)
 80070be:	2110      	movs	r1, #16
 80070c0:	200a      	movs	r0, #10
 80070c2:	f7fe f953 	bl	800536c <xQueueGenericCreateStatic>
 80070c6:	4603      	mov	r3, r0
 80070c8:	4a08      	ldr	r2, [pc, #32]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	490b      	ldr	r1, [pc, #44]	; (8007108 <prvCheckForValidListAndQueue+0x7c>)
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fd6c 	bl	8005bb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070e0:	f000 f970 	bl	80073c4 <vPortExitCritical>
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000c80 	.word	0x20000c80
 80070f0:	20000c50 	.word	0x20000c50
 80070f4:	20000c64 	.word	0x20000c64
 80070f8:	20000c78 	.word	0x20000c78
 80070fc:	20000c7c 	.word	0x20000c7c
 8007100:	20000d2c 	.word	0x20000d2c
 8007104:	20000c8c 	.word	0x20000c8c
 8007108:	08008a78 	.word	0x08008a78

0800710c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3b04      	subs	r3, #4
 800711c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b04      	subs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b04      	subs	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800713c:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <pxPortInitialiseStack+0x64>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3b14      	subs	r3, #20
 8007146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3b04      	subs	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f06f 0202 	mvn.w	r2, #2
 800715a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b20      	subs	r3, #32
 8007160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	08007175 	.word	0x08007175

08007174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvTaskExitError+0x54>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007186:	d00a      	beq.n	800719e <prvTaskExitError+0x2a>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60fb      	str	r3, [r7, #12]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <prvTaskExitError+0x28>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60bb      	str	r3, [r7, #8]
}
 80071b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071b2:	bf00      	nop
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0fc      	beq.n	80071b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	00000000 	.word	0x00000000

080071d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <pxCurrentTCBConst2>)
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	6808      	ldr	r0, [r1, #0]
 80071d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	f380 8809 	msr	PSP, r0
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8811 	msr	BASEPRI, r0
 80071ea:	4770      	bx	lr
 80071ec:	f3af 8000 	nop.w

080071f0 <pxCurrentTCBConst2>:
 80071f0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071f8:	4808      	ldr	r0, [pc, #32]	; (800721c <prvPortStartFirstTask+0x24>)
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	6800      	ldr	r0, [r0, #0]
 80071fe:	f380 8808 	msr	MSP, r0
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f380 8814 	msr	CONTROL, r0
 800720a:	b662      	cpsie	i
 800720c:	b661      	cpsie	f
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	df00      	svc	0
 8007218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800721a:	bf00      	nop
 800721c:	e000ed08 	.word	0xe000ed08

08007220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <xPortStartScheduler+0x120>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a46      	ldr	r2, [pc, #280]	; (8007344 <xPortStartScheduler+0x124>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10a      	bne.n	8007246 <xPortStartScheduler+0x26>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	613b      	str	r3, [r7, #16]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007246:	4b3e      	ldr	r3, [pc, #248]	; (8007340 <xPortStartScheduler+0x120>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <xPortStartScheduler+0x128>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10a      	bne.n	8007266 <xPortStartScheduler+0x46>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007266:	4b39      	ldr	r3, [pc, #228]	; (800734c <xPortStartScheduler+0x12c>)
 8007268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007288:	b2da      	uxtb	r2, r3
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <xPortStartScheduler+0x130>)
 800728c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800728e:	4b31      	ldr	r3, [pc, #196]	; (8007354 <xPortStartScheduler+0x134>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007294:	e009      	b.n	80072aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007296:	4b2f      	ldr	r3, [pc, #188]	; (8007354 <xPortStartScheduler+0x134>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3b01      	subs	r3, #1
 800729c:	4a2d      	ldr	r2, [pc, #180]	; (8007354 <xPortStartScheduler+0x134>)
 800729e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d0ef      	beq.n	8007296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072b6:	4b27      	ldr	r3, [pc, #156]	; (8007354 <xPortStartScheduler+0x134>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1c3 0307 	rsb	r3, r3, #7
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d00a      	beq.n	80072d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	60bb      	str	r3, [r7, #8]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <xPortStartScheduler+0x134>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <xPortStartScheduler+0x134>)
 80072e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <xPortStartScheduler+0x134>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ea:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <xPortStartScheduler+0x134>)
 80072ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <xPortStartScheduler+0x138>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <xPortStartScheduler+0x138>)
 80072fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <xPortStartScheduler+0x138>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a14      	ldr	r2, [pc, #80]	; (8007358 <xPortStartScheduler+0x138>)
 8007308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800730c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800730e:	f000 f8dd 	bl	80074cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <xPortStartScheduler+0x13c>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007318:	f000 f8fc 	bl	8007514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <xPortStartScheduler+0x140>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <xPortStartScheduler+0x140>)
 8007322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007328:	f7ff ff66 	bl	80071f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800732c:	f7ff f854 	bl	80063d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007330:	f7ff ff20 	bl	8007174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	e000ed00 	.word	0xe000ed00
 8007344:	410fc271 	.word	0x410fc271
 8007348:	410fc270 	.word	0x410fc270
 800734c:	e000e400 	.word	0xe000e400
 8007350:	20000d7c 	.word	0x20000d7c
 8007354:	20000d80 	.word	0x20000d80
 8007358:	e000ed20 	.word	0xe000ed20
 800735c:	2000000c 	.word	0x2000000c
 8007360:	e000ef34 	.word	0xe000ef34

08007364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	607b      	str	r3, [r7, #4]
}
 800737c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <vPortEnterCritical+0x58>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <vPortEnterCritical+0x58>)
 8007386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <vPortEnterCritical+0x58>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10f      	bne.n	80073b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <vPortEnterCritical+0x5c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	603b      	str	r3, [r7, #0]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <vPortEnterCritical+0x4a>
	}
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000000c 	.word	0x2000000c
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <vPortExitCritical+0x50>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <vPortExitCritical+0x24>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	607b      	str	r3, [r7, #4]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <vPortExitCritical+0x50>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	4a09      	ldr	r2, [pc, #36]	; (8007414 <vPortExitCritical+0x50>)
 80073f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <vPortExitCritical+0x50>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <vPortExitCritical+0x42>
 80073fa:	2300      	movs	r3, #0
 80073fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f383 8811 	msr	BASEPRI, r3
}
 8007404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000000c 	.word	0x2000000c
	...

08007420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007420:	f3ef 8009 	mrs	r0, PSP
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	4b15      	ldr	r3, [pc, #84]	; (8007480 <pxCurrentTCBConst>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	f01e 0f10 	tst.w	lr, #16
 8007430:	bf08      	it	eq
 8007432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	6010      	str	r0, [r2, #0]
 800743c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007444:	f380 8811 	msr	BASEPRI, r0
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f7fe ffc2 	bl	80063d8 <vTaskSwitchContext>
 8007454:	f04f 0000 	mov.w	r0, #0
 8007458:	f380 8811 	msr	BASEPRI, r0
 800745c:	bc09      	pop	{r0, r3}
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	6808      	ldr	r0, [r1, #0]
 8007462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007466:	f01e 0f10 	tst.w	lr, #16
 800746a:	bf08      	it	eq
 800746c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007470:	f380 8809 	msr	PSP, r0
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	f3af 8000 	nop.w

08007480 <pxCurrentTCBConst>:
 8007480:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop

08007488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	607b      	str	r3, [r7, #4]
}
 80074a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074a2:	f7fe fedf 	bl	8006264 <xTaskIncrementTick>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <xPortSysTickHandler+0x40>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f383 8811 	msr	BASEPRI, r3
}
 80074be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <vPortSetupTimerInterrupt+0x34>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <vPortSetupTimerInterrupt+0x38>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <vPortSetupTimerInterrupt+0x3c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a0a      	ldr	r2, [pc, #40]	; (800750c <vPortSetupTimerInterrupt+0x40>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	099b      	lsrs	r3, r3, #6
 80074e8:	4a09      	ldr	r2, [pc, #36]	; (8007510 <vPortSetupTimerInterrupt+0x44>)
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <vPortSetupTimerInterrupt+0x34>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	e000e010 	.word	0xe000e010
 8007504:	e000e018 	.word	0xe000e018
 8007508:	20000000 	.word	0x20000000
 800750c:	10624dd3 	.word	0x10624dd3
 8007510:	e000e014 	.word	0xe000e014

08007514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007524 <vPortEnableVFP+0x10>
 8007518:	6801      	ldr	r1, [r0, #0]
 800751a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800751e:	6001      	str	r1, [r0, #0]
 8007520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007522:	bf00      	nop
 8007524:	e000ed88 	.word	0xe000ed88

08007528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800752e:	f3ef 8305 	mrs	r3, IPSR
 8007532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d914      	bls.n	8007564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <vPortValidateInterruptPriority+0x70>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007544:	4b15      	ldr	r3, [pc, #84]	; (800759c <vPortValidateInterruptPriority+0x74>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	7afa      	ldrb	r2, [r7, #11]
 800754a:	429a      	cmp	r2, r3
 800754c:	d20a      	bcs.n	8007564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	607b      	str	r3, [r7, #4]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <vPortValidateInterruptPriority+0x78>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <vPortValidateInterruptPriority+0x7c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d90a      	bls.n	800758a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	603b      	str	r3, [r7, #0]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <vPortValidateInterruptPriority+0x60>
	}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000e3f0 	.word	0xe000e3f0
 800759c:	20000d7c 	.word	0x20000d7c
 80075a0:	e000ed0c 	.word	0xe000ed0c
 80075a4:	20000d80 	.word	0x20000d80

080075a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075b4:	f7fe fd9a 	bl	80060ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075b8:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <pvPortMalloc+0x180>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075c0:	f000 f920 	bl	8007804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <pvPortMalloc+0x184>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 8093 	bne.w	80076f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01d      	beq.n	8007614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075d8:	2208      	movs	r2, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	3308      	adds	r3, #8
 80075f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <pvPortMalloc+0x6c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	617b      	str	r3, [r7, #20]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d06e      	beq.n	80076f8 <pvPortMalloc+0x150>
 800761a:	4b45      	ldr	r3, [pc, #276]	; (8007730 <pvPortMalloc+0x188>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d869      	bhi.n	80076f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007624:	4b43      	ldr	r3, [pc, #268]	; (8007734 <pvPortMalloc+0x18c>)
 8007626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007628:	4b42      	ldr	r3, [pc, #264]	; (8007734 <pvPortMalloc+0x18c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762e:	e004      	b.n	800763a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d903      	bls.n	800764c <pvPortMalloc+0xa4>
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f1      	bne.n	8007630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800764c:	4b36      	ldr	r3, [pc, #216]	; (8007728 <pvPortMalloc+0x180>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	429a      	cmp	r2, r3
 8007654:	d050      	beq.n	80076f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2208      	movs	r2, #8
 800765c:	4413      	add	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	2308      	movs	r3, #8
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	d91f      	bls.n	80076b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <pvPortMalloc+0xf8>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	613b      	str	r3, [r7, #16]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f000 f908 	bl	80078c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <pvPortMalloc+0x188>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <pvPortMalloc+0x188>)
 80076c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076c6:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <pvPortMalloc+0x188>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <pvPortMalloc+0x190>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d203      	bcs.n	80076da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076d2:	4b17      	ldr	r3, [pc, #92]	; (8007730 <pvPortMalloc+0x188>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <pvPortMalloc+0x190>)
 80076d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x184>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <pvPortMalloc+0x194>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a11      	ldr	r2, [pc, #68]	; (800773c <pvPortMalloc+0x194>)
 80076f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076f8:	f7fe fd06 	bl	8006108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <pvPortMalloc+0x174>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <pvPortMalloc+0x172>
	return pvReturn;
 800771c:	69fb      	ldr	r3, [r7, #28]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20001944 	.word	0x20001944
 800772c:	20001958 	.word	0x20001958
 8007730:	20001948 	.word	0x20001948
 8007734:	2000193c 	.word	0x2000193c
 8007738:	2000194c 	.word	0x2000194c
 800773c:	20001950 	.word	0x20001950

08007740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04d      	beq.n	80077ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007752:	2308      	movs	r3, #8
 8007754:	425b      	negs	r3, r3
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <vPortFree+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4013      	ands	r3, r2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <vPortFree+0x44>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <vPortFree+0x62>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60bb      	str	r3, [r7, #8]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <vPortFree+0xb8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11a      	bne.n	80077ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <vPortFree+0xb8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	401a      	ands	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077c8:	f7fe fc90 	bl	80060ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <vPortFree+0xbc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <vPortFree+0xbc>)
 80077d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077da:	6938      	ldr	r0, [r7, #16]
 80077dc:	f000 f874 	bl	80078c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <vPortFree+0xc0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	4a06      	ldr	r2, [pc, #24]	; (8007800 <vPortFree+0xc0>)
 80077e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ea:	f7fe fc8d 	bl	8006108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20001958 	.word	0x20001958
 80077fc:	20001948 	.word	0x20001948
 8007800:	20001954 	.word	0x20001954

08007804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800780a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800780e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007810:	4b27      	ldr	r3, [pc, #156]	; (80078b0 <prvHeapInit+0xac>)
 8007812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3307      	adds	r3, #7
 8007822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <prvHeapInit+0xac>)
 8007834:	4413      	add	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <prvHeapInit+0xb0>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <prvHeapInit+0xb0>)
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007850:	2208      	movs	r2, #8
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <prvHeapInit+0xb4>)
 8007864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <prvHeapInit+0xb4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <prvHeapInit+0xb4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <prvHeapInit+0xb4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <prvHeapInit+0xb8>)
 8007892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <prvHeapInit+0xbc>)
 800789a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800789c:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <prvHeapInit+0xc0>)
 800789e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000d84 	.word	0x20000d84
 80078b4:	2000193c 	.word	0x2000193c
 80078b8:	20001944 	.word	0x20001944
 80078bc:	2000194c 	.word	0x2000194c
 80078c0:	20001948 	.word	0x20001948
 80078c4:	20001958 	.word	0x20001958

080078c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <prvInsertBlockIntoFreeList+0xac>)
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e002      	b.n	80078dc <prvInsertBlockIntoFreeList+0x14>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d8f7      	bhi.n	80078d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d108      	bne.n	800790a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	441a      	add	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d118      	bne.n	8007950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d00d      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e008      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007946:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e003      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d002      	beq.n	8007966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000193c 	.word	0x2000193c
 8007978:	20001944 	.word	0x20001944

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	; (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000010 	.word	0x20000010

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	; (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	; (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	; (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	; (80079cc <__libc_init_array+0x44>)
 800799c:	f001 f820 	bl	80089e0 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08008b8c 	.word	0x08008b8c
 80079c4:	08008b8c 	.word	0x08008b8c
 80079c8:	08008b8c 	.word	0x08008b8c
 80079cc:	08008b90 	.word	0x08008b90

080079d0 <memcpy>:
 80079d0:	440a      	add	r2, r1
 80079d2:	4291      	cmp	r1, r2
 80079d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079d8:	d100      	bne.n	80079dc <memcpy+0xc>
 80079da:	4770      	bx	lr
 80079dc:	b510      	push	{r4, lr}
 80079de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e6:	4291      	cmp	r1, r2
 80079e8:	d1f9      	bne.n	80079de <memcpy+0xe>
 80079ea:	bd10      	pop	{r4, pc}

080079ec <memset>:
 80079ec:	4402      	add	r2, r0
 80079ee:	4603      	mov	r3, r0
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d100      	bne.n	80079f6 <memset+0xa>
 80079f4:	4770      	bx	lr
 80079f6:	f803 1b01 	strb.w	r1, [r3], #1
 80079fa:	e7f9      	b.n	80079f0 <memset+0x4>

080079fc <iprintf>:
 80079fc:	b40f      	push	{r0, r1, r2, r3}
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <iprintf+0x2c>)
 8007a00:	b513      	push	{r0, r1, r4, lr}
 8007a02:	681c      	ldr	r4, [r3, #0]
 8007a04:	b124      	cbz	r4, 8007a10 <iprintf+0x14>
 8007a06:	69a3      	ldr	r3, [r4, #24]
 8007a08:	b913      	cbnz	r3, 8007a10 <iprintf+0x14>
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fa84 	bl	8007f18 <__sinit>
 8007a10:	ab05      	add	r3, sp, #20
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	68a1      	ldr	r1, [r4, #8]
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fc55 	bl	80082c8 <_vfiprintf_r>
 8007a1e:	b002      	add	sp, #8
 8007a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a24:	b004      	add	sp, #16
 8007a26:	4770      	bx	lr
 8007a28:	20000010 	.word	0x20000010

08007a2c <_puts_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4605      	mov	r5, r0
 8007a32:	b118      	cbz	r0, 8007a3c <_puts_r+0x10>
 8007a34:	6983      	ldr	r3, [r0, #24]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_puts_r+0x10>
 8007a38:	f000 fa6e 	bl	8007f18 <__sinit>
 8007a3c:	69ab      	ldr	r3, [r5, #24]
 8007a3e:	68ac      	ldr	r4, [r5, #8]
 8007a40:	b913      	cbnz	r3, 8007a48 <_puts_r+0x1c>
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 fa68 	bl	8007f18 <__sinit>
 8007a48:	4b2c      	ldr	r3, [pc, #176]	; (8007afc <_puts_r+0xd0>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d120      	bne.n	8007a90 <_puts_r+0x64>
 8007a4e:	686c      	ldr	r4, [r5, #4]
 8007a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d405      	bmi.n	8007a62 <_puts_r+0x36>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	0598      	lsls	r0, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_puts_r+0x36>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f000 faf9 	bl	8008054 <__retarget_lock_acquire_recursive>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d51d      	bpl.n	8007aa4 <_puts_r+0x78>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	b1db      	cbz	r3, 8007aa4 <_puts_r+0x78>
 8007a6c:	3e01      	subs	r6, #1
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	bb39      	cbnz	r1, 8007aca <_puts_r+0x9e>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da38      	bge.n	8007af0 <_puts_r+0xc4>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	210a      	movs	r1, #10
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f86e 	bl	8007b64 <__swbuf_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d011      	beq.n	8007ab0 <_puts_r+0x84>
 8007a8c:	250a      	movs	r5, #10
 8007a8e:	e011      	b.n	8007ab4 <_puts_r+0x88>
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <_puts_r+0xd4>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d101      	bne.n	8007a9a <_puts_r+0x6e>
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	e7da      	b.n	8007a50 <_puts_r+0x24>
 8007a9a:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <_puts_r+0xd8>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	bf08      	it	eq
 8007aa0:	68ec      	ldreq	r4, [r5, #12]
 8007aa2:	e7d5      	b.n	8007a50 <_puts_r+0x24>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f8ae 	bl	8007c08 <__swsetup_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0dd      	beq.n	8007a6c <_puts_r+0x40>
 8007ab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ab6:	07da      	lsls	r2, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	059b      	lsls	r3, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f000 fac8 	bl	8008056 <__retarget_lock_release_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da04      	bge.n	8007ad8 <_puts_r+0xac>
 8007ace:	69a2      	ldr	r2, [r4, #24]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	dc06      	bgt.n	8007ae2 <_puts_r+0xb6>
 8007ad4:	290a      	cmp	r1, #10
 8007ad6:	d004      	beq.n	8007ae2 <_puts_r+0xb6>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	6022      	str	r2, [r4, #0]
 8007ade:	7019      	strb	r1, [r3, #0]
 8007ae0:	e7c5      	b.n	8007a6e <_puts_r+0x42>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f83d 	bl	8007b64 <__swbuf_r>
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1bf      	bne.n	8007a6e <_puts_r+0x42>
 8007aee:	e7df      	b.n	8007ab0 <_puts_r+0x84>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	250a      	movs	r5, #10
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	701d      	strb	r5, [r3, #0]
 8007afa:	e7db      	b.n	8007ab4 <_puts_r+0x88>
 8007afc:	08008b10 	.word	0x08008b10
 8007b00:	08008b30 	.word	0x08008b30
 8007b04:	08008af0 	.word	0x08008af0

08007b08 <puts>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <puts+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f7ff bf8d 	b.w	8007a2c <_puts_r>
 8007b12:	bf00      	nop
 8007b14:	20000010 	.word	0x20000010

08007b18 <strncmp>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	b16a      	cbz	r2, 8007b38 <strncmp+0x20>
 8007b1c:	3901      	subs	r1, #1
 8007b1e:	1884      	adds	r4, r0, r2
 8007b20:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d103      	bne.n	8007b34 <strncmp+0x1c>
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d001      	beq.n	8007b34 <strncmp+0x1c>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f5      	bne.n	8007b20 <strncmp+0x8>
 8007b34:	1a98      	subs	r0, r3, r2
 8007b36:	bd10      	pop	{r4, pc}
 8007b38:	4610      	mov	r0, r2
 8007b3a:	e7fc      	b.n	8007b36 <strncmp+0x1e>

08007b3c <strncpy>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	3901      	subs	r1, #1
 8007b40:	4603      	mov	r3, r0
 8007b42:	b132      	cbz	r2, 8007b52 <strncpy+0x16>
 8007b44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b48:	f803 4b01 	strb.w	r4, [r3], #1
 8007b4c:	3a01      	subs	r2, #1
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d1f7      	bne.n	8007b42 <strncpy+0x6>
 8007b52:	441a      	add	r2, r3
 8007b54:	2100      	movs	r1, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d100      	bne.n	8007b5c <strncpy+0x20>
 8007b5a:	bd10      	pop	{r4, pc}
 8007b5c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b60:	e7f9      	b.n	8007b56 <strncpy+0x1a>
	...

08007b64 <__swbuf_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	460e      	mov	r6, r1
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	b118      	cbz	r0, 8007b76 <__swbuf_r+0x12>
 8007b6e:	6983      	ldr	r3, [r0, #24]
 8007b70:	b90b      	cbnz	r3, 8007b76 <__swbuf_r+0x12>
 8007b72:	f000 f9d1 	bl	8007f18 <__sinit>
 8007b76:	4b21      	ldr	r3, [pc, #132]	; (8007bfc <__swbuf_r+0x98>)
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	d12b      	bne.n	8007bd4 <__swbuf_r+0x70>
 8007b7c:	686c      	ldr	r4, [r5, #4]
 8007b7e:	69a3      	ldr	r3, [r4, #24]
 8007b80:	60a3      	str	r3, [r4, #8]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	071a      	lsls	r2, r3, #28
 8007b86:	d52f      	bpl.n	8007be8 <__swbuf_r+0x84>
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	b36b      	cbz	r3, 8007be8 <__swbuf_r+0x84>
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	6820      	ldr	r0, [r4, #0]
 8007b90:	1ac0      	subs	r0, r0, r3
 8007b92:	6963      	ldr	r3, [r4, #20]
 8007b94:	b2f6      	uxtb	r6, r6
 8007b96:	4283      	cmp	r3, r0
 8007b98:	4637      	mov	r7, r6
 8007b9a:	dc04      	bgt.n	8007ba6 <__swbuf_r+0x42>
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 f926 	bl	8007df0 <_fflush_r>
 8007ba4:	bb30      	cbnz	r0, 8007bf4 <__swbuf_r+0x90>
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	60a3      	str	r3, [r4, #8]
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	6022      	str	r2, [r4, #0]
 8007bb2:	701e      	strb	r6, [r3, #0]
 8007bb4:	6963      	ldr	r3, [r4, #20]
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	4283      	cmp	r3, r0
 8007bba:	d004      	beq.n	8007bc6 <__swbuf_r+0x62>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	07db      	lsls	r3, r3, #31
 8007bc0:	d506      	bpl.n	8007bd0 <__swbuf_r+0x6c>
 8007bc2:	2e0a      	cmp	r6, #10
 8007bc4:	d104      	bne.n	8007bd0 <__swbuf_r+0x6c>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f911 	bl	8007df0 <_fflush_r>
 8007bce:	b988      	cbnz	r0, 8007bf4 <__swbuf_r+0x90>
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <__swbuf_r+0x9c>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	d101      	bne.n	8007bde <__swbuf_r+0x7a>
 8007bda:	68ac      	ldr	r4, [r5, #8]
 8007bdc:	e7cf      	b.n	8007b7e <__swbuf_r+0x1a>
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <__swbuf_r+0xa0>)
 8007be0:	429c      	cmp	r4, r3
 8007be2:	bf08      	it	eq
 8007be4:	68ec      	ldreq	r4, [r5, #12]
 8007be6:	e7ca      	b.n	8007b7e <__swbuf_r+0x1a>
 8007be8:	4621      	mov	r1, r4
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f80c 	bl	8007c08 <__swsetup_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d0cb      	beq.n	8007b8c <__swbuf_r+0x28>
 8007bf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bf8:	e7ea      	b.n	8007bd0 <__swbuf_r+0x6c>
 8007bfa:	bf00      	nop
 8007bfc:	08008b10 	.word	0x08008b10
 8007c00:	08008b30 	.word	0x08008b30
 8007c04:	08008af0 	.word	0x08008af0

08007c08 <__swsetup_r>:
 8007c08:	4b32      	ldr	r3, [pc, #200]	; (8007cd4 <__swsetup_r+0xcc>)
 8007c0a:	b570      	push	{r4, r5, r6, lr}
 8007c0c:	681d      	ldr	r5, [r3, #0]
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	b125      	cbz	r5, 8007c1e <__swsetup_r+0x16>
 8007c14:	69ab      	ldr	r3, [r5, #24]
 8007c16:	b913      	cbnz	r3, 8007c1e <__swsetup_r+0x16>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f97d 	bl	8007f18 <__sinit>
 8007c1e:	4b2e      	ldr	r3, [pc, #184]	; (8007cd8 <__swsetup_r+0xd0>)
 8007c20:	429c      	cmp	r4, r3
 8007c22:	d10f      	bne.n	8007c44 <__swsetup_r+0x3c>
 8007c24:	686c      	ldr	r4, [r5, #4]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c2c:	0719      	lsls	r1, r3, #28
 8007c2e:	d42c      	bmi.n	8007c8a <__swsetup_r+0x82>
 8007c30:	06dd      	lsls	r5, r3, #27
 8007c32:	d411      	bmi.n	8007c58 <__swsetup_r+0x50>
 8007c34:	2309      	movs	r3, #9
 8007c36:	6033      	str	r3, [r6, #0]
 8007c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c42:	e03e      	b.n	8007cc2 <__swsetup_r+0xba>
 8007c44:	4b25      	ldr	r3, [pc, #148]	; (8007cdc <__swsetup_r+0xd4>)
 8007c46:	429c      	cmp	r4, r3
 8007c48:	d101      	bne.n	8007c4e <__swsetup_r+0x46>
 8007c4a:	68ac      	ldr	r4, [r5, #8]
 8007c4c:	e7eb      	b.n	8007c26 <__swsetup_r+0x1e>
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <__swsetup_r+0xd8>)
 8007c50:	429c      	cmp	r4, r3
 8007c52:	bf08      	it	eq
 8007c54:	68ec      	ldreq	r4, [r5, #12]
 8007c56:	e7e6      	b.n	8007c26 <__swsetup_r+0x1e>
 8007c58:	0758      	lsls	r0, r3, #29
 8007c5a:	d512      	bpl.n	8007c82 <__swsetup_r+0x7a>
 8007c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c5e:	b141      	cbz	r1, 8007c72 <__swsetup_r+0x6a>
 8007c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c64:	4299      	cmp	r1, r3
 8007c66:	d002      	beq.n	8007c6e <__swsetup_r+0x66>
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 fa59 	bl	8008120 <_free_r>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6363      	str	r3, [r4, #52]	; 0x34
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6063      	str	r3, [r4, #4]
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f043 0308 	orr.w	r3, r3, #8
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	b94b      	cbnz	r3, 8007ca2 <__swsetup_r+0x9a>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c98:	d003      	beq.n	8007ca2 <__swsetup_r+0x9a>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f9ff 	bl	80080a0 <__smakebuf_r>
 8007ca2:	89a0      	ldrh	r0, [r4, #12]
 8007ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ca8:	f010 0301 	ands.w	r3, r0, #1
 8007cac:	d00a      	beq.n	8007cc4 <__swsetup_r+0xbc>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60a3      	str	r3, [r4, #8]
 8007cb2:	6963      	ldr	r3, [r4, #20]
 8007cb4:	425b      	negs	r3, r3
 8007cb6:	61a3      	str	r3, [r4, #24]
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	b943      	cbnz	r3, 8007cce <__swsetup_r+0xc6>
 8007cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cc0:	d1ba      	bne.n	8007c38 <__swsetup_r+0x30>
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	0781      	lsls	r1, r0, #30
 8007cc6:	bf58      	it	pl
 8007cc8:	6963      	ldrpl	r3, [r4, #20]
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	e7f4      	b.n	8007cb8 <__swsetup_r+0xb0>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	e7f7      	b.n	8007cc2 <__swsetup_r+0xba>
 8007cd2:	bf00      	nop
 8007cd4:	20000010 	.word	0x20000010
 8007cd8:	08008b10 	.word	0x08008b10
 8007cdc:	08008b30 	.word	0x08008b30
 8007ce0:	08008af0 	.word	0x08008af0

08007ce4 <__sflush_r>:
 8007ce4:	898a      	ldrh	r2, [r1, #12]
 8007ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cea:	4605      	mov	r5, r0
 8007cec:	0710      	lsls	r0, r2, #28
 8007cee:	460c      	mov	r4, r1
 8007cf0:	d458      	bmi.n	8007da4 <__sflush_r+0xc0>
 8007cf2:	684b      	ldr	r3, [r1, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dc05      	bgt.n	8007d04 <__sflush_r+0x20>
 8007cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dc02      	bgt.n	8007d04 <__sflush_r+0x20>
 8007cfe:	2000      	movs	r0, #0
 8007d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	d0f9      	beq.n	8007cfe <__sflush_r+0x1a>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d10:	682f      	ldr	r7, [r5, #0]
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	d032      	beq.n	8007d7c <__sflush_r+0x98>
 8007d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	075a      	lsls	r2, r3, #29
 8007d1c:	d505      	bpl.n	8007d2a <__sflush_r+0x46>
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	1ac0      	subs	r0, r0, r3
 8007d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d24:	b10b      	cbz	r3, 8007d2a <__sflush_r+0x46>
 8007d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d28:	1ac0      	subs	r0, r0, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b0      	blx	r6
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	d106      	bne.n	8007d4a <__sflush_r+0x66>
 8007d3c:	6829      	ldr	r1, [r5, #0]
 8007d3e:	291d      	cmp	r1, #29
 8007d40:	d82c      	bhi.n	8007d9c <__sflush_r+0xb8>
 8007d42:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <__sflush_r+0x108>)
 8007d44:	40ca      	lsrs	r2, r1
 8007d46:	07d6      	lsls	r6, r2, #31
 8007d48:	d528      	bpl.n	8007d9c <__sflush_r+0xb8>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	6062      	str	r2, [r4, #4]
 8007d4e:	04d9      	lsls	r1, r3, #19
 8007d50:	6922      	ldr	r2, [r4, #16]
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	d504      	bpl.n	8007d60 <__sflush_r+0x7c>
 8007d56:	1c42      	adds	r2, r0, #1
 8007d58:	d101      	bne.n	8007d5e <__sflush_r+0x7a>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	b903      	cbnz	r3, 8007d60 <__sflush_r+0x7c>
 8007d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d62:	602f      	str	r7, [r5, #0]
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d0ca      	beq.n	8007cfe <__sflush_r+0x1a>
 8007d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	d002      	beq.n	8007d76 <__sflush_r+0x92>
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f9d5 	bl	8008120 <_free_r>
 8007d76:	2000      	movs	r0, #0
 8007d78:	6360      	str	r0, [r4, #52]	; 0x34
 8007d7a:	e7c1      	b.n	8007d00 <__sflush_r+0x1c>
 8007d7c:	6a21      	ldr	r1, [r4, #32]
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b0      	blx	r6
 8007d84:	1c41      	adds	r1, r0, #1
 8007d86:	d1c7      	bne.n	8007d18 <__sflush_r+0x34>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0c4      	beq.n	8007d18 <__sflush_r+0x34>
 8007d8e:	2b1d      	cmp	r3, #29
 8007d90:	d001      	beq.n	8007d96 <__sflush_r+0xb2>
 8007d92:	2b16      	cmp	r3, #22
 8007d94:	d101      	bne.n	8007d9a <__sflush_r+0xb6>
 8007d96:	602f      	str	r7, [r5, #0]
 8007d98:	e7b1      	b.n	8007cfe <__sflush_r+0x1a>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	e7ad      	b.n	8007d00 <__sflush_r+0x1c>
 8007da4:	690f      	ldr	r7, [r1, #16]
 8007da6:	2f00      	cmp	r7, #0
 8007da8:	d0a9      	beq.n	8007cfe <__sflush_r+0x1a>
 8007daa:	0793      	lsls	r3, r2, #30
 8007dac:	680e      	ldr	r6, [r1, #0]
 8007dae:	bf08      	it	eq
 8007db0:	694b      	ldreq	r3, [r1, #20]
 8007db2:	600f      	str	r7, [r1, #0]
 8007db4:	bf18      	it	ne
 8007db6:	2300      	movne	r3, #0
 8007db8:	eba6 0807 	sub.w	r8, r6, r7
 8007dbc:	608b      	str	r3, [r1, #8]
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	dd9c      	ble.n	8007cfe <__sflush_r+0x1a>
 8007dc4:	6a21      	ldr	r1, [r4, #32]
 8007dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dc8:	4643      	mov	r3, r8
 8007dca:	463a      	mov	r2, r7
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b0      	blx	r6
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	dc06      	bgt.n	8007de2 <__sflush_r+0xfe>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007de0:	e78e      	b.n	8007d00 <__sflush_r+0x1c>
 8007de2:	4407      	add	r7, r0
 8007de4:	eba8 0800 	sub.w	r8, r8, r0
 8007de8:	e7e9      	b.n	8007dbe <__sflush_r+0xda>
 8007dea:	bf00      	nop
 8007dec:	20400001 	.word	0x20400001

08007df0 <_fflush_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	690b      	ldr	r3, [r1, #16]
 8007df4:	4605      	mov	r5, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	b913      	cbnz	r3, 8007e00 <_fflush_r+0x10>
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	b118      	cbz	r0, 8007e0a <_fflush_r+0x1a>
 8007e02:	6983      	ldr	r3, [r0, #24]
 8007e04:	b90b      	cbnz	r3, 8007e0a <_fflush_r+0x1a>
 8007e06:	f000 f887 	bl	8007f18 <__sinit>
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <_fflush_r+0x6c>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	d11b      	bne.n	8007e48 <_fflush_r+0x58>
 8007e10:	686c      	ldr	r4, [r5, #4]
 8007e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0ef      	beq.n	8007dfa <_fflush_r+0xa>
 8007e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d404      	bmi.n	8007e2a <_fflush_r+0x3a>
 8007e20:	0599      	lsls	r1, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_fflush_r+0x3a>
 8007e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e26:	f000 f915 	bl	8008054 <__retarget_lock_acquire_recursive>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	f7ff ff59 	bl	8007ce4 <__sflush_r>
 8007e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e34:	07da      	lsls	r2, r3, #31
 8007e36:	4605      	mov	r5, r0
 8007e38:	d4e0      	bmi.n	8007dfc <_fflush_r+0xc>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	059b      	lsls	r3, r3, #22
 8007e3e:	d4dd      	bmi.n	8007dfc <_fflush_r+0xc>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 f908 	bl	8008056 <__retarget_lock_release_recursive>
 8007e46:	e7d9      	b.n	8007dfc <_fflush_r+0xc>
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <_fflush_r+0x70>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d101      	bne.n	8007e52 <_fflush_r+0x62>
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	e7df      	b.n	8007e12 <_fflush_r+0x22>
 8007e52:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <_fflush_r+0x74>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	bf08      	it	eq
 8007e58:	68ec      	ldreq	r4, [r5, #12]
 8007e5a:	e7da      	b.n	8007e12 <_fflush_r+0x22>
 8007e5c:	08008b10 	.word	0x08008b10
 8007e60:	08008b30 	.word	0x08008b30
 8007e64:	08008af0 	.word	0x08008af0

08007e68 <std>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e76:	6083      	str	r3, [r0, #8]
 8007e78:	8181      	strh	r1, [r0, #12]
 8007e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e7c:	81c2      	strh	r2, [r0, #14]
 8007e7e:	6183      	str	r3, [r0, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	2208      	movs	r2, #8
 8007e84:	305c      	adds	r0, #92	; 0x5c
 8007e86:	f7ff fdb1 	bl	80079ec <memset>
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <std+0x38>)
 8007e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x3c>)
 8007e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x40>)
 8007e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x44>)
 8007e98:	6224      	str	r4, [r4, #32]
 8007e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08008871 	.word	0x08008871
 8007ea4:	08008893 	.word	0x08008893
 8007ea8:	080088cb 	.word	0x080088cb
 8007eac:	080088ef 	.word	0x080088ef

08007eb0 <_cleanup_r>:
 8007eb0:	4901      	ldr	r1, [pc, #4]	; (8007eb8 <_cleanup_r+0x8>)
 8007eb2:	f000 b8af 	b.w	8008014 <_fwalk_reent>
 8007eb6:	bf00      	nop
 8007eb8:	08007df1 	.word	0x08007df1

08007ebc <__sfmoreglue>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	1e4a      	subs	r2, r1, #1
 8007ec0:	2568      	movs	r5, #104	; 0x68
 8007ec2:	4355      	muls	r5, r2
 8007ec4:	460e      	mov	r6, r1
 8007ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eca:	f000 f979 	bl	80081c0 <_malloc_r>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	b140      	cbz	r0, 8007ee4 <__sfmoreglue+0x28>
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ed8:	300c      	adds	r0, #12
 8007eda:	60a0      	str	r0, [r4, #8]
 8007edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ee0:	f7ff fd84 	bl	80079ec <memset>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}

08007ee8 <__sfp_lock_acquire>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__sfp_lock_acquire+0x8>)
 8007eea:	f000 b8b3 	b.w	8008054 <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	20001ca8 	.word	0x20001ca8

08007ef4 <__sfp_lock_release>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sfp_lock_release+0x8>)
 8007ef6:	f000 b8ae 	b.w	8008056 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	20001ca8 	.word	0x20001ca8

08007f00 <__sinit_lock_acquire>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__sinit_lock_acquire+0x8>)
 8007f02:	f000 b8a7 	b.w	8008054 <__retarget_lock_acquire_recursive>
 8007f06:	bf00      	nop
 8007f08:	20001ca3 	.word	0x20001ca3

08007f0c <__sinit_lock_release>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sinit_lock_release+0x8>)
 8007f0e:	f000 b8a2 	b.w	8008056 <__retarget_lock_release_recursive>
 8007f12:	bf00      	nop
 8007f14:	20001ca3 	.word	0x20001ca3

08007f18 <__sinit>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	f7ff fff0 	bl	8007f00 <__sinit_lock_acquire>
 8007f20:	69a3      	ldr	r3, [r4, #24]
 8007f22:	b11b      	cbz	r3, 8007f2c <__sinit+0x14>
 8007f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f28:	f7ff bff0 	b.w	8007f0c <__sinit_lock_release>
 8007f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f30:	6523      	str	r3, [r4, #80]	; 0x50
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <__sinit+0x68>)
 8007f34:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <__sinit+0x6c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	bf04      	itt	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	61a3      	streq	r3, [r4, #24]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f820 	bl	8007f88 <__sfp>
 8007f48:	6060      	str	r0, [r4, #4]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f81c 	bl	8007f88 <__sfp>
 8007f50:	60a0      	str	r0, [r4, #8]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f818 	bl	8007f88 <__sfp>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	60e0      	str	r0, [r4, #12]
 8007f5c:	2104      	movs	r1, #4
 8007f5e:	6860      	ldr	r0, [r4, #4]
 8007f60:	f7ff ff82 	bl	8007e68 <std>
 8007f64:	68a0      	ldr	r0, [r4, #8]
 8007f66:	2201      	movs	r2, #1
 8007f68:	2109      	movs	r1, #9
 8007f6a:	f7ff ff7d 	bl	8007e68 <std>
 8007f6e:	68e0      	ldr	r0, [r4, #12]
 8007f70:	2202      	movs	r2, #2
 8007f72:	2112      	movs	r1, #18
 8007f74:	f7ff ff78 	bl	8007e68 <std>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	61a3      	str	r3, [r4, #24]
 8007f7c:	e7d2      	b.n	8007f24 <__sinit+0xc>
 8007f7e:	bf00      	nop
 8007f80:	08008aec 	.word	0x08008aec
 8007f84:	08007eb1 	.word	0x08007eb1

08007f88 <__sfp>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	f7ff ffac 	bl	8007ee8 <__sfp_lock_acquire>
 8007f90:	4b1e      	ldr	r3, [pc, #120]	; (800800c <__sfp+0x84>)
 8007f92:	681e      	ldr	r6, [r3, #0]
 8007f94:	69b3      	ldr	r3, [r6, #24]
 8007f96:	b913      	cbnz	r3, 8007f9e <__sfp+0x16>
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff ffbd 	bl	8007f18 <__sinit>
 8007f9e:	3648      	adds	r6, #72	; 0x48
 8007fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	d503      	bpl.n	8007fb0 <__sfp+0x28>
 8007fa8:	6833      	ldr	r3, [r6, #0]
 8007faa:	b30b      	cbz	r3, 8007ff0 <__sfp+0x68>
 8007fac:	6836      	ldr	r6, [r6, #0]
 8007fae:	e7f7      	b.n	8007fa0 <__sfp+0x18>
 8007fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fb4:	b9d5      	cbnz	r5, 8007fec <__sfp+0x64>
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <__sfp+0x88>)
 8007fb8:	60e3      	str	r3, [r4, #12]
 8007fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007fc0:	f000 f847 	bl	8008052 <__retarget_lock_init_recursive>
 8007fc4:	f7ff ff96 	bl	8007ef4 <__sfp_lock_release>
 8007fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fd0:	6025      	str	r5, [r4, #0]
 8007fd2:	61a5      	str	r5, [r4, #24]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fdc:	f7ff fd06 	bl	80079ec <memset>
 8007fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fe8:	4620      	mov	r0, r4
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	3468      	adds	r4, #104	; 0x68
 8007fee:	e7d9      	b.n	8007fa4 <__sfp+0x1c>
 8007ff0:	2104      	movs	r1, #4
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff ff62 	bl	8007ebc <__sfmoreglue>
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	6030      	str	r0, [r6, #0]
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1d5      	bne.n	8007fac <__sfp+0x24>
 8008000:	f7ff ff78 	bl	8007ef4 <__sfp_lock_release>
 8008004:	230c      	movs	r3, #12
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	e7ee      	b.n	8007fe8 <__sfp+0x60>
 800800a:	bf00      	nop
 800800c:	08008aec 	.word	0x08008aec
 8008010:	ffff0001 	.word	0xffff0001

08008014 <_fwalk_reent>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4606      	mov	r6, r0
 800801a:	4688      	mov	r8, r1
 800801c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008020:	2700      	movs	r7, #0
 8008022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008026:	f1b9 0901 	subs.w	r9, r9, #1
 800802a:	d505      	bpl.n	8008038 <_fwalk_reent+0x24>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	2c00      	cmp	r4, #0
 8008030:	d1f7      	bne.n	8008022 <_fwalk_reent+0xe>
 8008032:	4638      	mov	r0, r7
 8008034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d907      	bls.n	800804e <_fwalk_reent+0x3a>
 800803e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008042:	3301      	adds	r3, #1
 8008044:	d003      	beq.n	800804e <_fwalk_reent+0x3a>
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	47c0      	blx	r8
 800804c:	4307      	orrs	r7, r0
 800804e:	3568      	adds	r5, #104	; 0x68
 8008050:	e7e9      	b.n	8008026 <_fwalk_reent+0x12>

08008052 <__retarget_lock_init_recursive>:
 8008052:	4770      	bx	lr

08008054 <__retarget_lock_acquire_recursive>:
 8008054:	4770      	bx	lr

08008056 <__retarget_lock_release_recursive>:
 8008056:	4770      	bx	lr

08008058 <__swhatbuf_r>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	460e      	mov	r6, r1
 800805c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008060:	2900      	cmp	r1, #0
 8008062:	b096      	sub	sp, #88	; 0x58
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	da07      	bge.n	800807a <__swhatbuf_r+0x22>
 800806a:	2300      	movs	r3, #0
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	89b3      	ldrh	r3, [r6, #12]
 8008070:	061a      	lsls	r2, r3, #24
 8008072:	d410      	bmi.n	8008096 <__swhatbuf_r+0x3e>
 8008074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008078:	e00e      	b.n	8008098 <__swhatbuf_r+0x40>
 800807a:	466a      	mov	r2, sp
 800807c:	f000 fc5e 	bl	800893c <_fstat_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	dbf2      	blt.n	800806a <__swhatbuf_r+0x12>
 8008084:	9a01      	ldr	r2, [sp, #4]
 8008086:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800808a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800808e:	425a      	negs	r2, r3
 8008090:	415a      	adcs	r2, r3
 8008092:	602a      	str	r2, [r5, #0]
 8008094:	e7ee      	b.n	8008074 <__swhatbuf_r+0x1c>
 8008096:	2340      	movs	r3, #64	; 0x40
 8008098:	2000      	movs	r0, #0
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	b016      	add	sp, #88	; 0x58
 800809e:	bd70      	pop	{r4, r5, r6, pc}

080080a0 <__smakebuf_r>:
 80080a0:	898b      	ldrh	r3, [r1, #12]
 80080a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a4:	079d      	lsls	r5, r3, #30
 80080a6:	4606      	mov	r6, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	d507      	bpl.n	80080bc <__smakebuf_r+0x1c>
 80080ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	2301      	movs	r3, #1
 80080b6:	6163      	str	r3, [r4, #20]
 80080b8:	b002      	add	sp, #8
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	ab01      	add	r3, sp, #4
 80080be:	466a      	mov	r2, sp
 80080c0:	f7ff ffca 	bl	8008058 <__swhatbuf_r>
 80080c4:	9900      	ldr	r1, [sp, #0]
 80080c6:	4605      	mov	r5, r0
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 f879 	bl	80081c0 <_malloc_r>
 80080ce:	b948      	cbnz	r0, 80080e4 <__smakebuf_r+0x44>
 80080d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d4:	059a      	lsls	r2, r3, #22
 80080d6:	d4ef      	bmi.n	80080b8 <__smakebuf_r+0x18>
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e7e3      	b.n	80080ac <__smakebuf_r+0xc>
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <__smakebuf_r+0x7c>)
 80080e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	6020      	str	r0, [r4, #0]
 80080ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	6163      	str	r3, [r4, #20]
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	6120      	str	r0, [r4, #16]
 80080fa:	b15b      	cbz	r3, 8008114 <__smakebuf_r+0x74>
 80080fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fc2d 	bl	8008960 <_isatty_r>
 8008106:	b128      	cbz	r0, 8008114 <__smakebuf_r+0x74>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	89a0      	ldrh	r0, [r4, #12]
 8008116:	4305      	orrs	r5, r0
 8008118:	81a5      	strh	r5, [r4, #12]
 800811a:	e7cd      	b.n	80080b8 <__smakebuf_r+0x18>
 800811c:	08007eb1 	.word	0x08007eb1

08008120 <_free_r>:
 8008120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008122:	2900      	cmp	r1, #0
 8008124:	d048      	beq.n	80081b8 <_free_r+0x98>
 8008126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812a:	9001      	str	r0, [sp, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f1a1 0404 	sub.w	r4, r1, #4
 8008132:	bfb8      	it	lt
 8008134:	18e4      	addlt	r4, r4, r3
 8008136:	f000 fc35 	bl	80089a4 <__malloc_lock>
 800813a:	4a20      	ldr	r2, [pc, #128]	; (80081bc <_free_r+0x9c>)
 800813c:	9801      	ldr	r0, [sp, #4]
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	4615      	mov	r5, r2
 8008142:	b933      	cbnz	r3, 8008152 <_free_r+0x32>
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	6014      	str	r4, [r2, #0]
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800814e:	f000 bc2f 	b.w	80089b0 <__malloc_unlock>
 8008152:	42a3      	cmp	r3, r4
 8008154:	d90b      	bls.n	800816e <_free_r+0x4e>
 8008156:	6821      	ldr	r1, [r4, #0]
 8008158:	1862      	adds	r2, r4, r1
 800815a:	4293      	cmp	r3, r2
 800815c:	bf04      	itt	eq
 800815e:	681a      	ldreq	r2, [r3, #0]
 8008160:	685b      	ldreq	r3, [r3, #4]
 8008162:	6063      	str	r3, [r4, #4]
 8008164:	bf04      	itt	eq
 8008166:	1852      	addeq	r2, r2, r1
 8008168:	6022      	streq	r2, [r4, #0]
 800816a:	602c      	str	r4, [r5, #0]
 800816c:	e7ec      	b.n	8008148 <_free_r+0x28>
 800816e:	461a      	mov	r2, r3
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b10b      	cbz	r3, 8008178 <_free_r+0x58>
 8008174:	42a3      	cmp	r3, r4
 8008176:	d9fa      	bls.n	800816e <_free_r+0x4e>
 8008178:	6811      	ldr	r1, [r2, #0]
 800817a:	1855      	adds	r5, r2, r1
 800817c:	42a5      	cmp	r5, r4
 800817e:	d10b      	bne.n	8008198 <_free_r+0x78>
 8008180:	6824      	ldr	r4, [r4, #0]
 8008182:	4421      	add	r1, r4
 8008184:	1854      	adds	r4, r2, r1
 8008186:	42a3      	cmp	r3, r4
 8008188:	6011      	str	r1, [r2, #0]
 800818a:	d1dd      	bne.n	8008148 <_free_r+0x28>
 800818c:	681c      	ldr	r4, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	6053      	str	r3, [r2, #4]
 8008192:	4421      	add	r1, r4
 8008194:	6011      	str	r1, [r2, #0]
 8008196:	e7d7      	b.n	8008148 <_free_r+0x28>
 8008198:	d902      	bls.n	80081a0 <_free_r+0x80>
 800819a:	230c      	movs	r3, #12
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	e7d3      	b.n	8008148 <_free_r+0x28>
 80081a0:	6825      	ldr	r5, [r4, #0]
 80081a2:	1961      	adds	r1, r4, r5
 80081a4:	428b      	cmp	r3, r1
 80081a6:	bf04      	itt	eq
 80081a8:	6819      	ldreq	r1, [r3, #0]
 80081aa:	685b      	ldreq	r3, [r3, #4]
 80081ac:	6063      	str	r3, [r4, #4]
 80081ae:	bf04      	itt	eq
 80081b0:	1949      	addeq	r1, r1, r5
 80081b2:	6021      	streq	r1, [r4, #0]
 80081b4:	6054      	str	r4, [r2, #4]
 80081b6:	e7c7      	b.n	8008148 <_free_r+0x28>
 80081b8:	b003      	add	sp, #12
 80081ba:	bd30      	pop	{r4, r5, pc}
 80081bc:	2000195c 	.word	0x2000195c

080081c0 <_malloc_r>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	1ccd      	adds	r5, r1, #3
 80081c4:	f025 0503 	bic.w	r5, r5, #3
 80081c8:	3508      	adds	r5, #8
 80081ca:	2d0c      	cmp	r5, #12
 80081cc:	bf38      	it	cc
 80081ce:	250c      	movcc	r5, #12
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	4606      	mov	r6, r0
 80081d4:	db01      	blt.n	80081da <_malloc_r+0x1a>
 80081d6:	42a9      	cmp	r1, r5
 80081d8:	d903      	bls.n	80081e2 <_malloc_r+0x22>
 80081da:	230c      	movs	r3, #12
 80081dc:	6033      	str	r3, [r6, #0]
 80081de:	2000      	movs	r0, #0
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e2:	f000 fbdf 	bl	80089a4 <__malloc_lock>
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <_malloc_r+0xac>)
 80081e8:	680a      	ldr	r2, [r1, #0]
 80081ea:	4614      	mov	r4, r2
 80081ec:	b99c      	cbnz	r4, 8008216 <_malloc_r+0x56>
 80081ee:	4f20      	ldr	r7, [pc, #128]	; (8008270 <_malloc_r+0xb0>)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	b923      	cbnz	r3, 80081fe <_malloc_r+0x3e>
 80081f4:	4621      	mov	r1, r4
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 fb2a 	bl	8008850 <_sbrk_r>
 80081fc:	6038      	str	r0, [r7, #0]
 80081fe:	4629      	mov	r1, r5
 8008200:	4630      	mov	r0, r6
 8008202:	f000 fb25 	bl	8008850 <_sbrk_r>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d123      	bne.n	8008252 <_malloc_r+0x92>
 800820a:	230c      	movs	r3, #12
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	4630      	mov	r0, r6
 8008210:	f000 fbce 	bl	80089b0 <__malloc_unlock>
 8008214:	e7e3      	b.n	80081de <_malloc_r+0x1e>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	1b5b      	subs	r3, r3, r5
 800821a:	d417      	bmi.n	800824c <_malloc_r+0x8c>
 800821c:	2b0b      	cmp	r3, #11
 800821e:	d903      	bls.n	8008228 <_malloc_r+0x68>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	441c      	add	r4, r3
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	e004      	b.n	8008232 <_malloc_r+0x72>
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	42a2      	cmp	r2, r4
 800822c:	bf0c      	ite	eq
 800822e:	600b      	streq	r3, [r1, #0]
 8008230:	6053      	strne	r3, [r2, #4]
 8008232:	4630      	mov	r0, r6
 8008234:	f000 fbbc 	bl	80089b0 <__malloc_unlock>
 8008238:	f104 000b 	add.w	r0, r4, #11
 800823c:	1d23      	adds	r3, r4, #4
 800823e:	f020 0007 	bic.w	r0, r0, #7
 8008242:	1ac2      	subs	r2, r0, r3
 8008244:	d0cc      	beq.n	80081e0 <_malloc_r+0x20>
 8008246:	1a1b      	subs	r3, r3, r0
 8008248:	50a3      	str	r3, [r4, r2]
 800824a:	e7c9      	b.n	80081e0 <_malloc_r+0x20>
 800824c:	4622      	mov	r2, r4
 800824e:	6864      	ldr	r4, [r4, #4]
 8008250:	e7cc      	b.n	80081ec <_malloc_r+0x2c>
 8008252:	1cc4      	adds	r4, r0, #3
 8008254:	f024 0403 	bic.w	r4, r4, #3
 8008258:	42a0      	cmp	r0, r4
 800825a:	d0e3      	beq.n	8008224 <_malloc_r+0x64>
 800825c:	1a21      	subs	r1, r4, r0
 800825e:	4630      	mov	r0, r6
 8008260:	f000 faf6 	bl	8008850 <_sbrk_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d1dd      	bne.n	8008224 <_malloc_r+0x64>
 8008268:	e7cf      	b.n	800820a <_malloc_r+0x4a>
 800826a:	bf00      	nop
 800826c:	2000195c 	.word	0x2000195c
 8008270:	20001960 	.word	0x20001960

08008274 <__sfputc_r>:
 8008274:	6893      	ldr	r3, [r2, #8]
 8008276:	3b01      	subs	r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	b410      	push	{r4}
 800827c:	6093      	str	r3, [r2, #8]
 800827e:	da08      	bge.n	8008292 <__sfputc_r+0x1e>
 8008280:	6994      	ldr	r4, [r2, #24]
 8008282:	42a3      	cmp	r3, r4
 8008284:	db01      	blt.n	800828a <__sfputc_r+0x16>
 8008286:	290a      	cmp	r1, #10
 8008288:	d103      	bne.n	8008292 <__sfputc_r+0x1e>
 800828a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828e:	f7ff bc69 	b.w	8007b64 <__swbuf_r>
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	1c58      	adds	r0, r3, #1
 8008296:	6010      	str	r0, [r2, #0]
 8008298:	7019      	strb	r1, [r3, #0]
 800829a:	4608      	mov	r0, r1
 800829c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <__sfputs_r>:
 80082a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	4614      	mov	r4, r2
 80082aa:	18d5      	adds	r5, r2, r3
 80082ac:	42ac      	cmp	r4, r5
 80082ae:	d101      	bne.n	80082b4 <__sfputs_r+0x12>
 80082b0:	2000      	movs	r0, #0
 80082b2:	e007      	b.n	80082c4 <__sfputs_r+0x22>
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	463a      	mov	r2, r7
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff ffda 	bl	8008274 <__sfputc_r>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d1f3      	bne.n	80082ac <__sfputs_r+0xa>
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c8 <_vfiprintf_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	460d      	mov	r5, r1
 80082ce:	b09d      	sub	sp, #116	; 0x74
 80082d0:	4614      	mov	r4, r2
 80082d2:	4698      	mov	r8, r3
 80082d4:	4606      	mov	r6, r0
 80082d6:	b118      	cbz	r0, 80082e0 <_vfiprintf_r+0x18>
 80082d8:	6983      	ldr	r3, [r0, #24]
 80082da:	b90b      	cbnz	r3, 80082e0 <_vfiprintf_r+0x18>
 80082dc:	f7ff fe1c 	bl	8007f18 <__sinit>
 80082e0:	4b89      	ldr	r3, [pc, #548]	; (8008508 <_vfiprintf_r+0x240>)
 80082e2:	429d      	cmp	r5, r3
 80082e4:	d11b      	bne.n	800831e <_vfiprintf_r+0x56>
 80082e6:	6875      	ldr	r5, [r6, #4]
 80082e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ea:	07d9      	lsls	r1, r3, #31
 80082ec:	d405      	bmi.n	80082fa <_vfiprintf_r+0x32>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	059a      	lsls	r2, r3, #22
 80082f2:	d402      	bmi.n	80082fa <_vfiprintf_r+0x32>
 80082f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f6:	f7ff fead 	bl	8008054 <__retarget_lock_acquire_recursive>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	071b      	lsls	r3, r3, #28
 80082fe:	d501      	bpl.n	8008304 <_vfiprintf_r+0x3c>
 8008300:	692b      	ldr	r3, [r5, #16]
 8008302:	b9eb      	cbnz	r3, 8008340 <_vfiprintf_r+0x78>
 8008304:	4629      	mov	r1, r5
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff fc7e 	bl	8007c08 <__swsetup_r>
 800830c:	b1c0      	cbz	r0, 8008340 <_vfiprintf_r+0x78>
 800830e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008310:	07dc      	lsls	r4, r3, #31
 8008312:	d50e      	bpl.n	8008332 <_vfiprintf_r+0x6a>
 8008314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008318:	b01d      	add	sp, #116	; 0x74
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	4b7b      	ldr	r3, [pc, #492]	; (800850c <_vfiprintf_r+0x244>)
 8008320:	429d      	cmp	r5, r3
 8008322:	d101      	bne.n	8008328 <_vfiprintf_r+0x60>
 8008324:	68b5      	ldr	r5, [r6, #8]
 8008326:	e7df      	b.n	80082e8 <_vfiprintf_r+0x20>
 8008328:	4b79      	ldr	r3, [pc, #484]	; (8008510 <_vfiprintf_r+0x248>)
 800832a:	429d      	cmp	r5, r3
 800832c:	bf08      	it	eq
 800832e:	68f5      	ldreq	r5, [r6, #12]
 8008330:	e7da      	b.n	80082e8 <_vfiprintf_r+0x20>
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	0598      	lsls	r0, r3, #22
 8008336:	d4ed      	bmi.n	8008314 <_vfiprintf_r+0x4c>
 8008338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800833a:	f7ff fe8c 	bl	8008056 <__retarget_lock_release_recursive>
 800833e:	e7e9      	b.n	8008314 <_vfiprintf_r+0x4c>
 8008340:	2300      	movs	r3, #0
 8008342:	9309      	str	r3, [sp, #36]	; 0x24
 8008344:	2320      	movs	r3, #32
 8008346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834a:	f8cd 800c 	str.w	r8, [sp, #12]
 800834e:	2330      	movs	r3, #48	; 0x30
 8008350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008514 <_vfiprintf_r+0x24c>
 8008354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008358:	f04f 0901 	mov.w	r9, #1
 800835c:	4623      	mov	r3, r4
 800835e:	469a      	mov	sl, r3
 8008360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008364:	b10a      	cbz	r2, 800836a <_vfiprintf_r+0xa2>
 8008366:	2a25      	cmp	r2, #37	; 0x25
 8008368:	d1f9      	bne.n	800835e <_vfiprintf_r+0x96>
 800836a:	ebba 0b04 	subs.w	fp, sl, r4
 800836e:	d00b      	beq.n	8008388 <_vfiprintf_r+0xc0>
 8008370:	465b      	mov	r3, fp
 8008372:	4622      	mov	r2, r4
 8008374:	4629      	mov	r1, r5
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ff93 	bl	80082a2 <__sfputs_r>
 800837c:	3001      	adds	r0, #1
 800837e:	f000 80aa 	beq.w	80084d6 <_vfiprintf_r+0x20e>
 8008382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008384:	445a      	add	r2, fp
 8008386:	9209      	str	r2, [sp, #36]	; 0x24
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 80a2 	beq.w	80084d6 <_vfiprintf_r+0x20e>
 8008392:	2300      	movs	r3, #0
 8008394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800839c:	f10a 0a01 	add.w	sl, sl, #1
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a8:	931a      	str	r3, [sp, #104]	; 0x68
 80083aa:	4654      	mov	r4, sl
 80083ac:	2205      	movs	r2, #5
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4858      	ldr	r0, [pc, #352]	; (8008514 <_vfiprintf_r+0x24c>)
 80083b4:	f7f7 ff14 	bl	80001e0 <memchr>
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	b9d8      	cbnz	r0, 80083f4 <_vfiprintf_r+0x12c>
 80083bc:	06d1      	lsls	r1, r2, #27
 80083be:	bf44      	itt	mi
 80083c0:	2320      	movmi	r3, #32
 80083c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c6:	0713      	lsls	r3, r2, #28
 80083c8:	bf44      	itt	mi
 80083ca:	232b      	movmi	r3, #43	; 0x2b
 80083cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d0:	f89a 3000 	ldrb.w	r3, [sl]
 80083d4:	2b2a      	cmp	r3, #42	; 0x2a
 80083d6:	d015      	beq.n	8008404 <_vfiprintf_r+0x13c>
 80083d8:	9a07      	ldr	r2, [sp, #28]
 80083da:	4654      	mov	r4, sl
 80083dc:	2000      	movs	r0, #0
 80083de:	f04f 0c0a 	mov.w	ip, #10
 80083e2:	4621      	mov	r1, r4
 80083e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e8:	3b30      	subs	r3, #48	; 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d94e      	bls.n	800848c <_vfiprintf_r+0x1c4>
 80083ee:	b1b0      	cbz	r0, 800841e <_vfiprintf_r+0x156>
 80083f0:	9207      	str	r2, [sp, #28]
 80083f2:	e014      	b.n	800841e <_vfiprintf_r+0x156>
 80083f4:	eba0 0308 	sub.w	r3, r0, r8
 80083f8:	fa09 f303 	lsl.w	r3, r9, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	46a2      	mov	sl, r4
 8008402:	e7d2      	b.n	80083aa <_vfiprintf_r+0xe2>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	1d19      	adds	r1, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	9103      	str	r1, [sp, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfbb      	ittet	lt
 8008410:	425b      	neglt	r3, r3
 8008412:	f042 0202 	orrlt.w	r2, r2, #2
 8008416:	9307      	strge	r3, [sp, #28]
 8008418:	9307      	strlt	r3, [sp, #28]
 800841a:	bfb8      	it	lt
 800841c:	9204      	strlt	r2, [sp, #16]
 800841e:	7823      	ldrb	r3, [r4, #0]
 8008420:	2b2e      	cmp	r3, #46	; 0x2e
 8008422:	d10c      	bne.n	800843e <_vfiprintf_r+0x176>
 8008424:	7863      	ldrb	r3, [r4, #1]
 8008426:	2b2a      	cmp	r3, #42	; 0x2a
 8008428:	d135      	bne.n	8008496 <_vfiprintf_r+0x1ce>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	9203      	str	r2, [sp, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	bfb8      	it	lt
 8008436:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800843a:	3402      	adds	r4, #2
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008524 <_vfiprintf_r+0x25c>
 8008442:	7821      	ldrb	r1, [r4, #0]
 8008444:	2203      	movs	r2, #3
 8008446:	4650      	mov	r0, sl
 8008448:	f7f7 feca 	bl	80001e0 <memchr>
 800844c:	b140      	cbz	r0, 8008460 <_vfiprintf_r+0x198>
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	eba0 000a 	sub.w	r0, r0, sl
 8008454:	fa03 f000 	lsl.w	r0, r3, r0
 8008458:	9b04      	ldr	r3, [sp, #16]
 800845a:	4303      	orrs	r3, r0
 800845c:	3401      	adds	r4, #1
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008464:	482c      	ldr	r0, [pc, #176]	; (8008518 <_vfiprintf_r+0x250>)
 8008466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800846a:	2206      	movs	r2, #6
 800846c:	f7f7 feb8 	bl	80001e0 <memchr>
 8008470:	2800      	cmp	r0, #0
 8008472:	d03f      	beq.n	80084f4 <_vfiprintf_r+0x22c>
 8008474:	4b29      	ldr	r3, [pc, #164]	; (800851c <_vfiprintf_r+0x254>)
 8008476:	bb1b      	cbnz	r3, 80084c0 <_vfiprintf_r+0x1f8>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	3307      	adds	r3, #7
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	3308      	adds	r3, #8
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008486:	443b      	add	r3, r7
 8008488:	9309      	str	r3, [sp, #36]	; 0x24
 800848a:	e767      	b.n	800835c <_vfiprintf_r+0x94>
 800848c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008490:	460c      	mov	r4, r1
 8008492:	2001      	movs	r0, #1
 8008494:	e7a5      	b.n	80083e2 <_vfiprintf_r+0x11a>
 8008496:	2300      	movs	r3, #0
 8008498:	3401      	adds	r4, #1
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a8:	3a30      	subs	r2, #48	; 0x30
 80084aa:	2a09      	cmp	r2, #9
 80084ac:	d903      	bls.n	80084b6 <_vfiprintf_r+0x1ee>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c5      	beq.n	800843e <_vfiprintf_r+0x176>
 80084b2:	9105      	str	r1, [sp, #20]
 80084b4:	e7c3      	b.n	800843e <_vfiprintf_r+0x176>
 80084b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ba:	4604      	mov	r4, r0
 80084bc:	2301      	movs	r3, #1
 80084be:	e7f0      	b.n	80084a2 <_vfiprintf_r+0x1da>
 80084c0:	ab03      	add	r3, sp, #12
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	462a      	mov	r2, r5
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <_vfiprintf_r+0x258>)
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4630      	mov	r0, r6
 80084cc:	f3af 8000 	nop.w
 80084d0:	4607      	mov	r7, r0
 80084d2:	1c78      	adds	r0, r7, #1
 80084d4:	d1d6      	bne.n	8008484 <_vfiprintf_r+0x1bc>
 80084d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	d405      	bmi.n	80084e8 <_vfiprintf_r+0x220>
 80084dc:	89ab      	ldrh	r3, [r5, #12]
 80084de:	059a      	lsls	r2, r3, #22
 80084e0:	d402      	bmi.n	80084e8 <_vfiprintf_r+0x220>
 80084e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e4:	f7ff fdb7 	bl	8008056 <__retarget_lock_release_recursive>
 80084e8:	89ab      	ldrh	r3, [r5, #12]
 80084ea:	065b      	lsls	r3, r3, #25
 80084ec:	f53f af12 	bmi.w	8008314 <_vfiprintf_r+0x4c>
 80084f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f2:	e711      	b.n	8008318 <_vfiprintf_r+0x50>
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <_vfiprintf_r+0x258>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f880 	bl	8008604 <_printf_i>
 8008504:	e7e4      	b.n	80084d0 <_vfiprintf_r+0x208>
 8008506:	bf00      	nop
 8008508:	08008b10 	.word	0x08008b10
 800850c:	08008b30 	.word	0x08008b30
 8008510:	08008af0 	.word	0x08008af0
 8008514:	08008b50 	.word	0x08008b50
 8008518:	08008b5a 	.word	0x08008b5a
 800851c:	00000000 	.word	0x00000000
 8008520:	080082a3 	.word	0x080082a3
 8008524:	08008b56 	.word	0x08008b56

08008528 <_printf_common>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	4616      	mov	r6, r2
 800852e:	4699      	mov	r9, r3
 8008530:	688a      	ldr	r2, [r1, #8]
 8008532:	690b      	ldr	r3, [r1, #16]
 8008534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008538:	4293      	cmp	r3, r2
 800853a:	bfb8      	it	lt
 800853c:	4613      	movlt	r3, r2
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008544:	4607      	mov	r7, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b10a      	cbz	r2, 800854e <_printf_common+0x26>
 800854a:	3301      	adds	r3, #1
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	0699      	lsls	r1, r3, #26
 8008552:	bf42      	ittt	mi
 8008554:	6833      	ldrmi	r3, [r6, #0]
 8008556:	3302      	addmi	r3, #2
 8008558:	6033      	strmi	r3, [r6, #0]
 800855a:	6825      	ldr	r5, [r4, #0]
 800855c:	f015 0506 	ands.w	r5, r5, #6
 8008560:	d106      	bne.n	8008570 <_printf_common+0x48>
 8008562:	f104 0a19 	add.w	sl, r4, #25
 8008566:	68e3      	ldr	r3, [r4, #12]
 8008568:	6832      	ldr	r2, [r6, #0]
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	42ab      	cmp	r3, r5
 800856e:	dc26      	bgt.n	80085be <_printf_common+0x96>
 8008570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008574:	1e13      	subs	r3, r2, #0
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	bf18      	it	ne
 800857a:	2301      	movne	r3, #1
 800857c:	0692      	lsls	r2, r2, #26
 800857e:	d42b      	bmi.n	80085d8 <_printf_common+0xb0>
 8008580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d01e      	beq.n	80085cc <_printf_common+0xa4>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	68e5      	ldr	r5, [r4, #12]
 8008592:	6832      	ldr	r2, [r6, #0]
 8008594:	f003 0306 	and.w	r3, r3, #6
 8008598:	2b04      	cmp	r3, #4
 800859a:	bf08      	it	eq
 800859c:	1aad      	subeq	r5, r5, r2
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	6922      	ldr	r2, [r4, #16]
 80085a2:	bf0c      	ite	eq
 80085a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a8:	2500      	movne	r5, #0
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bfc4      	itt	gt
 80085ae:	1a9b      	subgt	r3, r3, r2
 80085b0:	18ed      	addgt	r5, r5, r3
 80085b2:	2600      	movs	r6, #0
 80085b4:	341a      	adds	r4, #26
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d11a      	bne.n	80085f0 <_printf_common+0xc8>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e008      	b.n	80085d0 <_printf_common+0xa8>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4649      	mov	r1, r9
 80085c4:	4638      	mov	r0, r7
 80085c6:	47c0      	blx	r8
 80085c8:	3001      	adds	r0, #1
 80085ca:	d103      	bne.n	80085d4 <_printf_common+0xac>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e7c6      	b.n	8008566 <_printf_common+0x3e>
 80085d8:	18e1      	adds	r1, r4, r3
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	2030      	movs	r0, #48	; 0x30
 80085de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e2:	4422      	add	r2, r4
 80085e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ec:	3302      	adds	r3, #2
 80085ee:	e7c7      	b.n	8008580 <_printf_common+0x58>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4649      	mov	r1, r9
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d0e6      	beq.n	80085cc <_printf_common+0xa4>
 80085fe:	3601      	adds	r6, #1
 8008600:	e7d9      	b.n	80085b6 <_printf_common+0x8e>
	...

08008604 <_printf_i>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	460c      	mov	r4, r1
 800860a:	4691      	mov	r9, r2
 800860c:	7e27      	ldrb	r7, [r4, #24]
 800860e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008610:	2f78      	cmp	r7, #120	; 0x78
 8008612:	4680      	mov	r8, r0
 8008614:	469a      	mov	sl, r3
 8008616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800861a:	d807      	bhi.n	800862c <_printf_i+0x28>
 800861c:	2f62      	cmp	r7, #98	; 0x62
 800861e:	d80a      	bhi.n	8008636 <_printf_i+0x32>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80d8 	beq.w	80087d6 <_printf_i+0x1d2>
 8008626:	2f58      	cmp	r7, #88	; 0x58
 8008628:	f000 80a3 	beq.w	8008772 <_printf_i+0x16e>
 800862c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008634:	e03a      	b.n	80086ac <_printf_i+0xa8>
 8008636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800863a:	2b15      	cmp	r3, #21
 800863c:	d8f6      	bhi.n	800862c <_printf_i+0x28>
 800863e:	a001      	add	r0, pc, #4	; (adr r0, 8008644 <_printf_i+0x40>)
 8008640:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	080086b1 	.word	0x080086b1
 800864c:	0800862d 	.word	0x0800862d
 8008650:	0800862d 	.word	0x0800862d
 8008654:	0800862d 	.word	0x0800862d
 8008658:	0800862d 	.word	0x0800862d
 800865c:	080086b1 	.word	0x080086b1
 8008660:	0800862d 	.word	0x0800862d
 8008664:	0800862d 	.word	0x0800862d
 8008668:	0800862d 	.word	0x0800862d
 800866c:	0800862d 	.word	0x0800862d
 8008670:	080087bd 	.word	0x080087bd
 8008674:	080086e1 	.word	0x080086e1
 8008678:	0800879f 	.word	0x0800879f
 800867c:	0800862d 	.word	0x0800862d
 8008680:	0800862d 	.word	0x0800862d
 8008684:	080087df 	.word	0x080087df
 8008688:	0800862d 	.word	0x0800862d
 800868c:	080086e1 	.word	0x080086e1
 8008690:	0800862d 	.word	0x0800862d
 8008694:	0800862d 	.word	0x0800862d
 8008698:	080087a7 	.word	0x080087a7
 800869c:	680b      	ldr	r3, [r1, #0]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	600a      	str	r2, [r1, #0]
 80086a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a3      	b.n	80087f8 <_printf_i+0x1f4>
 80086b0:	6825      	ldr	r5, [r4, #0]
 80086b2:	6808      	ldr	r0, [r1, #0]
 80086b4:	062e      	lsls	r6, r5, #24
 80086b6:	f100 0304 	add.w	r3, r0, #4
 80086ba:	d50a      	bpl.n	80086d2 <_printf_i+0xce>
 80086bc:	6805      	ldr	r5, [r0, #0]
 80086be:	600b      	str	r3, [r1, #0]
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	da03      	bge.n	80086cc <_printf_i+0xc8>
 80086c4:	232d      	movs	r3, #45	; 0x2d
 80086c6:	426d      	negs	r5, r5
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086cc:	485e      	ldr	r0, [pc, #376]	; (8008848 <_printf_i+0x244>)
 80086ce:	230a      	movs	r3, #10
 80086d0:	e019      	b.n	8008706 <_printf_i+0x102>
 80086d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086d6:	6805      	ldr	r5, [r0, #0]
 80086d8:	600b      	str	r3, [r1, #0]
 80086da:	bf18      	it	ne
 80086dc:	b22d      	sxthne	r5, r5
 80086de:	e7ef      	b.n	80086c0 <_printf_i+0xbc>
 80086e0:	680b      	ldr	r3, [r1, #0]
 80086e2:	6825      	ldr	r5, [r4, #0]
 80086e4:	1d18      	adds	r0, r3, #4
 80086e6:	6008      	str	r0, [r1, #0]
 80086e8:	0628      	lsls	r0, r5, #24
 80086ea:	d501      	bpl.n	80086f0 <_printf_i+0xec>
 80086ec:	681d      	ldr	r5, [r3, #0]
 80086ee:	e002      	b.n	80086f6 <_printf_i+0xf2>
 80086f0:	0669      	lsls	r1, r5, #25
 80086f2:	d5fb      	bpl.n	80086ec <_printf_i+0xe8>
 80086f4:	881d      	ldrh	r5, [r3, #0]
 80086f6:	4854      	ldr	r0, [pc, #336]	; (8008848 <_printf_i+0x244>)
 80086f8:	2f6f      	cmp	r7, #111	; 0x6f
 80086fa:	bf0c      	ite	eq
 80086fc:	2308      	moveq	r3, #8
 80086fe:	230a      	movne	r3, #10
 8008700:	2100      	movs	r1, #0
 8008702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008706:	6866      	ldr	r6, [r4, #4]
 8008708:	60a6      	str	r6, [r4, #8]
 800870a:	2e00      	cmp	r6, #0
 800870c:	bfa2      	ittt	ge
 800870e:	6821      	ldrge	r1, [r4, #0]
 8008710:	f021 0104 	bicge.w	r1, r1, #4
 8008714:	6021      	strge	r1, [r4, #0]
 8008716:	b90d      	cbnz	r5, 800871c <_printf_i+0x118>
 8008718:	2e00      	cmp	r6, #0
 800871a:	d04d      	beq.n	80087b8 <_printf_i+0x1b4>
 800871c:	4616      	mov	r6, r2
 800871e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008722:	fb03 5711 	mls	r7, r3, r1, r5
 8008726:	5dc7      	ldrb	r7, [r0, r7]
 8008728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800872c:	462f      	mov	r7, r5
 800872e:	42bb      	cmp	r3, r7
 8008730:	460d      	mov	r5, r1
 8008732:	d9f4      	bls.n	800871e <_printf_i+0x11a>
 8008734:	2b08      	cmp	r3, #8
 8008736:	d10b      	bne.n	8008750 <_printf_i+0x14c>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	07df      	lsls	r7, r3, #31
 800873c:	d508      	bpl.n	8008750 <_printf_i+0x14c>
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	6861      	ldr	r1, [r4, #4]
 8008742:	4299      	cmp	r1, r3
 8008744:	bfde      	ittt	le
 8008746:	2330      	movle	r3, #48	; 0x30
 8008748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800874c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008750:	1b92      	subs	r2, r2, r6
 8008752:	6122      	str	r2, [r4, #16]
 8008754:	f8cd a000 	str.w	sl, [sp]
 8008758:	464b      	mov	r3, r9
 800875a:	aa03      	add	r2, sp, #12
 800875c:	4621      	mov	r1, r4
 800875e:	4640      	mov	r0, r8
 8008760:	f7ff fee2 	bl	8008528 <_printf_common>
 8008764:	3001      	adds	r0, #1
 8008766:	d14c      	bne.n	8008802 <_printf_i+0x1fe>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800876c:	b004      	add	sp, #16
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	4835      	ldr	r0, [pc, #212]	; (8008848 <_printf_i+0x244>)
 8008774:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	680e      	ldr	r6, [r1, #0]
 800877c:	061f      	lsls	r7, r3, #24
 800877e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008782:	600e      	str	r6, [r1, #0]
 8008784:	d514      	bpl.n	80087b0 <_printf_i+0x1ac>
 8008786:	07d9      	lsls	r1, r3, #31
 8008788:	bf44      	itt	mi
 800878a:	f043 0320 	orrmi.w	r3, r3, #32
 800878e:	6023      	strmi	r3, [r4, #0]
 8008790:	b91d      	cbnz	r5, 800879a <_printf_i+0x196>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f023 0320 	bic.w	r3, r3, #32
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	2310      	movs	r3, #16
 800879c:	e7b0      	b.n	8008700 <_printf_i+0xfc>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f043 0320 	orr.w	r3, r3, #32
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	2378      	movs	r3, #120	; 0x78
 80087a8:	4828      	ldr	r0, [pc, #160]	; (800884c <_printf_i+0x248>)
 80087aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ae:	e7e3      	b.n	8008778 <_printf_i+0x174>
 80087b0:	065e      	lsls	r6, r3, #25
 80087b2:	bf48      	it	mi
 80087b4:	b2ad      	uxthmi	r5, r5
 80087b6:	e7e6      	b.n	8008786 <_printf_i+0x182>
 80087b8:	4616      	mov	r6, r2
 80087ba:	e7bb      	b.n	8008734 <_printf_i+0x130>
 80087bc:	680b      	ldr	r3, [r1, #0]
 80087be:	6826      	ldr	r6, [r4, #0]
 80087c0:	6960      	ldr	r0, [r4, #20]
 80087c2:	1d1d      	adds	r5, r3, #4
 80087c4:	600d      	str	r5, [r1, #0]
 80087c6:	0635      	lsls	r5, r6, #24
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	d501      	bpl.n	80087d0 <_printf_i+0x1cc>
 80087cc:	6018      	str	r0, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <_printf_i+0x1d2>
 80087d0:	0671      	lsls	r1, r6, #25
 80087d2:	d5fb      	bpl.n	80087cc <_printf_i+0x1c8>
 80087d4:	8018      	strh	r0, [r3, #0]
 80087d6:	2300      	movs	r3, #0
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	4616      	mov	r6, r2
 80087dc:	e7ba      	b.n	8008754 <_printf_i+0x150>
 80087de:	680b      	ldr	r3, [r1, #0]
 80087e0:	1d1a      	adds	r2, r3, #4
 80087e2:	600a      	str	r2, [r1, #0]
 80087e4:	681e      	ldr	r6, [r3, #0]
 80087e6:	6862      	ldr	r2, [r4, #4]
 80087e8:	2100      	movs	r1, #0
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7f7 fcf8 	bl	80001e0 <memchr>
 80087f0:	b108      	cbz	r0, 80087f6 <_printf_i+0x1f2>
 80087f2:	1b80      	subs	r0, r0, r6
 80087f4:	6060      	str	r0, [r4, #4]
 80087f6:	6863      	ldr	r3, [r4, #4]
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	2300      	movs	r3, #0
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	e7a8      	b.n	8008754 <_printf_i+0x150>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	4632      	mov	r2, r6
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	47d0      	blx	sl
 800880c:	3001      	adds	r0, #1
 800880e:	d0ab      	beq.n	8008768 <_printf_i+0x164>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	079b      	lsls	r3, r3, #30
 8008814:	d413      	bmi.n	800883e <_printf_i+0x23a>
 8008816:	68e0      	ldr	r0, [r4, #12]
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	4298      	cmp	r0, r3
 800881c:	bfb8      	it	lt
 800881e:	4618      	movlt	r0, r3
 8008820:	e7a4      	b.n	800876c <_printf_i+0x168>
 8008822:	2301      	movs	r3, #1
 8008824:	4632      	mov	r2, r6
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	47d0      	blx	sl
 800882c:	3001      	adds	r0, #1
 800882e:	d09b      	beq.n	8008768 <_printf_i+0x164>
 8008830:	3501      	adds	r5, #1
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	9903      	ldr	r1, [sp, #12]
 8008836:	1a5b      	subs	r3, r3, r1
 8008838:	42ab      	cmp	r3, r5
 800883a:	dcf2      	bgt.n	8008822 <_printf_i+0x21e>
 800883c:	e7eb      	b.n	8008816 <_printf_i+0x212>
 800883e:	2500      	movs	r5, #0
 8008840:	f104 0619 	add.w	r6, r4, #25
 8008844:	e7f5      	b.n	8008832 <_printf_i+0x22e>
 8008846:	bf00      	nop
 8008848:	08008b61 	.word	0x08008b61
 800884c:	08008b72 	.word	0x08008b72

08008850 <_sbrk_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	; (800886c <_sbrk_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7f8 fa4c 	bl	8000cf8 <_sbrk>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_sbrk_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_sbrk_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20001cac 	.word	0x20001cac

08008870 <__sread>:
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	f000 f8a0 	bl	80089bc <_read_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	bfab      	itete	ge
 8008880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008882:	89a3      	ldrhlt	r3, [r4, #12]
 8008884:	181b      	addge	r3, r3, r0
 8008886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800888a:	bfac      	ite	ge
 800888c:	6563      	strge	r3, [r4, #84]	; 0x54
 800888e:	81a3      	strhlt	r3, [r4, #12]
 8008890:	bd10      	pop	{r4, pc}

08008892 <__swrite>:
 8008892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	461f      	mov	r7, r3
 8008898:	898b      	ldrh	r3, [r1, #12]
 800889a:	05db      	lsls	r3, r3, #23
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	4616      	mov	r6, r2
 80088a2:	d505      	bpl.n	80088b0 <__swrite+0x1e>
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2200      	movs	r2, #0
 80088ac:	f000 f868 	bl	8008980 <_lseek_r>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	4632      	mov	r2, r6
 80088be:	463b      	mov	r3, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	f000 b817 	b.w	80088f8 <_write_r>

080088ca <__sseek>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	460c      	mov	r4, r1
 80088ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d2:	f000 f855 	bl	8008980 <_lseek_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	bf15      	itete	ne
 80088dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80088de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088e6:	81a3      	strheq	r3, [r4, #12]
 80088e8:	bf18      	it	ne
 80088ea:	81a3      	strhne	r3, [r4, #12]
 80088ec:	bd10      	pop	{r4, pc}

080088ee <__sclose>:
 80088ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f2:	f000 b813 	b.w	800891c <_close_r>
	...

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f8 f9a5 	bl	8000c56 <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20001cac 	.word	0x20001cac

0800891c <_close_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d06      	ldr	r5, [pc, #24]	; (8008938 <_close_r+0x1c>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	f7f8 f9b1 	bl	8000c8e <_close>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_close_r+0x1a>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_close_r+0x1a>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20001cac 	.word	0x20001cac

0800893c <_fstat_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d07      	ldr	r5, [pc, #28]	; (800895c <_fstat_r+0x20>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	f7f8 f9ac 	bl	8000ca6 <_fstat>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d102      	bne.n	8008958 <_fstat_r+0x1c>
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	b103      	cbz	r3, 8008958 <_fstat_r+0x1c>
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	bd38      	pop	{r3, r4, r5, pc}
 800895a:	bf00      	nop
 800895c:	20001cac 	.word	0x20001cac

08008960 <_isatty_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	; (800897c <_isatty_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 f9ab 	bl	8000cc6 <_isatty>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_isatty_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_isatty_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20001cac 	.word	0x20001cac

08008980 <_lseek_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_lseek_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 f9a4 	bl	8000cdc <_lseek>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_lseek_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_lseek_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20001cac 	.word	0x20001cac

080089a4 <__malloc_lock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__malloc_lock+0x8>)
 80089a6:	f7ff bb55 	b.w	8008054 <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	20001ca4 	.word	0x20001ca4

080089b0 <__malloc_unlock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_unlock+0x8>)
 80089b2:	f7ff bb50 	b.w	8008056 <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	20001ca4 	.word	0x20001ca4

080089bc <_read_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_read_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f8 f926 	bl	8000c1c <_read>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_read_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_read_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20001cac 	.word	0x20001cac

080089e0 <_init>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr

080089ec <_fini>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	bf00      	nop
 80089f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f2:	bc08      	pop	{r3}
 80089f4:	469e      	mov	lr, r3
 80089f6:	4770      	bx	lr
