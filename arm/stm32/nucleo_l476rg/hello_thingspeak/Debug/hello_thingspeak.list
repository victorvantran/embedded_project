
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e8  080089e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f0  080089f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080089f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  20000074  08008a6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d3c  08008a6c  00021d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cfc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004054  00000000  00000000  00041da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00045df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00047690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b22  00000000  00000000  00048db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0e9  00000000  00000000  0004e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100166  00000000  00000000  000689bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168b21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f14  00000000  00000000  00168b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008858 	.word	0x08008858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008858 	.word	0x08008858

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x20>)
 800058a:	f003 fac7 	bl	8003b1c <HAL_UART_Transmit>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20001b0c 	.word	0x20001b0c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fef8 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f824 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f930 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f8f8 	bl	80007a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8c6 	bl	8000740 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f894 	bl	80006e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vInitThingSpeak(&xUART2RingBuffer, &huart2);
 80005b8:	4908      	ldr	r1, [pc, #32]	; (80005dc <main+0x40>)
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <main+0x44>)
 80005bc:	f000 fcd9 	bl	8000f72 <vInitThingSpeak>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f004 fbda 	bl	8004d78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of thingspeakTask */
  thingspeakTaskHandle = osThreadNew(StartThingSpeakTask, NULL, &thingspeakTask_attributes);
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <main+0x48>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x4c>)
 80005ca:	f004 fc1f 	bl	8004e0c <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <main+0x50>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f004 fbf4 	bl	8004dc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x3c>
 80005da:	bf00      	nop
 80005dc:	20001b0c 	.word	0x20001b0c
 80005e0:	20001bdc 	.word	0x20001bdc
 80005e4:	080088e4 	.word	0x080088e4
 80005e8:	080008dd 	.word	0x080008dd
 80005ec:	200019f4 	.word	0x200019f4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0b8      	sub	sp, #224	; 0xe0
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 f944 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2288      	movs	r2, #136	; 0x88
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f936 	bl	800788c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000640:	2301      	movs	r3, #1
 8000642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064c:	2307      	movs	r3, #7
 800064e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fc60 	bl	8001f28 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066e:	f000 f951 	bl	8000914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f82c 	bl	80026f4 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a2:	f000 f937 	bl	8000914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006a6:	2303      	movs	r3, #3
 80006a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006aa:	2300      	movs	r3, #0
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fa55 	bl	8002b64 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006c0:	f000 f928 	bl	8000914 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c8:	f001 fbd8 	bl	8001e7c <HAL_PWREx_ControlVoltageScaling>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006d2:	f000 f91f 	bl	8000914 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	37e0      	adds	r7, #224	; 0xe0
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART1_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART1_UART_Init+0x58>)
 8000724:	f003 f9ac 	bl	8003a80 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f8f1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20001a88 	.word	0x20001a88
 800073c:	40013800 	.word	0x40013800

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART2_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000784:	f003 f97c 	bl	8003a80 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f8c1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20001b0c 	.word	0x20001b0c
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_DMA_Init+0x68>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_DMA_Init+0x68>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_DMA_Init+0x68>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	200e      	movs	r0, #14
 80007c4:	f000 fede 	bl	8001584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007c8:	200e      	movs	r0, #14
 80007ca:	f000 fef7 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2105      	movs	r1, #5
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 fed6 	bl	8001584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007d8:	200f      	movs	r0, #15
 80007da:	f000 feef 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2010      	movs	r0, #16
 80007e4:	f000 fece 	bl	8001584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007e8:	2010      	movs	r0, #16
 80007ea:	f000 fee7 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	2011      	movs	r0, #17
 80007f4:	f000 fec6 	bl	8001584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007f8:	2011      	movs	r0, #17
 80007fa:	f000 fedf 	bl	80015bc <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_GPIO_Init+0xc4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f001 fad1 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_GPIO_Init+0xc8>)
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_GPIO_Init+0xcc>)
 80008a4:	f001 f91a 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f001 f90b 	bl	8001adc <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	10210000 	.word	0x10210000
 80008d8:	48000800 	.word	0x48000800

080008dc <StartThingSpeakTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThingSpeakTask */
void StartThingSpeakTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	//printf("hello\r\n");
  	osDelay(5000);
 80008e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e8:	f004 fb22 	bl	8004f30 <osDelay>
 80008ec:	e7fa      	b.n	80008e4 <StartThingSpeakTask+0x8>
	...

080008f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000902:	f000 fd67 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40001000 	.word	0x40001000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_MspInit+0x4c>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_MspInit+0x4c>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x4c>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fe11 	bl	8001584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a8a      	ldr	r2, [pc, #552]	; (8000bb8 <HAL_UART_MspInit+0x248>)
 800098e:	4293      	cmp	r3, r2
 8000990:	f040 8085 	bne.w	8000a9e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000994:	4b89      	ldr	r3, [pc, #548]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000998:	4a88      	ldr	r2, [pc, #544]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6613      	str	r3, [r2, #96]	; 0x60
 80009a0:	4b86      	ldr	r3, [pc, #536]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 80009a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a82      	ldr	r2, [pc, #520]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b80      	ldr	r3, [pc, #512]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d6:	2307      	movs	r3, #7
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 f87a 	bl	8001adc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009e8:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 80009ea:	4a76      	ldr	r2, [pc, #472]	; (8000bc4 <HAL_UART_MspInit+0x254>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80009ee:	4b74      	ldr	r3, [pc, #464]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f4:	4b72      	ldr	r3, [pc, #456]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fa:	4b71      	ldr	r3, [pc, #452]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a00:	4b6f      	ldr	r3, [pc, #444]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a06:	4b6e      	ldr	r3, [pc, #440]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0c:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a12:	4b6b      	ldr	r3, [pc, #428]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a18:	4b69      	ldr	r3, [pc, #420]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a1e:	4868      	ldr	r0, [pc, #416]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a20:	f000 fdda 	bl	80015d8 <HAL_DMA_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000a2a:	f7ff ff73 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a32:	671a      	str	r2, [r3, #112]	; 0x70
 8000a34:	4a62      	ldr	r2, [pc, #392]	; (8000bc0 <HAL_UART_MspInit+0x250>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a3a:	4b63      	ldr	r3, [pc, #396]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a3c:	4a63      	ldr	r2, [pc, #396]	; (8000bcc <HAL_UART_MspInit+0x25c>)
 8000a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000a40:	4b61      	ldr	r3, [pc, #388]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a46:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a48:	2210      	movs	r2, #16
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b5e      	ldr	r3, [pc, #376]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a58:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a64:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a70:	4855      	ldr	r0, [pc, #340]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a72:	f000 fdb1 	bl	80015d8 <HAL_DMA_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000a7c:	f7ff ff4a 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a84:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a86:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <HAL_UART_MspInit+0x258>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2105      	movs	r1, #5
 8000a90:	2025      	movs	r0, #37	; 0x25
 8000a92:	f000 fd77 	bl	8001584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a96:	2025      	movs	r0, #37	; 0x25
 8000a98:	f000 fd90 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9c:	e088      	b.n	8000bb0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <HAL_UART_MspInit+0x260>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f040 8083 	bne.w	8000bb0 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <HAL_UART_MspInit+0x24c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fff0 	bl	8001adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <HAL_UART_MspInit+0x268>)
 8000b00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b32:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b34:	f000 fd50 	bl	80015d8 <HAL_DMA_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000b3e:	f7ff fee9 	bl	8000914 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b46:	671a      	str	r2, [r3, #112]	; 0x70
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_UART_MspInit+0x264>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b50:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <HAL_UART_MspInit+0x270>)
 8000b52:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b86:	f000 fd27 	bl	80015d8 <HAL_DMA_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8000b90:	f7ff fec0 	bl	8000914 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b98:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_UART_MspInit+0x26c>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	2026      	movs	r0, #38	; 0x26
 8000ba6:	f000 fced 	bl	8001584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000baa:	2026      	movs	r0, #38	; 0x26
 8000bac:	f000 fd06 	bl	80015bc <HAL_NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	200019f8 	.word	0x200019f8
 8000bc4:	40020058 	.word	0x40020058
 8000bc8:	200019ac 	.word	0x200019ac
 8000bcc:	40020044 	.word	0x40020044
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	20001964 	.word	0x20001964
 8000bd8:	4002006c 	.word	0x4002006c
 8000bdc:	20001a40 	.word	0x20001a40
 8000be0:	40020080 	.word	0x40020080

08000be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2036      	movs	r0, #54	; 0x36
 8000bfa:	f000 fcc3 	bl	8001584 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfe:	2036      	movs	r0, #54	; 0x36
 8000c00:	f000 fcdc 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_InitTick+0x9c>)
 8000c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_InitTick+0x9c>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_InitTick+0x9c>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 ff0a 	bl	8002a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2c:	f001 fedc 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8000c30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_InitTick+0xa0>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9b      	lsrs	r3, r3, #18
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_InitTick+0xa8>)
 8000c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c62:	f002 fc3b 	bl	80034dc <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <HAL_InitTick+0xa4>)
 8000c6e:	f002 fc97 	bl	80035a0 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	431bde83 	.word	0x431bde83
 8000c88:	20001b90 	.word	0x20001b90
 8000c8c:	40001000 	.word	0x40001000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <DMA1_Channel4_IRQHandler+0x10>)
 8000cc2:	f000 fe20 	bl	8001906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200019ac 	.word	0x200019ac

08000cd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <DMA1_Channel5_IRQHandler+0x10>)
 8000cd6:	f000 fe16 	bl	8001906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200019f8 	.word	0x200019f8

08000ce4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Channel6_IRQHandler+0x10>)
 8000cea:	f000 fe0c 	bl	8001906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20001964 	.word	0x20001964

08000cf8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA1_Channel7_IRQHandler+0x10>)
 8000cfe:	f000 fe02 	bl	8001906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001a40 	.word	0x20001a40

08000d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART1_IRQHandler+0x10>)
 8000d12:	f003 f849 	bl	8003da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001a88 	.word	0x20001a88

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <USART2_IRQHandler+0x14>)
 8000d26:	f003 f83f 	bl	8003da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_ThingSpeak_IRQHandler(&huart2);
 8000d2a:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART2_IRQHandler+0x14>)
 8000d2c:	f000 f8e4 	bl	8000ef8 <USER_ThingSpeak_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20001b0c 	.word	0x20001b0c

08000d38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM6_DAC_IRQHandler+0x10>)
 8000d3e:	f002 fc9f 	bl	8003680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20001b90 	.word	0x20001b90

08000d4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
	}

return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fbe9 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x12>
	}
	return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f006 fce0 	bl	800781c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20018000 	.word	0x20018000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	20001d40 	.word	0x20001d40

08000e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <SystemInit+0x5c>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <SystemInit+0x5c>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <SystemInit+0x60>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <SystemInit+0x60>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <SystemInit+0x60>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <SystemInit+0x60>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <SystemInit+0x60>)
 8000ec0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ec4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ec8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SystemInit+0x60>)
 8000ecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <SystemInit+0x60>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <SystemInit+0x60>)
 8000ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SystemInit+0x60>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <USER_ThingSpeak_IRQHandler>:


UARTRingBufferHandle_t xUART2RingBuffer;

void USER_ThingSpeak_IRQHandler(UART_HandleTypeDef *pxHUART)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(pxHUART, UART_FLAG_IDLE) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d106      	bne.n	8000f1c <USER_ThingSpeak_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(pxHUART);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2210      	movs	r2, #16
 8000f14:	621a      	str	r2, [r3, #32]

		USER_UART_IDLECallback(&xUART2RingBuffer);
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <USER_ThingSpeak_IRQHandler+0x2c>)
 8000f18:	f000 f86c 	bl	8000ff4 <USER_UART_IDLECallback>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20001bdc 	.word	0x20001bdc

08000f28 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if (huart == xUART2RingBuffer.huart)
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_UART_RxCpltCallback+0x30>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d108      	bne.n	8000f4c <HAL_UART_RxCpltCallback+0x24>
	{
		xUART2RingBuffer.xRXBuffer.uRollOver++;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_UART_RxCpltCallback+0x30>)
 8000f3c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <HAL_UART_RxCpltCallback+0x30>)
 8000f48:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20001bdc 	.word	0x20001bdc

08000f5c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f64:	bf00      	nop
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <vInitThingSpeak>:



/* IMPLEMENTATION */
void vInitThingSpeak(UARTRingBufferHandle_t *pxUARTRingBuffer, UART_HandleTypeDef *huart)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	// Structure
	pxUARTRingBuffer->huart = huart;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	601a      	str	r2, [r3, #0]
	memset(pxUARTRingBuffer->xRXBuffer.puDMABuffer, 0, sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fc7e 	bl	800788c <memset>
	pxUARTRingBuffer->xRXBuffer.uHeadIndex = 0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	pxUARTRingBuffer->xRXBuffer.uTailIndex = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	pxUARTRingBuffer->xRXBuffer.uRollOver = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	memset(pxUARTRingBuffer->xTXBuffer.puDMABuffer, 0, sizeof(pxUARTRingBuffer->xTXBuffer.puDMABuffer));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3388      	adds	r3, #136	; 0x88
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fc6b 	bl	800788c <memset>
	pxUARTRingBuffer->xTXBuffer.uHeadIndex = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	pxUARTRingBuffer->xTXBuffer.uTailIndex = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	pxUARTRingBuffer->xTXBuffer.uRollOver = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b

	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0210 	orr.w	r2, r2, #16
 8000fdc:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxUARTRingBuffer->xRXBuffer.puDMABuffer, sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f002 fe2c 	bl	8003c44 <HAL_UART_Receive_DMA>

  // Transfer DMA Buffer
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(UARTRingBufferHandle_t *pxUARTRingBuffer)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	// Tail catch up to head
	pxUARTRingBuffer->xRXBuffer.uHeadIndex = sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer) - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8000ffc:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <USER_UART_IDLECallback+0x1ec>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

	// Task notification...
	uint16_t uTailIndex = pxUARTRingBuffer->xRXBuffer.uTailIndex;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001018:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t uHeadIndex = pxUARTRingBuffer->xRXBuffer.uHeadIndex;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001020:	867b      	strh	r3, [r7, #50]	; 0x32
	uint8_t uRollOver = pxUARTRingBuffer->xRXBuffer.uRollOver;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001028:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t uParseIndex = uTailIndex;
 800102c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800102e:	86bb      	strh	r3, [r7, #52]	; 0x34

	if (uRollOver == 0)
 8001030:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001034:	2b00      	cmp	r3, #0
 8001036:	d12b      	bne.n	8001090 <USER_UART_IDLECallback+0x9c>
	{
		while (uParseIndex != uHeadIndex)
 8001038:	e025      	b.n	8001086 <USER_UART_IDLECallback+0x92>
		{
			if (pxUARTRingBuffer->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 800103a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	791b      	ldrb	r3, [r3, #4]
 8001042:	2b0d      	cmp	r3, #13
 8001044:	d11c      	bne.n	8001080 <USER_UART_IDLECallback+0x8c>
			{
				if (uParseIndex - uTailIndex > 0)
 8001046:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0c      	ble.n	800106a <USER_UART_IDLECallback+0x76>
				{
					char *candidate = (char *)pxUARTRingBuffer->xRXBuffer.puDMABuffer + uTailIndex;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1d1a      	adds	r2, r3, #4
 8001054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
					size_t candidateLength = uParseIndex - uTailIndex;
 800105a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800105c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	60bb      	str	r3, [r7, #8]

					vHandleCandidateCommand(candidate, candidateLength);
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f000 f907 	bl	8001278 <vHandleCandidateCommand>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer) ;
 800106a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800106c:	3301      	adds	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001074:	86fb      	strh	r3, [r7, #54]	; 0x36
				pxUARTRingBuffer->xRXBuffer.uTailIndex = uTailIndex;
 8001076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			}
			uParseIndex++;
 8001080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001082:	3301      	adds	r3, #1
 8001084:	86bb      	strh	r3, [r7, #52]	; 0x34
		while (uParseIndex != uHeadIndex)
 8001086:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001088:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800108a:	429a      	cmp	r2, r3
 800108c:	d1d5      	bne.n	800103a <USER_UART_IDLECallback+0x46>
 800108e:	e098      	b.n	80011c2 <USER_UART_IDLECallback+0x1ce>
		}
	}
	else if (uRollOver == 1)
 8001090:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001094:	2b01      	cmp	r3, #1
 8001096:	f040 8089 	bne.w	80011ac <USER_UART_IDLECallback+0x1b8>
	{
		if (uParseIndex > uHeadIndex)
 800109a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800109c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800109e:	429a      	cmp	r2, r3
 80010a0:	d978      	bls.n	8001194 <USER_UART_IDLECallback+0x1a0>
		{
			while (uParseIndex < sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer) )
 80010a2:	e025      	b.n	80010f0 <USER_UART_IDLECallback+0xfc>
			{
				if (pxUARTRingBuffer->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 80010a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	d11c      	bne.n	80010ea <USER_UART_IDLECallback+0xf6>
				{
					if (uParseIndex - uTailIndex > 0)
 80010b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dd0c      	ble.n	80010d4 <USER_UART_IDLECallback+0xe0>
					{
						char *candidate = (char *)pxUARTRingBuffer->xRXBuffer.puDMABuffer + uTailIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1d1a      	adds	r2, r3, #4
 80010be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
						size_t candidateLength = uParseIndex - uTailIndex;
 80010c4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	613b      	str	r3, [r7, #16]

						vHandleCandidateCommand(candidate, candidateLength);
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f000 f8d2 	bl	8001278 <vHandleCandidateCommand>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer);
 80010d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010d6:	3301      	adds	r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010de:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxUARTRingBuffer->xRXBuffer.uTailIndex = uTailIndex;
 80010e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				}
				uParseIndex++;
 80010ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010ec:	3301      	adds	r3, #1
 80010ee:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex < sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer) )
 80010f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010f2:	2b7f      	cmp	r3, #127	; 0x7f
 80010f4:	d9d6      	bls.n	80010a4 <USER_UART_IDLECallback+0xb0>
			}

			uParseIndex = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	86bb      	strh	r3, [r7, #52]	; 0x34

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 80010fa:	e046      	b.n	800118a <USER_UART_IDLECallback+0x196>
			{
				if (pxUARTRingBuffer->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
 80010fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	791b      	ldrb	r3, [r3, #4]
 8001104:	2b0d      	cmp	r3, #13
 8001106:	d13d      	bne.n	8001184 <USER_UART_IDLECallback+0x190>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 8001108:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800110a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800110c:	429a      	cmp	r2, r3
 800110e:	d91c      	bls.n	800114a <USER_UART_IDLECallback+0x156>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 8001110:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001114:	429a      	cmp	r2, r3
 8001116:	d02a      	beq.n	800116e <USER_UART_IDLECallback+0x17a>
						{
							char *candidateFirst = (char *)(pxUARTRingBuffer->xRXBuffer.puDMABuffer + uTailIndex);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1d1a      	adds	r2, r3, #4
 800111c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800111e:	4413      	add	r3, r2
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateFirstLength = sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer) - uTailIndex;
 8001122:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001124:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001128:	623b      	str	r3, [r7, #32]
							char *candidateSecond = (char *)(pxUARTRingBuffer->xRXBuffer.puDMABuffer);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	61fb      	str	r3, [r7, #28]
							size_t candidateSecondLength = uParseIndex;
 8001130:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001132:	61bb      	str	r3, [r7, #24]

							vHandleCandidateCommandSplit(candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	6a39      	ldr	r1, [r7, #32]
 800113a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800113c:	f000 f8ca 	bl	80012d4 <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							pxUARTRingBuffer->xRXBuffer.uRollOver = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001148:	e011      	b.n	800116e <USER_UART_IDLECallback+0x17a>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 800114a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800114c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	dd0c      	ble.n	800116e <USER_UART_IDLECallback+0x17a>
						{
							char *candidate = (char *)pxUARTRingBuffer->xRXBuffer.puDMABuffer + uTailIndex;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1d1a      	adds	r2, r3, #4
 8001158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800115a:	4413      	add	r3, r2
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t candidateLength = uParseIndex - uTailIndex;
 800115e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28

							vHandleCandidateCommand(candidate, candidateLength);
 8001166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800116a:	f000 f885 	bl	8001278 <vHandleCandidateCommand>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxUARTRingBuffer->xRXBuffer.puDMABuffer);
 800116e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001170:	3301      	adds	r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001178:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxUARTRingBuffer->xRXBuffer.uTailIndex = uTailIndex;
 800117a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800117c:	b2da      	uxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				}

				uParseIndex++;
 8001184:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001186:	3301      	adds	r3, #1
 8001188:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex != uHeadIndex)
 800118a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800118c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800118e:	429a      	cmp	r2, r3
 8001190:	d1b4      	bne.n	80010fc <USER_UART_IDLECallback+0x108>
 8001192:	e016      	b.n	80011c2 <USER_UART_IDLECallback+0x1ce>
			}
		}
		else
		{
			// Reset due to too overflow rx buffer due to too much data received before it could all process
			HAL_UART_DMAStop(pxUARTRingBuffer->huart);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fd97 	bl	8003ccc <HAL_UART_DMAStop>
			vInitThingSpeak(pxUARTRingBuffer, pxUARTRingBuffer->huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fee4 	bl	8000f72 <vInitThingSpeak>
 80011aa:	e00a      	b.n	80011c2 <USER_UART_IDLECallback+0x1ce>
		}
	}
	else
	{
		// Reset due to too overflow rx buffer due to too much data received before it could all process
		HAL_UART_DMAStop(pxUARTRingBuffer->huart);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fd8b 	bl	8003ccc <HAL_UART_DMAStop>
		vInitThingSpeak(pxUARTRingBuffer, pxUARTRingBuffer->huart);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fed8 	bl	8000f72 <vInitThingSpeak>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", pxUARTRingBuffer->xRXBuffer.uTailIndex, pxUARTRingBuffer->xRXBuffer.uHeadIndex);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80011c8:	4619      	mov	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80011d0:	461a      	mov	r2, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <USER_UART_IDLECallback+0x1f0>)
 80011d4:	f006 fb62 	bl	800789c <iprintf>

}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20001964 	.word	0x20001964
 80011e4:	08008880 	.word	0x08008880

080011e8 <bCommandMatch>:



uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7fe ffeb 	bl	80001d0 <strlen>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d109      	bne.n	8001216 <bCommandMatch+0x2e>
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f006 fbd6 	bl	80079b8 <strncmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <bCommandMatch+0x2e>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <bCommandMatch+0x30>
 8001216:	2300      	movs	r3, #0
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4601      	mov	r1, r0
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4413      	add	r3, r2
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 800123e:	4299      	cmp	r1, r3
 8001240:	d114      	bne.n	800126c <bCommandSplitMatch+0x4a>
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f006 fbb6 	bl	80079b8 <strncmp>
 800124c:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <bCommandSplitMatch+0x4a>
			(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fbab 	bl	80079b8 <strncmp>
 8001262:	4603      	mov	r3, r0
			(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <bCommandSplitMatch+0x4a>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <bCommandSplitMatch+0x4c>
 800126c:	2300      	movs	r3, #0
 800126e:	b2db      	uxtb	r3, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <vHandleCandidateCommand>:


void vHandleCandidateCommand(const char *candidate, size_t candidateLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	if (bCommandMatch("ON", candidate, candidateLength))
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <vHandleCandidateCommand+0x48>)
 8001288:	f7ff ffae 	bl	80011e8 <bCommandMatch>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <vHandleCandidateCommand+0x22>
	{
		printf("SET LIGHT\r\n");
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <vHandleCandidateCommand+0x4c>)
 8001294:	f006 fb88 	bl	80079a8 <puts>
	}
	else
	{
		printf("INVLD\r\n");
	}
}
 8001298:	e00e      	b.n	80012b8 <vHandleCandidateCommand+0x40>
	else if (bCommandMatch("OFF", candidate, candidateLength))
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <vHandleCandidateCommand+0x50>)
 80012a0:	f7ff ffa2 	bl	80011e8 <bCommandMatch>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <vHandleCandidateCommand+0x3a>
		printf("UNSET LIGHT\r\n");
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <vHandleCandidateCommand+0x54>)
 80012ac:	f006 fb7c 	bl	80079a8 <puts>
}
 80012b0:	e002      	b.n	80012b8 <vHandleCandidateCommand+0x40>
		printf("INVLD\r\n");
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <vHandleCandidateCommand+0x58>)
 80012b4:	f006 fb78 	bl	80079a8 <puts>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	080088a0 	.word	0x080088a0
 80012c4:	080088a4 	.word	0x080088a4
 80012c8:	080088b0 	.word	0x080088b0
 80012cc:	080088b4 	.word	0x080088b4
 80012d0:	080088c4 	.word	0x080088c4

080012d4 <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68f9      	ldr	r1, [r7, #12]
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <vHandleCandidateCommandSplit+0x58>)
 80012ee:	f7ff ff98 	bl	8001222 <bCommandSplitMatch>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <vHandleCandidateCommandSplit+0x5c>)
 80012fa:	f006 fb55 	bl	80079a8 <puts>
	}
	else
	{
		printf("INVLD\r\n");
	}
}
 80012fe:	e011      	b.n	8001324 <vHandleCandidateCommandSplit+0x50>
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <vHandleCandidateCommandSplit+0x60>)
 800130c:	f7ff ff89 	bl	8001222 <bCommandSplitMatch>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <vHandleCandidateCommandSplit+0x4a>
		printf("UNSET LIGHT\r\n");
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <vHandleCandidateCommandSplit+0x64>)
 8001318:	f006 fb46 	bl	80079a8 <puts>
}
 800131c:	e002      	b.n	8001324 <vHandleCandidateCommandSplit+0x50>
		printf("INVLD\r\n");
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <vHandleCandidateCommandSplit+0x68>)
 8001320:	f006 fb42 	bl	80079a8 <puts>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	080088a0 	.word	0x080088a0
 8001330:	080088a4 	.word	0x080088a4
 8001334:	080088b0 	.word	0x080088b0
 8001338:	080088b4 	.word	0x080088b4
 800133c:	080088c4 	.word	0x080088c4

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fda6 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
	ldr	r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopForever+0x16>)
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f006 fa5b 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f913 	bl	800059c <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800137c:	080089f8 	.word	0x080089f8
	ldr	r0, =_sdata
 8001380:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001384:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001388:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800138c:	20001d3c 	.word	0x20001d3c

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_Init+0x3c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x3c>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f8df 	bl	800156e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc17 	bl	8000be4 <HAL_InitTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	e001      	b.n	80013c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c2:	f7ff faad 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20001ce8 	.word	0x20001ce8

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20001ce8 	.word	0x20001ce8

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff4c 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001596:	f7ff ff61 	bl	800145c <__NVIC_GetPriorityGrouping>
 800159a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff ffb1 	bl	8001508 <NVIC_EncodePriority>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff80 	bl	80014b4 <__NVIC_SetPriority>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff54 	bl	8001478 <__NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e098      	b.n	800171c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_DMA_Init+0x150>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d80f      	bhi.n	8001616 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_DMA_Init+0x154>)
 80015fe:	4413      	add	r3, r2
 8001600:	4a4b      	ldr	r2, [pc, #300]	; (8001730 <HAL_DMA_Init+0x158>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_DMA_Init+0x15c>)
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
 8001614:	e00e      	b.n	8001634 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <HAL_DMA_Init+0x160>)
 800161e:	4413      	add	r3, r2
 8001620:	4a43      	ldr	r2, [pc, #268]	; (8001730 <HAL_DMA_Init+0x158>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	009a      	lsls	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a42      	ldr	r2, [pc, #264]	; (800173c <HAL_DMA_Init+0x164>)
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800164a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800168e:	d039      	beq.n	8001704 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_DMA_Init+0x15c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11a      	bne.n	80016d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_DMA_Init+0x168>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 031c 	and.w	r3, r3, #28
 80016a6:	210f      	movs	r1, #15
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4924      	ldr	r1, [pc, #144]	; (8001740 <HAL_DMA_Init+0x168>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_DMA_Init+0x168>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 031c 	and.w	r3, r3, #28
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	491d      	ldr	r1, [pc, #116]	; (8001740 <HAL_DMA_Init+0x168>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
 80016ce:	e019      	b.n	8001704 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_DMA_Init+0x16c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f003 031c 	and.w	r3, r3, #28
 80016dc:	210f      	movs	r1, #15
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4917      	ldr	r1, [pc, #92]	; (8001744 <HAL_DMA_Init+0x16c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_DMA_Init+0x16c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 031c 	and.w	r3, r3, #28
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	4911      	ldr	r1, [pc, #68]	; (8001744 <HAL_DMA_Init+0x16c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40020407 	.word	0x40020407
 800172c:	bffdfff8 	.word	0xbffdfff8
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	40020000 	.word	0x40020000
 8001738:	bffdfbf8 	.word	0xbffdfbf8
 800173c:	40020400 	.word	0x40020400
 8001740:	400200a8 	.word	0x400200a8
 8001744:	400204a8 	.word	0x400204a8

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Start_IT+0x20>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <HAL_DMA_Start_IT+0xb8>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d13a      	bne.n	80017f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f96b 	bl	8001a7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 020e 	orr.w	r2, r2, #14
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e00f      	b.n	80017e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0204 	bic.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 020a 	orr.w	r2, r2, #10
 80017de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e005      	b.n	80017fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017fa:	2302      	movs	r3, #2
 80017fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d008      	beq.n	8001832 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e022      	b.n	8001878 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 020e 	bic.w	r2, r2, #14
 8001840:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f003 021c 	and.w	r2, r3, #28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d005      	beq.n	80018a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e029      	b.n	80018fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 020e 	bic.w	r2, r2, #14
 80018b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f003 021c 	and.w	r2, r3, #28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    }
  }
  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f003 031c 	and.w	r3, r3, #28
 8001926:	2204      	movs	r2, #4
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d026      	beq.n	8001980 <HAL_DMA_IRQHandler+0x7a>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d021      	beq.n	8001980 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0204 	bic.w	r2, r2, #4
 8001958:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f003 021c 	and.w	r2, r3, #28
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2104      	movs	r1, #4
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	2b00      	cmp	r3, #0
 8001974:	d071      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800197e:	e06c      	b.n	8001a5a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	2202      	movs	r2, #2
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d02e      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xec>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d029      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 020a 	bic.w	r2, r2, #10
 80019ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f003 021c 	and.w	r2, r3, #28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2102      	movs	r1, #2
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d038      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019f0:	e033      	b.n	8001a5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f003 031c 	and.w	r3, r3, #28
 80019fa:	2208      	movs	r2, #8
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02a      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x156>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d025      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 020e 	bic.w	r2, r2, #14
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f003 021c 	and.w	r2, r3, #28
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
}
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 021c 	and.w	r2, r3, #28
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d108      	bne.n	8001ac0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001abe:	e007      	b.n	8001ad0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e17f      	b.n	8001dec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8171 	beq.w	8001de6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d00b      	beq.n	8001b24 <HAL_GPIO_Init+0x48>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b18:	2b11      	cmp	r3, #17
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d118      	bne.n	8001bc4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x128>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b12      	cmp	r3, #18
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	6939      	ldr	r1, [r7, #16]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80ac 	beq.w	8001de6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <HAL_GPIO_Init+0x330>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a5e      	ldr	r2, [pc, #376]	; (8001e0c <HAL_GPIO_Init+0x330>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <HAL_GPIO_Init+0x330>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca6:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <HAL_GPIO_Init+0x334>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x242>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x338>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x23e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x33c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x23a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x340>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x236>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x344>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x232>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x348>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x22e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x34c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x22a>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00c      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00a      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x244>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d30:	4937      	ldr	r1, [pc, #220]	; (8001e10 <HAL_GPIO_Init+0x334>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f ae78 	bne.w	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	48000800 	.word	0x48000800
 8001e1c:	48000c00 	.word	0x48000c00
 8001e20:	48001000 	.word	0x48001000
 8001e24:	48001400 	.word	0x48001400
 8001e28:	48001800 	.word	0x48001800
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40007000 	.word	0x40007000

08001e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8a:	d130      	bne.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e98:	d038      	beq.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2232      	movs	r2, #50	; 0x32
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec0:	e002      	b.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed4:	d102      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f2      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d110      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00f      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d007      	beq.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e3d4      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3a:	4ba1      	ldr	r3, [pc, #644]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	4b9e      	ldr	r3, [pc, #632]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80e4 	beq.w	8002124 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4a>
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	f040 808b 	bne.w	8002080 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f040 8087 	bne.w	8002080 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f72:	4b93      	ldr	r3, [pc, #588]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x62>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e3ac      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x7c>
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCC_OscConfig+0x88>
 8001fa4:	4b86      	ldr	r3, [pc, #536]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d223      	bcs.n	8001ffc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fd73 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e38d      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc8:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a7c      	ldr	r2, [pc, #496]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4977      	ldr	r1, [pc, #476]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	4972      	ldr	r1, [pc, #456]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
 8001ffa:	e025      	b.n	8002048 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6f      	ldr	r2, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	496a      	ldr	r1, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201a:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	4965      	ldr	r1, [pc, #404]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fd33 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e34d      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002048:	f000 fc36 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	495a      	ldr	r1, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x29c>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x2a0>)
 8002066:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_RCC_OscConfig+0x2a4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fdb9 	bl	8000be4 <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d052      	beq.n	8002122 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	e331      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d032      	beq.n	80020ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002088:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002094:	f7ff f9b2 	bl	80013fc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209c:	f7ff f9ae 	bl	80013fc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e31a      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	493b      	ldr	r1, [pc, #236]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	4936      	ldr	r1, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
 80020ec:	e01a      	b.n	8002124 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ee:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020fa:	f7ff f97f 	bl	80013fc <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002102:	f7ff f97b 	bl	80013fc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e2e7      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x1da>
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002122:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d074      	beq.n	800221a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x21a>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d10e      	bne.n	800215a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d10b      	bne.n	800215a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d064      	beq.n	8002218 <HAL_RCC_OscConfig+0x2f0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d160      	bne.n	8002218 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e2c4      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x24a>
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e01d      	b.n	80021ae <HAL_RCC_OscConfig+0x286>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x26e>
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e00b      	b.n	80021ae <HAL_RCC_OscConfig+0x286>
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_RCC_OscConfig+0x298>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7ff f921 	bl	80013fc <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021bc:	e011      	b.n	80021e2 <HAL_RCC_OscConfig+0x2ba>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08008908 	.word	0x08008908
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f914 	bl	80013fc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e280      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4baf      	ldr	r3, [pc, #700]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2a8>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f904 	bl	80013fc <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f900 	bl	80013fc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e26c      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	4ba5      	ldr	r3, [pc, #660]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2d0>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d060      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x310>
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d119      	bne.n	8002266 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d116      	bne.n	8002266 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	4b99      	ldr	r3, [pc, #612]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x328>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e249      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b93      	ldr	r3, [pc, #588]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4990      	ldr	r1, [pc, #576]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002264:	e040      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d023      	beq.n	80022b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226e:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a8b      	ldr	r2, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f8bf 	bl	80013fc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff f8bb 	bl	80013fc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e227      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	497c      	ldr	r1, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e018      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a79      	ldr	r2, [pc, #484]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7ff f89b 	bl	80013fc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff f897 	bl	80013fc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e203      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d03c      	beq.n	800236e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01c      	beq.n	8002336 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff f876 	bl	80013fc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff f872 	bl	80013fc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1de      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ef      	beq.n	8002314 <HAL_RCC_OscConfig+0x3ec>
 8002334:	e01b      	b.n	800236e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff f859 	bl	80013fc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7ff f855 	bl	80013fc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1c1      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80a6 	beq.w	80024c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x57c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x57c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <HAL_RCC_OscConfig+0x57c>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c0:	f7ff f81c 	bl	80013fc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7ff f818 	bl	80013fc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e184      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_RCC_OscConfig+0x57c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x4d8>
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fe:	e024      	b.n	800244a <HAL_RCC_OscConfig+0x522>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d110      	bne.n	800242a <HAL_RCC_OscConfig+0x502>
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	e00f      	b.n	800244a <HAL_RCC_OscConfig+0x522>
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe ffd3 	bl	80013fc <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe ffcf 	bl	80013fc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e139      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_OscConfig+0x578>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ed      	beq.n	800245a <HAL_RCC_OscConfig+0x532>
 800247e:	e01a      	b.n	80024b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe ffbc 	bl	80013fc <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe ffb8 	bl	80013fc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d906      	bls.n	80024a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e122      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a8:	4b90      	ldr	r3, [pc, #576]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e8      	bne.n	8002488 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	4a8a      	ldr	r2, [pc, #552]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8108 	beq.w	80026e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	f040 80d0 	bne.w	800267c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024dc:	4b83      	ldr	r3, [pc, #524]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d130      	bne.n	8002552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	3b01      	subs	r3, #1
 80024fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d127      	bne.n	8002552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d11f      	bne.n	8002552 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800251c:	2a07      	cmp	r2, #7
 800251e:	bf14      	ite	ne
 8002520:	2201      	movne	r2, #1
 8002522:	2200      	moveq	r2, #0
 8002524:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002526:	4293      	cmp	r3, r2
 8002528:	d113      	bne.n	8002552 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d109      	bne.n	8002552 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d06e      	beq.n	8002630 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d069      	beq.n	800262c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002558:	4b64      	ldr	r3, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b7      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002580:	f7fe ff3c 	bl	80013fc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe ff38 	bl	80013fc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0a4      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_RCC_OscConfig+0x7c8>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025b6:	3a01      	subs	r2, #1
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c0:	0212      	lsls	r2, r2, #8
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c8:	0852      	lsrs	r2, r2, #1
 80025ca:	3a01      	subs	r2, #1
 80025cc:	0552      	lsls	r2, r2, #21
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025d4:	0852      	lsrs	r2, r2, #1
 80025d6:	3a01      	subs	r2, #1
 80025d8:	0652      	lsls	r2, r2, #25
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e0:	0912      	lsrs	r2, r2, #4
 80025e2:	0452      	lsls	r2, r2, #17
 80025e4:	430a      	orrs	r2, r1
 80025e6:	4941      	ldr	r1, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025ec:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3e      	ldr	r2, [pc, #248]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f8:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002604:	f7fe fefa 	bl	80013fc <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fef6 	bl	80013fc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e062      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	4b33      	ldr	r3, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800262a:	e05a      	b.n	80026e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e059      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d152      	bne.n	80026e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002654:	f7fe fed2 	bl	80013fc <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fece 	bl	80013fc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e03a      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x734>
 800267a:	e032      	b.n	80026e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d02d      	beq.n	80026de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a19      	ldr	r2, [pc, #100]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80026a0:	f023 0303 	bic.w	r3, r3, #3
 80026a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80026ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fea1 	bl	80013fc <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fe9d 	bl	80013fc <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e009      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x7c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x796>
 80026dc:	e001      	b.n	80026e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	f99d808c 	.word	0xf99d808c

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0c8      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d910      	bls.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4961      	ldr	r1, [pc, #388]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b0      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d04c      	beq.n	80027de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d107      	bne.n	800275c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274c:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d121      	bne.n	800279c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e09e      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d107      	bne.n	8002774 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d115      	bne.n	800279c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e092      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277c:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e086      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e07e      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279c:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 0203 	bic.w	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	493f      	ldr	r1, [pc, #252]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ae:	f7fe fe25 	bl	80013fc <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fe21 	bl	80013fc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e066      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 020c 	and.w	r2, r3, #12
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1eb      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ea:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	492c      	ldr	r1, [pc, #176]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4924      	ldr	r1, [pc, #144]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_ClockConfig+0x1b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e036      	b.n	800289a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4918      	ldr	r1, [pc, #96]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4910      	ldr	r1, [pc, #64]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286a:	f000 f825 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490c      	ldr	r1, [pc, #48]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe f9a8 	bl	8000be4 <HAL_InitTick>
 8002894:	4603      	mov	r3, r0
 8002896:	72fb      	strb	r3, [r7, #11]

  return status;
 8002898:	7afb      	ldrb	r3, [r7, #11]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08008908 	.word	0x08008908
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d0:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x34>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d121      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d11e      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002914:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d102      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e004      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d101      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_RCC_GetSysClockFreq+0x114>)
 800293e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d134      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0xa6>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xac>
 800295c:	e005      	b.n	800296a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002960:	617b      	str	r3, [r7, #20]
      break;
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002966:	617b      	str	r3, [r7, #20]
      break;
 8002968:	e002      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	3301      	adds	r3, #1
 800297c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	fb02 f203 	mul.w	r2, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	0e5b      	lsrs	r3, r3, #25
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	3301      	adds	r3, #1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029b0:	69bb      	ldr	r3, [r7, #24]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08008920 	.word	0x08008920
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029ec:	f7ff fff0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08008918 	.word	0x08008918

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a18:	f7ff ffda 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0adb      	lsrs	r3, r3, #11
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08008918 	.word	0x08008918

08002a40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetClockConfig+0x60>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40022000 	.word	0x40022000

08002aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002abc:	f7ff f9d0 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002ac0:	6178      	str	r0, [r7, #20]
 8002ac2:	e014      	b.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002adc:	f7ff f9c0 	bl	8001e60 <HAL_PWREx_GetVoltageRange>
 8002ae0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af4:	d10b      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d919      	bls.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2ba0      	cmp	r3, #160	; 0xa0
 8002b00:	d902      	bls.n	8002b08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b02:	2302      	movs	r3, #2
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e013      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b08:	2301      	movs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e010      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d902      	bls.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b14:	2303      	movs	r3, #3
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	e00a      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d102      	bne.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b20:	2302      	movs	r3, #2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	e004      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b70      	cmp	r3, #112	; 0x70
 8002b2a:	d101      	bne.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 0207 	bic.w	r2, r3, #7
 8002b38:	4909      	ldr	r1, [pc, #36]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40022000 	.word	0x40022000

08002b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b70:	2300      	movs	r3, #0
 8002b72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d041      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b88:	d02a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8e:	d824      	bhi.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b9a:	d81e      	bhi.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ba6:	e018      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ba8:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a85      	ldr	r2, [pc, #532]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bb4:	e015      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fabb 	bl	8003138 <RCCEx_PLLSAI1_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc6:	e00c      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3320      	adds	r3, #32
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fba6 	bl	8003320 <RCCEx_PLLSAI2_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd8:	e003      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be8:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf6:	4973      	ldr	r1, [pc, #460]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bfe:	e001      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d041      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c18:	d02a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c1e:	d824      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c2a:	d81e      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d010      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c36:	e018      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a61      	ldr	r2, [pc, #388]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c44:	e015      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fa73 	bl	8003138 <RCCEx_PLLSAI1_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c56:	e00c      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3320      	adds	r3, #32
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb5e 	bl	8003320 <RCCEx_PLLSAI2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c68:	e003      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c78:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c86:	494f      	ldr	r1, [pc, #316]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c8e:	e001      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a0 	beq.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc8:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fb8a 	bl	80013fc <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cea:	e009      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe fb86 	bl	80013fc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d15c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d019      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d30:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb45 	bl	80013fc <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d74:	e00b      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fb41 	bl	80013fc <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d902      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d8c:	e006      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ec      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dba:	e009      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
 8002dc0:	e006      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd0:	7c7b      	ldrb	r3, [r7, #17]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	4b9e      	ldr	r3, [pc, #632]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	4a9d      	ldr	r2, [pc, #628]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dee:	4b98      	ldr	r3, [pc, #608]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f023 0203 	bic.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	4994      	ldr	r1, [pc, #592]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e10:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 020c 	bic.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	498c      	ldr	r1, [pc, #560]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e32:	4b87      	ldr	r3, [pc, #540]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4983      	ldr	r1, [pc, #524]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	497b      	ldr	r1, [pc, #492]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	4972      	ldr	r1, [pc, #456]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e98:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	496a      	ldr	r1, [pc, #424]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eba:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	4961      	ldr	r1, [pc, #388]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002edc:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	4959      	ldr	r1, [pc, #356]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efe:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	4950      	ldr	r1, [pc, #320]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	4948      	ldr	r1, [pc, #288]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f42:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	493f      	ldr	r1, [pc, #252]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d028      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f82:	d106      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	e011      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f8c8 	bl	8003138 <RCCEx_PLLSAI1_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d028      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	491f      	ldr	r1, [pc, #124]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fec:	60d3      	str	r3, [r2, #12]
 8002fee:	e011      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f899 	bl	8003138 <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02b      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303e:	d109      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304a:	60d3      	str	r3, [r2, #12]
 800304c:	e014      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305c:	d10c      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f000 f867 	bl	8003138 <RCCEx_PLLSAI1_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02f      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003084:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003092:	4928      	ldr	r1, [pc, #160]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f844 	bl	8003138 <RCCEx_PLLSAI1_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d014      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	74bb      	strb	r3, [r7, #18]
 80030be:	e011      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3320      	adds	r3, #32
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f925 	bl	8003320 <RCCEx_PLLSAI2_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fe:	490d      	ldr	r1, [pc, #52]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	4904      	ldr	r1, [pc, #16]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800312a:	7cbb      	ldrb	r3, [r7, #18]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000

08003138 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d018      	beq.n	8003184 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003152:	4b72      	ldr	r3, [pc, #456]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0203 	and.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d10d      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
       ||
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800316a:	4b6c      	ldr	r3, [pc, #432]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
       ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d047      	beq.n	800320e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e044      	b.n	800320e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d018      	beq.n	80031be <RCCEx_PLLSAI1_Config+0x86>
 800318c:	2b03      	cmp	r3, #3
 800318e:	d825      	bhi.n	80031dc <RCCEx_PLLSAI1_Config+0xa4>
 8003190:	2b01      	cmp	r3, #1
 8003192:	d002      	beq.n	800319a <RCCEx_PLLSAI1_Config+0x62>
 8003194:	2b02      	cmp	r3, #2
 8003196:	d009      	beq.n	80031ac <RCCEx_PLLSAI1_Config+0x74>
 8003198:	e020      	b.n	80031dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d11d      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031aa:	e01a      	b.n	80031e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ac:	4b5b      	ldr	r3, [pc, #364]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d116      	bne.n	80031e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031bc:	e013      	b.n	80031e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031be:	4b57      	ldr	r3, [pc, #348]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031da:	e006      	b.n	80031ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e004      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	430b      	orrs	r3, r1
 8003208:	4944      	ldr	r1, [pc, #272]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d17d      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a40      	ldr	r2, [pc, #256]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800321e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe f8ec 	bl	80013fc <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003226:	e009      	b.n	800323c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003228:	f7fe f8e8 	bl	80013fc <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	73fb      	strb	r3, [r7, #15]
        break;
 800323a:	e005      	b.n	8003248 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800323c:	4b37      	ldr	r3, [pc, #220]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ef      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d160      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	0211      	lsls	r1, r2, #8
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	0912      	lsrs	r2, r2, #4
 800326c:	0452      	lsls	r2, r2, #17
 800326e:	430a      	orrs	r2, r1
 8003270:	492a      	ldr	r1, [pc, #168]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]
 8003276:	e027      	b.n	80032c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d112      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6892      	ldr	r2, [r2, #8]
 800328e:	0211      	lsls	r1, r2, #8
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6912      	ldr	r2, [r2, #16]
 8003294:	0852      	lsrs	r2, r2, #1
 8003296:	3a01      	subs	r2, #1
 8003298:	0552      	lsls	r2, r2, #21
 800329a:	430a      	orrs	r2, r1
 800329c:	491f      	ldr	r1, [pc, #124]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	610b      	str	r3, [r1, #16]
 80032a2:	e011      	b.n	80032c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
 80032b4:	0211      	lsls	r1, r2, #8
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6952      	ldr	r2, [r2, #20]
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4916      	ldr	r1, [pc, #88]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe f892 	bl	80013fc <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032dc:	f7fe f88e 	bl	80013fc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
          break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	4904      	ldr	r1, [pc, #16]	; (800331c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000

08003320 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800332e:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0203 	and.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d10d      	bne.n	8003366 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
       ||
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003352:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
       ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d047      	beq.n	80033f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	e044      	b.n	80033f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d018      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0x86>
 8003374:	2b03      	cmp	r3, #3
 8003376:	d825      	bhi.n	80033c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003378:	2b01      	cmp	r3, #1
 800337a:	d002      	beq.n	8003382 <RCCEx_PLLSAI2_Config+0x62>
 800337c:	2b02      	cmp	r3, #2
 800337e:	d009      	beq.n	8003394 <RCCEx_PLLSAI2_Config+0x74>
 8003380:	e020      	b.n	80033c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003382:	4b55      	ldr	r3, [pc, #340]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11d      	bne.n	80033ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e01a      	b.n	80033ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e013      	b.n	80033ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033a6:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033c2:	e006      	b.n	80033d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e004      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033da:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	430b      	orrs	r3, r1
 80033f0:	4939      	ldr	r1, [pc, #228]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d167      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a35      	ldr	r2, [pc, #212]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fd fff8 	bl	80013fc <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800340e:	e009      	b.n	8003424 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003410:	f7fd fff4 	bl	80013fc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d902      	bls.n	8003424 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	73fb      	strb	r3, [r7, #15]
        break;
 8003422:	e005      	b.n	8003430 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ef      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d14a      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800343c:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	0211      	lsls	r1, r2, #8
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68d2      	ldr	r2, [r2, #12]
 8003452:	0912      	lsrs	r2, r2, #4
 8003454:	0452      	lsls	r2, r2, #17
 8003456:	430a      	orrs	r2, r1
 8003458:	491f      	ldr	r1, [pc, #124]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	614b      	str	r3, [r1, #20]
 800345e:	e011      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003468:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0652      	lsls	r2, r2, #25
 800347c:	430a      	orrs	r2, r1
 800347e:	4916      	ldr	r1, [pc, #88]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	4313      	orrs	r3, r2
 8003482:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd ffb4 	bl	80013fc <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003496:	e009      	b.n	80034ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003498:	f7fd ffb0 	bl	80013fc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d902      	bls.n	80034ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	73fb      	strb	r3, [r7, #15]
          break;
 80034aa:	e005      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4904      	ldr	r1, [pc, #16]	; (80034d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e049      	b.n	8003582 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f841 	bl	800358a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 f9f8 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e04f      	b.n	8003658 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_TIM_Base_Start_IT+0xc4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d018      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_TIM_Base_Start_IT+0xc8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_TIM_Base_Start_IT+0xcc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <HAL_TIM_Base_Start_IT+0xd0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_TIM_Base_Start_IT+0xd4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x76>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_TIM_Base_Start_IT+0xd8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d115      	bne.n	8003642 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_TIM_Base_Start_IT+0xdc>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d015      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0xb4>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d011      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e008      	b.n	8003654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e000      	b.n	8003656 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	00010007 	.word	0x00010007

08003680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0202 	mvn.w	r2, #2
 80036ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f905 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8f7 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f908 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0204 	mvn.w	r2, #4
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f8db 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8cd 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f8de 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b08      	cmp	r3, #8
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0208 	mvn.w	r2, #8
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2204      	movs	r2, #4
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8b1 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8a3 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8b4 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b10      	cmp	r3, #16
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0210 	mvn.w	r2, #16
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2208      	movs	r2, #8
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f887 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f879 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f88a 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0201 	mvn.w	r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f876 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b80      	cmp	r3, #128	; 0x80
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f914 	bl	8003a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	d10e      	bne.n	800385e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f907 	bl	8003a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f838 	bl	80038fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0220 	mvn.w	r2, #32
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8c7 	bl	8003a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d01b      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d017      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_Base_SetConfig+0x9a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d108      	bne.n	80039bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00f      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40013400 	.word	0x40013400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e040      	b.n	8003b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc ff64 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb94 	bl	80041ec <UART_SetConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e022      	b.n	8003b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fe12 	bl	8004700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fe99 	bl	8004844 <UART_CheckIdleState>
 8003b12:	4603      	mov	r3, r0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	f040 8082 	bne.w	8003c3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_UART_Transmit+0x26>
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07a      	b.n	8003c3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Transmit+0x38>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e073      	b.n	8003c3c <HAL_UART_Transmit+0x120>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6a:	f7fd fc47 	bl	80013fc <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	d108      	bne.n	8003b9c <HAL_UART_Transmit+0x80>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e003      	b.n	8003ba4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bac:	e02d      	b.n	8003c0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fe8c 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e039      	b.n	8003c3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e008      	b.n	8003bf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cb      	bne.n	8003bae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fe58 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e005      	b.n	8003c3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d131      	bne.n	8003cbe <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_UART_Receive_DMA+0x22>
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e02a      	b.n	8003cc0 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Receive_DMA+0x34>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e023      	b.n	8003cc0 <HAL_UART_Receive_DMA+0x7c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <HAL_UART_Receive_DMA+0x84>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cac:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fe8b 	bl	80049d0 <UART_Start_Receive_DMA>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	e000      	b.n	8003cc0 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40008000 	.word	0x40008000

08003ccc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d127      	bne.n	8003d3e <HAL_UART_DMAStop+0x72>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b21      	cmp	r3, #33	; 0x21
 8003cf2:	d124      	bne.n	8003d3e <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d02:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d015      	beq.n	8003d38 <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fd79 	bl	8001808 <HAL_DMA_Abort>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fe9f 	bl	8001a64 <HAL_DMA_GetError>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d105      	bne.n	8003d38 <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e032      	b.n	8003d9e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 feb5 	bl	8004aa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d127      	bne.n	8003d9c <HAL_UART_DMAStop+0xd0>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	d124      	bne.n	8003d9c <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d60:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fd4a 	bl	8001808 <HAL_DMA_Abort>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fe70 	bl	8001a64 <HAL_DMA_GetError>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d105      	bne.n	8003d96 <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e003      	b.n	8003d9e <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fe9b 	bl	8004ad2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d113      	bne.n	8003e00 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00e      	beq.n	8003e00 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 81ce 	beq.w	8004192 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
      }
      return;
 8003dfe:	e1c8      	b.n	8004192 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80e3 	beq.w	8003fce <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4ba6      	ldr	r3, [pc, #664]	; (80040b0 <HAL_UART_IRQHandler+0x308>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80d8 	beq.w	8003fce <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_UART_IRQHandler+0xa2>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_UART_IRQHandler+0xce>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2202      	movs	r2, #2
 8003e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xfa>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e98:	f043 0202 	orr.w	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	f043 0208 	orr.w	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d011      	beq.n	8003f06 <HAL_UART_IRQHandler+0x15e>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00c      	beq.n	8003f06 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8142 	beq.w	8004196 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d004      	beq.n	8003f56 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d031      	beq.n	8003fba <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fdbb 	bl	8004ad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d123      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d013      	beq.n	8003faa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a4b      	ldr	r2, [pc, #300]	; (80040b4 <HAL_UART_IRQHandler+0x30c>)
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fc78 	bl	8001884 <HAL_DMA_Abort_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d017      	beq.n	8003fca <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00f      	b.n	8003fca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f908 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00b      	b.n	8003fca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f904 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e007      	b.n	8003fca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f900 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003fc8:	e0e5      	b.n	8004196 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fca:	bf00      	nop
    return;
 8003fcc:	e0e3      	b.n	8004196 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	f040 80a9 	bne.w	800412a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80a3 	beq.w	800412a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 809d 	beq.w	800412a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d158      	bne.n	80040b8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80c1 	beq.w	800419a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800401e:	893a      	ldrh	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	f080 80ba 	bcs.w	800419a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	893a      	ldrh	r2, [r7, #8]
 800402a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12a      	bne.n	8004094 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0210 	bic.w	r2, r2, #16
 8004088:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fbba 	bl	8001808 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f893 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040ae:	e074      	b.n	800419a <HAL_UART_IRQHandler+0x3f2>
 80040b0:	04000120 	.word	0x04000120
 80040b4:	08004c7d 	.word	0x08004c7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d060      	beq.n	800419e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0210 	bic.w	r2, r2, #16
 800411c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f856 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004128:	e039      	b.n	800419e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_UART_IRQHandler+0x3a8>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fdc6 	bl	8004cda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800414e:	e029      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01a      	beq.n	80041a2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
    }
    return;
 8004174:	e015      	b.n	80041a2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d011      	beq.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd8c 	bl	8004ca8 <UART_EndTransmit_IT>
    return;
 8004190:	e008      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
      return;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80041a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop

080041ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4bad      	ldr	r3, [pc, #692]	; (80044cc <UART_SetConfig+0x2e0>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	69f9      	ldr	r1, [r7, #28]
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4aa2      	ldr	r2, [pc, #648]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a99      	ldr	r2, [pc, #612]	; (80044d4 <UART_SetConfig+0x2e8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d121      	bne.n	80042b6 <UART_SetConfig+0xca>
 8004272:	4b99      	ldr	r3, [pc, #612]	; (80044d8 <UART_SetConfig+0x2ec>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d817      	bhi.n	80042b0 <UART_SetConfig+0xc4>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x9c>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a5 	.word	0x080042a5
 8004290:	0800429f 	.word	0x0800429f
 8004294:	080042ab 	.word	0x080042ab
 8004298:	2301      	movs	r3, #1
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e0e7      	b.n	800446e <UART_SetConfig+0x282>
 800429e:	2302      	movs	r3, #2
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e0e4      	b.n	800446e <UART_SetConfig+0x282>
 80042a4:	2304      	movs	r3, #4
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e0e1      	b.n	800446e <UART_SetConfig+0x282>
 80042aa:	2308      	movs	r3, #8
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e0de      	b.n	800446e <UART_SetConfig+0x282>
 80042b0:	2310      	movs	r3, #16
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e0db      	b.n	800446e <UART_SetConfig+0x282>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a88      	ldr	r2, [pc, #544]	; (80044dc <UART_SetConfig+0x2f0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d132      	bne.n	8004326 <UART_SetConfig+0x13a>
 80042c0:	4b85      	ldr	r3, [pc, #532]	; (80044d8 <UART_SetConfig+0x2ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d828      	bhi.n	8004320 <UART_SetConfig+0x134>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0xe8>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004321 	.word	0x08004321
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004321 	.word	0x08004321
 80042f4:	0800430f 	.word	0x0800430f
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004321 	.word	0x08004321
 8004304:	0800431b 	.word	0x0800431b
 8004308:	2300      	movs	r3, #0
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e0af      	b.n	800446e <UART_SetConfig+0x282>
 800430e:	2302      	movs	r3, #2
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e0ac      	b.n	800446e <UART_SetConfig+0x282>
 8004314:	2304      	movs	r3, #4
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e0a9      	b.n	800446e <UART_SetConfig+0x282>
 800431a:	2308      	movs	r3, #8
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e0a6      	b.n	800446e <UART_SetConfig+0x282>
 8004320:	2310      	movs	r3, #16
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e0a3      	b.n	800446e <UART_SetConfig+0x282>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6d      	ldr	r2, [pc, #436]	; (80044e0 <UART_SetConfig+0x2f4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <UART_SetConfig+0x186>
 8004330:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <UART_SetConfig+0x2ec>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800433a:	2b30      	cmp	r3, #48	; 0x30
 800433c:	d013      	beq.n	8004366 <UART_SetConfig+0x17a>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d814      	bhi.n	800436c <UART_SetConfig+0x180>
 8004342:	2b20      	cmp	r3, #32
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x16e>
 8004346:	2b20      	cmp	r3, #32
 8004348:	d810      	bhi.n	800436c <UART_SetConfig+0x180>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <UART_SetConfig+0x168>
 800434e:	2b10      	cmp	r3, #16
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x174>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x180>
 8004354:	2300      	movs	r3, #0
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e089      	b.n	800446e <UART_SetConfig+0x282>
 800435a:	2302      	movs	r3, #2
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e086      	b.n	800446e <UART_SetConfig+0x282>
 8004360:	2304      	movs	r3, #4
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	e083      	b.n	800446e <UART_SetConfig+0x282>
 8004366:	2308      	movs	r3, #8
 8004368:	76fb      	strb	r3, [r7, #27]
 800436a:	e080      	b.n	800446e <UART_SetConfig+0x282>
 800436c:	2310      	movs	r3, #16
 800436e:	76fb      	strb	r3, [r7, #27]
 8004370:	e07d      	b.n	800446e <UART_SetConfig+0x282>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5b      	ldr	r2, [pc, #364]	; (80044e4 <UART_SetConfig+0x2f8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d120      	bne.n	80043be <UART_SetConfig+0x1d2>
 800437c:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <UART_SetConfig+0x2ec>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004386:	2bc0      	cmp	r3, #192	; 0xc0
 8004388:	d013      	beq.n	80043b2 <UART_SetConfig+0x1c6>
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d814      	bhi.n	80043b8 <UART_SetConfig+0x1cc>
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d009      	beq.n	80043a6 <UART_SetConfig+0x1ba>
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d810      	bhi.n	80043b8 <UART_SetConfig+0x1cc>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x1b4>
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x1c0>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x1cc>
 80043a0:	2300      	movs	r3, #0
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e063      	b.n	800446e <UART_SetConfig+0x282>
 80043a6:	2302      	movs	r3, #2
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e060      	b.n	800446e <UART_SetConfig+0x282>
 80043ac:	2304      	movs	r3, #4
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e05d      	b.n	800446e <UART_SetConfig+0x282>
 80043b2:	2308      	movs	r3, #8
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e05a      	b.n	800446e <UART_SetConfig+0x282>
 80043b8:	2310      	movs	r3, #16
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e057      	b.n	800446e <UART_SetConfig+0x282>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a49      	ldr	r2, [pc, #292]	; (80044e8 <UART_SetConfig+0x2fc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d125      	bne.n	8004414 <UART_SetConfig+0x228>
 80043c8:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <UART_SetConfig+0x2ec>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0x21c>
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043dc:	d817      	bhi.n	800440e <UART_SetConfig+0x222>
 80043de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x210>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d811      	bhi.n	800440e <UART_SetConfig+0x222>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <UART_SetConfig+0x20a>
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d006      	beq.n	8004402 <UART_SetConfig+0x216>
 80043f4:	e00b      	b.n	800440e <UART_SetConfig+0x222>
 80043f6:	2300      	movs	r3, #0
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e038      	b.n	800446e <UART_SetConfig+0x282>
 80043fc:	2302      	movs	r3, #2
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	e035      	b.n	800446e <UART_SetConfig+0x282>
 8004402:	2304      	movs	r3, #4
 8004404:	76fb      	strb	r3, [r7, #27]
 8004406:	e032      	b.n	800446e <UART_SetConfig+0x282>
 8004408:	2308      	movs	r3, #8
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e02f      	b.n	800446e <UART_SetConfig+0x282>
 800440e:	2310      	movs	r3, #16
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e02c      	b.n	800446e <UART_SetConfig+0x282>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <UART_SetConfig+0x2e4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d125      	bne.n	800446a <UART_SetConfig+0x27e>
 800441e:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <UART_SetConfig+0x2ec>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442c:	d017      	beq.n	800445e <UART_SetConfig+0x272>
 800442e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004432:	d817      	bhi.n	8004464 <UART_SetConfig+0x278>
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004438:	d00b      	beq.n	8004452 <UART_SetConfig+0x266>
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d811      	bhi.n	8004464 <UART_SetConfig+0x278>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <UART_SetConfig+0x260>
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d006      	beq.n	8004458 <UART_SetConfig+0x26c>
 800444a:	e00b      	b.n	8004464 <UART_SetConfig+0x278>
 800444c:	2300      	movs	r3, #0
 800444e:	76fb      	strb	r3, [r7, #27]
 8004450:	e00d      	b.n	800446e <UART_SetConfig+0x282>
 8004452:	2302      	movs	r3, #2
 8004454:	76fb      	strb	r3, [r7, #27]
 8004456:	e00a      	b.n	800446e <UART_SetConfig+0x282>
 8004458:	2304      	movs	r3, #4
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e007      	b.n	800446e <UART_SetConfig+0x282>
 800445e:	2308      	movs	r3, #8
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e004      	b.n	800446e <UART_SetConfig+0x282>
 8004464:	2310      	movs	r3, #16
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e001      	b.n	800446e <UART_SetConfig+0x282>
 800446a:	2310      	movs	r3, #16
 800446c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <UART_SetConfig+0x2e4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	f040 8087 	bne.w	8004588 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800447a:	7efb      	ldrb	r3, [r7, #27]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d837      	bhi.n	80044f0 <UART_SetConfig+0x304>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x29c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044f1 	.word	0x080044f1
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044f1 	.word	0x080044f1
 8004498:	080044bb 	.word	0x080044bb
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	080044f1 	.word	0x080044f1
 80044a8:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fa9c 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6178      	str	r0, [r7, #20]
        break;
 80044b2:	e022      	b.n	80044fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <UART_SetConfig+0x300>)
 80044b6:	617b      	str	r3, [r7, #20]
        break;
 80044b8:	e01f      	b.n	80044fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe f9fd 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80044be:	6178      	str	r0, [r7, #20]
        break;
 80044c0:	e01b      	b.n	80044fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	617b      	str	r3, [r7, #20]
        break;
 80044c8:	e017      	b.n	80044fa <UART_SetConfig+0x30e>
 80044ca:	bf00      	nop
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40008000 	.word	0x40008000
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40004400 	.word	0x40004400
 80044e0:	40004800 	.word	0x40004800
 80044e4:	40004c00 	.word	0x40004c00
 80044e8:	40005000 	.word	0x40005000
 80044ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	76bb      	strb	r3, [r7, #26]
        break;
 80044f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80f1 	beq.w	80046e4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	429a      	cmp	r2, r3
 8004510:	d305      	bcc.n	800451e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	429a      	cmp	r2, r3
 800451c:	d902      	bls.n	8004524 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	76bb      	strb	r3, [r7, #26]
 8004522:	e0df      	b.n	80046e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4618      	mov	r0, r3
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	020b      	lsls	r3, r1, #8
 8004536:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800453a:	0202      	lsls	r2, r0, #8
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	6849      	ldr	r1, [r1, #4]
 8004540:	0849      	lsrs	r1, r1, #1
 8004542:	4608      	mov	r0, r1
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	1814      	adds	r4, r2, r0
 800454a:	eb43 0501 	adc.w	r5, r3, r1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	461a      	mov	r2, r3
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb fe90 	bl	8000280 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456e:	d308      	bcc.n	8004582 <UART_SetConfig+0x396>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004576:	d204      	bcs.n	8004582 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	e0b0      	b.n	80046e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	76bb      	strb	r3, [r7, #26]
 8004586:	e0ad      	b.n	80046e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004590:	d15c      	bne.n	800464c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004592:	7efb      	ldrb	r3, [r7, #27]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d828      	bhi.n	80045ea <UART_SetConfig+0x3fe>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0x3b4>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045d5 	.word	0x080045d5
 80045ac:	080045eb 	.word	0x080045eb
 80045b0:	080045db 	.word	0x080045db
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	080045eb 	.word	0x080045eb
 80045c0:	080045e3 	.word	0x080045e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c4:	f7fe fa10 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80045c8:	6178      	str	r0, [r7, #20]
        break;
 80045ca:	e013      	b.n	80045f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe fa22 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80045d0:	6178      	str	r0, [r7, #20]
        break;
 80045d2:	e00f      	b.n	80045f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d4:	4b49      	ldr	r3, [pc, #292]	; (80046fc <UART_SetConfig+0x510>)
 80045d6:	617b      	str	r3, [r7, #20]
        break;
 80045d8:	e00c      	b.n	80045f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045da:	f7fe f96d 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 80045de:	6178      	str	r0, [r7, #20]
        break;
 80045e0:	e008      	b.n	80045f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e6:	617b      	str	r3, [r7, #20]
        break;
 80045e8:	e004      	b.n	80045f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	76bb      	strb	r3, [r7, #26]
        break;
 80045f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d074      	beq.n	80046e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	005a      	lsls	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d916      	bls.n	8004646 <UART_SetConfig+0x45a>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	d212      	bcs.n	8004646 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f023 030f 	bic.w	r3, r3, #15
 8004628:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	b29a      	uxth	r2, r3
 8004636:	89fb      	ldrh	r3, [r7, #14]
 8004638:	4313      	orrs	r3, r2
 800463a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	89fa      	ldrh	r2, [r7, #14]
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e04e      	b.n	80046e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	76bb      	strb	r3, [r7, #26]
 800464a:	e04b      	b.n	80046e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464c:	7efb      	ldrb	r3, [r7, #27]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d827      	bhi.n	80046a2 <UART_SetConfig+0x4b6>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x46c>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe f9b4 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8004680:	6178      	str	r0, [r7, #20]
        break;
 8004682:	e013      	b.n	80046ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fe f9c6 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8004688:	6178      	str	r0, [r7, #20]
        break;
 800468a:	e00f      	b.n	80046ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <UART_SetConfig+0x510>)
 800468e:	617b      	str	r3, [r7, #20]
        break;
 8004690:	e00c      	b.n	80046ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe f911 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8004696:	6178      	str	r0, [r7, #20]
        break;
 8004698:	e008      	b.n	80046ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469e:	617b      	str	r3, [r7, #20]
        break;
 80046a0:	e004      	b.n	80046ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	76bb      	strb	r3, [r7, #26]
        break;
 80046aa:	bf00      	nop
    }

    if (pclk != 0U)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d018      	beq.n	80046e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	085a      	lsrs	r2, r3, #1
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	441a      	add	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d908      	bls.n	80046e0 <UART_SetConfig+0x4f4>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d204      	bcs.n	80046e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	e001      	b.n	80046e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bdb0      	pop	{r4, r5, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	00f42400 	.word	0x00f42400

08004700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01a      	beq.n	8004816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d10a      	bne.n	8004816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  }
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004854:	f7fc fdd2 	bl	80013fc <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10e      	bne.n	8004886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f82d 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e023      	b.n	80048ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d10e      	bne.n	80048b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f817 	bl	80048d6 <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e00d      	b.n	80048ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e6:	e05e      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ee:	d05a      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f0:	f7fc fd84 	bl	80013fc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d302      	bcc.n	8004906 <UART_WaitOnFlagUntilTimeout+0x30>
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11b      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004914:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e043      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02c      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d124      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004974:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e00f      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d091      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2222      	movs	r2, #34	; 0x22
 80049f8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d02b      	beq.n	8004a5a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <UART_Start_Receive_DMA+0xcc>)
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <UART_Start_Receive_DMA+0xd0>)
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <UART_Start_Receive_DMA+0xd4>)
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	2200      	movs	r2, #0
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3324      	adds	r3, #36	; 0x24
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	461a      	mov	r2, r3
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	f7fc fe87 	bl	8001748 <HAL_DMA_Start_IT>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2210      	movs	r2, #16
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e01c      	b.n	8004a94 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a70:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08004b31 	.word	0x08004b31
 8004aa0:	08004bc9 	.word	0x08004bc9
 8004aa4:	08004c01 	.word	0x08004c01

08004aa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004abe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ae8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d107      	bne.n	8004b12 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0210 	bic.w	r2, r2, #16
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12a      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b62:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b82:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0210 	bic.w	r2, r2, #16
 8004ba0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fb0e 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb8:	e002      	b.n	8004bc0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7fc f9b4 	bl	8000f28 <HAL_UART_RxCpltCallback>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d109      	bne.n	8004bf2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4619      	mov	r1, r3
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff faf2 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf0:	e002      	b.n	8004bf8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fada 	bl	80041ac <HAL_UART_RxHalfCpltCallback>
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d109      	bne.n	8004c3c <UART_DMAError+0x3c>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b21      	cmp	r3, #33	; 0x21
 8004c2c:	d106      	bne.n	8004c3c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7ff ff36 	bl	8004aa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d109      	bne.n	8004c5e <UART_DMAError+0x5e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b22      	cmp	r3, #34	; 0x22
 8004c4e:	d106      	bne.n	8004c5e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c58:	6978      	ldr	r0, [r7, #20]
 8004c5a:	f7ff ff3a 	bl	8004ad2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff faa6 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff fa90 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fc f945 	bl	8000f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <__NVIC_SetPriority>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db0a      	blt.n	8004d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <__NVIC_SetPriority+0x4c>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	440b      	add	r3, r1
 8004d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d18:	e00a      	b.n	8004d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4908      	ldr	r1, [pc, #32]	; (8004d40 <__NVIC_SetPriority+0x50>)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	3b04      	subs	r3, #4
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	761a      	strb	r2, [r3, #24]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <SysTick_Handler+0x1c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d4c:	f001 fcfe 	bl	800674c <xTaskGetSchedulerState>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d56:	f002 fae7 	bl	8007328 <xPortSysTickHandler>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010

08004d64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f06f 0004 	mvn.w	r0, #4
 8004d6e:	f7ff ffbf 	bl	8004cf0 <__NVIC_SetPriority>
#endif
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7e:	f3ef 8305 	mrs	r3, IPSR
 8004d82:	603b      	str	r3, [r7, #0]
  return(result);
 8004d84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d8a:	f06f 0305 	mvn.w	r3, #5
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	e00c      	b.n	8004dac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <osKernelInitialize+0x44>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <osKernelInitialize+0x44>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	e002      	b.n	8004dac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004daa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dac:	687b      	ldr	r3, [r7, #4]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000094 	.word	0x20000094

08004dc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc6:	f3ef 8305 	mrs	r3, IPSR
 8004dca:	603b      	str	r3, [r7, #0]
  return(result);
 8004dcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dd2:	f06f 0305 	mvn.w	r3, #5
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	e010      	b.n	8004dfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <osKernelStart+0x48>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d109      	bne.n	8004df6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004de2:	f7ff ffbf 	bl	8004d64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <osKernelStart+0x48>)
 8004de8:	2202      	movs	r2, #2
 8004dea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004dec:	f001 f866 	bl	8005ebc <vTaskStartScheduler>
      stat = osOK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	607b      	str	r3, [r7, #4]
 8004df4:	e002      	b.n	8004dfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dfc:	687b      	ldr	r3, [r7, #4]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000094 	.word	0x20000094

08004e0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08e      	sub	sp, #56	; 0x38
 8004e10:	af04      	add	r7, sp, #16
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1c:	f3ef 8305 	mrs	r3, IPSR
 8004e20:	617b      	str	r3, [r7, #20]
  return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d17e      	bne.n	8004f26 <osThreadNew+0x11a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d07b      	beq.n	8004f26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e32:	2318      	movs	r3, #24
 8004e34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d045      	beq.n	8004ed2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <osThreadNew+0x48>
        name = attr->name;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <osThreadNew+0x6e>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b38      	cmp	r3, #56	; 0x38
 8004e6c:	d805      	bhi.n	8004e7a <osThreadNew+0x6e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <osThreadNew+0x72>
        return (NULL);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e054      	b.n	8004f28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00e      	beq.n	8004eb4 <osThreadNew+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b5b      	cmp	r3, #91	; 0x5b
 8004e9c:	d90a      	bls.n	8004eb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d006      	beq.n	8004eb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <osThreadNew+0xa8>
        mem = 1;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e010      	b.n	8004ed6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10c      	bne.n	8004ed6 <osThreadNew+0xca>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <osThreadNew+0xca>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <osThreadNew+0xca>
          mem = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	e001      	b.n	8004ed6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d110      	bne.n	8004efe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ee4:	9202      	str	r2, [sp, #8]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fe0c 	bl	8005b10 <xTaskCreateStatic>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e013      	b.n	8004f26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d110      	bne.n	8004f26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fe57 	bl	8005bca <xTaskCreate>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <osThreadNew+0x11a>
            hTask = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f26:	693b      	ldr	r3, [r7, #16]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f38:	f3ef 8305 	mrs	r3, IPSR
 8004f3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <osDelay+0x1c>
    stat = osErrorISR;
 8004f44:	f06f 0305 	mvn.w	r3, #5
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e007      	b.n	8004f5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ff7c 	bl	8005e54 <vTaskDelay>
    }
  }

  return (stat);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <vApplicationGetIdleTaskMemory+0x30>)
 8004f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2280      	movs	r2, #128	; 0x80
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000098 	.word	0x20000098
 8004f98:	200000f4 	.word	0x200000f4

08004f9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4a06      	ldr	r2, [pc, #24]	; (8004fcc <vApplicationGetTimerTaskMemory+0x30>)
 8004fb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fba:	601a      	str	r2, [r3, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	200002f4 	.word	0x200002f4
 8004fcc:	20000350 	.word	0x20000350

08004fd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f103 0208 	add.w	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fe8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f103 0208 	add.w	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f103 0208 	add.w	r2, r3, #8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005088:	d103      	bne.n	8005092 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e00c      	b.n	80050ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3308      	adds	r3, #8
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e002      	b.n	80050a0 <vListInsert+0x2e>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d2f6      	bcs.n	800509a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6892      	ldr	r2, [r2, #8]
 80050fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6852      	ldr	r2, [r2, #4]
 8005104:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d103      	bne.n	8005118 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	1e5a      	subs	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005162:	f002 f84f 	bl	8007204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	3b01      	subs	r3, #1
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d114      	bne.n	80051e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3310      	adds	r3, #16
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f903 	bl	80063d0 <xTaskRemoveFromEventList>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <xQueueGenericReset+0xcc>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	e009      	b.n	80051f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3310      	adds	r3, #16
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fef2 	bl	8004fd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3324      	adds	r3, #36	; 0x24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff feed 	bl	8004fd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051f6:	f002 f835 	bl	8007264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051fa:	2301      	movs	r3, #1
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08e      	sub	sp, #56	; 0x38
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <xQueueGenericCreateStatic+0x52>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <xQueueGenericCreateStatic+0x56>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <xQueueGenericCreateStatic+0x58>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	623b      	str	r3, [r7, #32]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <xQueueGenericCreateStatic+0x7e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <xQueueGenericCreateStatic+0x82>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <xQueueGenericCreateStatic+0x84>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61fb      	str	r3, [r7, #28]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052a6:	2350      	movs	r3, #80	; 0x50
 80052a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b50      	cmp	r3, #80	; 0x50
 80052ae:	d00a      	beq.n	80052c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61bb      	str	r3, [r7, #24]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00d      	beq.n	80052ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f805 	bl	80052f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3730      	adds	r7, #48	; 0x30
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e002      	b.n	800531a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005326:	2101      	movs	r1, #1
 8005328:	69b8      	ldr	r0, [r7, #24]
 800532a:	f7ff ff05 	bl	8005138 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericSend+0x32>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <xQueueGenericSend+0x40>
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <xQueueGenericSend+0x44>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <xQueueGenericSend+0x46>
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <xQueueGenericSend+0x60>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x6e>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <xQueueGenericSend+0x72>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <xQueueGenericSend+0x74>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <xQueueGenericSend+0x8e>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ce:	f001 f9bd 	bl	800674c <xTaskGetSchedulerState>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <xQueueGenericSend+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0xa2>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0xa4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSend+0xbe>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61fb      	str	r3, [r7, #28]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fe:	f001 ff01 	bl	8007204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <xQueueGenericSend+0xd4>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d129      	bne.n	8005468 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fa0b 	bl	8005834 <prvCopyDataToQueue>
 800541e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	4618      	mov	r0, r3
 800542e:	f000 ffcf 	bl	80063d0 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <xQueueGenericSend+0x1f8>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	e00a      	b.n	8005460 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005450:	4b39      	ldr	r3, [pc, #228]	; (8005538 <xQueueGenericSend+0x1f8>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005460:	f001 ff00 	bl	8007264 <vPortExitCritical>
				return pdPASS;
 8005464:	2301      	movs	r3, #1
 8005466:	e063      	b.n	8005530 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546e:	f001 fef9 	bl	8007264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005472:	2300      	movs	r3, #0
 8005474:	e05c      	b.n	8005530 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f809 	bl	8006498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800548a:	f001 feeb 	bl	8007264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548e:	f000 fd7b 	bl	8005f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005492:	f001 feb7 	bl	8007204 <vPortEnterCritical>
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800549c:	b25b      	sxtb	r3, r3
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a2:	d103      	bne.n	80054ac <xQueueGenericSend+0x16c>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b8:	d103      	bne.n	80054c2 <xQueueGenericSend+0x182>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c2:	f001 fecf 	bl	8007264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c6:	1d3a      	adds	r2, r7, #4
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fff8 	bl	80064c4 <xTaskCheckForTimeOut>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d124      	bne.n	8005524 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054dc:	f000 faa2 	bl	8005a24 <prvIsQueueFull>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	3310      	adds	r3, #16
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 ff1e 	bl	8006330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f6:	f000 fa2d 	bl	8005954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054fa:	f000 fd53 	bl	8005fa4 <xTaskResumeAll>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af7c 	bne.w	80053fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xQueueGenericSend+0x1f8>)
 8005508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	e772      	b.n	80053fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fa1b 	bl	8005954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551e:	f000 fd41 	bl	8005fa4 <xTaskResumeAll>
 8005522:	e76c      	b.n	80053fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005526:	f000 fa15 	bl	8005954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552a:	f000 fd3b 	bl	8005fa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800552e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005530:	4618      	mov	r0, r3
 8005532:	3738      	adds	r7, #56	; 0x38
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b090      	sub	sp, #64	; 0x40
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <xQueueGenericSendFromISR+0x3c>
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <xQueueGenericSendFromISR+0x40>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <xQueueGenericSendFromISR+0x42>
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSendFromISR+0x6a>
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSendFromISR+0x6e>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSendFromISR+0x70>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c6:	f001 feff 	bl	80073c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ca:	f3ef 8211 	mrs	r2, BASEPRI
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	61fa      	str	r2, [r7, #28]
 80055e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <xQueueGenericSendFromISR+0xbc>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d12f      	bne.n	8005658 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800560e:	f000 f911 	bl	8005834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005612:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561a:	d112      	bne.n	8005642 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d016      	beq.n	8005652 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fed1 	bl	80063d0 <xTaskRemoveFromEventList>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e007      	b.n	8005652 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005642:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005646:	3301      	adds	r3, #1
 8005648:	b2db      	uxtb	r3, r3
 800564a:	b25a      	sxtb	r2, r3
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005652:	2301      	movs	r3, #1
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005656:	e001      	b.n	800565c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005658:	2300      	movs	r3, #0
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005666:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800566a:	4618      	mov	r0, r3
 800566c:	3740      	adds	r7, #64	; 0x40
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	; 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <xQueueReceive+0x30>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	623b      	str	r3, [r7, #32]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <xQueueReceive+0x3e>
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueReceive+0x42>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueReceive+0x44>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueReceive+0x5e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d2:	f001 f83b 	bl	800674c <xTaskGetSchedulerState>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <xQueueReceive+0x6e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <xQueueReceive+0x72>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <xQueueReceive+0x74>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueReceive+0x8e>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	61bb      	str	r3, [r7, #24]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005702:	f001 fd7f 	bl	8007204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01f      	beq.n	8005752 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005716:	f000 f8f7 	bl	8005908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00f      	beq.n	800574a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	3310      	adds	r3, #16
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fe4e 	bl	80063d0 <xTaskRemoveFromEventList>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800573a:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <xQueueReceive+0x1bc>)
 800573c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800574a:	f001 fd8b 	bl	8007264 <vPortExitCritical>
				return pdPASS;
 800574e:	2301      	movs	r3, #1
 8005750:	e069      	b.n	8005826 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005758:	f001 fd84 	bl	8007264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800575c:	2300      	movs	r3, #0
 800575e:	e062      	b.n	8005826 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005766:	f107 0310 	add.w	r3, r7, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fe94 	bl	8006498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005774:	f001 fd76 	bl	8007264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005778:	f000 fc06 	bl	8005f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800577c:	f001 fd42 	bl	8007204 <vPortEnterCritical>
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005786:	b25b      	sxtb	r3, r3
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d103      	bne.n	8005796 <xQueueReceive+0x122>
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800579c:	b25b      	sxtb	r3, r3
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a2:	d103      	bne.n	80057ac <xQueueReceive+0x138>
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	f001 fd5a 	bl	8007264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b0:	1d3a      	adds	r2, r7, #4
 80057b2:	f107 0310 	add.w	r3, r7, #16
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fe83 	bl	80064c4 <xTaskCheckForTimeOut>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d123      	bne.n	800580c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c6:	f000 f917 	bl	80059f8 <prvIsQueueEmpty>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fda9 	bl	8006330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e0:	f000 f8b8 	bl	8005954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057e4:	f000 fbde 	bl	8005fa4 <xTaskResumeAll>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d189      	bne.n	8005702 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <xQueueReceive+0x1bc>)
 80057f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	e780      	b.n	8005702 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005802:	f000 f8a7 	bl	8005954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005806:	f000 fbcd 	bl	8005fa4 <xTaskResumeAll>
 800580a:	e77a      	b.n	8005702 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 f8a1 	bl	8005954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005812:	f000 fbc7 	bl	8005fa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005818:	f000 f8ee 	bl	80059f8 <prvIsQueueEmpty>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	f43f af6f 	beq.w	8005702 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005826:	4618      	mov	r0, r3
 8005828:	3730      	adds	r7, #48	; 0x30
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d14d      	bne.n	80058f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ff92 	bl	8006788 <xTaskPriorityDisinherit>
 8005864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e043      	b.n	80058f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d119      	bne.n	80058a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6858      	ldr	r0, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	461a      	mov	r2, r3
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	f001 fff6 	bl	8007870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	d32b      	bcc.n	80058f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e026      	b.n	80058f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68d8      	ldr	r0, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	461a      	mov	r2, r3
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	f001 ffdc 	bl	8007870 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	425b      	negs	r3, r3
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d207      	bcs.n	80058e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	425b      	negs	r3, r3
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d105      	bne.n	80058f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	441a      	add	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d303      	bcc.n	800593c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68d9      	ldr	r1, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	461a      	mov	r2, r3
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f001 ff92 	bl	8007870 <memcpy>
	}
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800595c:	f001 fc52 	bl	8007204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005968:	e011      	b.n	800598e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d012      	beq.n	8005998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3324      	adds	r3, #36	; 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fd2a 	bl	80063d0 <xTaskRemoveFromEventList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005982:	f000 fe01 	bl	8006588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	3b01      	subs	r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800598e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dce9      	bgt.n	800596a <prvUnlockQueue+0x16>
 8005996:	e000      	b.n	800599a <prvUnlockQueue+0x46>
					break;
 8005998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	22ff      	movs	r2, #255	; 0xff
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059a2:	f001 fc5f 	bl	8007264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059a6:	f001 fc2d 	bl	8007204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b2:	e011      	b.n	80059d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d012      	beq.n	80059e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3310      	adds	r3, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fd05 	bl	80063d0 <xTaskRemoveFromEventList>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059cc:	f000 fddc 	bl	8006588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dce9      	bgt.n	80059b4 <prvUnlockQueue+0x60>
 80059e0:	e000      	b.n	80059e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	22ff      	movs	r2, #255	; 0xff
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059ec:	f001 fc3a 	bl	8007264 <vPortExitCritical>
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a00:	f001 fc00 	bl	8007204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e001      	b.n	8005a16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a16:	f001 fc25 	bl	8007264 <vPortExitCritical>

	return xReturn;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a2c:	f001 fbea 	bl	8007204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d102      	bne.n	8005a42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e001      	b.n	8005a46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a46:	f001 fc0d 	bl	8007264 <vPortExitCritical>

	return xReturn;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e014      	b.n	8005a8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a64:	4a0f      	ldr	r2, [pc, #60]	; (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a70:	490c      	ldr	r1, [pc, #48]	; (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <vQueueAddToRegistry+0x50>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a86:	e006      	b.n	8005a96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d9e7      	bls.n	8005a64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20001cec 	.word	0x20001cec

08005aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ab8:	f001 fba4 	bl	8007204 <vPortEnterCritical>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac8:	d103      	bne.n	8005ad2 <vQueueWaitForMessageRestricted+0x2a>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ade:	d103      	bne.n	8005ae8 <vQueueWaitForMessageRestricted+0x40>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae8:	f001 fbbc 	bl	8007264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3324      	adds	r3, #36	; 0x24
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fc3b 	bl	8006378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	f7ff ff26 	bl	8005954 <prvUnlockQueue>
	}
 8005b08:	bf00      	nop
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af04      	add	r7, sp, #16
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	623b      	str	r3, [r7, #32]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61fb      	str	r3, [r7, #28]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b56:	235c      	movs	r3, #92	; 0x5c
 8005b58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b5e:	d00a      	beq.n	8005b76 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	61bb      	str	r3, [r7, #24]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01e      	beq.n	8005bbc <xTaskCreateStatic+0xac>
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b96:	2300      	movs	r3, #0
 8005b98:	9303      	str	r3, [sp, #12]
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	9302      	str	r3, [sp, #8]
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f850 	bl	8005c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb6:	f000 f8dd 	bl	8005d74 <prvAddNewTaskToReadyList>
 8005bba:	e001      	b.n	8005bc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3728      	adds	r7, #40	; 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b08c      	sub	sp, #48	; 0x30
 8005bce:	af04      	add	r7, sp, #16
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fc32 	bl	8007448 <pvPortMalloc>
 8005be4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bec:	205c      	movs	r0, #92	; 0x5c
 8005bee:	f001 fc2b 	bl	8007448 <pvPortMalloc>
 8005bf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8005c00:	e005      	b.n	8005c0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f001 fcec 	bl	80075e0 <vPortFree>
 8005c08:	e001      	b.n	8005c0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9303      	str	r3, [sp, #12]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	9302      	str	r3, [sp, #8]
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f80e 	bl	8005c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c38:	69f8      	ldr	r0, [r7, #28]
 8005c3a:	f000 f89b 	bl	8005d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e002      	b.n	8005c4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	21a5      	movs	r1, #165	; 0xa5
 8005c6e:	f001 fe0d 	bl	800788c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f023 0307 	bic.w	r3, r3, #7
 8005c8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	617b      	str	r3, [r7, #20]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01f      	beq.n	8005cf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e012      	b.n	8005cde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	7819      	ldrb	r1, [r3, #0]
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3334      	adds	r3, #52	; 0x34
 8005cc8:	460a      	mov	r2, r1
 8005cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d9e9      	bls.n	8005cb8 <prvInitialiseNewTask+0x64>
 8005ce4:	e000      	b.n	8005ce8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf0:	e003      	b.n	8005cfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	2b37      	cmp	r3, #55	; 0x37
 8005cfe:	d901      	bls.n	8005d04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d00:	2337      	movs	r3, #55	; 0x37
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	2200      	movs	r2, #0
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f978 	bl	8005010 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	3318      	adds	r3, #24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff f973 	bl	8005010 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2200      	movs	r2, #0
 8005d44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	69b8      	ldr	r0, [r7, #24]
 8005d54:	f001 f928 	bl	8006fa8 <pxPortInitialiseStack>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d7c:	f001 fa42 	bl	8007204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d80:	4b2d      	ldr	r3, [pc, #180]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d8a:	4b2c      	ldr	r3, [pc, #176]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d110      	bne.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005da0:	f000 fc16 	bl	80065d0 <prvInitialiseTaskLists>
 8005da4:	e00d      	b.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <prvAddNewTaskToReadyList+0xcc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dae:	4b23      	ldr	r3, [pc, #140]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d802      	bhi.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <prvAddNewTaskToReadyList+0xd4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d903      	bls.n	8005de8 <prvAddNewTaskToReadyList+0x74>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <prvAddNewTaskToReadyList+0xd4>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <prvAddNewTaskToReadyList+0xd8>)
 8005df6:	441a      	add	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7ff f913 	bl	800502a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e04:	f001 fa2e 	bl	8007264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e08:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <prvAddNewTaskToReadyList+0xcc>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d207      	bcs.n	8005e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <prvAddNewTaskToReadyList+0xdc>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000c24 	.word	0x20000c24
 8005e3c:	20000750 	.word	0x20000750
 8005e40:	20000c30 	.word	0x20000c30
 8005e44:	20000c40 	.word	0x20000c40
 8005e48:	20000c2c 	.word	0x20000c2c
 8005e4c:	20000754 	.word	0x20000754
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <vTaskDelay+0x60>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <vTaskDelay+0x30>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60bb      	str	r3, [r7, #8]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e84:	f000 f880 	bl	8005f88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e88:	2100      	movs	r1, #0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fcea 	bl	8006864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e90:	f000 f888 	bl	8005fa4 <xTaskResumeAll>
 8005e94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d107      	bne.n	8005eac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <vTaskDelay+0x64>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000c4c 	.word	0x20000c4c
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eca:	463a      	mov	r2, r7
 8005ecc:	1d39      	adds	r1, r7, #4
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff f848 	bl	8004f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	9202      	str	r2, [sp, #8]
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	460a      	mov	r2, r1
 8005eea:	4921      	ldr	r1, [pc, #132]	; (8005f70 <vTaskStartScheduler+0xb4>)
 8005eec:	4821      	ldr	r0, [pc, #132]	; (8005f74 <vTaskStartScheduler+0xb8>)
 8005eee:	f7ff fe0f 	bl	8005b10 <xTaskCreateStatic>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <vTaskStartScheduler+0xbc>)
 8005ef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <vTaskStartScheduler+0xbc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e001      	b.n	8005f0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d102      	bne.n	8005f16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f10:	f000 fcfc 	bl	800690c <xTimerCreateTimerTask>
 8005f14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d116      	bne.n	8005f4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	613b      	str	r3, [r7, #16]
}
 8005f2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <vTaskStartScheduler+0xc0>)
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <vTaskStartScheduler+0xc4>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <vTaskStartScheduler+0xc8>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f44:	f001 f8bc 	bl	80070c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f48:	e00e      	b.n	8005f68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f50:	d10a      	bne.n	8005f68 <vTaskStartScheduler+0xac>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <vTaskStartScheduler+0xaa>
}
 8005f68:	bf00      	nop
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	080088cc 	.word	0x080088cc
 8005f74:	080065a1 	.word	0x080065a1
 8005f78:	20000c48 	.word	0x20000c48
 8005f7c:	20000c44 	.word	0x20000c44
 8005f80:	20000c30 	.word	0x20000c30
 8005f84:	20000c28 	.word	0x20000c28

08005f88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <vTaskSuspendAll+0x18>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	4a03      	ldr	r2, [pc, #12]	; (8005fa0 <vTaskSuspendAll+0x18>)
 8005f94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000c4c 	.word	0x20000c4c

08005fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fb2:	4b42      	ldr	r3, [pc, #264]	; (80060bc <xTaskResumeAll+0x118>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	603b      	str	r3, [r7, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fd0:	f001 f918 	bl	8007204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fd4:	4b39      	ldr	r3, [pc, #228]	; (80060bc <xTaskResumeAll+0x118>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	4a38      	ldr	r2, [pc, #224]	; (80060bc <xTaskResumeAll+0x118>)
 8005fdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <xTaskResumeAll+0x118>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d162      	bne.n	80060ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fe6:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <xTaskResumeAll+0x11c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d05e      	beq.n	80060ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fee:	e02f      	b.n	8006050 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <xTaskResumeAll+0x120>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f871 	bl	80050e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3304      	adds	r3, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff f86c 	bl	80050e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <xTaskResumeAll+0x124>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d903      	bls.n	8006020 <xTaskResumeAll+0x7c>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <xTaskResumeAll+0x124>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a27      	ldr	r2, [pc, #156]	; (80060cc <xTaskResumeAll+0x128>)
 800602e:	441a      	add	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe fff7 	bl	800502a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <xTaskResumeAll+0x12c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <xTaskResumeAll+0x130>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006050:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <xTaskResumeAll+0x120>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1cb      	bne.n	8005ff0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800605e:	f000 fb55 	bl	800670c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006062:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <xTaskResumeAll+0x134>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d010      	beq.n	8006090 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800606e:	f000 f847 	bl	8006100 <xTaskIncrementTick>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006078:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <xTaskResumeAll+0x130>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3b01      	subs	r3, #1
 8006082:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f1      	bne.n	800606e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <xTaskResumeAll+0x134>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <xTaskResumeAll+0x130>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <xTaskResumeAll+0x138>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060ac:	f001 f8da 	bl	8007264 <vPortExitCritical>

	return xAlreadyYielded;
 80060b0:	68bb      	ldr	r3, [r7, #8]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000c4c 	.word	0x20000c4c
 80060c0:	20000c24 	.word	0x20000c24
 80060c4:	20000be4 	.word	0x20000be4
 80060c8:	20000c2c 	.word	0x20000c2c
 80060cc:	20000754 	.word	0x20000754
 80060d0:	20000750 	.word	0x20000750
 80060d4:	20000c38 	.word	0x20000c38
 80060d8:	20000c34 	.word	0x20000c34
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <xTaskGetTickCount+0x1c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060ec:	687b      	ldr	r3, [r7, #4]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000c28 	.word	0x20000c28

08006100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610a:	4b4f      	ldr	r3, [pc, #316]	; (8006248 <xTaskIncrementTick+0x148>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 808f 	bne.w	8006232 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006114:	4b4d      	ldr	r3, [pc, #308]	; (800624c <xTaskIncrementTick+0x14c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800611c:	4a4b      	ldr	r2, [pc, #300]	; (800624c <xTaskIncrementTick+0x14c>)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d120      	bne.n	800616a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <xTaskIncrementTick+0x150>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <xTaskIncrementTick+0x48>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	603b      	str	r3, [r7, #0]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xTaskIncrementTick+0x46>
 8006148:	4b41      	ldr	r3, [pc, #260]	; (8006250 <xTaskIncrementTick+0x150>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	4b41      	ldr	r3, [pc, #260]	; (8006254 <xTaskIncrementTick+0x154>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a3f      	ldr	r2, [pc, #252]	; (8006250 <xTaskIncrementTick+0x150>)
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <xTaskIncrementTick+0x154>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <xTaskIncrementTick+0x158>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <xTaskIncrementTick+0x158>)
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	f000 fad1 	bl	800670c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800616a:	4b3c      	ldr	r3, [pc, #240]	; (800625c <xTaskIncrementTick+0x15c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d349      	bcc.n	8006208 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006174:	4b36      	ldr	r3, [pc, #216]	; (8006250 <xTaskIncrementTick+0x150>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617e:	4b37      	ldr	r3, [pc, #220]	; (800625c <xTaskIncrementTick+0x15c>)
 8006180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006184:	601a      	str	r2, [r3, #0]
					break;
 8006186:	e03f      	b.n	8006208 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006188:	4b31      	ldr	r3, [pc, #196]	; (8006250 <xTaskIncrementTick+0x150>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d203      	bcs.n	80061a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061a0:	4a2e      	ldr	r2, [pc, #184]	; (800625c <xTaskIncrementTick+0x15c>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061a6:	e02f      	b.n	8006208 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe ff99 	bl	80050e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3318      	adds	r3, #24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe ff90 	bl	80050e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <xTaskIncrementTick+0x160>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d903      	bls.n	80061d8 <xTaskIncrementTick+0xd8>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <xTaskIncrementTick+0x160>)
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <xTaskIncrementTick+0x164>)
 80061e6:	441a      	add	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe ff1b 	bl	800502a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <xTaskIncrementTick+0x168>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3b8      	bcc.n	8006174 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006206:	e7b5      	b.n	8006174 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006208:	4b17      	ldr	r3, [pc, #92]	; (8006268 <xTaskIncrementTick+0x168>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	4915      	ldr	r1, [pc, #84]	; (8006264 <xTaskIncrementTick+0x164>)
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d901      	bls.n	8006224 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <xTaskIncrementTick+0x16c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e004      	b.n	800623c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <xTaskIncrementTick+0x170>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <xTaskIncrementTick+0x170>)
 800623a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800623c:	697b      	ldr	r3, [r7, #20]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000c4c 	.word	0x20000c4c
 800624c:	20000c28 	.word	0x20000c28
 8006250:	20000bdc 	.word	0x20000bdc
 8006254:	20000be0 	.word	0x20000be0
 8006258:	20000c3c 	.word	0x20000c3c
 800625c:	20000c44 	.word	0x20000c44
 8006260:	20000c2c 	.word	0x20000c2c
 8006264:	20000754 	.word	0x20000754
 8006268:	20000750 	.word	0x20000750
 800626c:	20000c38 	.word	0x20000c38
 8006270:	20000c34 	.word	0x20000c34

08006274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800627a:	4b28      	ldr	r3, [pc, #160]	; (800631c <vTaskSwitchContext+0xa8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006282:	4b27      	ldr	r3, [pc, #156]	; (8006320 <vTaskSwitchContext+0xac>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006288:	e041      	b.n	800630e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800628a:	4b25      	ldr	r3, [pc, #148]	; (8006320 <vTaskSwitchContext+0xac>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <vTaskSwitchContext+0xb0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e010      	b.n	80062ba <vTaskSwitchContext+0x46>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <vTaskSwitchContext+0x3e>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	491b      	ldr	r1, [pc, #108]	; (8006328 <vTaskSwitchContext+0xb4>)
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0e4      	beq.n	8006298 <vTaskSwitchContext+0x24>
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4a13      	ldr	r2, [pc, #76]	; (8006328 <vTaskSwitchContext+0xb4>)
 80062da:	4413      	add	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	3308      	adds	r3, #8
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d104      	bne.n	80062fe <vTaskSwitchContext+0x8a>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <vTaskSwitchContext+0xb8>)
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	4a06      	ldr	r2, [pc, #24]	; (8006324 <vTaskSwitchContext+0xb0>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6013      	str	r3, [r2, #0]
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000c4c 	.word	0x20000c4c
 8006320:	20000c38 	.word	0x20000c38
 8006324:	20000c2c 	.word	0x20000c2c
 8006328:	20000754 	.word	0x20000754
 800632c:	20000750 	.word	0x20000750

08006330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006356:	4b07      	ldr	r3, [pc, #28]	; (8006374 <vTaskPlaceOnEventList+0x44>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3318      	adds	r3, #24
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fe fe87 	bl	8005072 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006364:	2101      	movs	r1, #1
 8006366:	6838      	ldr	r0, [r7, #0]
 8006368:	f000 fa7c 	bl	8006864 <prvAddCurrentTaskToDelayedList>
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000750 	.word	0x20000750

08006378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617b      	str	r3, [r7, #20]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <vTaskPlaceOnEventListRestricted+0x54>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3318      	adds	r3, #24
 80063a6:	4619      	mov	r1, r3
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7fe fe3e 	bl	800502a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	68b8      	ldr	r0, [r7, #8]
 80063be:	f000 fa51 	bl	8006864 <prvAddCurrentTaskToDelayedList>
	}
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000750 	.word	0x20000750

080063d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3318      	adds	r3, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fe6f 	bl	80050e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <xTaskRemoveFromEventList+0xb0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11d      	bne.n	800644a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fe66 	bl	80050e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <xTaskRemoveFromEventList+0xb4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <xTaskRemoveFromEventList+0x5c>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a16      	ldr	r2, [pc, #88]	; (8006484 <xTaskRemoveFromEventList+0xb4>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a13      	ldr	r2, [pc, #76]	; (8006488 <xTaskRemoveFromEventList+0xb8>)
 800643a:	441a      	add	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe fdf1 	bl	800502a <vListInsertEnd>
 8006448:	e005      	b.n	8006456 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3318      	adds	r3, #24
 800644e:	4619      	mov	r1, r3
 8006450:	480e      	ldr	r0, [pc, #56]	; (800648c <xTaskRemoveFromEventList+0xbc>)
 8006452:	f7fe fdea 	bl	800502a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <xTaskRemoveFromEventList+0xc0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d905      	bls.n	8006470 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <xTaskRemoveFromEventList+0xc4>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e001      	b.n	8006474 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000c4c 	.word	0x20000c4c
 8006484:	20000c2c 	.word	0x20000c2c
 8006488:	20000754 	.word	0x20000754
 800648c:	20000be4 	.word	0x20000be4
 8006490:	20000750 	.word	0x20000750
 8006494:	20000c38 	.word	0x20000c38

08006498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <vTaskInternalSetTimeOutState+0x24>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <vTaskInternalSetTimeOutState+0x28>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	605a      	str	r2, [r3, #4]
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000c3c 	.word	0x20000c3c
 80064c0:	20000c28 	.word	0x20000c28

080064c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	613b      	str	r3, [r7, #16]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006506:	f000 fe7d 	bl	8007204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <xTaskCheckForTimeOut+0xbc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006522:	d102      	bne.n	800652a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e023      	b.n	8006572 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <xTaskCheckForTimeOut+0xc0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d007      	beq.n	8006546 <xTaskCheckForTimeOut+0x82>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	429a      	cmp	r2, r3
 800653e:	d302      	bcc.n	8006546 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	e015      	b.n	8006572 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	429a      	cmp	r2, r3
 800654e:	d20b      	bcs.n	8006568 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1ad2      	subs	r2, r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff ff9b 	bl	8006498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e004      	b.n	8006572 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006572:	f000 fe77 	bl	8007264 <vPortExitCritical>

	return xReturn;
 8006576:	69fb      	ldr	r3, [r7, #28]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000c28 	.word	0x20000c28
 8006584:	20000c3c 	.word	0x20000c3c

08006588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800658c:	4b03      	ldr	r3, [pc, #12]	; (800659c <vTaskMissedYield+0x14>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000c38 	.word	0x20000c38

080065a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065a8:	f000 f852 	bl	8006650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvIdleTask+0x28>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d9f9      	bls.n	80065a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <prvIdleTask+0x2c>)
 80065b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065c4:	e7f0      	b.n	80065a8 <prvIdleTask+0x8>
 80065c6:	bf00      	nop
 80065c8:	20000754 	.word	0x20000754
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	e00c      	b.n	80065f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4a12      	ldr	r2, [pc, #72]	; (8006630 <prvInitialiseTaskLists+0x60>)
 80065e8:	4413      	add	r3, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fcf0 	bl	8004fd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3301      	adds	r3, #1
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b37      	cmp	r3, #55	; 0x37
 80065fa:	d9ef      	bls.n	80065dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065fc:	480d      	ldr	r0, [pc, #52]	; (8006634 <prvInitialiseTaskLists+0x64>)
 80065fe:	f7fe fce7 	bl	8004fd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006602:	480d      	ldr	r0, [pc, #52]	; (8006638 <prvInitialiseTaskLists+0x68>)
 8006604:	f7fe fce4 	bl	8004fd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006608:	480c      	ldr	r0, [pc, #48]	; (800663c <prvInitialiseTaskLists+0x6c>)
 800660a:	f7fe fce1 	bl	8004fd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800660e:	480c      	ldr	r0, [pc, #48]	; (8006640 <prvInitialiseTaskLists+0x70>)
 8006610:	f7fe fcde 	bl	8004fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006614:	480b      	ldr	r0, [pc, #44]	; (8006644 <prvInitialiseTaskLists+0x74>)
 8006616:	f7fe fcdb 	bl	8004fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvInitialiseTaskLists+0x78>)
 800661c:	4a05      	ldr	r2, [pc, #20]	; (8006634 <prvInitialiseTaskLists+0x64>)
 800661e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <prvInitialiseTaskLists+0x7c>)
 8006622:	4a05      	ldr	r2, [pc, #20]	; (8006638 <prvInitialiseTaskLists+0x68>)
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000754 	.word	0x20000754
 8006634:	20000bb4 	.word	0x20000bb4
 8006638:	20000bc8 	.word	0x20000bc8
 800663c:	20000be4 	.word	0x20000be4
 8006640:	20000bf8 	.word	0x20000bf8
 8006644:	20000c10 	.word	0x20000c10
 8006648:	20000bdc 	.word	0x20000bdc
 800664c:	20000be0 	.word	0x20000be0

08006650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006656:	e019      	b.n	800668c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006658:	f000 fdd4 	bl	8007204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <prvCheckTasksWaitingTermination+0x50>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fd3b 	bl	80050e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3b01      	subs	r3, #1
 8006674:	4a0b      	ldr	r2, [pc, #44]	; (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 8006676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 8006680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006682:	f000 fdef 	bl	8007264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f810 	bl	80066ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e1      	bne.n	8006658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000bf8 	.word	0x20000bf8
 80066a4:	20000c24 	.word	0x20000c24
 80066a8:	20000c0c 	.word	0x20000c0c

080066ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d108      	bne.n	80066d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 ff8c 	bl	80075e0 <vPortFree>
				vPortFree( pxTCB );
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 ff89 	bl	80075e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066ce:	e018      	b.n	8006702 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d103      	bne.n	80066e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 ff80 	bl	80075e0 <vPortFree>
	}
 80066e0:	e00f      	b.n	8006702 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d00a      	beq.n	8006702 <prvDeleteTCB+0x56>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	60fb      	str	r3, [r7, #12]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <prvDeleteTCB+0x54>
	}
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <prvResetNextTaskUnblockTime+0x38>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <prvResetNextTaskUnblockTime+0x3c>)
 800671e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006724:	e008      	b.n	8006738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006726:	4b07      	ldr	r3, [pc, #28]	; (8006744 <prvResetNextTaskUnblockTime+0x38>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a04      	ldr	r2, [pc, #16]	; (8006748 <prvResetNextTaskUnblockTime+0x3c>)
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000bdc 	.word	0x20000bdc
 8006748:	20000c44 	.word	0x20000c44

0800674c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <xTaskGetSchedulerState+0x34>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800675a:	2301      	movs	r3, #1
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	e008      	b.n	8006772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006760:	4b08      	ldr	r3, [pc, #32]	; (8006784 <xTaskGetSchedulerState+0x38>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006768:	2302      	movs	r3, #2
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	e001      	b.n	8006772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006772:	687b      	ldr	r3, [r7, #4]
	}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	20000c30 	.word	0x20000c30
 8006784:	20000c4c 	.word	0x20000c4c

08006788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d056      	beq.n	800684c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800679e:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <xTaskPriorityDisinherit+0xd0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d00a      	beq.n	80067be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60fb      	str	r3, [r7, #12]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60bb      	str	r3, [r7, #8]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e0:	1e5a      	subs	r2, r3, #1
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d02c      	beq.n	800684c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d128      	bne.n	800684c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc70 	bl	80050e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <xTaskPriorityDisinherit+0xd4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d903      	bls.n	800682c <xTaskPriorityDisinherit+0xa4>
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a0c      	ldr	r2, [pc, #48]	; (800685c <xTaskPriorityDisinherit+0xd4>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <xTaskPriorityDisinherit+0xd8>)
 800683a:	441a      	add	r2, r3
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	3304      	adds	r3, #4
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fe fbf1 	bl	800502a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800684c:	697b      	ldr	r3, [r7, #20]
	}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000750 	.word	0x20000750
 800685c:	20000c2c 	.word	0x20000c2c
 8006860:	20000754 	.word	0x20000754

08006864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800686e:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006874:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fc32 	bl	80050e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006886:	d10a      	bne.n	800689e <prvAddCurrentTaskToDelayedList+0x3a>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800688e:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4819      	ldr	r0, [pc, #100]	; (80068fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006898:	f7fe fbc7 	bl	800502a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800689c:	e026      	b.n	80068ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d209      	bcs.n	80068ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe fbd5 	bl	8005072 <vListInsert>
}
 80068c8:	e010      	b.n	80068ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ca:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f7fe fbcb 	bl	8005072 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d202      	bcs.n	80068ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068e6:	4a08      	ldr	r2, [pc, #32]	; (8006908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6013      	str	r3, [r2, #0]
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000c28 	.word	0x20000c28
 80068f8:	20000750 	.word	0x20000750
 80068fc:	20000c10 	.word	0x20000c10
 8006900:	20000be0 	.word	0x20000be0
 8006904:	20000bdc 	.word	0x20000bdc
 8006908:	20000c44 	.word	0x20000c44

0800690c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006916:	f000 fb07 	bl	8006f28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800691a:	4b1c      	ldr	r3, [pc, #112]	; (800698c <xTimerCreateTimerTask+0x80>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d021      	beq.n	8006966 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800692a:	1d3a      	adds	r2, r7, #4
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fb31 	bl	8004f9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	9202      	str	r2, [sp, #8]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	2302      	movs	r3, #2
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	2300      	movs	r3, #0
 800694a:	460a      	mov	r2, r1
 800694c:	4910      	ldr	r1, [pc, #64]	; (8006990 <xTimerCreateTimerTask+0x84>)
 800694e:	4811      	ldr	r0, [pc, #68]	; (8006994 <xTimerCreateTimerTask+0x88>)
 8006950:	f7ff f8de 	bl	8005b10 <xTaskCreateStatic>
 8006954:	4603      	mov	r3, r0
 8006956:	4a10      	ldr	r2, [pc, #64]	; (8006998 <xTimerCreateTimerTask+0x8c>)
 8006958:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <xTimerCreateTimerTask+0x8c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006962:	2301      	movs	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	613b      	str	r3, [r7, #16]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006982:	697b      	ldr	r3, [r7, #20]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000c80 	.word	0x20000c80
 8006990:	080088d4 	.word	0x080088d4
 8006994:	08006ad1 	.word	0x08006ad1
 8006998:	20000c84 	.word	0x20000c84

0800699c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	623b      	str	r3, [r7, #32]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069ca:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <xTimerGenericCommand+0x98>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d02a      	beq.n	8006a28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b05      	cmp	r3, #5
 80069e2:	dc18      	bgt.n	8006a16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069e4:	f7ff feb2 	bl	800674c <xTaskGetSchedulerState>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d109      	bne.n	8006a02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <xTimerGenericCommand+0x98>)
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f107 0110 	add.w	r1, r7, #16
 80069f6:	2300      	movs	r3, #0
 80069f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fa:	f7fe fca1 	bl	8005340 <xQueueGenericSend>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006a00:	e012      	b.n	8006a28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <xTimerGenericCommand+0x98>)
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f107 0110 	add.w	r1, r7, #16
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f7fe fc97 	bl	8005340 <xQueueGenericSend>
 8006a12:	6278      	str	r0, [r7, #36]	; 0x24
 8006a14:	e008      	b.n	8006a28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a16:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <xTimerGenericCommand+0x98>)
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	f107 0110 	add.w	r1, r7, #16
 8006a1e:	2300      	movs	r3, #0
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	f7fe fd8b 	bl	800553c <xQueueGenericSendFromISR>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3728      	adds	r7, #40	; 0x28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000c80 	.word	0x20000c80

08006a38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a42:	4b22      	ldr	r3, [pc, #136]	; (8006acc <prvProcessExpiredTimer+0x94>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe fb47 	bl	80050e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d022      	beq.n	8006aaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	699a      	ldr	r2, [r3, #24]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	18d1      	adds	r1, r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	f000 f8d1 	bl	8006c18 <prvInsertTimerInActiveList>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01f      	beq.n	8006abc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	2100      	movs	r1, #0
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7ff ff88 	bl	800699c <xTimerGenericCommand>
 8006a8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d113      	bne.n	8006abc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60fb      	str	r3, [r7, #12]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	6978      	ldr	r0, [r7, #20]
 8006ac2:	4798      	blx	r3
}
 8006ac4:	bf00      	nop
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000c78 	.word	0x20000c78

08006ad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 f857 	bl	8006b90 <prvGetNextExpireTime>
 8006ae2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f803 	bl	8006af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006aee:	f000 f8d5 	bl	8006c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006af2:	e7f1      	b.n	8006ad8 <prvTimerTask+0x8>

08006af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006afe:	f7ff fa43 	bl	8005f88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f866 	bl	8006bd8 <prvSampleTimeNow>
 8006b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d130      	bne.n	8006b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d806      	bhi.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b22:	f7ff fa3f 	bl	8005fa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff85 	bl	8006a38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b2e:	e024      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b36:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <prvProcessTimerOrBlockTask+0x90>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <prvProcessTimerOrBlockTask+0x50>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <prvProcessTimerOrBlockTask+0x52>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <prvProcessTimerOrBlockTask+0x94>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fe ffa7 	bl	8005aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b5a:	f7ff fa23 	bl	8005fa4 <xTaskResumeAll>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <prvProcessTimerOrBlockTask+0x98>)
 8006b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	f3bf 8f6f 	isb	sy
}
 8006b74:	e001      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b76:	f7ff fa15 	bl	8005fa4 <xTaskResumeAll>
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000c7c 	.word	0x20000c7c
 8006b88:	20000c80 	.word	0x20000c80
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b98:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <prvGetNextExpireTime+0x44>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <prvGetNextExpireTime+0x16>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e000      	b.n	8006ba8 <prvGetNextExpireTime+0x18>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <prvGetNextExpireTime+0x44>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e001      	b.n	8006bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000c78 	.word	0x20000c78

08006bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006be0:	f7ff fa7e 	bl	80060e0 <xTaskGetTickCount>
 8006be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <prvSampleTimeNow+0x3c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d205      	bcs.n	8006bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bf0:	f000 f936 	bl	8006e60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c02:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <prvSampleTimeNow+0x3c>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000c88 	.word	0x20000c88

08006c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d812      	bhi.n	8006c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d302      	bcc.n	8006c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e01b      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <prvInsertTimerInActiveList+0x7c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7fe fa08 	bl	8005072 <vListInsert>
 8006c62:	e012      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d206      	bcs.n	8006c7a <prvInsertTimerInActiveList+0x62>
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d302      	bcc.n	8006c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e007      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <prvInsertTimerInActiveList+0x80>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fe f9f4 	bl	8005072 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c8a:	697b      	ldr	r3, [r7, #20]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000c7c 	.word	0x20000c7c
 8006c98:	20000c78 	.word	0x20000c78

08006c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	; 0x38
 8006ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ca2:	e0ca      	b.n	8006e3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da18      	bge.n	8006cdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	3304      	adds	r3, #4
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	61fb      	str	r3, [r7, #28]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd2:	6850      	ldr	r0, [r2, #4]
 8006cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd6:	6892      	ldr	r2, [r2, #8]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f2c0 80aa 	blt.w	8006e38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe f9f5 	bl	80050e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff6b 	bl	8006bd8 <prvSampleTimeNow>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	f200 8097 	bhi.w	8006e3a <prvProcessReceivedCommands+0x19e>
 8006d0c:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <prvProcessReceivedCommands+0x78>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d3d 	.word	0x08006d3d
 8006d20:	08006db1 	.word	0x08006db1
 8006d24:	08006dc5 	.word	0x08006dc5
 8006d28:	08006e0f 	.word	0x08006e0f
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d3d 	.word	0x08006d3d
 8006d34:	08006db1 	.word	0x08006db1
 8006d38:	08006dc5 	.word	0x08006dc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	18d1      	adds	r1, r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5c:	f7ff ff5c 	bl	8006c18 <prvInsertTimerInActiveList>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d069      	beq.n	8006e3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d05e      	beq.n	8006e3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	441a      	add	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8e:	f7ff fe05 	bl	800699c <xTimerGenericCommand>
 8006d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d14f      	bne.n	8006e3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61bb      	str	r3, [r7, #24]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006dc2:	e03a      	b.n	8006e3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	617b      	str	r3, [r7, #20]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	18d1      	adds	r1, r2, r3
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e08:	f7ff ff06 	bl	8006c18 <prvInsertTimerInActiveList>
					break;
 8006e0c:	e015      	b.n	8006e3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d103      	bne.n	8006e24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1e:	f000 fbdf 	bl	80075e0 <vPortFree>
 8006e22:	e00a      	b.n	8006e3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e36:	e000      	b.n	8006e3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <prvProcessReceivedCommands+0x1c0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1d39      	adds	r1, r7, #4
 8006e40:	2200      	movs	r2, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fc16 	bl	8005674 <xQueueReceive>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f47f af2a 	bne.w	8006ca4 <prvProcessReceivedCommands+0x8>
	}
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3730      	adds	r7, #48	; 0x30
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000c80 	.word	0x20000c80

08006e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e66:	e048      	b.n	8006efa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e68:	4b2d      	ldr	r3, [pc, #180]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e72:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe f92f 	bl	80050e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02e      	beq.n	8006efa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d90e      	bls.n	8006ecc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eba:	4b19      	ldr	r3, [pc, #100]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fe f8d4 	bl	8005072 <vListInsert>
 8006eca:	e016      	b.n	8006efa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fd60 	bl	800699c <xTimerGenericCommand>
 8006edc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	603b      	str	r3, [r7, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1b1      	bne.n	8006e68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <prvSwitchTimerLists+0xc4>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <prvSwitchTimerLists+0xc0>)
 8006f10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f12:	4a04      	ldr	r2, [pc, #16]	; (8006f24 <prvSwitchTimerLists+0xc4>)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6013      	str	r3, [r2, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000c78 	.word	0x20000c78
 8006f24:	20000c7c 	.word	0x20000c7c

08006f28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f2e:	f000 f969 	bl	8007204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvCheckForValidListAndQueue+0x60>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d120      	bne.n	8006f7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f3a:	4814      	ldr	r0, [pc, #80]	; (8006f8c <prvCheckForValidListAndQueue+0x64>)
 8006f3c:	f7fe f848 	bl	8004fd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f40:	4813      	ldr	r0, [pc, #76]	; (8006f90 <prvCheckForValidListAndQueue+0x68>)
 8006f42:	f7fe f845 	bl	8004fd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f46:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <prvCheckForValidListAndQueue+0x6c>)
 8006f48:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <prvCheckForValidListAndQueue+0x64>)
 8006f4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f4c:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvCheckForValidListAndQueue+0x70>)
 8006f4e:	4a10      	ldr	r2, [pc, #64]	; (8006f90 <prvCheckForValidListAndQueue+0x68>)
 8006f50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f52:	2300      	movs	r3, #0
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <prvCheckForValidListAndQueue+0x74>)
 8006f58:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <prvCheckForValidListAndQueue+0x78>)
 8006f5a:	2110      	movs	r1, #16
 8006f5c:	200a      	movs	r0, #10
 8006f5e:	f7fe f953 	bl	8005208 <xQueueGenericCreateStatic>
 8006f62:	4603      	mov	r3, r0
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <prvCheckForValidListAndQueue+0x60>)
 8006f66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <prvCheckForValidListAndQueue+0x60>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <prvCheckForValidListAndQueue+0x60>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	490b      	ldr	r1, [pc, #44]	; (8006fa4 <prvCheckForValidListAndQueue+0x7c>)
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fd6c 	bl	8005a54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f7c:	f000 f972 	bl	8007264 <vPortExitCritical>
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000c80 	.word	0x20000c80
 8006f8c:	20000c50 	.word	0x20000c50
 8006f90:	20000c64 	.word	0x20000c64
 8006f94:	20000c78 	.word	0x20000c78
 8006f98:	20000c7c 	.word	0x20000c7c
 8006f9c:	20000d2c 	.word	0x20000d2c
 8006fa0:	20000c8c 	.word	0x20000c8c
 8006fa4:	080088dc 	.word	0x080088dc

08006fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3b04      	subs	r3, #4
 8006fb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <pxPortInitialiseStack+0x64>)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b14      	subs	r3, #20
 8006fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b04      	subs	r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f06f 0202 	mvn.w	r2, #2
 8006ff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b20      	subs	r3, #32
 8006ffc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	08007011 	.word	0x08007011

08007010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <prvTaskExitError+0x54>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007022:	d00a      	beq.n	800703a <prvTaskExitError+0x2a>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60fb      	str	r3, [r7, #12]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <prvTaskExitError+0x28>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800704e:	bf00      	nop
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0fc      	beq.n	8007050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	2000000c 	.word	0x2000000c
	...

08007070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <pxCurrentTCBConst2>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	6808      	ldr	r0, [r1, #0]
 8007076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	f380 8809 	msr	PSP, r0
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	4770      	bx	lr
 800708c:	f3af 8000 	nop.w

08007090 <pxCurrentTCBConst2>:
 8007090:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop

08007098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <prvPortStartFirstTask+0x24>)
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f380 8808 	msr	MSP, r0
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8814 	msr	CONTROL, r0
 80070aa:	b662      	cpsie	i
 80070ac:	b661      	cpsie	f
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	df00      	svc	0
 80070b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ba:	bf00      	nop
 80070bc:	e000ed08 	.word	0xe000ed08

080070c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070c6:	4b46      	ldr	r3, [pc, #280]	; (80071e0 <xPortStartScheduler+0x120>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a46      	ldr	r2, [pc, #280]	; (80071e4 <xPortStartScheduler+0x124>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10a      	bne.n	80070e6 <xPortStartScheduler+0x26>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070e6:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <xPortStartScheduler+0x120>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3f      	ldr	r2, [pc, #252]	; (80071e8 <xPortStartScheduler+0x128>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10a      	bne.n	8007106 <xPortStartScheduler+0x46>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <xPortStartScheduler+0x12c>)
 8007108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <xPortStartScheduler+0x130>)
 800712c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800712e:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xPortStartScheduler+0x134>)
 8007130:	2207      	movs	r2, #7
 8007132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007134:	e009      	b.n	800714a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007136:	4b2f      	ldr	r3, [pc, #188]	; (80071f4 <xPortStartScheduler+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3b01      	subs	r3, #1
 800713c:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <xPortStartScheduler+0x134>)
 800713e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d0ef      	beq.n	8007136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007156:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <xPortStartScheduler+0x134>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1c3 0307 	rsb	r3, r3, #7
 800715e:	2b04      	cmp	r3, #4
 8007160:	d00a      	beq.n	8007178 <xPortStartScheduler+0xb8>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60bb      	str	r3, [r7, #8]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <xPortStartScheduler+0x134>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <xPortStartScheduler+0x134>)
 8007180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007182:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <xPortStartScheduler+0x134>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718a:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <xPortStartScheduler+0x134>)
 800718c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <xPortStartScheduler+0x138>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <xPortStartScheduler+0x138>)
 800719c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <xPortStartScheduler+0x138>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <xPortStartScheduler+0x138>)
 80071a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071ae:	f000 f8dd 	bl	800736c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <xPortStartScheduler+0x13c>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071b8:	f000 f8fc 	bl	80073b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <xPortStartScheduler+0x140>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <xPortStartScheduler+0x140>)
 80071c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071c8:	f7ff ff66 	bl	8007098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071cc:	f7ff f852 	bl	8006274 <vTaskSwitchContext>
	prvTaskExitError();
 80071d0:	f7ff ff1e 	bl	8007010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	e000ed00 	.word	0xe000ed00
 80071e4:	410fc271 	.word	0x410fc271
 80071e8:	410fc270 	.word	0x410fc270
 80071ec:	e000e400 	.word	0xe000e400
 80071f0:	20000d7c 	.word	0x20000d7c
 80071f4:	20000d80 	.word	0x20000d80
 80071f8:	e000ed20 	.word	0xe000ed20
 80071fc:	2000000c 	.word	0x2000000c
 8007200:	e000ef34 	.word	0xe000ef34

08007204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <vPortEnterCritical+0x58>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <vPortEnterCritical+0x58>)
 8007226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <vPortEnterCritical+0x58>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d10f      	bne.n	8007250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortEnterCritical+0x5c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <vPortEnterCritical+0x4c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <vPortEnterCritical+0x4a>
	}
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	2000000c 	.word	0x2000000c
 8007260:	e000ed04 	.word	0xe000ed04

08007264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <vPortExitCritical+0x50>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <vPortExitCritical+0x24>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	607b      	str	r3, [r7, #4]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <vPortExitCritical+0x50>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3b01      	subs	r3, #1
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <vPortExitCritical+0x50>)
 8007290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <vPortExitCritical+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <vPortExitCritical+0x42>
 800729a:	2300      	movs	r3, #0
 800729c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f383 8811 	msr	BASEPRI, r3
}
 80072a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
	...

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f01e 0f10 	tst.w	lr, #16
 80072d0:	bf08      	it	eq
 80072d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072e4:	f380 8811 	msr	BASEPRI, r0
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f7fe ffc0 	bl	8006274 <vTaskSwitchContext>
 80072f4:	f04f 0000 	mov.w	r0, #0
 80072f8:	f380 8811 	msr	BASEPRI, r0
 80072fc:	bc09      	pop	{r0, r3}
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	6808      	ldr	r0, [r1, #0]
 8007302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007306:	f01e 0f10 	tst.w	lr, #16
 800730a:	bf08      	it	eq
 800730c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007310:	f380 8809 	msr	PSP, r0
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w

08007320 <pxCurrentTCBConst>:
 8007320:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007342:	f7fe fedd 	bl	8006100 <xTaskIncrementTick>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <xPortSysTickHandler+0x40>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
}
 800735e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <vPortSetupTimerInterrupt+0x38>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <vPortSetupTimerInterrupt+0x3c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <vPortSetupTimerInterrupt+0x40>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <vPortSetupTimerInterrupt+0x44>)
 800738a:	3b01      	subs	r3, #1
 800738c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738e:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	e000e010 	.word	0xe000e010
 80073a4:	e000e018 	.word	0xe000e018
 80073a8:	20000000 	.word	0x20000000
 80073ac:	10624dd3 	.word	0x10624dd3
 80073b0:	e000e014 	.word	0xe000e014

080073b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073c4 <vPortEnableVFP+0x10>
 80073b8:	6801      	ldr	r1, [r0, #0]
 80073ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073be:	6001      	str	r1, [r0, #0]
 80073c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073c2:	bf00      	nop
 80073c4:	e000ed88 	.word	0xe000ed88

080073c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d914      	bls.n	8007404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <vPortValidateInterruptPriority+0x70>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073e4:	4b15      	ldr	r3, [pc, #84]	; (800743c <vPortValidateInterruptPriority+0x74>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	7afa      	ldrb	r2, [r7, #11]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d20a      	bcs.n	8007404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	607b      	str	r3, [r7, #4]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <vPortValidateInterruptPriority+0x78>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <vPortValidateInterruptPriority+0x7c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d90a      	bls.n	800742a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	603b      	str	r3, [r7, #0]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <vPortValidateInterruptPriority+0x60>
	}
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	e000e3f0 	.word	0xe000e3f0
 800743c:	20000d7c 	.word	0x20000d7c
 8007440:	e000ed0c 	.word	0xe000ed0c
 8007444:	20000d80 	.word	0x20000d80

08007448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007454:	f7fe fd98 	bl	8005f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007458:	4b5b      	ldr	r3, [pc, #364]	; (80075c8 <pvPortMalloc+0x180>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007460:	f000 f920 	bl	80076a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <pvPortMalloc+0x184>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 8093 	bne.w	8007598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01d      	beq.n	80074b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007478:	2208      	movs	r2, #8
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d014      	beq.n	80074b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f023 0307 	bic.w	r3, r3, #7
 8007490:	3308      	adds	r3, #8
 8007492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <pvPortMalloc+0x6c>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	617b      	str	r3, [r7, #20]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d06e      	beq.n	8007598 <pvPortMalloc+0x150>
 80074ba:	4b45      	ldr	r3, [pc, #276]	; (80075d0 <pvPortMalloc+0x188>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d869      	bhi.n	8007598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074c4:	4b43      	ldr	r3, [pc, #268]	; (80075d4 <pvPortMalloc+0x18c>)
 80074c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074c8:	4b42      	ldr	r3, [pc, #264]	; (80075d4 <pvPortMalloc+0x18c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ce:	e004      	b.n	80074da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d903      	bls.n	80074ec <pvPortMalloc+0xa4>
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f1      	bne.n	80074d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074ec:	4b36      	ldr	r3, [pc, #216]	; (80075c8 <pvPortMalloc+0x180>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d050      	beq.n	8007598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2208      	movs	r2, #8
 80074fc:	4413      	add	r3, r2
 80074fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	2308      	movs	r3, #8
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	429a      	cmp	r2, r3
 8007516:	d91f      	bls.n	8007558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <pvPortMalloc+0xf8>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	613b      	str	r3, [r7, #16]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007552:	69b8      	ldr	r0, [r7, #24]
 8007554:	f000 f908 	bl	8007768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <pvPortMalloc+0x188>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <pvPortMalloc+0x188>)
 8007564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007566:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <pvPortMalloc+0x188>)
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <pvPortMalloc+0x190>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d203      	bcs.n	800757a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <pvPortMalloc+0x188>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <pvPortMalloc+0x190>)
 8007578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <pvPortMalloc+0x184>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	431a      	orrs	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <pvPortMalloc+0x194>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <pvPortMalloc+0x194>)
 8007596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007598:	f7fe fd04 	bl	8005fa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <pvPortMalloc+0x174>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60fb      	str	r3, [r7, #12]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <pvPortMalloc+0x172>
	return pvReturn;
 80075bc:	69fb      	ldr	r3, [r7, #28]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20001944 	.word	0x20001944
 80075cc:	20001958 	.word	0x20001958
 80075d0:	20001948 	.word	0x20001948
 80075d4:	2000193c 	.word	0x2000193c
 80075d8:	2000194c 	.word	0x2000194c
 80075dc:	20001950 	.word	0x20001950

080075e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04d      	beq.n	800768e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075f2:	2308      	movs	r3, #8
 80075f4:	425b      	negs	r3, r3
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4413      	add	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	4b24      	ldr	r3, [pc, #144]	; (8007698 <vPortFree+0xb8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4013      	ands	r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <vPortFree+0x44>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60fb      	str	r3, [r7, #12]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <vPortFree+0x62>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60bb      	str	r3, [r7, #8]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <vPortFree+0xb8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01e      	beq.n	800768e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11a      	bne.n	800768e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <vPortFree+0xb8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	43db      	mvns	r3, r3
 8007662:	401a      	ands	r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007668:	f7fe fc8e 	bl	8005f88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <vPortFree+0xbc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4413      	add	r3, r2
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <vPortFree+0xbc>)
 8007678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800767a:	6938      	ldr	r0, [r7, #16]
 800767c:	f000 f874 	bl	8007768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <vPortFree+0xc0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3301      	adds	r3, #1
 8007686:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <vPortFree+0xc0>)
 8007688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800768a:	f7fe fc8b 	bl	8005fa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800768e:	bf00      	nop
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20001958 	.word	0x20001958
 800769c:	20001948 	.word	0x20001948
 80076a0:	20001954 	.word	0x20001954

080076a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80076ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076b0:	4b27      	ldr	r3, [pc, #156]	; (8007750 <prvHeapInit+0xac>)
 80076b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3307      	adds	r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	4a1f      	ldr	r2, [pc, #124]	; (8007750 <prvHeapInit+0xac>)
 80076d4:	4413      	add	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076dc:	4a1d      	ldr	r2, [pc, #116]	; (8007754 <prvHeapInit+0xb0>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <prvHeapInit+0xb0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076f0:	2208      	movs	r2, #8
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0307 	bic.w	r3, r3, #7
 80076fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a15      	ldr	r2, [pc, #84]	; (8007758 <prvHeapInit+0xb4>)
 8007704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <prvHeapInit+0xb4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800770e:	4b12      	ldr	r3, [pc, #72]	; (8007758 <prvHeapInit+0xb4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <prvHeapInit+0xb4>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	4a0a      	ldr	r2, [pc, #40]	; (800775c <prvHeapInit+0xb8>)
 8007732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <prvHeapInit+0xbc>)
 800773a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvHeapInit+0xc0>)
 800773e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20000d84 	.word	0x20000d84
 8007754:	2000193c 	.word	0x2000193c
 8007758:	20001944 	.word	0x20001944
 800775c:	2000194c 	.word	0x2000194c
 8007760:	20001948 	.word	0x20001948
 8007764:	20001958 	.word	0x20001958

08007768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007770:	4b28      	ldr	r3, [pc, #160]	; (8007814 <prvInsertBlockIntoFreeList+0xac>)
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <prvInsertBlockIntoFreeList+0x14>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	429a      	cmp	r2, r3
 8007784:	d8f7      	bhi.n	8007776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4413      	add	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d108      	bne.n	80077aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	441a      	add	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	441a      	add	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d118      	bne.n	80077f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <prvInsertBlockIntoFreeList+0xb0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d00d      	beq.n	80077e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	441a      	add	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e008      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <prvInsertBlockIntoFreeList+0xb0>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e003      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d002      	beq.n	8007806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	2000193c 	.word	0x2000193c
 8007818:	20001944 	.word	0x20001944

0800781c <__errno>:
 800781c:	4b01      	ldr	r3, [pc, #4]	; (8007824 <__errno+0x8>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000010 	.word	0x20000010

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f001 f80c 	bl	8008858 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	080089f0 	.word	0x080089f0
 8007864:	080089f0 	.word	0x080089f0
 8007868:	080089f0 	.word	0x080089f0
 800786c:	080089f4 	.word	0x080089f4

08007870 <memcpy>:
 8007870:	440a      	add	r2, r1
 8007872:	4291      	cmp	r1, r2
 8007874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007878:	d100      	bne.n	800787c <memcpy+0xc>
 800787a:	4770      	bx	lr
 800787c:	b510      	push	{r4, lr}
 800787e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007886:	4291      	cmp	r1, r2
 8007888:	d1f9      	bne.n	800787e <memcpy+0xe>
 800788a:	bd10      	pop	{r4, pc}

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <iprintf>:
 800789c:	b40f      	push	{r0, r1, r2, r3}
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <iprintf+0x2c>)
 80078a0:	b513      	push	{r0, r1, r4, lr}
 80078a2:	681c      	ldr	r4, [r3, #0]
 80078a4:	b124      	cbz	r4, 80078b0 <iprintf+0x14>
 80078a6:	69a3      	ldr	r3, [r4, #24]
 80078a8:	b913      	cbnz	r3, 80078b0 <iprintf+0x14>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fa70 	bl	8007d90 <__sinit>
 80078b0:	ab05      	add	r3, sp, #20
 80078b2:	9a04      	ldr	r2, [sp, #16]
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fc41 	bl	8008140 <_vfiprintf_r>
 80078be:	b002      	add	sp, #8
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	b004      	add	sp, #16
 80078c6:	4770      	bx	lr
 80078c8:	20000010 	.word	0x20000010

080078cc <_puts_r>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	460e      	mov	r6, r1
 80078d0:	4605      	mov	r5, r0
 80078d2:	b118      	cbz	r0, 80078dc <_puts_r+0x10>
 80078d4:	6983      	ldr	r3, [r0, #24]
 80078d6:	b90b      	cbnz	r3, 80078dc <_puts_r+0x10>
 80078d8:	f000 fa5a 	bl	8007d90 <__sinit>
 80078dc:	69ab      	ldr	r3, [r5, #24]
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	b913      	cbnz	r3, 80078e8 <_puts_r+0x1c>
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fa54 	bl	8007d90 <__sinit>
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <_puts_r+0xd0>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d120      	bne.n	8007930 <_puts_r+0x64>
 80078ee:	686c      	ldr	r4, [r5, #4]
 80078f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x36>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	0598      	lsls	r0, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x36>
 80078fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fe:	f000 fae5 	bl	8007ecc <__retarget_lock_acquire_recursive>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	0719      	lsls	r1, r3, #28
 8007906:	d51d      	bpl.n	8007944 <_puts_r+0x78>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b1db      	cbz	r3, 8007944 <_puts_r+0x78>
 800790c:	3e01      	subs	r6, #1
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007914:	3b01      	subs	r3, #1
 8007916:	60a3      	str	r3, [r4, #8]
 8007918:	bb39      	cbnz	r1, 800796a <_puts_r+0x9e>
 800791a:	2b00      	cmp	r3, #0
 800791c:	da38      	bge.n	8007990 <_puts_r+0xc4>
 800791e:	4622      	mov	r2, r4
 8007920:	210a      	movs	r1, #10
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f85a 	bl	80079dc <__swbuf_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d011      	beq.n	8007950 <_puts_r+0x84>
 800792c:	250a      	movs	r5, #10
 800792e:	e011      	b.n	8007954 <_puts_r+0x88>
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <_puts_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <_puts_r+0x6e>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7da      	b.n	80078f0 <_puts_r+0x24>
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <_puts_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7d5      	b.n	80078f0 <_puts_r+0x24>
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f89a 	bl	8007a80 <__swsetup_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	d0dd      	beq.n	800790c <_puts_r+0x40>
 8007950:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007956:	07da      	lsls	r2, r3, #31
 8007958:	d405      	bmi.n	8007966 <_puts_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	059b      	lsls	r3, r3, #22
 800795e:	d402      	bmi.n	8007966 <_puts_r+0x9a>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f000 fab4 	bl	8007ece <__retarget_lock_release_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	2b00      	cmp	r3, #0
 800796c:	da04      	bge.n	8007978 <_puts_r+0xac>
 800796e:	69a2      	ldr	r2, [r4, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	dc06      	bgt.n	8007982 <_puts_r+0xb6>
 8007974:	290a      	cmp	r1, #10
 8007976:	d004      	beq.n	8007982 <_puts_r+0xb6>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	7019      	strb	r1, [r3, #0]
 8007980:	e7c5      	b.n	800790e <_puts_r+0x42>
 8007982:	4622      	mov	r2, r4
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f829 	bl	80079dc <__swbuf_r>
 800798a:	3001      	adds	r0, #1
 800798c:	d1bf      	bne.n	800790e <_puts_r+0x42>
 800798e:	e7df      	b.n	8007950 <_puts_r+0x84>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	250a      	movs	r5, #10
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	701d      	strb	r5, [r3, #0]
 800799a:	e7db      	b.n	8007954 <_puts_r+0x88>
 800799c:	08008974 	.word	0x08008974
 80079a0:	08008994 	.word	0x08008994
 80079a4:	08008954 	.word	0x08008954

080079a8 <puts>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <puts+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f7ff bf8d 	b.w	80078cc <_puts_r>
 80079b2:	bf00      	nop
 80079b4:	20000010 	.word	0x20000010

080079b8 <strncmp>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	b16a      	cbz	r2, 80079d8 <strncmp+0x20>
 80079bc:	3901      	subs	r1, #1
 80079be:	1884      	adds	r4, r0, r2
 80079c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d103      	bne.n	80079d4 <strncmp+0x1c>
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d001      	beq.n	80079d4 <strncmp+0x1c>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f5      	bne.n	80079c0 <strncmp+0x8>
 80079d4:	1a98      	subs	r0, r3, r2
 80079d6:	bd10      	pop	{r4, pc}
 80079d8:	4610      	mov	r0, r2
 80079da:	e7fc      	b.n	80079d6 <strncmp+0x1e>

080079dc <__swbuf_r>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	460e      	mov	r6, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	4605      	mov	r5, r0
 80079e4:	b118      	cbz	r0, 80079ee <__swbuf_r+0x12>
 80079e6:	6983      	ldr	r3, [r0, #24]
 80079e8:	b90b      	cbnz	r3, 80079ee <__swbuf_r+0x12>
 80079ea:	f000 f9d1 	bl	8007d90 <__sinit>
 80079ee:	4b21      	ldr	r3, [pc, #132]	; (8007a74 <__swbuf_r+0x98>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	d12b      	bne.n	8007a4c <__swbuf_r+0x70>
 80079f4:	686c      	ldr	r4, [r5, #4]
 80079f6:	69a3      	ldr	r3, [r4, #24]
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	071a      	lsls	r2, r3, #28
 80079fe:	d52f      	bpl.n	8007a60 <__swbuf_r+0x84>
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	b36b      	cbz	r3, 8007a60 <__swbuf_r+0x84>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	1ac0      	subs	r0, r0, r3
 8007a0a:	6963      	ldr	r3, [r4, #20]
 8007a0c:	b2f6      	uxtb	r6, r6
 8007a0e:	4283      	cmp	r3, r0
 8007a10:	4637      	mov	r7, r6
 8007a12:	dc04      	bgt.n	8007a1e <__swbuf_r+0x42>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f926 	bl	8007c68 <_fflush_r>
 8007a1c:	bb30      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	701e      	strb	r6, [r3, #0]
 8007a2c:	6963      	ldr	r3, [r4, #20]
 8007a2e:	3001      	adds	r0, #1
 8007a30:	4283      	cmp	r3, r0
 8007a32:	d004      	beq.n	8007a3e <__swbuf_r+0x62>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d506      	bpl.n	8007a48 <__swbuf_r+0x6c>
 8007a3a:	2e0a      	cmp	r6, #10
 8007a3c:	d104      	bne.n	8007a48 <__swbuf_r+0x6c>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 f911 	bl	8007c68 <_fflush_r>
 8007a46:	b988      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a48:	4638      	mov	r0, r7
 8007a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <__swbuf_r+0x9c>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__swbuf_r+0x7a>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7cf      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <__swbuf_r+0xa0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7ca      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f80c 	bl	8007a80 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0cb      	beq.n	8007a04 <__swbuf_r+0x28>
 8007a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a70:	e7ea      	b.n	8007a48 <__swbuf_r+0x6c>
 8007a72:	bf00      	nop
 8007a74:	08008974 	.word	0x08008974
 8007a78:	08008994 	.word	0x08008994
 8007a7c:	08008954 	.word	0x08008954

08007a80 <__swsetup_r>:
 8007a80:	4b32      	ldr	r3, [pc, #200]	; (8007b4c <__swsetup_r+0xcc>)
 8007a82:	b570      	push	{r4, r5, r6, lr}
 8007a84:	681d      	ldr	r5, [r3, #0]
 8007a86:	4606      	mov	r6, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	b125      	cbz	r5, 8007a96 <__swsetup_r+0x16>
 8007a8c:	69ab      	ldr	r3, [r5, #24]
 8007a8e:	b913      	cbnz	r3, 8007a96 <__swsetup_r+0x16>
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 f97d 	bl	8007d90 <__sinit>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__swsetup_r+0xd0>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d10f      	bne.n	8007abc <__swsetup_r+0x3c>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa4:	0719      	lsls	r1, r3, #28
 8007aa6:	d42c      	bmi.n	8007b02 <__swsetup_r+0x82>
 8007aa8:	06dd      	lsls	r5, r3, #27
 8007aaa:	d411      	bmi.n	8007ad0 <__swsetup_r+0x50>
 8007aac:	2309      	movs	r3, #9
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aba:	e03e      	b.n	8007b3a <__swsetup_r+0xba>
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <__swsetup_r+0xd4>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <__swsetup_r+0x46>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7eb      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ac6:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <__swsetup_r+0xd8>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68ec      	ldreq	r4, [r5, #12]
 8007ace:	e7e6      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x7a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x6a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x66>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 fa59 	bl	8007f98 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x9a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x9a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4630      	mov	r0, r6
 8007b16:	f000 f9ff 	bl	8007f18 <__smakebuf_r>
 8007b1a:	89a0      	ldrh	r0, [r4, #12]
 8007b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b20:	f010 0301 	ands.w	r3, r0, #1
 8007b24:	d00a      	beq.n	8007b3c <__swsetup_r+0xbc>
 8007b26:	2300      	movs	r3, #0
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	6963      	ldr	r3, [r4, #20]
 8007b2c:	425b      	negs	r3, r3
 8007b2e:	61a3      	str	r3, [r4, #24]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	b943      	cbnz	r3, 8007b46 <__swsetup_r+0xc6>
 8007b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b38:	d1ba      	bne.n	8007ab0 <__swsetup_r+0x30>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	0781      	lsls	r1, r0, #30
 8007b3e:	bf58      	it	pl
 8007b40:	6963      	ldrpl	r3, [r4, #20]
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	e7f4      	b.n	8007b30 <__swsetup_r+0xb0>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7f7      	b.n	8007b3a <__swsetup_r+0xba>
 8007b4a:	bf00      	nop
 8007b4c:	20000010 	.word	0x20000010
 8007b50:	08008974 	.word	0x08008974
 8007b54:	08008994 	.word	0x08008994
 8007b58:	08008954 	.word	0x08008954

08007b5c <__sflush_r>:
 8007b5c:	898a      	ldrh	r2, [r1, #12]
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	0710      	lsls	r0, r2, #28
 8007b66:	460c      	mov	r4, r1
 8007b68:	d458      	bmi.n	8007c1c <__sflush_r+0xc0>
 8007b6a:	684b      	ldr	r3, [r1, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc05      	bgt.n	8007b7c <__sflush_r+0x20>
 8007b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dc02      	bgt.n	8007b7c <__sflush_r+0x20>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d0f9      	beq.n	8007b76 <__sflush_r+0x1a>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b88:	682f      	ldr	r7, [r5, #0]
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	d032      	beq.n	8007bf4 <__sflush_r+0x98>
 8007b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	075a      	lsls	r2, r3, #29
 8007b94:	d505      	bpl.n	8007ba2 <__sflush_r+0x46>
 8007b96:	6863      	ldr	r3, [r4, #4]
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b9c:	b10b      	cbz	r3, 8007ba2 <__sflush_r+0x46>
 8007b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ba0:	1ac0      	subs	r0, r0, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba8:	6a21      	ldr	r1, [r4, #32]
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b0      	blx	r6
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	d106      	bne.n	8007bc2 <__sflush_r+0x66>
 8007bb4:	6829      	ldr	r1, [r5, #0]
 8007bb6:	291d      	cmp	r1, #29
 8007bb8:	d82c      	bhi.n	8007c14 <__sflush_r+0xb8>
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <__sflush_r+0x108>)
 8007bbc:	40ca      	lsrs	r2, r1
 8007bbe:	07d6      	lsls	r6, r2, #31
 8007bc0:	d528      	bpl.n	8007c14 <__sflush_r+0xb8>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	6062      	str	r2, [r4, #4]
 8007bc6:	04d9      	lsls	r1, r3, #19
 8007bc8:	6922      	ldr	r2, [r4, #16]
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	d504      	bpl.n	8007bd8 <__sflush_r+0x7c>
 8007bce:	1c42      	adds	r2, r0, #1
 8007bd0:	d101      	bne.n	8007bd6 <__sflush_r+0x7a>
 8007bd2:	682b      	ldr	r3, [r5, #0]
 8007bd4:	b903      	cbnz	r3, 8007bd8 <__sflush_r+0x7c>
 8007bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bda:	602f      	str	r7, [r5, #0]
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d0ca      	beq.n	8007b76 <__sflush_r+0x1a>
 8007be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007be4:	4299      	cmp	r1, r3
 8007be6:	d002      	beq.n	8007bee <__sflush_r+0x92>
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 f9d5 	bl	8007f98 <_free_r>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8007bf2:	e7c1      	b.n	8007b78 <__sflush_r+0x1c>
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b0      	blx	r6
 8007bfc:	1c41      	adds	r1, r0, #1
 8007bfe:	d1c7      	bne.n	8007b90 <__sflush_r+0x34>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0c4      	beq.n	8007b90 <__sflush_r+0x34>
 8007c06:	2b1d      	cmp	r3, #29
 8007c08:	d001      	beq.n	8007c0e <__sflush_r+0xb2>
 8007c0a:	2b16      	cmp	r3, #22
 8007c0c:	d101      	bne.n	8007c12 <__sflush_r+0xb6>
 8007c0e:	602f      	str	r7, [r5, #0]
 8007c10:	e7b1      	b.n	8007b76 <__sflush_r+0x1a>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	e7ad      	b.n	8007b78 <__sflush_r+0x1c>
 8007c1c:	690f      	ldr	r7, [r1, #16]
 8007c1e:	2f00      	cmp	r7, #0
 8007c20:	d0a9      	beq.n	8007b76 <__sflush_r+0x1a>
 8007c22:	0793      	lsls	r3, r2, #30
 8007c24:	680e      	ldr	r6, [r1, #0]
 8007c26:	bf08      	it	eq
 8007c28:	694b      	ldreq	r3, [r1, #20]
 8007c2a:	600f      	str	r7, [r1, #0]
 8007c2c:	bf18      	it	ne
 8007c2e:	2300      	movne	r3, #0
 8007c30:	eba6 0807 	sub.w	r8, r6, r7
 8007c34:	608b      	str	r3, [r1, #8]
 8007c36:	f1b8 0f00 	cmp.w	r8, #0
 8007c3a:	dd9c      	ble.n	8007b76 <__sflush_r+0x1a>
 8007c3c:	6a21      	ldr	r1, [r4, #32]
 8007c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c40:	4643      	mov	r3, r8
 8007c42:	463a      	mov	r2, r7
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b0      	blx	r6
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	dc06      	bgt.n	8007c5a <__sflush_r+0xfe>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c58:	e78e      	b.n	8007b78 <__sflush_r+0x1c>
 8007c5a:	4407      	add	r7, r0
 8007c5c:	eba8 0800 	sub.w	r8, r8, r0
 8007c60:	e7e9      	b.n	8007c36 <__sflush_r+0xda>
 8007c62:	bf00      	nop
 8007c64:	20400001 	.word	0x20400001

08007c68 <_fflush_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	690b      	ldr	r3, [r1, #16]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b913      	cbnz	r3, 8007c78 <_fflush_r+0x10>
 8007c72:	2500      	movs	r5, #0
 8007c74:	4628      	mov	r0, r5
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	b118      	cbz	r0, 8007c82 <_fflush_r+0x1a>
 8007c7a:	6983      	ldr	r3, [r0, #24]
 8007c7c:	b90b      	cbnz	r3, 8007c82 <_fflush_r+0x1a>
 8007c7e:	f000 f887 	bl	8007d90 <__sinit>
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <_fflush_r+0x6c>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	d11b      	bne.n	8007cc0 <_fflush_r+0x58>
 8007c88:	686c      	ldr	r4, [r5, #4]
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0ef      	beq.n	8007c72 <_fflush_r+0xa>
 8007c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c94:	07d0      	lsls	r0, r2, #31
 8007c96:	d404      	bmi.n	8007ca2 <_fflush_r+0x3a>
 8007c98:	0599      	lsls	r1, r3, #22
 8007c9a:	d402      	bmi.n	8007ca2 <_fflush_r+0x3a>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9e:	f000 f915 	bl	8007ecc <__retarget_lock_acquire_recursive>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7ff ff59 	bl	8007b5c <__sflush_r>
 8007caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	4605      	mov	r5, r0
 8007cb0:	d4e0      	bmi.n	8007c74 <_fflush_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	059b      	lsls	r3, r3, #22
 8007cb6:	d4dd      	bmi.n	8007c74 <_fflush_r+0xc>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cba:	f000 f908 	bl	8007ece <__retarget_lock_release_recursive>
 8007cbe:	e7d9      	b.n	8007c74 <_fflush_r+0xc>
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <_fflush_r+0x70>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <_fflush_r+0x62>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7df      	b.n	8007c8a <_fflush_r+0x22>
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <_fflush_r+0x74>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7da      	b.n	8007c8a <_fflush_r+0x22>
 8007cd4:	08008974 	.word	0x08008974
 8007cd8:	08008994 	.word	0x08008994
 8007cdc:	08008954 	.word	0x08008954

08007ce0 <std>:
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cee:	6083      	str	r3, [r0, #8]
 8007cf0:	8181      	strh	r1, [r0, #12]
 8007cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cf4:	81c2      	strh	r2, [r0, #14]
 8007cf6:	6183      	str	r3, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	305c      	adds	r0, #92	; 0x5c
 8007cfe:	f7ff fdc5 	bl	800788c <memset>
 8007d02:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <std+0x38>)
 8007d04:	6263      	str	r3, [r4, #36]	; 0x24
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <std+0x3c>)
 8007d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <std+0x40>)
 8007d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <std+0x44>)
 8007d10:	6224      	str	r4, [r4, #32]
 8007d12:	6323      	str	r3, [r4, #48]	; 0x30
 8007d14:	bd10      	pop	{r4, pc}
 8007d16:	bf00      	nop
 8007d18:	080086e9 	.word	0x080086e9
 8007d1c:	0800870b 	.word	0x0800870b
 8007d20:	08008743 	.word	0x08008743
 8007d24:	08008767 	.word	0x08008767

08007d28 <_cleanup_r>:
 8007d28:	4901      	ldr	r1, [pc, #4]	; (8007d30 <_cleanup_r+0x8>)
 8007d2a:	f000 b8af 	b.w	8007e8c <_fwalk_reent>
 8007d2e:	bf00      	nop
 8007d30:	08007c69 	.word	0x08007c69

08007d34 <__sfmoreglue>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	1e4a      	subs	r2, r1, #1
 8007d38:	2568      	movs	r5, #104	; 0x68
 8007d3a:	4355      	muls	r5, r2
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d42:	f000 f979 	bl	8008038 <_malloc_r>
 8007d46:	4604      	mov	r4, r0
 8007d48:	b140      	cbz	r0, 8007d5c <__sfmoreglue+0x28>
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d50:	300c      	adds	r0, #12
 8007d52:	60a0      	str	r0, [r4, #8]
 8007d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d58:	f7ff fd98 	bl	800788c <memset>
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}

08007d60 <__sfp_lock_acquire>:
 8007d60:	4801      	ldr	r0, [pc, #4]	; (8007d68 <__sfp_lock_acquire+0x8>)
 8007d62:	f000 b8b3 	b.w	8007ecc <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	20001d34 	.word	0x20001d34

08007d6c <__sfp_lock_release>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__sfp_lock_release+0x8>)
 8007d6e:	f000 b8ae 	b.w	8007ece <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	20001d34 	.word	0x20001d34

08007d78 <__sinit_lock_acquire>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__sinit_lock_acquire+0x8>)
 8007d7a:	f000 b8a7 	b.w	8007ecc <__retarget_lock_acquire_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20001d2f 	.word	0x20001d2f

08007d84 <__sinit_lock_release>:
 8007d84:	4801      	ldr	r0, [pc, #4]	; (8007d8c <__sinit_lock_release+0x8>)
 8007d86:	f000 b8a2 	b.w	8007ece <__retarget_lock_release_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	20001d2f 	.word	0x20001d2f

08007d90 <__sinit>:
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7ff fff0 	bl	8007d78 <__sinit_lock_acquire>
 8007d98:	69a3      	ldr	r3, [r4, #24]
 8007d9a:	b11b      	cbz	r3, 8007da4 <__sinit+0x14>
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	f7ff bff0 	b.w	8007d84 <__sinit_lock_release>
 8007da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007da8:	6523      	str	r3, [r4, #80]	; 0x50
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <__sinit+0x68>)
 8007dac:	4a13      	ldr	r2, [pc, #76]	; (8007dfc <__sinit+0x6c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	bf04      	itt	eq
 8007db6:	2301      	moveq	r3, #1
 8007db8:	61a3      	streq	r3, [r4, #24]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 f820 	bl	8007e00 <__sfp>
 8007dc0:	6060      	str	r0, [r4, #4]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f81c 	bl	8007e00 <__sfp>
 8007dc8:	60a0      	str	r0, [r4, #8]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 f818 	bl	8007e00 <__sfp>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	60e0      	str	r0, [r4, #12]
 8007dd4:	2104      	movs	r1, #4
 8007dd6:	6860      	ldr	r0, [r4, #4]
 8007dd8:	f7ff ff82 	bl	8007ce0 <std>
 8007ddc:	68a0      	ldr	r0, [r4, #8]
 8007dde:	2201      	movs	r2, #1
 8007de0:	2109      	movs	r1, #9
 8007de2:	f7ff ff7d 	bl	8007ce0 <std>
 8007de6:	68e0      	ldr	r0, [r4, #12]
 8007de8:	2202      	movs	r2, #2
 8007dea:	2112      	movs	r1, #18
 8007dec:	f7ff ff78 	bl	8007ce0 <std>
 8007df0:	2301      	movs	r3, #1
 8007df2:	61a3      	str	r3, [r4, #24]
 8007df4:	e7d2      	b.n	8007d9c <__sinit+0xc>
 8007df6:	bf00      	nop
 8007df8:	08008950 	.word	0x08008950
 8007dfc:	08007d29 	.word	0x08007d29

08007e00 <__sfp>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	4607      	mov	r7, r0
 8007e04:	f7ff ffac 	bl	8007d60 <__sfp_lock_acquire>
 8007e08:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <__sfp+0x84>)
 8007e0a:	681e      	ldr	r6, [r3, #0]
 8007e0c:	69b3      	ldr	r3, [r6, #24]
 8007e0e:	b913      	cbnz	r3, 8007e16 <__sfp+0x16>
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7ff ffbd 	bl	8007d90 <__sinit>
 8007e16:	3648      	adds	r6, #72	; 0x48
 8007e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	d503      	bpl.n	8007e28 <__sfp+0x28>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	b30b      	cbz	r3, 8007e68 <__sfp+0x68>
 8007e24:	6836      	ldr	r6, [r6, #0]
 8007e26:	e7f7      	b.n	8007e18 <__sfp+0x18>
 8007e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e2c:	b9d5      	cbnz	r5, 8007e64 <__sfp+0x64>
 8007e2e:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <__sfp+0x88>)
 8007e30:	60e3      	str	r3, [r4, #12]
 8007e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e36:	6665      	str	r5, [r4, #100]	; 0x64
 8007e38:	f000 f847 	bl	8007eca <__retarget_lock_init_recursive>
 8007e3c:	f7ff ff96 	bl	8007d6c <__sfp_lock_release>
 8007e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e48:	6025      	str	r5, [r4, #0]
 8007e4a:	61a5      	str	r5, [r4, #24]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e54:	f7ff fd1a 	bl	800788c <memset>
 8007e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e60:	4620      	mov	r0, r4
 8007e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e64:	3468      	adds	r4, #104	; 0x68
 8007e66:	e7d9      	b.n	8007e1c <__sfp+0x1c>
 8007e68:	2104      	movs	r1, #4
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	f7ff ff62 	bl	8007d34 <__sfmoreglue>
 8007e70:	4604      	mov	r4, r0
 8007e72:	6030      	str	r0, [r6, #0]
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d1d5      	bne.n	8007e24 <__sfp+0x24>
 8007e78:	f7ff ff78 	bl	8007d6c <__sfp_lock_release>
 8007e7c:	230c      	movs	r3, #12
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	e7ee      	b.n	8007e60 <__sfp+0x60>
 8007e82:	bf00      	nop
 8007e84:	08008950 	.word	0x08008950
 8007e88:	ffff0001 	.word	0xffff0001

08007e8c <_fwalk_reent>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	4606      	mov	r6, r0
 8007e92:	4688      	mov	r8, r1
 8007e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e98:	2700      	movs	r7, #0
 8007e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea2:	d505      	bpl.n	8007eb0 <_fwalk_reent+0x24>
 8007ea4:	6824      	ldr	r4, [r4, #0]
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d1f7      	bne.n	8007e9a <_fwalk_reent+0xe>
 8007eaa:	4638      	mov	r0, r7
 8007eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb0:	89ab      	ldrh	r3, [r5, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d907      	bls.n	8007ec6 <_fwalk_reent+0x3a>
 8007eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	d003      	beq.n	8007ec6 <_fwalk_reent+0x3a>
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	47c0      	blx	r8
 8007ec4:	4307      	orrs	r7, r0
 8007ec6:	3568      	adds	r5, #104	; 0x68
 8007ec8:	e7e9      	b.n	8007e9e <_fwalk_reent+0x12>

08007eca <__retarget_lock_init_recursive>:
 8007eca:	4770      	bx	lr

08007ecc <__retarget_lock_acquire_recursive>:
 8007ecc:	4770      	bx	lr

08007ece <__retarget_lock_release_recursive>:
 8007ece:	4770      	bx	lr

08007ed0 <__swhatbuf_r>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	460e      	mov	r6, r1
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	b096      	sub	sp, #88	; 0x58
 8007edc:	4614      	mov	r4, r2
 8007ede:	461d      	mov	r5, r3
 8007ee0:	da07      	bge.n	8007ef2 <__swhatbuf_r+0x22>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	89b3      	ldrh	r3, [r6, #12]
 8007ee8:	061a      	lsls	r2, r3, #24
 8007eea:	d410      	bmi.n	8007f0e <__swhatbuf_r+0x3e>
 8007eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef0:	e00e      	b.n	8007f10 <__swhatbuf_r+0x40>
 8007ef2:	466a      	mov	r2, sp
 8007ef4:	f000 fc5e 	bl	80087b4 <_fstat_r>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	dbf2      	blt.n	8007ee2 <__swhatbuf_r+0x12>
 8007efc:	9a01      	ldr	r2, [sp, #4]
 8007efe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f06:	425a      	negs	r2, r3
 8007f08:	415a      	adcs	r2, r3
 8007f0a:	602a      	str	r2, [r5, #0]
 8007f0c:	e7ee      	b.n	8007eec <__swhatbuf_r+0x1c>
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	2000      	movs	r0, #0
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	b016      	add	sp, #88	; 0x58
 8007f16:	bd70      	pop	{r4, r5, r6, pc}

08007f18 <__smakebuf_r>:
 8007f18:	898b      	ldrh	r3, [r1, #12]
 8007f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f1c:	079d      	lsls	r5, r3, #30
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	d507      	bpl.n	8007f34 <__smakebuf_r+0x1c>
 8007f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	6163      	str	r3, [r4, #20]
 8007f30:	b002      	add	sp, #8
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	ab01      	add	r3, sp, #4
 8007f36:	466a      	mov	r2, sp
 8007f38:	f7ff ffca 	bl	8007ed0 <__swhatbuf_r>
 8007f3c:	9900      	ldr	r1, [sp, #0]
 8007f3e:	4605      	mov	r5, r0
 8007f40:	4630      	mov	r0, r6
 8007f42:	f000 f879 	bl	8008038 <_malloc_r>
 8007f46:	b948      	cbnz	r0, 8007f5c <__smakebuf_r+0x44>
 8007f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4c:	059a      	lsls	r2, r3, #22
 8007f4e:	d4ef      	bmi.n	8007f30 <__smakebuf_r+0x18>
 8007f50:	f023 0303 	bic.w	r3, r3, #3
 8007f54:	f043 0302 	orr.w	r3, r3, #2
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	e7e3      	b.n	8007f24 <__smakebuf_r+0xc>
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <__smakebuf_r+0x7c>)
 8007f5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	6020      	str	r0, [r4, #0]
 8007f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	9b00      	ldr	r3, [sp, #0]
 8007f6c:	6163      	str	r3, [r4, #20]
 8007f6e:	9b01      	ldr	r3, [sp, #4]
 8007f70:	6120      	str	r0, [r4, #16]
 8007f72:	b15b      	cbz	r3, 8007f8c <__smakebuf_r+0x74>
 8007f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 fc2d 	bl	80087d8 <_isatty_r>
 8007f7e:	b128      	cbz	r0, 8007f8c <__smakebuf_r+0x74>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	89a0      	ldrh	r0, [r4, #12]
 8007f8e:	4305      	orrs	r5, r0
 8007f90:	81a5      	strh	r5, [r4, #12]
 8007f92:	e7cd      	b.n	8007f30 <__smakebuf_r+0x18>
 8007f94:	08007d29 	.word	0x08007d29

08007f98 <_free_r>:
 8007f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	d048      	beq.n	8008030 <_free_r+0x98>
 8007f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa2:	9001      	str	r0, [sp, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8007faa:	bfb8      	it	lt
 8007fac:	18e4      	addlt	r4, r4, r3
 8007fae:	f000 fc35 	bl	800881c <__malloc_lock>
 8007fb2:	4a20      	ldr	r2, [pc, #128]	; (8008034 <_free_r+0x9c>)
 8007fb4:	9801      	ldr	r0, [sp, #4]
 8007fb6:	6813      	ldr	r3, [r2, #0]
 8007fb8:	4615      	mov	r5, r2
 8007fba:	b933      	cbnz	r3, 8007fca <_free_r+0x32>
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	6014      	str	r4, [r2, #0]
 8007fc0:	b003      	add	sp, #12
 8007fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fc6:	f000 bc2f 	b.w	8008828 <__malloc_unlock>
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	d90b      	bls.n	8007fe6 <_free_r+0x4e>
 8007fce:	6821      	ldr	r1, [r4, #0]
 8007fd0:	1862      	adds	r2, r4, r1
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	bf04      	itt	eq
 8007fd6:	681a      	ldreq	r2, [r3, #0]
 8007fd8:	685b      	ldreq	r3, [r3, #4]
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	bf04      	itt	eq
 8007fde:	1852      	addeq	r2, r2, r1
 8007fe0:	6022      	streq	r2, [r4, #0]
 8007fe2:	602c      	str	r4, [r5, #0]
 8007fe4:	e7ec      	b.n	8007fc0 <_free_r+0x28>
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	b10b      	cbz	r3, 8007ff0 <_free_r+0x58>
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	d9fa      	bls.n	8007fe6 <_free_r+0x4e>
 8007ff0:	6811      	ldr	r1, [r2, #0]
 8007ff2:	1855      	adds	r5, r2, r1
 8007ff4:	42a5      	cmp	r5, r4
 8007ff6:	d10b      	bne.n	8008010 <_free_r+0x78>
 8007ff8:	6824      	ldr	r4, [r4, #0]
 8007ffa:	4421      	add	r1, r4
 8007ffc:	1854      	adds	r4, r2, r1
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	d1dd      	bne.n	8007fc0 <_free_r+0x28>
 8008004:	681c      	ldr	r4, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	6053      	str	r3, [r2, #4]
 800800a:	4421      	add	r1, r4
 800800c:	6011      	str	r1, [r2, #0]
 800800e:	e7d7      	b.n	8007fc0 <_free_r+0x28>
 8008010:	d902      	bls.n	8008018 <_free_r+0x80>
 8008012:	230c      	movs	r3, #12
 8008014:	6003      	str	r3, [r0, #0]
 8008016:	e7d3      	b.n	8007fc0 <_free_r+0x28>
 8008018:	6825      	ldr	r5, [r4, #0]
 800801a:	1961      	adds	r1, r4, r5
 800801c:	428b      	cmp	r3, r1
 800801e:	bf04      	itt	eq
 8008020:	6819      	ldreq	r1, [r3, #0]
 8008022:	685b      	ldreq	r3, [r3, #4]
 8008024:	6063      	str	r3, [r4, #4]
 8008026:	bf04      	itt	eq
 8008028:	1949      	addeq	r1, r1, r5
 800802a:	6021      	streq	r1, [r4, #0]
 800802c:	6054      	str	r4, [r2, #4]
 800802e:	e7c7      	b.n	8007fc0 <_free_r+0x28>
 8008030:	b003      	add	sp, #12
 8008032:	bd30      	pop	{r4, r5, pc}
 8008034:	2000195c 	.word	0x2000195c

08008038 <_malloc_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	1ccd      	adds	r5, r1, #3
 800803c:	f025 0503 	bic.w	r5, r5, #3
 8008040:	3508      	adds	r5, #8
 8008042:	2d0c      	cmp	r5, #12
 8008044:	bf38      	it	cc
 8008046:	250c      	movcc	r5, #12
 8008048:	2d00      	cmp	r5, #0
 800804a:	4606      	mov	r6, r0
 800804c:	db01      	blt.n	8008052 <_malloc_r+0x1a>
 800804e:	42a9      	cmp	r1, r5
 8008050:	d903      	bls.n	800805a <_malloc_r+0x22>
 8008052:	230c      	movs	r3, #12
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	2000      	movs	r0, #0
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805a:	f000 fbdf 	bl	800881c <__malloc_lock>
 800805e:	4921      	ldr	r1, [pc, #132]	; (80080e4 <_malloc_r+0xac>)
 8008060:	680a      	ldr	r2, [r1, #0]
 8008062:	4614      	mov	r4, r2
 8008064:	b99c      	cbnz	r4, 800808e <_malloc_r+0x56>
 8008066:	4f20      	ldr	r7, [pc, #128]	; (80080e8 <_malloc_r+0xb0>)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	b923      	cbnz	r3, 8008076 <_malloc_r+0x3e>
 800806c:	4621      	mov	r1, r4
 800806e:	4630      	mov	r0, r6
 8008070:	f000 fb2a 	bl	80086c8 <_sbrk_r>
 8008074:	6038      	str	r0, [r7, #0]
 8008076:	4629      	mov	r1, r5
 8008078:	4630      	mov	r0, r6
 800807a:	f000 fb25 	bl	80086c8 <_sbrk_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d123      	bne.n	80080ca <_malloc_r+0x92>
 8008082:	230c      	movs	r3, #12
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	4630      	mov	r0, r6
 8008088:	f000 fbce 	bl	8008828 <__malloc_unlock>
 800808c:	e7e3      	b.n	8008056 <_malloc_r+0x1e>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	1b5b      	subs	r3, r3, r5
 8008092:	d417      	bmi.n	80080c4 <_malloc_r+0x8c>
 8008094:	2b0b      	cmp	r3, #11
 8008096:	d903      	bls.n	80080a0 <_malloc_r+0x68>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	441c      	add	r4, r3
 800809c:	6025      	str	r5, [r4, #0]
 800809e:	e004      	b.n	80080aa <_malloc_r+0x72>
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	42a2      	cmp	r2, r4
 80080a4:	bf0c      	ite	eq
 80080a6:	600b      	streq	r3, [r1, #0]
 80080a8:	6053      	strne	r3, [r2, #4]
 80080aa:	4630      	mov	r0, r6
 80080ac:	f000 fbbc 	bl	8008828 <__malloc_unlock>
 80080b0:	f104 000b 	add.w	r0, r4, #11
 80080b4:	1d23      	adds	r3, r4, #4
 80080b6:	f020 0007 	bic.w	r0, r0, #7
 80080ba:	1ac2      	subs	r2, r0, r3
 80080bc:	d0cc      	beq.n	8008058 <_malloc_r+0x20>
 80080be:	1a1b      	subs	r3, r3, r0
 80080c0:	50a3      	str	r3, [r4, r2]
 80080c2:	e7c9      	b.n	8008058 <_malloc_r+0x20>
 80080c4:	4622      	mov	r2, r4
 80080c6:	6864      	ldr	r4, [r4, #4]
 80080c8:	e7cc      	b.n	8008064 <_malloc_r+0x2c>
 80080ca:	1cc4      	adds	r4, r0, #3
 80080cc:	f024 0403 	bic.w	r4, r4, #3
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d0e3      	beq.n	800809c <_malloc_r+0x64>
 80080d4:	1a21      	subs	r1, r4, r0
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 faf6 	bl	80086c8 <_sbrk_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	d1dd      	bne.n	800809c <_malloc_r+0x64>
 80080e0:	e7cf      	b.n	8008082 <_malloc_r+0x4a>
 80080e2:	bf00      	nop
 80080e4:	2000195c 	.word	0x2000195c
 80080e8:	20001960 	.word	0x20001960

080080ec <__sfputc_r>:
 80080ec:	6893      	ldr	r3, [r2, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	b410      	push	{r4}
 80080f4:	6093      	str	r3, [r2, #8]
 80080f6:	da08      	bge.n	800810a <__sfputc_r+0x1e>
 80080f8:	6994      	ldr	r4, [r2, #24]
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	db01      	blt.n	8008102 <__sfputc_r+0x16>
 80080fe:	290a      	cmp	r1, #10
 8008100:	d103      	bne.n	800810a <__sfputc_r+0x1e>
 8008102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008106:	f7ff bc69 	b.w	80079dc <__swbuf_r>
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	1c58      	adds	r0, r3, #1
 800810e:	6010      	str	r0, [r2, #0]
 8008110:	7019      	strb	r1, [r3, #0]
 8008112:	4608      	mov	r0, r1
 8008114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008118:	4770      	bx	lr

0800811a <__sfputs_r>:
 800811a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	4614      	mov	r4, r2
 8008122:	18d5      	adds	r5, r2, r3
 8008124:	42ac      	cmp	r4, r5
 8008126:	d101      	bne.n	800812c <__sfputs_r+0x12>
 8008128:	2000      	movs	r0, #0
 800812a:	e007      	b.n	800813c <__sfputs_r+0x22>
 800812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008130:	463a      	mov	r2, r7
 8008132:	4630      	mov	r0, r6
 8008134:	f7ff ffda 	bl	80080ec <__sfputc_r>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d1f3      	bne.n	8008124 <__sfputs_r+0xa>
 800813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008140 <_vfiprintf_r>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	460d      	mov	r5, r1
 8008146:	b09d      	sub	sp, #116	; 0x74
 8008148:	4614      	mov	r4, r2
 800814a:	4698      	mov	r8, r3
 800814c:	4606      	mov	r6, r0
 800814e:	b118      	cbz	r0, 8008158 <_vfiprintf_r+0x18>
 8008150:	6983      	ldr	r3, [r0, #24]
 8008152:	b90b      	cbnz	r3, 8008158 <_vfiprintf_r+0x18>
 8008154:	f7ff fe1c 	bl	8007d90 <__sinit>
 8008158:	4b89      	ldr	r3, [pc, #548]	; (8008380 <_vfiprintf_r+0x240>)
 800815a:	429d      	cmp	r5, r3
 800815c:	d11b      	bne.n	8008196 <_vfiprintf_r+0x56>
 800815e:	6875      	ldr	r5, [r6, #4]
 8008160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008162:	07d9      	lsls	r1, r3, #31
 8008164:	d405      	bmi.n	8008172 <_vfiprintf_r+0x32>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d402      	bmi.n	8008172 <_vfiprintf_r+0x32>
 800816c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800816e:	f7ff fead 	bl	8007ecc <__retarget_lock_acquire_recursive>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	071b      	lsls	r3, r3, #28
 8008176:	d501      	bpl.n	800817c <_vfiprintf_r+0x3c>
 8008178:	692b      	ldr	r3, [r5, #16]
 800817a:	b9eb      	cbnz	r3, 80081b8 <_vfiprintf_r+0x78>
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff fc7e 	bl	8007a80 <__swsetup_r>
 8008184:	b1c0      	cbz	r0, 80081b8 <_vfiprintf_r+0x78>
 8008186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008188:	07dc      	lsls	r4, r3, #31
 800818a:	d50e      	bpl.n	80081aa <_vfiprintf_r+0x6a>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008190:	b01d      	add	sp, #116	; 0x74
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <_vfiprintf_r+0x244>)
 8008198:	429d      	cmp	r5, r3
 800819a:	d101      	bne.n	80081a0 <_vfiprintf_r+0x60>
 800819c:	68b5      	ldr	r5, [r6, #8]
 800819e:	e7df      	b.n	8008160 <_vfiprintf_r+0x20>
 80081a0:	4b79      	ldr	r3, [pc, #484]	; (8008388 <_vfiprintf_r+0x248>)
 80081a2:	429d      	cmp	r5, r3
 80081a4:	bf08      	it	eq
 80081a6:	68f5      	ldreq	r5, [r6, #12]
 80081a8:	e7da      	b.n	8008160 <_vfiprintf_r+0x20>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	0598      	lsls	r0, r3, #22
 80081ae:	d4ed      	bmi.n	800818c <_vfiprintf_r+0x4c>
 80081b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b2:	f7ff fe8c 	bl	8007ece <__retarget_lock_release_recursive>
 80081b6:	e7e9      	b.n	800818c <_vfiprintf_r+0x4c>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	2320      	movs	r3, #32
 80081be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c6:	2330      	movs	r3, #48	; 0x30
 80081c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800838c <_vfiprintf_r+0x24c>
 80081cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	4623      	mov	r3, r4
 80081d6:	469a      	mov	sl, r3
 80081d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081dc:	b10a      	cbz	r2, 80081e2 <_vfiprintf_r+0xa2>
 80081de:	2a25      	cmp	r2, #37	; 0x25
 80081e0:	d1f9      	bne.n	80081d6 <_vfiprintf_r+0x96>
 80081e2:	ebba 0b04 	subs.w	fp, sl, r4
 80081e6:	d00b      	beq.n	8008200 <_vfiprintf_r+0xc0>
 80081e8:	465b      	mov	r3, fp
 80081ea:	4622      	mov	r2, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ff93 	bl	800811a <__sfputs_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	f000 80aa 	beq.w	800834e <_vfiprintf_r+0x20e>
 80081fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fc:	445a      	add	r2, fp
 80081fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008200:	f89a 3000 	ldrb.w	r3, [sl]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a2 	beq.w	800834e <_vfiprintf_r+0x20e>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008220:	931a      	str	r3, [sp, #104]	; 0x68
 8008222:	4654      	mov	r4, sl
 8008224:	2205      	movs	r2, #5
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	4858      	ldr	r0, [pc, #352]	; (800838c <_vfiprintf_r+0x24c>)
 800822c:	f7f7 ffd8 	bl	80001e0 <memchr>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	b9d8      	cbnz	r0, 800826c <_vfiprintf_r+0x12c>
 8008234:	06d1      	lsls	r1, r2, #27
 8008236:	bf44      	itt	mi
 8008238:	2320      	movmi	r3, #32
 800823a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823e:	0713      	lsls	r3, r2, #28
 8008240:	bf44      	itt	mi
 8008242:	232b      	movmi	r3, #43	; 0x2b
 8008244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008248:	f89a 3000 	ldrb.w	r3, [sl]
 800824c:	2b2a      	cmp	r3, #42	; 0x2a
 800824e:	d015      	beq.n	800827c <_vfiprintf_r+0x13c>
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	4654      	mov	r4, sl
 8008254:	2000      	movs	r0, #0
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4621      	mov	r1, r4
 800825c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008260:	3b30      	subs	r3, #48	; 0x30
 8008262:	2b09      	cmp	r3, #9
 8008264:	d94e      	bls.n	8008304 <_vfiprintf_r+0x1c4>
 8008266:	b1b0      	cbz	r0, 8008296 <_vfiprintf_r+0x156>
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	e014      	b.n	8008296 <_vfiprintf_r+0x156>
 800826c:	eba0 0308 	sub.w	r3, r0, r8
 8008270:	fa09 f303 	lsl.w	r3, r9, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	46a2      	mov	sl, r4
 800827a:	e7d2      	b.n	8008222 <_vfiprintf_r+0xe2>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1d19      	adds	r1, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	9103      	str	r1, [sp, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfbb      	ittet	lt
 8008288:	425b      	neglt	r3, r3
 800828a:	f042 0202 	orrlt.w	r2, r2, #2
 800828e:	9307      	strge	r3, [sp, #28]
 8008290:	9307      	strlt	r3, [sp, #28]
 8008292:	bfb8      	it	lt
 8008294:	9204      	strlt	r2, [sp, #16]
 8008296:	7823      	ldrb	r3, [r4, #0]
 8008298:	2b2e      	cmp	r3, #46	; 0x2e
 800829a:	d10c      	bne.n	80082b6 <_vfiprintf_r+0x176>
 800829c:	7863      	ldrb	r3, [r4, #1]
 800829e:	2b2a      	cmp	r3, #42	; 0x2a
 80082a0:	d135      	bne.n	800830e <_vfiprintf_r+0x1ce>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	1d1a      	adds	r2, r3, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	9203      	str	r2, [sp, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfb8      	it	lt
 80082ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082b2:	3402      	adds	r4, #2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800839c <_vfiprintf_r+0x25c>
 80082ba:	7821      	ldrb	r1, [r4, #0]
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	f7f7 ff8e 	bl	80001e0 <memchr>
 80082c4:	b140      	cbz	r0, 80082d8 <_vfiprintf_r+0x198>
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	eba0 000a 	sub.w	r0, r0, sl
 80082cc:	fa03 f000 	lsl.w	r0, r3, r0
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	4303      	orrs	r3, r0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	482c      	ldr	r0, [pc, #176]	; (8008390 <_vfiprintf_r+0x250>)
 80082de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e2:	2206      	movs	r2, #6
 80082e4:	f7f7 ff7c 	bl	80001e0 <memchr>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d03f      	beq.n	800836c <_vfiprintf_r+0x22c>
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <_vfiprintf_r+0x254>)
 80082ee:	bb1b      	cbnz	r3, 8008338 <_vfiprintf_r+0x1f8>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	3307      	adds	r3, #7
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	3308      	adds	r3, #8
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	443b      	add	r3, r7
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	e767      	b.n	80081d4 <_vfiprintf_r+0x94>
 8008304:	fb0c 3202 	mla	r2, ip, r2, r3
 8008308:	460c      	mov	r4, r1
 800830a:	2001      	movs	r0, #1
 800830c:	e7a5      	b.n	800825a <_vfiprintf_r+0x11a>
 800830e:	2300      	movs	r3, #0
 8008310:	3401      	adds	r4, #1
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	4619      	mov	r1, r3
 8008316:	f04f 0c0a 	mov.w	ip, #10
 800831a:	4620      	mov	r0, r4
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	3a30      	subs	r2, #48	; 0x30
 8008322:	2a09      	cmp	r2, #9
 8008324:	d903      	bls.n	800832e <_vfiprintf_r+0x1ee>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0c5      	beq.n	80082b6 <_vfiprintf_r+0x176>
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	e7c3      	b.n	80082b6 <_vfiprintf_r+0x176>
 800832e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008332:	4604      	mov	r4, r0
 8008334:	2301      	movs	r3, #1
 8008336:	e7f0      	b.n	800831a <_vfiprintf_r+0x1da>
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <_vfiprintf_r+0x258>)
 8008340:	a904      	add	r1, sp, #16
 8008342:	4630      	mov	r0, r6
 8008344:	f3af 8000 	nop.w
 8008348:	4607      	mov	r7, r0
 800834a:	1c78      	adds	r0, r7, #1
 800834c:	d1d6      	bne.n	80082fc <_vfiprintf_r+0x1bc>
 800834e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008350:	07d9      	lsls	r1, r3, #31
 8008352:	d405      	bmi.n	8008360 <_vfiprintf_r+0x220>
 8008354:	89ab      	ldrh	r3, [r5, #12]
 8008356:	059a      	lsls	r2, r3, #22
 8008358:	d402      	bmi.n	8008360 <_vfiprintf_r+0x220>
 800835a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835c:	f7ff fdb7 	bl	8007ece <__retarget_lock_release_recursive>
 8008360:	89ab      	ldrh	r3, [r5, #12]
 8008362:	065b      	lsls	r3, r3, #25
 8008364:	f53f af12 	bmi.w	800818c <_vfiprintf_r+0x4c>
 8008368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836a:	e711      	b.n	8008190 <_vfiprintf_r+0x50>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <_vfiprintf_r+0x258>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4630      	mov	r0, r6
 8008378:	f000 f880 	bl	800847c <_printf_i>
 800837c:	e7e4      	b.n	8008348 <_vfiprintf_r+0x208>
 800837e:	bf00      	nop
 8008380:	08008974 	.word	0x08008974
 8008384:	08008994 	.word	0x08008994
 8008388:	08008954 	.word	0x08008954
 800838c:	080089b4 	.word	0x080089b4
 8008390:	080089be 	.word	0x080089be
 8008394:	00000000 	.word	0x00000000
 8008398:	0800811b 	.word	0x0800811b
 800839c:	080089ba 	.word	0x080089ba

080083a0 <_printf_common>:
 80083a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	4616      	mov	r6, r2
 80083a6:	4699      	mov	r9, r3
 80083a8:	688a      	ldr	r2, [r1, #8]
 80083aa:	690b      	ldr	r3, [r1, #16]
 80083ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	bfb8      	it	lt
 80083b4:	4613      	movlt	r3, r2
 80083b6:	6033      	str	r3, [r6, #0]
 80083b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083bc:	4607      	mov	r7, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b10a      	cbz	r2, 80083c6 <_printf_common+0x26>
 80083c2:	3301      	adds	r3, #1
 80083c4:	6033      	str	r3, [r6, #0]
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	0699      	lsls	r1, r3, #26
 80083ca:	bf42      	ittt	mi
 80083cc:	6833      	ldrmi	r3, [r6, #0]
 80083ce:	3302      	addmi	r3, #2
 80083d0:	6033      	strmi	r3, [r6, #0]
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	f015 0506 	ands.w	r5, r5, #6
 80083d8:	d106      	bne.n	80083e8 <_printf_common+0x48>
 80083da:	f104 0a19 	add.w	sl, r4, #25
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	6832      	ldr	r2, [r6, #0]
 80083e2:	1a9b      	subs	r3, r3, r2
 80083e4:	42ab      	cmp	r3, r5
 80083e6:	dc26      	bgt.n	8008436 <_printf_common+0x96>
 80083e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083ec:	1e13      	subs	r3, r2, #0
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	bf18      	it	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	0692      	lsls	r2, r2, #26
 80083f6:	d42b      	bmi.n	8008450 <_printf_common+0xb0>
 80083f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d01e      	beq.n	8008444 <_printf_common+0xa4>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	68e5      	ldr	r5, [r4, #12]
 800840a:	6832      	ldr	r2, [r6, #0]
 800840c:	f003 0306 	and.w	r3, r3, #6
 8008410:	2b04      	cmp	r3, #4
 8008412:	bf08      	it	eq
 8008414:	1aad      	subeq	r5, r5, r2
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	bf0c      	ite	eq
 800841c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008420:	2500      	movne	r5, #0
 8008422:	4293      	cmp	r3, r2
 8008424:	bfc4      	itt	gt
 8008426:	1a9b      	subgt	r3, r3, r2
 8008428:	18ed      	addgt	r5, r5, r3
 800842a:	2600      	movs	r6, #0
 800842c:	341a      	adds	r4, #26
 800842e:	42b5      	cmp	r5, r6
 8008430:	d11a      	bne.n	8008468 <_printf_common+0xc8>
 8008432:	2000      	movs	r0, #0
 8008434:	e008      	b.n	8008448 <_printf_common+0xa8>
 8008436:	2301      	movs	r3, #1
 8008438:	4652      	mov	r2, sl
 800843a:	4649      	mov	r1, r9
 800843c:	4638      	mov	r0, r7
 800843e:	47c0      	blx	r8
 8008440:	3001      	adds	r0, #1
 8008442:	d103      	bne.n	800844c <_printf_common+0xac>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844c:	3501      	adds	r5, #1
 800844e:	e7c6      	b.n	80083de <_printf_common+0x3e>
 8008450:	18e1      	adds	r1, r4, r3
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	2030      	movs	r0, #48	; 0x30
 8008456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800845a:	4422      	add	r2, r4
 800845c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008464:	3302      	adds	r3, #2
 8008466:	e7c7      	b.n	80083f8 <_printf_common+0x58>
 8008468:	2301      	movs	r3, #1
 800846a:	4622      	mov	r2, r4
 800846c:	4649      	mov	r1, r9
 800846e:	4638      	mov	r0, r7
 8008470:	47c0      	blx	r8
 8008472:	3001      	adds	r0, #1
 8008474:	d0e6      	beq.n	8008444 <_printf_common+0xa4>
 8008476:	3601      	adds	r6, #1
 8008478:	e7d9      	b.n	800842e <_printf_common+0x8e>
	...

0800847c <_printf_i>:
 800847c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	4691      	mov	r9, r2
 8008484:	7e27      	ldrb	r7, [r4, #24]
 8008486:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008488:	2f78      	cmp	r7, #120	; 0x78
 800848a:	4680      	mov	r8, r0
 800848c:	469a      	mov	sl, r3
 800848e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008492:	d807      	bhi.n	80084a4 <_printf_i+0x28>
 8008494:	2f62      	cmp	r7, #98	; 0x62
 8008496:	d80a      	bhi.n	80084ae <_printf_i+0x32>
 8008498:	2f00      	cmp	r7, #0
 800849a:	f000 80d8 	beq.w	800864e <_printf_i+0x1d2>
 800849e:	2f58      	cmp	r7, #88	; 0x58
 80084a0:	f000 80a3 	beq.w	80085ea <_printf_i+0x16e>
 80084a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084ac:	e03a      	b.n	8008524 <_printf_i+0xa8>
 80084ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084b2:	2b15      	cmp	r3, #21
 80084b4:	d8f6      	bhi.n	80084a4 <_printf_i+0x28>
 80084b6:	a001      	add	r0, pc, #4	; (adr r0, 80084bc <_printf_i+0x40>)
 80084b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084bc:	08008515 	.word	0x08008515
 80084c0:	08008529 	.word	0x08008529
 80084c4:	080084a5 	.word	0x080084a5
 80084c8:	080084a5 	.word	0x080084a5
 80084cc:	080084a5 	.word	0x080084a5
 80084d0:	080084a5 	.word	0x080084a5
 80084d4:	08008529 	.word	0x08008529
 80084d8:	080084a5 	.word	0x080084a5
 80084dc:	080084a5 	.word	0x080084a5
 80084e0:	080084a5 	.word	0x080084a5
 80084e4:	080084a5 	.word	0x080084a5
 80084e8:	08008635 	.word	0x08008635
 80084ec:	08008559 	.word	0x08008559
 80084f0:	08008617 	.word	0x08008617
 80084f4:	080084a5 	.word	0x080084a5
 80084f8:	080084a5 	.word	0x080084a5
 80084fc:	08008657 	.word	0x08008657
 8008500:	080084a5 	.word	0x080084a5
 8008504:	08008559 	.word	0x08008559
 8008508:	080084a5 	.word	0x080084a5
 800850c:	080084a5 	.word	0x080084a5
 8008510:	0800861f 	.word	0x0800861f
 8008514:	680b      	ldr	r3, [r1, #0]
 8008516:	1d1a      	adds	r2, r3, #4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	600a      	str	r2, [r1, #0]
 800851c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008524:	2301      	movs	r3, #1
 8008526:	e0a3      	b.n	8008670 <_printf_i+0x1f4>
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	6808      	ldr	r0, [r1, #0]
 800852c:	062e      	lsls	r6, r5, #24
 800852e:	f100 0304 	add.w	r3, r0, #4
 8008532:	d50a      	bpl.n	800854a <_printf_i+0xce>
 8008534:	6805      	ldr	r5, [r0, #0]
 8008536:	600b      	str	r3, [r1, #0]
 8008538:	2d00      	cmp	r5, #0
 800853a:	da03      	bge.n	8008544 <_printf_i+0xc8>
 800853c:	232d      	movs	r3, #45	; 0x2d
 800853e:	426d      	negs	r5, r5
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008544:	485e      	ldr	r0, [pc, #376]	; (80086c0 <_printf_i+0x244>)
 8008546:	230a      	movs	r3, #10
 8008548:	e019      	b.n	800857e <_printf_i+0x102>
 800854a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800854e:	6805      	ldr	r5, [r0, #0]
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	bf18      	it	ne
 8008554:	b22d      	sxthne	r5, r5
 8008556:	e7ef      	b.n	8008538 <_printf_i+0xbc>
 8008558:	680b      	ldr	r3, [r1, #0]
 800855a:	6825      	ldr	r5, [r4, #0]
 800855c:	1d18      	adds	r0, r3, #4
 800855e:	6008      	str	r0, [r1, #0]
 8008560:	0628      	lsls	r0, r5, #24
 8008562:	d501      	bpl.n	8008568 <_printf_i+0xec>
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	e002      	b.n	800856e <_printf_i+0xf2>
 8008568:	0669      	lsls	r1, r5, #25
 800856a:	d5fb      	bpl.n	8008564 <_printf_i+0xe8>
 800856c:	881d      	ldrh	r5, [r3, #0]
 800856e:	4854      	ldr	r0, [pc, #336]	; (80086c0 <_printf_i+0x244>)
 8008570:	2f6f      	cmp	r7, #111	; 0x6f
 8008572:	bf0c      	ite	eq
 8008574:	2308      	moveq	r3, #8
 8008576:	230a      	movne	r3, #10
 8008578:	2100      	movs	r1, #0
 800857a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800857e:	6866      	ldr	r6, [r4, #4]
 8008580:	60a6      	str	r6, [r4, #8]
 8008582:	2e00      	cmp	r6, #0
 8008584:	bfa2      	ittt	ge
 8008586:	6821      	ldrge	r1, [r4, #0]
 8008588:	f021 0104 	bicge.w	r1, r1, #4
 800858c:	6021      	strge	r1, [r4, #0]
 800858e:	b90d      	cbnz	r5, 8008594 <_printf_i+0x118>
 8008590:	2e00      	cmp	r6, #0
 8008592:	d04d      	beq.n	8008630 <_printf_i+0x1b4>
 8008594:	4616      	mov	r6, r2
 8008596:	fbb5 f1f3 	udiv	r1, r5, r3
 800859a:	fb03 5711 	mls	r7, r3, r1, r5
 800859e:	5dc7      	ldrb	r7, [r0, r7]
 80085a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085a4:	462f      	mov	r7, r5
 80085a6:	42bb      	cmp	r3, r7
 80085a8:	460d      	mov	r5, r1
 80085aa:	d9f4      	bls.n	8008596 <_printf_i+0x11a>
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d10b      	bne.n	80085c8 <_printf_i+0x14c>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07df      	lsls	r7, r3, #31
 80085b4:	d508      	bpl.n	80085c8 <_printf_i+0x14c>
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	6861      	ldr	r1, [r4, #4]
 80085ba:	4299      	cmp	r1, r3
 80085bc:	bfde      	ittt	le
 80085be:	2330      	movle	r3, #48	; 0x30
 80085c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085c4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085c8:	1b92      	subs	r2, r2, r6
 80085ca:	6122      	str	r2, [r4, #16]
 80085cc:	f8cd a000 	str.w	sl, [sp]
 80085d0:	464b      	mov	r3, r9
 80085d2:	aa03      	add	r2, sp, #12
 80085d4:	4621      	mov	r1, r4
 80085d6:	4640      	mov	r0, r8
 80085d8:	f7ff fee2 	bl	80083a0 <_printf_common>
 80085dc:	3001      	adds	r0, #1
 80085de:	d14c      	bne.n	800867a <_printf_i+0x1fe>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085e4:	b004      	add	sp, #16
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	4835      	ldr	r0, [pc, #212]	; (80086c0 <_printf_i+0x244>)
 80085ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	680e      	ldr	r6, [r1, #0]
 80085f4:	061f      	lsls	r7, r3, #24
 80085f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085fa:	600e      	str	r6, [r1, #0]
 80085fc:	d514      	bpl.n	8008628 <_printf_i+0x1ac>
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	bf44      	itt	mi
 8008602:	f043 0320 	orrmi.w	r3, r3, #32
 8008606:	6023      	strmi	r3, [r4, #0]
 8008608:	b91d      	cbnz	r5, 8008612 <_printf_i+0x196>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f023 0320 	bic.w	r3, r3, #32
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	2310      	movs	r3, #16
 8008614:	e7b0      	b.n	8008578 <_printf_i+0xfc>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	f043 0320 	orr.w	r3, r3, #32
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	2378      	movs	r3, #120	; 0x78
 8008620:	4828      	ldr	r0, [pc, #160]	; (80086c4 <_printf_i+0x248>)
 8008622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008626:	e7e3      	b.n	80085f0 <_printf_i+0x174>
 8008628:	065e      	lsls	r6, r3, #25
 800862a:	bf48      	it	mi
 800862c:	b2ad      	uxthmi	r5, r5
 800862e:	e7e6      	b.n	80085fe <_printf_i+0x182>
 8008630:	4616      	mov	r6, r2
 8008632:	e7bb      	b.n	80085ac <_printf_i+0x130>
 8008634:	680b      	ldr	r3, [r1, #0]
 8008636:	6826      	ldr	r6, [r4, #0]
 8008638:	6960      	ldr	r0, [r4, #20]
 800863a:	1d1d      	adds	r5, r3, #4
 800863c:	600d      	str	r5, [r1, #0]
 800863e:	0635      	lsls	r5, r6, #24
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	d501      	bpl.n	8008648 <_printf_i+0x1cc>
 8008644:	6018      	str	r0, [r3, #0]
 8008646:	e002      	b.n	800864e <_printf_i+0x1d2>
 8008648:	0671      	lsls	r1, r6, #25
 800864a:	d5fb      	bpl.n	8008644 <_printf_i+0x1c8>
 800864c:	8018      	strh	r0, [r3, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	4616      	mov	r6, r2
 8008654:	e7ba      	b.n	80085cc <_printf_i+0x150>
 8008656:	680b      	ldr	r3, [r1, #0]
 8008658:	1d1a      	adds	r2, r3, #4
 800865a:	600a      	str	r2, [r1, #0]
 800865c:	681e      	ldr	r6, [r3, #0]
 800865e:	6862      	ldr	r2, [r4, #4]
 8008660:	2100      	movs	r1, #0
 8008662:	4630      	mov	r0, r6
 8008664:	f7f7 fdbc 	bl	80001e0 <memchr>
 8008668:	b108      	cbz	r0, 800866e <_printf_i+0x1f2>
 800866a:	1b80      	subs	r0, r0, r6
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	2300      	movs	r3, #0
 8008674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008678:	e7a8      	b.n	80085cc <_printf_i+0x150>
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	47d0      	blx	sl
 8008684:	3001      	adds	r0, #1
 8008686:	d0ab      	beq.n	80085e0 <_printf_i+0x164>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	079b      	lsls	r3, r3, #30
 800868c:	d413      	bmi.n	80086b6 <_printf_i+0x23a>
 800868e:	68e0      	ldr	r0, [r4, #12]
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	4298      	cmp	r0, r3
 8008694:	bfb8      	it	lt
 8008696:	4618      	movlt	r0, r3
 8008698:	e7a4      	b.n	80085e4 <_printf_i+0x168>
 800869a:	2301      	movs	r3, #1
 800869c:	4632      	mov	r2, r6
 800869e:	4649      	mov	r1, r9
 80086a0:	4640      	mov	r0, r8
 80086a2:	47d0      	blx	sl
 80086a4:	3001      	adds	r0, #1
 80086a6:	d09b      	beq.n	80085e0 <_printf_i+0x164>
 80086a8:	3501      	adds	r5, #1
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	9903      	ldr	r1, [sp, #12]
 80086ae:	1a5b      	subs	r3, r3, r1
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	dcf2      	bgt.n	800869a <_printf_i+0x21e>
 80086b4:	e7eb      	b.n	800868e <_printf_i+0x212>
 80086b6:	2500      	movs	r5, #0
 80086b8:	f104 0619 	add.w	r6, r4, #25
 80086bc:	e7f5      	b.n	80086aa <_printf_i+0x22e>
 80086be:	bf00      	nop
 80086c0:	080089c5 	.word	0x080089c5
 80086c4:	080089d6 	.word	0x080089d6

080086c8 <_sbrk_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d06      	ldr	r5, [pc, #24]	; (80086e4 <_sbrk_r+0x1c>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7f8 fba8 	bl	8000e28 <_sbrk>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_sbrk_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_sbrk_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20001d38 	.word	0x20001d38

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f000 f8a0 	bl	8008834 <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6563      	strge	r3, [r4, #84]	; 0x54
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__swrite>:
 800870a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	461f      	mov	r7, r3
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	05db      	lsls	r3, r3, #23
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4616      	mov	r6, r2
 800871a:	d505      	bpl.n	8008728 <__swrite+0x1e>
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	2302      	movs	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	f000 f868 	bl	80087f8 <_lseek_r>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 b817 	b.w	8008770 <_write_r>

08008742 <__sseek>:
 8008742:	b510      	push	{r4, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 f855 	bl	80087f8 <_lseek_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	bf15      	itete	ne
 8008754:	6560      	strne	r0, [r4, #84]	; 0x54
 8008756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875e:	81a3      	strheq	r3, [r4, #12]
 8008760:	bf18      	it	ne
 8008762:	81a3      	strhne	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__sclose>:
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 b813 	b.w	8008794 <_close_r>
	...

08008770 <_write_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d07      	ldr	r5, [pc, #28]	; (8008790 <_write_r+0x20>)
 8008774:	4604      	mov	r4, r0
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f8 fb01 	bl	8000d86 <_write>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_write_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_write_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20001d38 	.word	0x20001d38

08008794 <_close_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_close_r+0x1c>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	f7f8 fb0d 	bl	8000dbe <_close>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_close_r+0x1a>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_close_r+0x1a>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20001d38 	.word	0x20001d38

080087b4 <_fstat_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	; (80087d4 <_fstat_r+0x20>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f7f8 fb08 	bl	8000dd6 <_fstat>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d102      	bne.n	80087d0 <_fstat_r+0x1c>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	b103      	cbz	r3, 80087d0 <_fstat_r+0x1c>
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
 80087d2:	bf00      	nop
 80087d4:	20001d38 	.word	0x20001d38

080087d8 <_isatty_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d06      	ldr	r5, [pc, #24]	; (80087f4 <_isatty_r+0x1c>)
 80087dc:	2300      	movs	r3, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7f8 fb07 	bl	8000df6 <_isatty>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_isatty_r+0x1a>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_isatty_r+0x1a>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20001d38 	.word	0x20001d38

080087f8 <_lseek_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_lseek_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f8 fb00 	bl	8000e0c <_lseek>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_lseek_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_lseek_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20001d38 	.word	0x20001d38

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_lock+0x8>)
 800881e:	f7ff bb55 	b.w	8007ecc <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20001d30 	.word	0x20001d30

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_unlock+0x8>)
 800882a:	f7ff bb50 	b.w	8007ece <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20001d30 	.word	0x20001d30

08008834 <_read_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_read_r+0x20>)
 8008838:	4604      	mov	r4, r0
 800883a:	4608      	mov	r0, r1
 800883c:	4611      	mov	r1, r2
 800883e:	2200      	movs	r2, #0
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7f8 fa82 	bl	8000d4c <_read>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_read_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_read_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20001d38 	.word	0x20001d38

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
