
hello_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009984  08009984  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800998c  0800998c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009990  08009990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002024  20000074  08009a08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002098  08009a08  00022098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022469  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040da  00000000  00000000  0004250d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  000465e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00047ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a09  00000000  00000000  00049630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5b3  00000000  00000000  0004f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010040f  00000000  00000000  000695ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001699fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007210  00000000  00000000  00169a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009708 	.word	0x08009708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009708 	.word	0x08009708

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000586:	2201      	movs	r2, #1
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <__io_putchar+0x20>)
 800058a:	f003 fd9d 	bl	80040c8 <HAL_UART_Transmit>
	return ch;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20001b0c 	.word	0x20001b0c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f001 f9b3 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f943 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 f90b 	bl	80007c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8d9 	bl	8000768 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f8a7 	bl	8000708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ba:	f004 ff73 	bl	80054a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tinkerTask */
  tinkerTaskHandle = osThreadNew(StartTinkerTask, NULL, &tinkerTask_attributes);
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x5c>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0x60>)
 80005c4:	f004 ffb8 	bl	8005538 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x64>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  vInitThingSpeak(&xThingSpeak, &huart1, &hdma_usart1_rx,
 80005ce:	2318      	movs	r3, #24
 80005d0:	9304      	str	r3, [sp, #16]
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	9303      	str	r3, [sp, #12]
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <main+0x68>)
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2320      	movs	r3, #32
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <main+0x6c>)
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <main+0x70>)
 80005ea:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x74>)
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x78>)
 80005ee:	f000 fd0b 	bl	8001008 <vInitThingSpeak>
  		PROCESS_MESSAGE_TASK_NAME, PROCESS_MESSAGE_TASK_SIZE, PROCESS_MESSAGE_TASK_PRIORITY);

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f004 ff7b 	bl	80054ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x5a>
 80005f8:	08009880 	.word	0x08009880
 80005fc:	080008e1 	.word	0x080008e1
 8000600:	20001a84 	.word	0x20001a84
 8000604:	0800973c 	.word	0x0800973c
 8000608:	0800972c 	.word	0x0800972c
 800060c:	200019f4 	.word	0x200019f4
 8000610:	20001a88 	.word	0x20001a88
 8000614:	20001bdc 	.word	0x20001bdc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 feb0 	bl	800838c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fea2 	bl	800838c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066e:	230a      	movs	r3, #10
 8000670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068a:	4618      	mov	r0, r3
 800068c:	f001 ff22 	bl	80024d4 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f945 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 faee 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ca:	f000 f92b 	bl	8000924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006ce:	2303      	movs	r3, #3
 80006d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fd17 	bl	8003110 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e8:	f000 f91c 	bl	8000924 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f0:	f001 fe9a 	bl	8002428 <HAL_PWREx_ControlVoltageScaling>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006fa:	f000 f913 	bl	8000924 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	37e0      	adds	r7, #224	; 0xe0
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800074c:	f003 fc6e 	bl	800402c <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8e5 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20001a88 	.word	0x20001a88
 8000764:	40013800 	.word	0x40013800

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f003 fc3e 	bl	800402c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8b5 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20001b0c 	.word	0x20001b0c
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_DMA_Init+0x68>)
 80007d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_DMA_Init+0x68>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6493      	str	r3, [r2, #72]	; 0x48
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_DMA_Init+0x68>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	200e      	movs	r0, #14
 80007ec:	f001 f986 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007f0:	200e      	movs	r0, #14
 80007f2:	f001 f99f 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	200f      	movs	r0, #15
 80007fc:	f001 f97e 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000800:	200f      	movs	r0, #15
 8000802:	f001 f997 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	2010      	movs	r0, #16
 800080c:	f001 f976 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000810:	2010      	movs	r0, #16
 8000812:	f001 f98f 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2011      	movs	r0, #17
 800081c:	f001 f96e 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000820:	2011      	movs	r0, #17
 8000822:	f001 f987 	bl	8001b34 <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xa4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_GPIO_Init+0xa4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <MX_GPIO_Init+0xa4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_GPIO_Init+0xa4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xa8>)
 80008b0:	f001 fd7a 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xa8>)
 80008cc:	f001 fbc2 	bl	8002054 <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400

080008e0 <StartTinkerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTinkerTask */
void StartTinkerTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  	//bTransmitCommand(&xThingSpeak, "AT+CIFSR\r\n", 4 + 6);

  	//bTransmitThingSpeakData(&xThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
  	//i += 20;
  	osDelay(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ec:	f004 feb6 	bl	800565c <osDelay>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <StartTinkerTask+0x1c>)
 80008f4:	f001 fd70 	bl	80023d8 <HAL_GPIO_TogglePin>
  	osDelay(1000);
 80008f8:	e7f6      	b.n	80008e8 <StartTinkerTask+0x8>
 80008fa:	bf00      	nop
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f001 f81b 	bl	800194c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_MspInit+0x4c>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_MspInit+0x4c>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_MspInit+0x4c>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f001 f8c5 	bl	8001afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a8a      	ldr	r2, [pc, #552]	; (8000bc8 <HAL_UART_MspInit+0x248>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	f040 8085 	bne.w	8000aae <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a8:	4a88      	ldr	r2, [pc, #544]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6613      	str	r3, [r2, #96]	; 0x60
 80009b0:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	4a82      	ldr	r2, [pc, #520]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c8:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e6:	2307      	movs	r3, #7
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f001 fb2e 	bl	8002054 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009f8:	4b75      	ldr	r3, [pc, #468]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 80009fa:	4a76      	ldr	r2, [pc, #472]	; (8000bd4 <HAL_UART_MspInit+0x254>)
 80009fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80009fe:	4b74      	ldr	r3, [pc, #464]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a04:	4b72      	ldr	r3, [pc, #456]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0a:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a16:	4b6e      	ldr	r3, [pc, #440]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a22:	4b6b      	ldr	r3, [pc, #428]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a24:	2220      	movs	r2, #32
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a2e:	4868      	ldr	r0, [pc, #416]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a30:	f001 f88e 	bl	8001b50 <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000a3a:	f7ff ff73 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a63      	ldr	r2, [pc, #396]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a42:	671a      	str	r2, [r3, #112]	; 0x70
 8000a44:	4a62      	ldr	r2, [pc, #392]	; (8000bd0 <HAL_UART_MspInit+0x250>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a4a:	4b63      	ldr	r3, [pc, #396]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a4c:	4a63      	ldr	r2, [pc, #396]	; (8000bdc <HAL_UART_MspInit+0x25c>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000a50:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a56:	4b60      	ldr	r3, [pc, #384]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a58:	2210      	movs	r2, #16
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b5d      	ldr	r3, [pc, #372]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a68:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a74:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b57      	ldr	r3, [pc, #348]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a80:	4855      	ldr	r0, [pc, #340]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a82:	f001 f865 	bl	8001b50 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000a8c:	f7ff ff4a 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a94:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a96:	4a50      	ldr	r2, [pc, #320]	; (8000bd8 <HAL_UART_MspInit+0x258>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2105      	movs	r1, #5
 8000aa0:	2025      	movs	r0, #37	; 0x25
 8000aa2:	f001 f82b 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa6:	2025      	movs	r0, #37	; 0x25
 8000aa8:	f001 f844 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aac:	e088      	b.n	8000bc0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a4b      	ldr	r2, [pc, #300]	; (8000be0 <HAL_UART_MspInit+0x260>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8083 	bne.w	8000bc0 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a43      	ldr	r2, [pc, #268]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_UART_MspInit+0x24c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aea:	230c      	movs	r3, #12
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 faa4 	bl	8002054 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b0c:	4b35      	ldr	r3, [pc, #212]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b0e:	4a36      	ldr	r2, [pc, #216]	; (8000be8 <HAL_UART_MspInit+0x268>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b24:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b38:	2220      	movs	r2, #32
 8000b3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b42:	4828      	ldr	r0, [pc, #160]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b44:	f001 f804 	bl	8001b50 <HAL_DMA_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000b4e:	f7ff fee9 	bl	8000924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b56:	671a      	str	r2, [r3, #112]	; 0x70
 8000b58:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_UART_MspInit+0x264>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b60:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_UART_MspInit+0x270>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b94:	4815      	ldr	r0, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000b96:	f000 ffdb 	bl	8001b50 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8000ba0:	f7ff fec0 	bl	8000924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000ba8:	66da      	str	r2, [r3, #108]	; 0x6c
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x26c>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f000 ffa1 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bba:	2026      	movs	r0, #38	; 0x26
 8000bbc:	f000 ffba 	bl	8001b34 <HAL_NVIC_EnableIRQ>
}
 8000bc0:	bf00      	nop
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	200019f4 	.word	0x200019f4
 8000bd4:	40020058 	.word	0x40020058
 8000bd8:	200019ac 	.word	0x200019ac
 8000bdc:	40020044 	.word	0x40020044
 8000be0:	40004400 	.word	0x40004400
 8000be4:	20001964 	.word	0x20001964
 8000be8:	4002006c 	.word	0x4002006c
 8000bec:	20001a3c 	.word	0x20001a3c
 8000bf0:	40020080 	.word	0x40020080

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 ff77 	bl	8001afc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0e:	2036      	movs	r0, #54	; 0x36
 8000c10:	f000 ff90 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_InitTick+0x9c>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_InitTick+0x9c>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_InitTick+0x9c>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 f9d8 	bl	8002fec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c3c:	f002 f9aa 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8000c40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <HAL_InitTick+0xa0>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c72:	f002 ff09 	bl	8003a88 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c7e:	f002 ff65 	bl	8003b4c <HAL_TIM_Base_Start_IT>
 8000c82:	4603      	mov	r3, r0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	431bde83 	.word	0x431bde83
 8000c98:	20001b90 	.word	0x20001b90
 8000c9c:	40001000 	.word	0x40001000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Channel4_IRQHandler+0x10>)
 8000cd2:	f001 f8d4 	bl	8001e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200019ac 	.word	0x200019ac

08000ce0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA1_Channel5_IRQHandler+0x10>)
 8000ce6:	f001 f8ca 	bl	8001e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200019f4 	.word	0x200019f4

08000cf4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DMA1_Channel6_IRQHandler+0x10>)
 8000cfa:	f001 f8c0 	bl	8001e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20001964 	.word	0x20001964

08000d08 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA1_Channel7_IRQHandler+0x10>)
 8000d0e:	f001 f8b6 	bl	8001e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20001a3c 	.word	0x20001a3c

08000d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <USART1_IRQHandler+0x14>)
 8000d22:	f003 fb95 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_ThingSpeak_IRQHandler(&huart1);
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART1_IRQHandler+0x14>)
 8000d28:	f000 f8ee 	bl	8000f08 <USER_ThingSpeak_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20001a88 	.word	0x20001a88

08000d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <USART2_IRQHandler+0x10>)
 8000d3a:	f003 fb89 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //USER_ThingSpeak_IRQHandler(&huart2);
  /* USER CODE END USART2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20001b0c 	.word	0x20001b0c

08000d48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM6_DAC_IRQHandler+0x10>)
 8000d4e:	f002 ff6d 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20001b90 	.word	0x20001b90

08000d5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00a      	b.n	8000d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d6e:	f3af 8000 	nop.w
 8000d72:	4601      	mov	r1, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf0      	blt.n	8000d6e <_read+0x12>
	}

return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e009      	b.n	8000dbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fbe1 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <_write+0x12>
	}
	return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_close>:

int _close(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df6:	605a      	str	r2, [r3, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_isatty>:

int _isatty(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
	return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 fa58 	bl	800831c <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20018000 	.word	0x20018000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000090 	.word	0x20000090
 8000ea0:	20002098 	.word	0x20002098

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <SystemInit+0x5c>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <SystemInit+0x5c>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0x60>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <SystemInit+0x60>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0x60>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <SystemInit+0x60>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <SystemInit+0x60>)
 8000ed0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ed4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <SystemInit+0x60>)
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <SystemInit+0x60>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <SystemInit+0x60>)
 8000ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SystemInit+0x60>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	40021000 	.word	0x40021000

08000f08 <USER_ThingSpeak_IRQHandler>:

ThingSpeakHandle_t xThingSpeak;
/* extern ThingSpeakHandle_t xThingSpeak in main */

void USER_ThingSpeak_IRQHandler(UART_HandleTypeDef *pxHUART)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(pxHUART, UART_FLAG_IDLE) != RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d106      	bne.n	8000f2c <USER_ThingSpeak_IRQHandler+0x24>
	{
		__HAL_UART_CLEAR_IDLEFLAG(pxHUART);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2210      	movs	r2, #16
 8000f24:	621a      	str	r2, [r3, #32]

		USER_UART_IDLECallback(&xThingSpeak);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <USER_ThingSpeak_IRQHandler+0x2c>)
 8000f28:	f000 f936 	bl	8001198 <USER_UART_IDLECallback>
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20001bdc 	.word	0x20001bdc

08000f38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if (pxHUART == xThingSpeak.huart)
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d108      	bne.n	8000f5c <HAL_UART_RxCpltCallback+0x24>
	{
		xThingSpeak.xRXBuffer.uRollOver++;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f4c:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f58:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20001bdc 	.word	0x20001bdc

08000f6c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *pxHUART)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f74:	bf00      	nop
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <vStartThingSpeakTask>:



/* IMPLEMENTATION */
void vStartThingSpeakTask(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	//bTransmitCommand(&xThingSpeak, "AT+RST\r\n", 4 + 4);
	//HAL_Delay(3000);
	ThingSpeakHandle_t *pxThingSpeak = argument;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60bb      	str	r3, [r7, #8]

	int i = 1711;
 8000f90:	f240 63af 	movw	r3, #1711	; 0x6af
 8000f94:	60fb      	str	r3, [r7, #12]

  	//bTransmitCommand(&xThingSpeak, "AT+CIFSR\r\n", 4 + 6);

  	//bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);

  	bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4905      	ldr	r1, [pc, #20]	; (8000fb4 <vStartThingSpeakTask+0x30>)
 8000f9e:	68b8      	ldr	r0, [r7, #8]
 8000fa0:	f000 fc16 	bl	80017d0 <bTransmitThingSpeakData>


  	i += 20;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	60fb      	str	r3, [r7, #12]
  	osDelay(20000);
 8000faa:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000fae:	f004 fb55 	bl	800565c <osDelay>
  	bTransmitThingSpeakData(pxThingSpeak, "HE3ZUVZ1MKI1FOPB", 1, i);
 8000fb2:	e7f0      	b.n	8000f96 <vStartThingSpeakTask+0x12>
 8000fb4:	08009750 	.word	0x08009750

08000fb8 <vStartProcMessageTask>:




void vStartProcMessageTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	uint32_t uHeadIndex = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
	ThingSpeakHandle_t *pxThingSpeak = argument;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
  	if (xTaskNotifyWait(0, 0xffffffff, &uHeadIndex, pdMS_TO_TICKS(1000)) == pdTRUE)
 8000fc8:	f107 0208 	add.w	r2, r7, #8
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f005 ffdb 	bl	8006f90 <xTaskNotifyWait>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d1f3      	bne.n	8000fc8 <vStartProcMessageTask+0x10>
  	{
  		bParseMessage(pxThingSpeak, (uint16_t)uHeadIndex);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f906 	bl	80011f8 <bParseMessage>

    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000fec:	2101      	movs	r1, #1
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <vStartProcMessageTask+0x4c>)
 8000ff0:	f001 f9f2 	bl	80023d8 <HAL_GPIO_TogglePin>
      osDelay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f004 fb31 	bl	800565c <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4801      	ldr	r0, [pc, #4]	; (8001004 <vStartProcMessageTask+0x4c>)
 8000ffe:	f001 f9eb 	bl	80023d8 <HAL_GPIO_TogglePin>
  	if (xTaskNotifyWait(0, 0xffffffff, &uHeadIndex, pdMS_TO_TICKS(1000)) == pdTRUE)
 8001002:	e7e1      	b.n	8000fc8 <vStartProcMessageTask+0x10>
 8001004:	48000400 	.word	0x48000400

08001008 <vInitThingSpeak>:


void vInitThingSpeak(ThingSpeakHandle_t *pxThingSpeak, UART_HandleTypeDef *huart, DMA_HandleTypeDef *pxUART_DMA_RX,
		const char *pcThingSpeakTaskName, uint32_t uThingSpeakTaskSize, osPriority_t xThingSpeakTaskPriority,
		const char *pcProcessMessageTaskName, uint32_t uProcessMessageTaskSize, osPriority_t xProcessMessageTaskPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
	// Structure
	pxThingSpeak->huart = huart;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	601a      	str	r2, [r3, #0]
	pxThingSpeak->pxUART_DMA_RX = pxUART_DMA_RX;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3308      	adds	r3, #8
 8001026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 f9ad 	bl	800838c <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 f998 	bl	800838c <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

	pxThingSpeak->xThingSpeakTaskAttributes.name = pcThingSpeakTaskName;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	pxThingSpeak->xThingSpeakTaskAttributes.stack_size = uThingSpeakTaskSize;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	pxThingSpeak->xThingSpeakTaskAttributes.priority = xThingSpeakTaskPriority,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	pxThingSpeak->xThingSpeakTaskHandle = osThreadNew(vStartThingSpeakTask, pxThingSpeak, &pxThingSpeak->xThingSpeakTaskAttributes);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001092:	461a      	mov	r2, r3
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	4819      	ldr	r0, [pc, #100]	; (80010fc <vInitThingSpeak+0xf4>)
 8001098:	f004 fa4e 	bl	8005538 <osThreadNew>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	pxThingSpeak->xProcMessageTaskAttributes.name = pcProcessMessageTaskName;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
	pxThingSpeak->xProcMessageTaskAttributes.stack_size = uProcessMessageTaskSize;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
	pxThingSpeak->xProcMessageTaskAttributes.priority = xProcessMessageTaskPriority,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b8:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	pxThingSpeak->xProcMessageTaskHandle = osThreadNew(vStartProcMessageTask, pxThingSpeak, &pxThingSpeak->xProcMessageTaskAttributes);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80010c2:	461a      	mov	r2, r3
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <vInitThingSpeak+0xf8>)
 80010c8:	f004 fa36 	bl	8005538 <osThreadNew>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440


	// Receive DMA Buffer
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0210 	orr.w	r2, r2, #16
 80010e2:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3308      	adds	r3, #8
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	4619      	mov	r1, r3
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f003 f8fc 	bl	80042ec <HAL_UART_Receive_DMA>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08000f85 	.word	0x08000f85
 8001100:	08000fb9 	.word	0x08000fb9

08001104 <vRefreshThingSpeak>:


void vRefreshThingSpeak(ThingSpeakHandle_t *pxThingSpeak)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(pxThingSpeak->huart);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f92f 	bl	8004374 <HAL_UART_DMAStop>

	memset(pxThingSpeak->xRXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3308      	adds	r3, #8
 800111a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f007 f933 	bl	800838c <memset>
	pxThingSpeak->xRXBuffer.uHeadIndex = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	pxThingSpeak->xRXBuffer.uTailIndex = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
	memset(pxThingSpeak->xTXBuffer.puDMABuffer, 0, sizeof(pxThingSpeak->xTXBuffer.puDMABuffer));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f007 f91e 	bl	800838c <memset>
	pxThingSpeak->xTXBuffer.uHeadIndex = 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	pxThingSpeak->xTXBuffer.uTailIndex = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	pxThingSpeak->xTXBuffer.uRollOver = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

  __HAL_UART_ENABLE_IT(pxThingSpeak->huart, UART_IT_IDLE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0210 	orr.w	r2, r2, #16
 800117a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(pxThingSpeak->huart, pxThingSpeak->xRXBuffer.puDMABuffer, sizeof(pxThingSpeak->xRXBuffer.puDMABuffer));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3308      	adds	r3, #8
 8001184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001188:	4619      	mov	r1, r3
 800118a:	f003 f8af 	bl	80042ec <HAL_UART_Receive_DMA>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <USER_UART_IDLECallback>:


void USER_UART_IDLECallback(ThingSpeakHandle_t *pxThingSpeak)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]

	// Tail catch up to head
	pxThingSpeak->xRXBuffer.uHeadIndex = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - __HAL_DMA_GET_COUNTER(pxThingSpeak->pxUART_DMA_RX);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a

	// Overwrite the most recent viable head (mailbox)
	xTaskNotifyFromISR((TaskHandle_t)pxThingSpeak->xProcMessageTaskHandle, (uint32_t)pxThingSpeak->xRXBuffer.uHeadIndex, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8b3 320a 	ldrh.w	r3, [r3, #522]	; 0x20a
 80011c6:	4619      	mov	r1, r3
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	2203      	movs	r2, #3
 80011d2:	f005 ffef 	bl	80071b4 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <USER_UART_IDLECallback+0x54>
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <USER_UART_IDLECallback+0x5c>)
 80011de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	f3bf 8f4f 	dsb	sy
 80011e8:	f3bf 8f6f 	isb	sy
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <bParseMessage>:


uint8_t bParseMessage(ThingSpeakHandle_t *pxThingSpeak, uint16_t uHeadIndex)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
	uint16_t uTailIndex = pxThingSpeak->xRXBuffer.uTailIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800120a:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t uRollOver = pxThingSpeak->xRXBuffer.uRollOver;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
 8001212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint16_t uParseIndex = uTailIndex;
 8001216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001218:	86bb      	strh	r3, [r7, #52]	; 0x34

	if (uRollOver == 0)
 800121a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121e:	2b00      	cmp	r3, #0
 8001220:	d12f      	bne.n	8001282 <bParseMessage+0x8a>
	{
		while (uParseIndex != uHeadIndex)
 8001222:	e029      	b.n	8001278 <bParseMessage+0x80>
		{
			//if (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\r')
			if (bEndMatch(pxThingSpeak, uParseIndex))
 8001224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f8d3 	bl	80013d4 <bEndMatch>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01e      	beq.n	8001272 <bParseMessage+0x7a>
			{
				if (uParseIndex - uTailIndex > 0)
 8001234:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	dd0f      	ble.n	800125e <bParseMessage+0x66>
				{
					char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0208 	add.w	r2, r3, #8
 8001244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
					size_t candidateLength = uParseIndex - uTailIndex - 1;
 800124a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800124c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]

					vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f923 	bl	80014a4 <vHandleCandidateCommand>
				}

				// Candidate command found, so update tail to the start of next command in line
				uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) ;
 800125e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001260:	3301      	adds	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001268:	86fb      	strh	r3, [r7, #54]	; 0x36
				pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800126e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
			}
			uParseIndex++;
 8001272:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001274:	3301      	adds	r3, #1
 8001276:	86bb      	strh	r3, [r7, #52]	; 0x34
		while (uParseIndex != uHeadIndex)
 8001278:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	429a      	cmp	r2, r3
 800127e:	d1d1      	bne.n	8001224 <bParseMessage+0x2c>
 8001280:	e095      	b.n	80013ae <bParseMessage+0x1b6>
		}
	}
	else if (uRollOver == 1)
 8001282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 808e 	bne.w	80013a8 <bParseMessage+0x1b0>
	{
		if (uParseIndex > uHeadIndex)
 800128c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	429a      	cmp	r2, r3
 8001292:	f240 8085 	bls.w	80013a0 <bParseMessage+0x1a8>
		{
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 8001296:	e029      	b.n	80012ec <bParseMessage+0xf4>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 8001298:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f899 	bl	80013d4 <bEndMatch>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01e      	beq.n	80012e6 <bParseMessage+0xee>
				{
					if (uParseIndex - uTailIndex > 0)
 80012a8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd0f      	ble.n	80012d2 <bParseMessage+0xda>
					{
						char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0208 	add.w	r2, r3, #8
 80012b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012ba:	4413      	add	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
						size_t candidateLength = uParseIndex - uTailIndex - 1;
 80012be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]

						vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	6979      	ldr	r1, [r7, #20]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f8e9 	bl	80014a4 <vHandleCandidateCommand>
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 80012d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012d4:	3301      	adds	r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012dc:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012e2:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
				}
				uParseIndex++;
 80012e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012e8:	3301      	adds	r3, #1
 80012ea:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex < sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) )
 80012ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f2:	d3d1      	bcc.n	8001298 <bParseMessage+0xa0>
			}

			uParseIndex = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	86bb      	strh	r3, [r7, #52]	; 0x34

			// Look for the next one to complete the firsthalf or just keep going
			while (uParseIndex != uHeadIndex)
 80012f8:	e04d      	b.n	8001396 <bParseMessage+0x19e>
			{
				if (bEndMatch(pxThingSpeak, uParseIndex))
 80012fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f868 	bl	80013d4 <bEndMatch>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d042      	beq.n	8001390 <bParseMessage+0x198>
				{
					// if uTailIndex > uHeadIndex, use buffer, else use regular
					if (uTailIndex > uHeadIndex)
 800130a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	429a      	cmp	r2, r3
 8001310:	d91f      	bls.n	8001352 <bParseMessage+0x15a>
					{
						// uParseIndex will be less than tialIndex in this wrap-around case. So as long as they don't equal each other, a command was received
						if (uParseIndex - uTailIndex != 0)
 8001312:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001316:	429a      	cmp	r2, r3
 8001318:	d030      	beq.n	800137c <bParseMessage+0x184>
						{
							char *candidateFirst = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f103 0208 	add.w	r2, r3, #8
 8001320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001322:	4413      	add	r3, r2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
							size_t candidateFirstLength = sizeof(pxThingSpeak->xRXBuffer.puDMABuffer) - uTailIndex;
 8001326:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001328:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800132c:	623b      	str	r3, [r7, #32]
							char *candidateSecond = (char *)(pxThingSpeak->xRXBuffer.puDMABuffer);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3308      	adds	r3, #8
 8001332:	61fb      	str	r3, [r7, #28]
							size_t candidateSecondLength = uParseIndex;
 8001334:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001336:	61bb      	str	r3, [r7, #24]

							vHandleCandidateCommandSplit(pxThingSpeak, candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f94a 	bl	80015dc <vHandleCandidateCommandSplit>

							// Only unroll if tail has been successfully used for a wrap-around
							pxThingSpeak->xRXBuffer.uRollOver = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
 8001350:	e014      	b.n	800137c <bParseMessage+0x184>
						}
					}
					// Wraparound found, so treat this as a regular, business as usual
					else
					{
						if (uParseIndex - uTailIndex > 0)
 8001352:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001354:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd0f      	ble.n	800137c <bParseMessage+0x184>
						{
							char *candidate = (char *)pxThingSpeak->xRXBuffer.puDMABuffer + uTailIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0208 	add.w	r2, r3, #8
 8001362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001364:	4413      	add	r3, r2
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t candidateLength = uParseIndex - uTailIndex - 1;
 8001368:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800136a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28

							vHandleCandidateCommand(pxThingSpeak, candidate, candidateLength);
 8001372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f894 	bl	80014a4 <vHandleCandidateCommand>
						}
					}

					// Candidate command found, so update tail to the start of next command in line
					uTailIndex = (uParseIndex + 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer);
 800137c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001386:	86fb      	strh	r3, [r7, #54]	; 0x36
					pxThingSpeak->xRXBuffer.uTailIndex = uTailIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800138c:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
				}

				uParseIndex++;
 8001390:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001392:	3301      	adds	r3, #1
 8001394:	86bb      	strh	r3, [r7, #52]	; 0x34
			while (uParseIndex != uHeadIndex)
 8001396:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	429a      	cmp	r2, r3
 800139c:	d1ad      	bne.n	80012fa <bParseMessage+0x102>
 800139e:	e006      	b.n	80013ae <bParseMessage+0x1b6>
		else
		{
			// Reset due to too overflow rx buffer due to too much data received before it could all process
			//HAL_UART_DMAStop(pxThingSpeak->huart);
			//vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX, pxThingSpeak->xProcMessageTaskHandle);
			vRefreshThingSpeak(pxThingSpeak);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feaf 	bl	8001104 <vRefreshThingSpeak>
 80013a6:	e002      	b.n	80013ae <bParseMessage+0x1b6>
	else
	{
		// Reset due to too overflow rx buffer due to too much data received before it could all process
		//HAL_UART_DMAStop(pxThingSpeak->huart);
		//vInitThingSpeak(pxThingSpeak, pxThingSpeak->huart, pxThingSpeak->pxUART_DMA_RX, pxThingSpeak->xProcMessageTaskHandle);
		vRefreshThingSpeak(pxThingSpeak);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff feab 	bl	8001104 <vRefreshThingSpeak>
	}

	printf("TailIndex: %u, HeadIndex: %u\r\n", pxThingSpeak->xRXBuffer.uTailIndex, pxThingSpeak->xRXBuffer.uHeadIndex);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80013b4:	4619      	mov	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8b3 320a 	ldrh.w	r3, [r3, #522]	; 0x20a
 80013bc:	461a      	mov	r2, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <bParseMessage+0x1d8>)
 80013c0:	f006 ffec 	bl	800839c <iprintf>

	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3738      	adds	r7, #56	; 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08009764 	.word	0x08009764

080013d4 <bEndMatch>:


uint8_t bEndMatch(ThingSpeakHandle_t *pxThingSpeak, uint16_t uParseIndex)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	7a1b      	ldrb	r3, [r3, #8]
 80013e8:	2b0a      	cmp	r3, #10
 80013ea:	d10a      	bne.n	8001402 <bEndMatch+0x2e>
			(pxThingSpeak->xRXBuffer.puDMABuffer[(uParseIndex - 1) % sizeof(pxThingSpeak->xRXBuffer.puDMABuffer)] == '\r');
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	7a1b      	ldrb	r3, [r3, #8]
	return (pxThingSpeak->xRXBuffer.puDMABuffer[uParseIndex] == '\n') &&
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d101      	bne.n	8001402 <bEndMatch+0x2e>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <bEndMatch+0x30>
 8001402:	2300      	movs	r3, #0
 8001404:	b2db      	uxtb	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <bCommandMatch>:


uint8_t bCommandMatch(const char *command, const char *candidate, size_t candidateLength)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
	return (strlen(command) == candidateLength) && (strncmp(command, candidate, candidateLength) == 0);
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7fe fed6 	bl	80001d0 <strlen>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4293      	cmp	r3, r2
 800142a:	d109      	bne.n	8001440 <bCommandMatch+0x2e>
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f007 f861 	bl	80084f8 <strncmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <bCommandMatch+0x2e>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <bCommandMatch+0x30>
 8001440:	2300      	movs	r3, #0
 8001442:	b2db      	uxtb	r3, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <bCommandSplitMatch>:


uint8_t bCommandSplitMatch(const char *command,
		const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7fe feb8 	bl	80001d0 <strlen>
 8001460:	4601      	mov	r1, r0
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4413      	add	r3, r2
		(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 8001468:	4299      	cmp	r1, r3
 800146a:	d114      	bne.n	8001496 <bCommandSplitMatch+0x4a>
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f007 f841 	bl	80084f8 <strncmp>
 8001476:	4603      	mov	r3, r0
	return (strlen(command) == candidateFirstLength + candidateSecondLength) &&
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10c      	bne.n	8001496 <bCommandSplitMatch+0x4a>
		(strncmp(command + candidateFirstLength, candidateSecond, candidateSecondLength) == 0);
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f007 f836 	bl	80084f8 <strncmp>
 800148c:	4603      	mov	r3, r0
		(strncmp(command, candidateFirst, candidateFirstLength) == 0) &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <bCommandSplitMatch+0x4a>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <bCommandSplitMatch+0x4c>
 8001496:	2300      	movs	r3, #0
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <vHandleCandidateCommand>:
/* Debug purposes on serial monitor */
extern UART_HandleTypeDef huart2;


void vHandleCandidateCommand(ThingSpeakHandle_t *pxThingSpeak, const char *candidate, size_t candidateLength)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	if (bCommandMatch("ON", candidate, candidateLength))
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	483b      	ldr	r0, [pc, #236]	; (80015a4 <vHandleCandidateCommand+0x100>)
 80014b6:	f7ff ffac 	bl	8001412 <bCommandMatch>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <vHandleCandidateCommand+0x24>
	{
		printf("SET LIGHT\r\n");
 80014c0:	4839      	ldr	r0, [pc, #228]	; (80015a8 <vHandleCandidateCommand+0x104>)
 80014c2:	f006 fff1 	bl	80084a8 <puts>
 80014c6:	e05a      	b.n	800157e <vHandleCandidateCommand+0xda>
	}
	else if (bCommandMatch("OFF", candidate, candidateLength))
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <vHandleCandidateCommand+0x108>)
 80014ce:	f7ff ffa0 	bl	8001412 <bCommandMatch>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <vHandleCandidateCommand+0x3c>
	{
		printf("UNSET LIGHT\r\n");
 80014d8:	4835      	ldr	r0, [pc, #212]	; (80015b0 <vHandleCandidateCommand+0x10c>)
 80014da:	f006 ffe5 	bl	80084a8 <puts>
 80014de:	e04e      	b.n	800157e <vHandleCandidateCommand+0xda>
	}
	else if (bCommandMatch("OK", candidate, candidateLength))
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	4833      	ldr	r0, [pc, #204]	; (80015b4 <vHandleCandidateCommand+0x110>)
 80014e6:	f7ff ff94 	bl	8001412 <bCommandMatch>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <vHandleCandidateCommand+0x64>
	{
		printf("OK Received\r\n");
 80014f0:	4831      	ldr	r0, [pc, #196]	; (80015b8 <vHandleCandidateCommand+0x114>)
 80014f2:	f006 ffd9 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)OK, eSetValueWithOverwrite);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 80014fc:	2300      	movs	r3, #0
 80014fe:	2203      	movs	r2, #3
 8001500:	2100      	movs	r1, #0
 8001502:	f005 fd9f 	bl	8007044 <xTaskGenericNotify>
 8001506:	e03a      	b.n	800157e <vHandleCandidateCommand+0xda>
	}
	else if (bCommandMatch(">", candidate, candidateLength))
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	482b      	ldr	r0, [pc, #172]	; (80015bc <vHandleCandidateCommand+0x118>)
 800150e:	f7ff ff80 	bl	8001412 <bCommandMatch>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <vHandleCandidateCommand+0x8c>
	{
		printf("> Received\r\n");
 8001518:	4829      	ldr	r0, [pc, #164]	; (80015c0 <vHandleCandidateCommand+0x11c>)
 800151a:	f006 ffc5 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)GT, eSetValueWithOverwrite);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8001524:	2300      	movs	r3, #0
 8001526:	2203      	movs	r2, #3
 8001528:	2101      	movs	r1, #1
 800152a:	f005 fd8b 	bl	8007044 <xTaskGenericNotify>
 800152e:	e026      	b.n	800157e <vHandleCandidateCommand+0xda>
	}
	else if (bCommandMatch("SEND OK", candidate, candidateLength))
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <vHandleCandidateCommand+0x120>)
 8001536:	f7ff ff6c 	bl	8001412 <bCommandMatch>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <vHandleCandidateCommand+0xb4>
	{
		printf("SEND OK Received\r\n");
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <vHandleCandidateCommand+0x124>)
 8001542:	f006 ffb1 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)SEND_OK, eSetValueWithOverwrite);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 800154c:	2300      	movs	r3, #0
 800154e:	2203      	movs	r2, #3
 8001550:	2102      	movs	r1, #2
 8001552:	f005 fd77 	bl	8007044 <xTaskGenericNotify>
 8001556:	e012      	b.n	800157e <vHandleCandidateCommand+0xda>
	}
	else if (bCommandMatch("CLOSED", candidate, candidateLength))
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	481b      	ldr	r0, [pc, #108]	; (80015cc <vHandleCandidateCommand+0x128>)
 800155e:	f7ff ff58 	bl	8001412 <bCommandMatch>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00a      	beq.n	800157e <vHandleCandidateCommand+0xda>
	{
		printf("CLOSED Received\r\n");
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <vHandleCandidateCommand+0x12c>)
 800156a:	f006 ff9d 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)CLOSED, eSetValueWithOverwrite);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8001574:	2300      	movs	r3, #0
 8001576:	2203      	movs	r2, #3
 8001578:	2103      	movs	r1, #3
 800157a:	f005 fd63 	bl	8007044 <xTaskGenericNotify>
	else
	{
		//printf("INVLD\r\n");
	}

	HAL_UART_Transmit(&huart2, (char *)candidate, candidateLength, 1000);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	b29a      	uxth	r2, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	4812      	ldr	r0, [pc, #72]	; (80015d4 <vHandleCandidateCommand+0x130>)
 800158a:	f002 fd9d 	bl	80040c8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	2202      	movs	r2, #2
 8001594:	4910      	ldr	r1, [pc, #64]	; (80015d8 <vHandleCandidateCommand+0x134>)
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <vHandleCandidateCommand+0x130>)
 8001598:	f002 fd96 	bl	80040c8 <HAL_UART_Transmit>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08009784 	.word	0x08009784
 80015a8:	08009788 	.word	0x08009788
 80015ac:	08009794 	.word	0x08009794
 80015b0:	08009798 	.word	0x08009798
 80015b4:	080097a8 	.word	0x080097a8
 80015b8:	080097ac 	.word	0x080097ac
 80015bc:	080097bc 	.word	0x080097bc
 80015c0:	080097c0 	.word	0x080097c0
 80015c4:	080097cc 	.word	0x080097cc
 80015c8:	080097d4 	.word	0x080097d4
 80015cc:	080097e8 	.word	0x080097e8
 80015d0:	080097f0 	.word	0x080097f0
 80015d4:	20001b0c 	.word	0x20001b0c
 80015d8:	08009804 	.word	0x08009804

080015dc <vHandleCandidateCommandSplit>:


void vHandleCandidateCommandSplit(ThingSpeakHandle_t *pxThingSpeak, const char *candidateFirst, size_t candidateFirstLength,
		const char *candidateSecond, size_t candidateSecondLength)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
	if (bCommandSplitMatch("ON", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	4847      	ldr	r0, [pc, #284]	; (8001714 <vHandleCandidateCommandSplit+0x138>)
 80015f6:	f7ff ff29 	bl	800144c <bCommandSplitMatch>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <vHandleCandidateCommandSplit+0x2c>
	{
		printf("SET LIGHT\r\n");
 8001600:	4845      	ldr	r0, [pc, #276]	; (8001718 <vHandleCandidateCommandSplit+0x13c>)
 8001602:	f006 ff51 	bl	80084a8 <puts>
 8001606:	e069      	b.n	80016dc <vHandleCandidateCommandSplit+0x100>
	}
	else if (bCommandSplitMatch("OFF", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	4842      	ldr	r0, [pc, #264]	; (800171c <vHandleCandidateCommandSplit+0x140>)
 8001614:	f7ff ff1a 	bl	800144c <bCommandSplitMatch>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <vHandleCandidateCommandSplit+0x4a>
	{
		printf("UNSET LIGHT\r\n");
 800161e:	4840      	ldr	r0, [pc, #256]	; (8001720 <vHandleCandidateCommandSplit+0x144>)
 8001620:	f006 ff42 	bl	80084a8 <puts>
 8001624:	e05a      	b.n	80016dc <vHandleCandidateCommandSplit+0x100>
	}
	else if (bCommandSplitMatch("OK", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	483c      	ldr	r0, [pc, #240]	; (8001724 <vHandleCandidateCommandSplit+0x148>)
 8001632:	f7ff ff0b 	bl	800144c <bCommandSplitMatch>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <vHandleCandidateCommandSplit+0x78>
	{
		printf("OK Received\r\n");
 800163c:	483a      	ldr	r0, [pc, #232]	; (8001728 <vHandleCandidateCommandSplit+0x14c>)
 800163e:	f006 ff33 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)OK, eSetValueWithOverwrite);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8001648:	2300      	movs	r3, #0
 800164a:	2203      	movs	r2, #3
 800164c:	2100      	movs	r1, #0
 800164e:	f005 fcf9 	bl	8007044 <xTaskGenericNotify>
 8001652:	e043      	b.n	80016dc <vHandleCandidateCommandSplit+0x100>
	}
	else if (bCommandSplitMatch(">", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	4833      	ldr	r0, [pc, #204]	; (800172c <vHandleCandidateCommandSplit+0x150>)
 8001660:	f7ff fef4 	bl	800144c <bCommandSplitMatch>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <vHandleCandidateCommandSplit+0xa6>
	{
		printf("> Received\r\n");
 800166a:	4831      	ldr	r0, [pc, #196]	; (8001730 <vHandleCandidateCommandSplit+0x154>)
 800166c:	f006 ff1c 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)GT, eSetValueWithOverwrite);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8001676:	2300      	movs	r3, #0
 8001678:	2203      	movs	r2, #3
 800167a:	2101      	movs	r1, #1
 800167c:	f005 fce2 	bl	8007044 <xTaskGenericNotify>
 8001680:	e02c      	b.n	80016dc <vHandleCandidateCommandSplit+0x100>
	}
	else if (bCommandSplitMatch("SEND OK", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	4829      	ldr	r0, [pc, #164]	; (8001734 <vHandleCandidateCommandSplit+0x158>)
 800168e:	f7ff fedd 	bl	800144c <bCommandSplitMatch>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <vHandleCandidateCommandSplit+0xd4>
	{
		printf("SEND OK Received\r\n");
 8001698:	4827      	ldr	r0, [pc, #156]	; (8001738 <vHandleCandidateCommandSplit+0x15c>)
 800169a:	f006 ff05 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)SEND_OK, eSetValueWithOverwrite);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 80016a4:	2300      	movs	r3, #0
 80016a6:	2203      	movs	r2, #3
 80016a8:	2102      	movs	r1, #2
 80016aa:	f005 fccb 	bl	8007044 <xTaskGenericNotify>
 80016ae:	e015      	b.n	80016dc <vHandleCandidateCommandSplit+0x100>
	}
	else if (bCommandSplitMatch("CLOSED", candidateFirst, candidateFirstLength, candidateSecond, candidateSecondLength))
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	4820      	ldr	r0, [pc, #128]	; (800173c <vHandleCandidateCommandSplit+0x160>)
 80016bc:	f7ff fec6 	bl	800144c <bCommandSplitMatch>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <vHandleCandidateCommandSplit+0x100>
	{
		printf("CLOSED Received\r\n");
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <vHandleCandidateCommandSplit+0x164>)
 80016c8:	f006 feee 	bl	80084a8 <puts>
		xTaskNotify((TaskHandle_t)pxThingSpeak->xThingSpeakTaskHandle, (uint32_t)CLOSED, eSetValueWithOverwrite);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 80016d2:	2300      	movs	r3, #0
 80016d4:	2203      	movs	r2, #3
 80016d6:	2103      	movs	r1, #3
 80016d8:	f005 fcb4 	bl	8007044 <xTaskGenericNotify>
	else
	{
		//printf("INVLD\r\n");
	}

	HAL_UART_Transmit(&huart2, (char *)candidateFirst, candidateFirstLength, 1000);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <vHandleCandidateCommandSplit+0x168>)
 80016e8:	f002 fcee 	bl	80040c8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (char *)candidateSecond, candidateSecondLength, 1000);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <vHandleCandidateCommandSplit+0x168>)
 80016f8:	f002 fce6 	bl	80040c8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	2202      	movs	r2, #2
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <vHandleCandidateCommandSplit+0x16c>)
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <vHandleCandidateCommandSplit+0x168>)
 8001706:	f002 fcdf 	bl	80040c8 <HAL_UART_Transmit>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	08009784 	.word	0x08009784
 8001718:	08009788 	.word	0x08009788
 800171c:	08009794 	.word	0x08009794
 8001720:	08009798 	.word	0x08009798
 8001724:	080097a8 	.word	0x080097a8
 8001728:	080097ac 	.word	0x080097ac
 800172c:	080097bc 	.word	0x080097bc
 8001730:	080097c0 	.word	0x080097c0
 8001734:	080097cc 	.word	0x080097cc
 8001738:	080097d4 	.word	0x080097d4
 800173c:	080097e8 	.word	0x080097e8
 8001740:	080097f0 	.word	0x080097f0
 8001744:	20001b0c 	.word	0x20001b0c
 8001748:	08009804 	.word	0x08009804

0800174c <bTransmitCommand>:


uint8_t bTransmitCommand(ThingSpeakHandle_t *pxThingSpeak, const char *command, size_t numElements)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
	/* [!] Could also add a wait for a semaphore, and semaphore released from isr on transmit complete callback */
	strncpy((char *)pxThingSpeak->xTXBuffer.puDMABuffer, command, numElements);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	4618      	mov	r0, r3
 8001764:	f006 feda 	bl	800851c <strncpy>
	if (HAL_UART_Transmit_DMA(pxThingSpeak->huart, (uint8_t *)pxThingSpeak->xTXBuffer.puDMABuffer, numElements) == HAL_OK)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	b292      	uxth	r2, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f002 fd3a 	bl	80041f0 <HAL_UART_Transmit_DMA>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <bTransmitCommand+0x3a>
	{
		return 1;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <bTransmitCommand+0x3c>
	}
	else
	{
		return 0;
 8001786:	2300      	movs	r3, #0
	}
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <bReceiveThingSpeakCommand>:


uint8_t bReceiveThingSpeakCommand(ThingSpeakHandle_t *pxThingSpeak, ATCommand_t eATCommand, TickType_t xTicksToWait)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	460b      	mov	r3, r1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	72fb      	strb	r3, [r7, #11]
	// If success then return 1.


	// Enum for message
	uint32_t uCommand;
	if (xTaskNotifyWait(0, 0xffffffff, &uCommand, xTicksToWait) == pdPASS)
 800179e:	f107 0214 	add.w	r2, r7, #20
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a8:	2000      	movs	r0, #0
 80017aa:	f005 fbf1 	bl	8006f90 <xTaskNotifyWait>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d108      	bne.n	80017c6 <bReceiveThingSpeakCommand+0x36>
	{
		if ((ATCommand_t)uCommand == eATCommand)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	7afa      	ldrb	r2, [r7, #11]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d101      	bne.n	80017c2 <bReceiveThingSpeakCommand+0x32>
		{
			return 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	e002      	b.n	80017c8 <bReceiveThingSpeakCommand+0x38>
		}
		else
		{
			/* Error Handle: Wrong command expected */
			return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <bReceiveThingSpeakCommand+0x38>
		}
	}
	else
	{
		/* Error Handle: Timeout */
		return 0;
 80017c6:	2300      	movs	r3, #0
	}

}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <bTransmitThingSpeakData>:


uint8_t bTransmitThingSpeakData(ThingSpeakHandle_t *pxThingSpeak, char *apiKey, uint8_t field, uint16_t value)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0a8      	sub	sp, #160	; 0xa0
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	//osDelay(3000);
	char local_buf[100] = {0};
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ee:	2260      	movs	r2, #96	; 0x60
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fdca 	bl	800838c <memset>
	char local_buf2[30] = {0};
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	831a      	strh	r2, [r3, #24]

	bTransmitCommand(pxThingSpeak, "AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", sizeof("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n"));
 8001810:	2229      	movs	r2, #41	; 0x29
 8001812:	4926      	ldr	r1, [pc, #152]	; (80018ac <bTransmitThingSpeakData+0xdc>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff ff99 	bl	800174c <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, OK, pdMS_TO_TICKS(3000));
 800181a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800181e:	2100      	movs	r1, #0
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff ffb5 	bl	8001790 <bReceiveThingSpeakCommand>
	//osDelay(3000);

	//sprintf(local_buf, "GET /update?api_key=%sfield%u=%u\r\n", apiKey, field, value);
	//sprintf(local_buf, "GET https://api.thingspeak.com/update?api_key=%s&field%u=%u\r\n", apiKey, field, value);
	sprintf(local_buf, "GET /update?api_key=%s&field%u=%u\r\n", apiKey, field, value);
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	491e      	ldr	r1, [pc, #120]	; (80018b0 <bTransmitThingSpeakData+0xe0>)
 8001836:	f006 fe3f 	bl	80084b8 <siprintf>
	int len = strlen(local_buf);
 800183a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fcc6 	bl	80001d0 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001852:	4918      	ldr	r1, [pc, #96]	; (80018b4 <bTransmitThingSpeakData+0xe4>)
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fe2f 	bl	80084b8 <siprintf>
	bTransmitCommand(pxThingSpeak, local_buf2, strlen(local_buf2));
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fcb6 	bl	80001d0 <strlen>
 8001864:	4602      	mov	r2, r0
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4619      	mov	r1, r3
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff ff6d 	bl	800174c <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, SEND_OK, pdMS_TO_TICKS(3000));
 8001872:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001876:	2102      	movs	r1, #2
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff ff89 	bl	8001790 <bReceiveThingSpeakCommand>
	//osDelay(3000);

	bTransmitCommand(pxThingSpeak, local_buf, strlen(local_buf));
 800187e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fca4 	bl	80001d0 <strlen>
 8001888:	4602      	mov	r2, r0
 800188a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188e:	4619      	mov	r1, r3
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff ff5b 	bl	800174c <bTransmitCommand>
	bReceiveThingSpeakCommand(pxThingSpeak, CLOSED, pdMS_TO_TICKS(3000));
 8001896:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800189a:	2103      	movs	r1, #3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff ff77 	bl	8001790 <bReceiveThingSpeakCommand>
	//osDelay(3000);

	return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3798      	adds	r7, #152	; 0x98
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08009808 	.word	0x08009808
 80018b0:	08009834 	.word	0x08009834
 80018b4:	08009858 	.word	0x08009858

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018bc:	f7ff faf2 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018c2:	e003      	b.n	80018cc <LoopCopyDataInit>

080018c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ca:	3104      	adds	r1, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80018d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018d4:	d3f6      	bcc.n	80018c4 <CopyDataInit>
	ldr	r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d8:	e002      	b.n	80018e0 <LoopFillZerobss>

080018da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018dc:	f842 3b04 	str.w	r3, [r2], #4

080018e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LoopForever+0x16>)
	cmp	r2, r3
 80018e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018e4:	d3f9      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f006 fd1f 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7fe fe57 	bl	800059c <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80018f4:	08009994 	.word	0x08009994
	ldr	r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018fc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001900:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001904:	20002098 	.word	0x20002098

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>
	...

0800190c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_Init+0x3c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_Init+0x3c>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f8df 	bl	8001ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f963 	bl	8000bf4 <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	e001      	b.n	800193e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193a:	f7fe fff9 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193e:	79fb      	ldrb	r3, [r7, #7]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20002044 	.word	0x20002044

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20002044 	.word	0x20002044

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff4c 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0e:	f7ff ff61 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7ff ffb1 	bl	8001a80 <NVIC_EncodePriority>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff80 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff54 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e098      	b.n	8001c94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_DMA_Init+0x150>)
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d80f      	bhi.n	8001b8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b4b      	ldr	r3, [pc, #300]	; (8001ca4 <HAL_DMA_Init+0x154>)
 8001b76:	4413      	add	r3, r2
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_DMA_Init+0x158>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	009a      	lsls	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_DMA_Init+0x15c>)
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8c:	e00e      	b.n	8001bac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_DMA_Init+0x160>)
 8001b96:	4413      	add	r3, r2
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <HAL_DMA_Init+0x158>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	009a      	lsls	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_DMA_Init+0x164>)
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c06:	d039      	beq.n	8001c7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_DMA_Init+0x15c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11a      	bne.n	8001c48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_DMA_Init+0x168>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f003 031c 	and.w	r3, r3, #28
 8001c1e:	210f      	movs	r1, #15
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4924      	ldr	r1, [pc, #144]	; (8001cb8 <HAL_DMA_Init+0x168>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_DMA_Init+0x168>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	491d      	ldr	r1, [pc, #116]	; (8001cb8 <HAL_DMA_Init+0x168>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
 8001c46:	e019      	b.n	8001c7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_DMA_Init+0x16c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f003 031c 	and.w	r3, r3, #28
 8001c54:	210f      	movs	r1, #15
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4917      	ldr	r1, [pc, #92]	; (8001cbc <HAL_DMA_Init+0x16c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_DMA_Init+0x16c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 031c 	and.w	r3, r3, #28
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	4911      	ldr	r1, [pc, #68]	; (8001cbc <HAL_DMA_Init+0x16c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40020407 	.word	0x40020407
 8001ca4:	bffdfff8 	.word	0xbffdfff8
 8001ca8:	cccccccd 	.word	0xcccccccd
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	bffdfbf8 	.word	0xbffdfbf8
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	400200a8 	.word	0x400200a8
 8001cbc:	400204a8 	.word	0x400204a8

08001cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Start_IT+0x20>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e04b      	b.n	8001d78 <HAL_DMA_Start_IT+0xb8>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d13a      	bne.n	8001d6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f96b 	bl	8001ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 020e 	orr.w	r2, r2, #14
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e00f      	b.n	8001d58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0204 	bic.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 020a 	orr.w	r2, r2, #10
 8001d56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e005      	b.n	8001d76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e022      	b.n	8001df0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 020e 	bic.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 021c 	and.w	r2, r3, #28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d005      	beq.n	8001e20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e029      	b.n	8001e74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 020e 	bic.w	r2, r2, #14
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f003 021c 	and.w	r2, r3, #28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
    }
  }
  return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 031c 	and.w	r3, r3, #28
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d026      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x7a>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d021      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0204 	bic.w	r2, r2, #4
 8001ed0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 021c 	and.w	r2, r3, #28
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2104      	movs	r1, #4
 8001ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d071      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ef6:	e06c      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f003 031c 	and.w	r3, r3, #28
 8001f00:	2202      	movs	r2, #2
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d02e      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xec>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d029      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 020a 	bic.w	r2, r2, #10
 8001f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f003 021c 	and.w	r2, r3, #28
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2102      	movs	r1, #2
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d038      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f68:	e033      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f003 031c 	and.w	r3, r3, #28
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x156>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d025      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 020e 	bic.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	f003 021c 	and.w	r2, r3, #28
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
}
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f003 021c 	and.w	r2, r3, #28
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d108      	bne.n	8002038 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002036:	e007      	b.n	8002048 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	e17f      	b.n	8002364 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	4013      	ands	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8171 	beq.w	800235e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d00b      	beq.n	800209c <HAL_GPIO_Init+0x48>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002090:	2b11      	cmp	r3, #17
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d130      	bne.n	80020fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d2:	2201      	movs	r2, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0201 	and.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d118      	bne.n	800213c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x128>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d123      	bne.n	80021c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	6939      	ldr	r1, [r7, #16]
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80ac 	beq.w	800235e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_GPIO_Init+0x330>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <HAL_GPIO_Init+0x330>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6613      	str	r3, [r2, #96]	; 0x60
 8002212:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_GPIO_Init+0x330>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800221e:	4a5a      	ldr	r2, [pc, #360]	; (8002388 <HAL_GPIO_Init+0x334>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x242>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x338>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x23e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_GPIO_Init+0x33c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x23a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_GPIO_Init+0x340>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x236>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_GPIO_Init+0x344>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x232>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_GPIO_Init+0x348>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x22e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_GPIO_Init+0x34c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x22a>
 800227a:	2306      	movs	r3, #6
 800227c:	e00c      	b.n	8002298 <HAL_GPIO_Init+0x244>
 800227e:	2307      	movs	r3, #7
 8002280:	e00a      	b.n	8002298 <HAL_GPIO_Init+0x244>
 8002282:	2305      	movs	r3, #5
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x244>
 8002286:	2304      	movs	r3, #4
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x244>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x244>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x244>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x244>
 8002296:	2300      	movs	r3, #0
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a8:	4937      	ldr	r1, [pc, #220]	; (8002388 <HAL_GPIO_Init+0x334>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_GPIO_Init+0x350>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022da:	4a32      	ldr	r2, [pc, #200]	; (80023a4 <HAL_GPIO_Init+0x350>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_GPIO_Init+0x350>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_GPIO_Init+0x350>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_GPIO_Init+0x350>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_GPIO_Init+0x350>)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_GPIO_Init+0x350>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_GPIO_Init+0x350>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	f47f ae78 	bne.w	8002064 <HAL_GPIO_Init+0x10>
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	48000400 	.word	0x48000400
 8002390:	48000800 	.word	0x48000800
 8002394:	48000c00 	.word	0x48000c00
 8002398:	48001000 	.word	0x48001000
 800239c:	48001400 	.word	0x48001400
 80023a0:	48001800 	.word	0x48001800
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43d9      	mvns	r1, r3
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_PWREx_GetVoltageRange+0x18>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000

08002428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002436:	d130      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002444:	d038      	beq.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2232      	movs	r2, #50	; 0x32
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9b      	lsrs	r3, r3, #18
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246c:	e002      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3b01      	subs	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d102      	bne.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f2      	bne.n	800246e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002494:	d110      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e00f      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a6:	d007      	beq.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b0:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000
 80024cc:	20000000 	.word	0x20000000
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e3d4      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4ba1      	ldr	r3, [pc, #644]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	4b9e      	ldr	r3, [pc, #632]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80e4 	beq.w	80026d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_RCC_OscConfig+0x4a>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	f040 808b 	bne.w	800262c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 8087 	bne.w	800262c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251e:	4b93      	ldr	r3, [pc, #588]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e3ac      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_RCC_OscConfig+0x7c>
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254e:	e005      	b.n	800255c <HAL_RCC_OscConfig+0x88>
 8002550:	4b86      	ldr	r3, [pc, #536]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255c:	4293      	cmp	r3, r2
 800255e:	d223      	bcs.n	80025a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd73 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e38d      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002574:	4b7d      	ldr	r3, [pc, #500]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4977      	ldr	r1, [pc, #476]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	4972      	ldr	r1, [pc, #456]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e025      	b.n	80025f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	496a      	ldr	r1, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	4b69      	ldr	r3, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fd33 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e34d      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f4:	f000 fc36 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	495a      	ldr	r1, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x29c>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_OscConfig+0x2a0>)
 8002612:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002614:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x2a4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe faeb 	bl	8000bf4 <HAL_InitTick>
 800261e:	4603      	mov	r3, r0
 8002620:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d052      	beq.n	80026ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	e331      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d032      	beq.n	800269a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002634:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002640:	f7ff f998 	bl	8001974 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002648:	f7ff f994 	bl	8001974 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e31a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	4b44      	ldr	r3, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	493b      	ldr	r1, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	4936      	ldr	r1, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e01a      	b.n	80026d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a33      	ldr	r2, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a6:	f7ff f965 	bl	8001974 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ae:	f7ff f961 	bl	8001974 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e2e7      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x1da>
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d074      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x21a>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d10e      	bne.n	8002706 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d10b      	bne.n	8002706 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x298>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d064      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d160      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e2c4      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x24a>
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e01d      	b.n	800275a <HAL_RCC_OscConfig+0x286>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x26e>
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800272e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x298>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x286>
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x298>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01c      	beq.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff f907 	bl	8001974 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002768:	e011      	b.n	800278e <HAL_RCC_OscConfig+0x2ba>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	080098a4 	.word	0x080098a4
 8002774:	20000000 	.word	0x20000000
 8002778:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff f8fa 	bl	8001974 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e280      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4baf      	ldr	r3, [pc, #700]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x2a8>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff f8ea 	bl	8001974 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff f8e6 	bl	8001974 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e26c      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	4ba5      	ldr	r3, [pc, #660]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d0>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d060      	beq.n	8002894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x310>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e4:	4b99      	ldr	r3, [pc, #612]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x328>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e249      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b93      	ldr	r3, [pc, #588]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4990      	ldr	r1, [pc, #576]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	e040      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	4b8c      	ldr	r3, [pc, #560]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a8b      	ldr	r2, [pc, #556]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7ff f8a5 	bl	8001974 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7ff f8a1 	bl	8001974 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e227      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b82      	ldr	r3, [pc, #520]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b7f      	ldr	r3, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	497c      	ldr	r1, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a79      	ldr	r2, [pc, #484]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff f881 	bl	8001974 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f87d 	bl	8001974 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e203      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03c      	beq.n	800291a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	4a67      	ldr	r2, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff f85c 	bl	8001974 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f858 	bl	8001974 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1de      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	4b5e      	ldr	r3, [pc, #376]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3ec>
 80028e0:	e01b      	b.n	800291a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	4a58      	ldr	r2, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7ff f83f 	bl	8001974 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7ff f83b 	bl	8001974 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1c1      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80a6 	beq.w	8002a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	4a43      	ldr	r2, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002942:	6593      	str	r3, [r2, #88]	; 0x58
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCC_OscConfig+0x57c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d118      	bne.n	8002992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_OscConfig+0x57c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <HAL_RCC_OscConfig+0x57c>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296c:	f7ff f802 	bl	8001974 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fffe 	bl	8001974 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e184      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCC_OscConfig+0x57c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d8>
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029aa:	e024      	b.n	80029f6 <HAL_RCC_OscConfig+0x522>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d110      	bne.n	80029d6 <HAL_RCC_OscConfig+0x502>
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d4:	e00f      	b.n	80029f6 <HAL_RCC_OscConfig+0x522>
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe ffb9 	bl	8001974 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe ffb5 	bl	8001974 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e139      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ed      	beq.n	8002a06 <HAL_RCC_OscConfig+0x532>
 8002a2a:	e01a      	b.n	8002a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe ffa2 	bl	8001974 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a32:	e00f      	b.n	8002a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe ff9e 	bl	8001974 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d906      	bls.n	8002a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e122      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e8      	bne.n	8002a34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a8a      	ldr	r2, [pc, #552]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8108 	beq.w	8002c8e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 80d0 	bne.w	8002c28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a88:	4b83      	ldr	r3, [pc, #524]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d130      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d127      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11f      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ac8:	2a07      	cmp	r2, #7
 8002aca:	bf14      	ite	ne
 8002acc:	2201      	movne	r2, #1
 8002ace:	2200      	moveq	r2, #0
 8002ad0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d06e      	beq.n	8002bdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d069      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b7      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b20:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5c      	ldr	r2, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b2c:	f7fe ff22 	bl	8001974 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe ff1e 	bl	8001974 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0a4      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b52:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	4b51      	ldr	r3, [pc, #324]	; (8002c9c <HAL_RCC_OscConfig+0x7c8>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6c:	0212      	lsls	r2, r2, #8
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0552      	lsls	r2, r2, #21
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b80:	0852      	lsrs	r2, r2, #1
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0652      	lsls	r2, r2, #25
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b8c:	0912      	lsrs	r2, r2, #4
 8002b8e:	0452      	lsls	r2, r2, #17
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4941      	ldr	r1, [pc, #260]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b98:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3e      	ldr	r2, [pc, #248]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb0:	f7fe fee0 	bl	8001974 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fedc 	bl	8001974 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e062      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd6:	e05a      	b.n	8002c8e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e059      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d152      	bne.n	8002c8e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c00:	f7fe feb8 	bl	8001974 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe feb4 	bl	8001974 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e03a      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x734>
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d02d      	beq.n	8002c8a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fe87 	bl	8001974 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fe83 	bl	8001974 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e009      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x7c4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x796>
 8002c88:	e001      	b.n	8002c8e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	f99d808c 	.word	0xf99d808c

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0c8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d910      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4961      	ldr	r1, [pc, #388]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b0      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d04c      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d121      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e09e      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d115      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e092      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e086      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e07e      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 0203 	bic.w	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	493f      	ldr	r1, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fe0b 	bl	8001974 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7fe fe07 	bl	8001974 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e066      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 020c 	and.w	r2, r3, #12
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d1eb      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	492c      	ldr	r1, [pc, #176]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d210      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4924      	ldr	r1, [pc, #144]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e036      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4918      	ldr	r1, [pc, #96]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4910      	ldr	r1, [pc, #64]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e16:	f000 f825 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490c      	ldr	r1, [pc, #48]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd feda 	bl	8000bf4 <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e44:	7afb      	ldrb	r3, [r7, #11]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	080098a4 	.word	0x080098a4
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d121      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d11e      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e004      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d134      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d003      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0xac>
 8002f08:	e005      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f0c:	617b      	str	r3, [r7, #20]
      break;
 8002f0e:	e005      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f12:	617b      	str	r3, [r7, #20]
      break;
 8002f14:	e002      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	617b      	str	r3, [r7, #20]
      break;
 8002f1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	fb02 f203 	mul.w	r2, r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	0e5b      	lsrs	r3, r3, #25
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	080098bc 	.word	0x080098bc
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	080098b4 	.word	0x080098b4

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc4:	f7ff ffda 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0adb      	lsrs	r3, r3, #11
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	080098b4 	.word	0x080098b4

08002fec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCC_GetClockConfig+0x60>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	40022000 	.word	0x40022000

08003050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003068:	f7ff f9d0 	bl	800240c <HAL_PWREx_GetVoltageRange>
 800306c:	6178      	str	r0, [r7, #20]
 800306e:	e014      	b.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	4a24      	ldr	r2, [pc, #144]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f9c0 	bl	800240c <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d10b      	bne.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d919      	bls.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2ba0      	cmp	r3, #160	; 0xa0
 80030ac:	d902      	bls.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ae:	2302      	movs	r3, #2
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e013      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030b4:	2301      	movs	r3, #1
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e010      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d902      	bls.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030c0:	2303      	movs	r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e00a      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d102      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030cc:	2302      	movs	r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e004      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d101      	bne.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 0207 	bic.w	r2, r3, #7
 80030e4:	4909      	ldr	r1, [pc, #36]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	40022000 	.word	0x40022000

08003110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003118:	2300      	movs	r3, #0
 800311a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800311c:	2300      	movs	r3, #0
 800311e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d041      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003130:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003134:	d02a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003136:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800313a:	d824      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003146:	d81e      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d010      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003152:	e018      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003154:	4b86      	ldr	r3, [pc, #536]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a85      	ldr	r2, [pc, #532]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003160:	e015      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fabb 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003172:	e00c      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3320      	adds	r3, #32
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fba6 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	74fb      	strb	r3, [r7, #19]
      break;
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800318c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003194:	4b76      	ldr	r3, [pc, #472]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	4973      	ldr	r1, [pc, #460]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d041      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031c4:	d02a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ca:	d824      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d6:	d81e      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d010      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031e2:	e018      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031e4:	4b62      	ldr	r3, [pc, #392]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a61      	ldr	r2, [pc, #388]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f0:	e015      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa73 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003202:	e00c      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3320      	adds	r3, #32
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fb5e 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003214:	e003      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	74fb      	strb	r3, [r7, #19]
      break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800321c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003224:	4b52      	ldr	r3, [pc, #328]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	494f      	ldr	r1, [pc, #316]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a0 	beq.w	800338e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	4a40      	ldr	r2, [pc, #256]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	; 0x58
 8003274:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003290:	f7fe fb70 	bl	8001974 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003296:	e009      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7fe fb6c 	bl	8001974 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	74fb      	strb	r3, [r7, #19]
        break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d15c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d019      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fb2b 	bl	8001974 <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003320:	e00b      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe fb27 	bl	8001974 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d902      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	74fb      	strb	r3, [r7, #19]
            break;
 8003338:	e006      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ec      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7c7b      	ldrb	r3, [r7, #17]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b9e      	ldr	r3, [pc, #632]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	4a9d      	ldr	r2, [pc, #628]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339a:	4b98      	ldr	r3, [pc, #608]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4994      	ldr	r1, [pc, #592]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033bc:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 020c 	bic.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	498c      	ldr	r1, [pc, #560]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033de:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	4983      	ldr	r1, [pc, #524]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	497b      	ldr	r1, [pc, #492]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	4972      	ldr	r1, [pc, #456]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	496a      	ldr	r1, [pc, #424]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	4961      	ldr	r1, [pc, #388]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003488:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	4959      	ldr	r1, [pc, #356]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	4950      	ldr	r1, [pc, #320]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	4948      	ldr	r1, [pc, #288]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	493f      	ldr	r1, [pc, #252]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d028      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351e:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d106      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b32      	ldr	r3, [pc, #200]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e011      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	2101      	movs	r1, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f8c8 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	491f      	ldr	r1, [pc, #124]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d106      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003598:	60d3      	str	r3, [r2, #12]
 800359a:	e011      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f899 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02b      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ea:	d109      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a02      	ldr	r2, [pc, #8]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	e014      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f867 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	4928      	ldr	r1, [pc, #160]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800364e:	d10d      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2102      	movs	r1, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f844 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d014      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3320      	adds	r3, #32
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f925 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036aa:	490d      	ldr	r1, [pc, #52]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000

080036e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f2:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d10d      	bne.n	800372a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
       ||
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
       ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d047      	beq.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	e044      	b.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d018      	beq.n	800376a <RCCEx_PLLSAI1_Config+0x86>
 8003738:	2b03      	cmp	r3, #3
 800373a:	d825      	bhi.n	8003788 <RCCEx_PLLSAI1_Config+0xa4>
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0x62>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d009      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x74>
 8003744:	e020      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003746:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003756:	e01a      	b.n	800378e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d116      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e013      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003776:	4b54      	ldr	r3, [pc, #336]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003786:	e006      	b.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e004      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378e:	bf00      	nop
 8003790:	e002      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003796:	bf00      	nop
    }

    if(status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10d      	bne.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	430b      	orrs	r3, r1
 80037b4:	4944      	ldr	r1, [pc, #272]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d17d      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037cc:	f7fe f8d2 	bl	8001974 <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d2:	e009      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d4:	f7fe f8ce 	bl	8001974 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d902      	bls.n	80037e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	73fb      	strb	r3, [r7, #15]
        break;
 80037e6:	e005      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ef      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d160      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003800:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6892      	ldr	r2, [r2, #8]
 8003810:	0211      	lsls	r1, r2, #8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68d2      	ldr	r2, [r2, #12]
 8003816:	0912      	lsrs	r2, r2, #4
 8003818:	0452      	lsls	r2, r2, #17
 800381a:	430a      	orrs	r2, r1
 800381c:	492a      	ldr	r1, [pc, #168]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	610b      	str	r3, [r1, #16]
 8003822:	e027      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d112      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	0211      	lsls	r1, r2, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6912      	ldr	r2, [r2, #16]
 8003840:	0852      	lsrs	r2, r2, #1
 8003842:	3a01      	subs	r2, #1
 8003844:	0552      	lsls	r2, r2, #21
 8003846:	430a      	orrs	r2, r1
 8003848:	491f      	ldr	r1, [pc, #124]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
 800384e:	e011      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	430a      	orrs	r2, r1
 800386e:	4916      	ldr	r1, [pc, #88]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800387e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe f878 	bl	8001974 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003888:	f7fe f874 	bl	8001974 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
          break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ef      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	4904      	ldr	r1, [pc, #16]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000

080038cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038da:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038e6:	4b67      	ldr	r3, [pc, #412]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10d      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
       ||
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
       ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d047      	beq.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e044      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d018      	beq.n	8003952 <RCCEx_PLLSAI2_Config+0x86>
 8003920:	2b03      	cmp	r3, #3
 8003922:	d825      	bhi.n	8003970 <RCCEx_PLLSAI2_Config+0xa4>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d002      	beq.n	800392e <RCCEx_PLLSAI2_Config+0x62>
 8003928:	2b02      	cmp	r3, #2
 800392a:	d009      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x74>
 800392c:	e020      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800392e:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11d      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393e:	e01a      	b.n	8003976 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e013      	b.n	800397a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800396e:	e006      	b.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e004      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	430b      	orrs	r3, r1
 800399c:	4939      	ldr	r1, [pc, #228]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d167      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fd ffde 	bl	8001974 <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ba:	e009      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039bc:	f7fd ffda 	bl	8001974 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	73fb      	strb	r3, [r7, #15]
        break;
 80039ce:	e005      	b.n	80039dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ef      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d14a      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	0912      	lsrs	r2, r2, #4
 8003a00:	0452      	lsls	r2, r2, #17
 8003a02:	430a      	orrs	r2, r1
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	614b      	str	r3, [r1, #20]
 8003a0a:	e011      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	0211      	lsls	r1, r2, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6912      	ldr	r2, [r2, #16]
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	0652      	lsls	r2, r2, #25
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	4916      	ldr	r1, [pc, #88]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd ff9a 	bl	8001974 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a44:	f7fd ff96 	bl	8001974 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
          break;
 8003a56:	e005      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4904      	ldr	r1, [pc, #16]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e049      	b.n	8003b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f841 	bl	8003b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f000 f9f8 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04f      	b.n	8003c04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d018      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIM_Base_Start_IT+0x76>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d115      	bne.n	8003bee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d015      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0xb4>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d011      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bec:	e008      	b.n	8003c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e000      	b.n	8003c02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40013400 	.word	0x40013400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0202 	mvn.w	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f905 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8f7 	bl	8003e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f908 	bl	8003e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8db 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8cd 	bl	8003e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8de 	bl	8003e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0208 	mvn.w	r2, #8
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8b1 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8a3 	bl	8003e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f8b4 	bl	8003e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f887 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f879 	bl	8003e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f88a 	bl	8003e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fda8 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f914 	bl	8004004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d10e      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f907 	bl	8004018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d10e      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f838 	bl	8003ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d10e      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0220 	mvn.w	r2, #32
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8c7 	bl	8003ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a40      	ldr	r2, [pc, #256]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <TIM_Base_SetConfig+0x118>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <TIM_Base_SetConfig+0x11c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <TIM_Base_SetConfig+0x120>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2f      	ldr	r2, [pc, #188]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01f      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d01b      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2c      	ldr	r2, [pc, #176]	; (8003fd4 <TIM_Base_SetConfig+0x118>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d017      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <TIM_Base_SetConfig+0x11c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <TIM_Base_SetConfig+0x120>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00f      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a28      	ldr	r2, [pc, #160]	; (8003fe4 <TIM_Base_SetConfig+0x128>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <TIM_Base_SetConfig+0x12c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_Base_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <TIM_Base_SetConfig+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d108      	bne.n	8003f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <TIM_Base_SetConfig+0x114>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0xf8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <TIM_Base_SetConfig+0x124>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <TIM_Base_SetConfig+0x128>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a10      	ldr	r2, [pc, #64]	; (8003fe8 <TIM_Base_SetConfig+0x12c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0xf8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a0f      	ldr	r2, [pc, #60]	; (8003fec <TIM_Base_SetConfig+0x130>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d103      	bne.n	8003fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	615a      	str	r2, [r3, #20]
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40013400 	.word	0x40013400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800

08003ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e040      	b.n	80040c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fc96 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fc1c 	bl	80048a8 <UART_SetConfig>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e022      	b.n	80040c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fe9a 	bl	8004dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 ff21 	bl	8004f00 <UART_CheckIdleState>
 80040be:	4603      	mov	r3, r0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	2b20      	cmp	r3, #32
 80040de:	f040 8082 	bne.w	80041e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_UART_Transmit+0x26>
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07a      	b.n	80041e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x38>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e073      	b.n	80041e8 <HAL_UART_Transmit+0x120>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2221      	movs	r2, #33	; 0x21
 8004114:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004116:	f7fd fc2d 	bl	8001974 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	88fa      	ldrh	r2, [r7, #6]
 8004128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d108      	bne.n	8004148 <HAL_UART_Transmit+0x80>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e003      	b.n	8004150 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004158:	e02d      	b.n	80041b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 ff14 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e039      	b.n	80041e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004186:	b292      	uxth	r2, r2
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3302      	adds	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e008      	b.n	80041a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b292      	uxth	r2, r2
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1cb      	bne.n	800415a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fee0 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e005      	b.n	80041e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004202:	2b20      	cmp	r3, #32
 8004204:	d166      	bne.n	80042d4 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_Transmit_DMA+0x22>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e05f      	b.n	80042d6 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_UART_Transmit_DMA+0x34>
 8004220:	2302      	movs	r3, #2
 8004222:	e058      	b.n	80042d6 <HAL_UART_Transmit_DMA+0xe6>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d02b      	beq.n	80042b0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <HAL_UART_Transmit_DMA+0xf0>)
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_UART_Transmit_DMA+0xf4>)
 8004266:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_UART_Transmit_DMA+0xf8>)
 800426e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004274:	2200      	movs	r2, #0
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	4619      	mov	r1, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3328      	adds	r3, #40	; 0x28
 8004288:	461a      	mov	r2, r3
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	f7fd fd18 	bl	8001cc0 <HAL_DMA_Start_IT>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2210      	movs	r2, #16
 800429a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e012      	b.n	80042d6 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2240      	movs	r2, #64	; 0x40
 80042b6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ce:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	080051ed 	.word	0x080051ed
 80042e4:	08005241 	.word	0x08005241
 80042e8:	0800532d 	.word	0x0800532d

080042ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d131      	bne.n	8004366 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_Receive_DMA+0x22>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e02a      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Receive_DMA+0x34>
 800431c:	2302      	movs	r3, #2
 800431e:	e023      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_UART_Receive_DMA+0x84>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004354:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fe95 	bl	800508c <UART_Start_Receive_DMA>
 8004362:	4603      	mov	r3, r0
 8004364:	e000      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40008000 	.word	0x40008000

08004374 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004380:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d127      	bne.n	80043e6 <HAL_UART_DMAStop+0x72>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b21      	cmp	r3, #33	; 0x21
 800439a:	d124      	bne.n	80043e6 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043aa:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd fce1 	bl	8001d80 <HAL_DMA_Abort>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd fe07 	bl	8001fdc <HAL_DMA_GetError>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2210      	movs	r2, #16
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e032      	b.n	8004446 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 febf 	bl	8005164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d127      	bne.n	8004444 <HAL_UART_DMAStop+0xd0>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b22      	cmp	r3, #34	; 0x22
 80043f8:	d124      	bne.n	8004444 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004408:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	2b00      	cmp	r3, #0
 8004410:	d015      	beq.n	800443e <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fcb2 	bl	8001d80 <HAL_DMA_Abort>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fdd8 	bl	8001fdc <HAL_DMA_GetError>
 800442c:	4603      	mov	r3, r0
 800442e:	2b20      	cmp	r3, #32
 8004430:	d105      	bne.n	800443e <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2210      	movs	r2, #16
 8004436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e003      	b.n	8004446 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fea5 	bl	800518e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	f640 030f 	movw	r3, #2063	; 0x80f
 8004476:	4013      	ands	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d113      	bne.n	80044a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 81ce 	beq.w	800483a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
      }
      return;
 80044a6:	e1c8      	b.n	800483a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80e3 	beq.w	8004676 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4ba6      	ldr	r3, [pc, #664]	; (8004758 <HAL_UART_IRQHandler+0x308>)
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80d8 	beq.w	8004676 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_UART_IRQHandler+0xa2>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e8:	f043 0201 	orr.w	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_UART_IRQHandler+0xce>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2202      	movs	r2, #2
 800450c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_UART_IRQHandler+0xfa>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2204      	movs	r2, #4
 8004538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004540:	f043 0202 	orr.w	r2, r3, #2
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_UART_IRQHandler+0x15e>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8142 	beq.w	800483e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d004      	beq.n	80045fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d031      	beq.n	8004662 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fdc5 	bl	800518e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d123      	bne.n	800465a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	2b00      	cmp	r3, #0
 8004628:	d013      	beq.n	8004652 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a4b      	ldr	r2, [pc, #300]	; (800475c <HAL_UART_IRQHandler+0x30c>)
 8004630:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fbe0 	bl	8001dfc <HAL_DMA_Abort_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d017      	beq.n	8004672 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00f      	b.n	8004672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f912 	bl	800487c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e00b      	b.n	8004672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f90e 	bl	800487c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	e007      	b.n	8004672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f90a 	bl	800487c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004670:	e0e5      	b.n	800483e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004672:	bf00      	nop
    return;
 8004674:	e0e3      	b.n	800483e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 80a9 	bne.w	80047d2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80a3 	beq.w	80047d2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 809d 	beq.w	80047d2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2210      	movs	r2, #16
 800469e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d158      	bne.n	8004760 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80c1 	beq.w	8004842 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046c6:	893a      	ldrh	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f080 80ba 	bcs.w	8004842 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	893a      	ldrh	r2, [r7, #8]
 80046d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12a      	bne.n	800473c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004714:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0210 	bic.w	r2, r2, #16
 8004730:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4618      	mov	r0, r3
 8004738:	f7fd fb22 	bl	8001d80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004748:	b29b      	uxth	r3, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	b29b      	uxth	r3, r3
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f89d 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004756:	e074      	b.n	8004842 <HAL_UART_IRQHandler+0x3f2>
 8004758:	04000120 	.word	0x04000120
 800475c:	080053a9 	.word	0x080053a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800476c:	b29b      	uxth	r3, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d063      	beq.n	8004846 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d060      	beq.n	8004846 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004792:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0210 	bic.w	r2, r2, #16
 80047c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f860 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047d0:	e039      	b.n	8004846 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <HAL_UART_IRQHandler+0x3a8>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fe08 	bl	8005406 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047f6:	e029      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01a      	beq.n	800484a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
    }
    return;
 800481c:	e015      	b.n	800484a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d011      	beq.n	800484c <HAL_UART_IRQHandler+0x3fc>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fdce 	bl	80053d4 <UART_EndTransmit_IT>
    return;
 8004838:	e008      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
      return;
 800483a:	bf00      	nop
 800483c:	e006      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
    return;
 800483e:	bf00      	nop
 8004840:	e004      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_UART_IRQHandler+0x3fc>
    return;
 800484a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4bad      	ldr	r3, [pc, #692]	; (8004b88 <UART_SetConfig+0x2e0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4aa2      	ldr	r2, [pc, #648]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a99      	ldr	r2, [pc, #612]	; (8004b90 <UART_SetConfig+0x2e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d121      	bne.n	8004972 <UART_SetConfig+0xca>
 800492e:	4b99      	ldr	r3, [pc, #612]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b03      	cmp	r3, #3
 800493a:	d817      	bhi.n	800496c <UART_SetConfig+0xc4>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x9c>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004955 	.word	0x08004955
 8004948:	08004961 	.word	0x08004961
 800494c:	0800495b 	.word	0x0800495b
 8004950:	08004967 	.word	0x08004967
 8004954:	2301      	movs	r3, #1
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e0e7      	b.n	8004b2a <UART_SetConfig+0x282>
 800495a:	2302      	movs	r3, #2
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e0e4      	b.n	8004b2a <UART_SetConfig+0x282>
 8004960:	2304      	movs	r3, #4
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e0e1      	b.n	8004b2a <UART_SetConfig+0x282>
 8004966:	2308      	movs	r3, #8
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e0de      	b.n	8004b2a <UART_SetConfig+0x282>
 800496c:	2310      	movs	r3, #16
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e0db      	b.n	8004b2a <UART_SetConfig+0x282>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a88      	ldr	r2, [pc, #544]	; (8004b98 <UART_SetConfig+0x2f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d132      	bne.n	80049e2 <UART_SetConfig+0x13a>
 800497c:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <UART_SetConfig+0x2ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d828      	bhi.n	80049dc <UART_SetConfig+0x134>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0xe8>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049cb 	.word	0x080049cb
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	2300      	movs	r3, #0
 80049c6:	76fb      	strb	r3, [r7, #27]
 80049c8:	e0af      	b.n	8004b2a <UART_SetConfig+0x282>
 80049ca:	2302      	movs	r3, #2
 80049cc:	76fb      	strb	r3, [r7, #27]
 80049ce:	e0ac      	b.n	8004b2a <UART_SetConfig+0x282>
 80049d0:	2304      	movs	r3, #4
 80049d2:	76fb      	strb	r3, [r7, #27]
 80049d4:	e0a9      	b.n	8004b2a <UART_SetConfig+0x282>
 80049d6:	2308      	movs	r3, #8
 80049d8:	76fb      	strb	r3, [r7, #27]
 80049da:	e0a6      	b.n	8004b2a <UART_SetConfig+0x282>
 80049dc:	2310      	movs	r3, #16
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e0a3      	b.n	8004b2a <UART_SetConfig+0x282>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6d      	ldr	r2, [pc, #436]	; (8004b9c <UART_SetConfig+0x2f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d120      	bne.n	8004a2e <UART_SetConfig+0x186>
 80049ec:	4b69      	ldr	r3, [pc, #420]	; (8004b94 <UART_SetConfig+0x2ec>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d013      	beq.n	8004a22 <UART_SetConfig+0x17a>
 80049fa:	2b30      	cmp	r3, #48	; 0x30
 80049fc:	d814      	bhi.n	8004a28 <UART_SetConfig+0x180>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d009      	beq.n	8004a16 <UART_SetConfig+0x16e>
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d810      	bhi.n	8004a28 <UART_SetConfig+0x180>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <UART_SetConfig+0x168>
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d006      	beq.n	8004a1c <UART_SetConfig+0x174>
 8004a0e:	e00b      	b.n	8004a28 <UART_SetConfig+0x180>
 8004a10:	2300      	movs	r3, #0
 8004a12:	76fb      	strb	r3, [r7, #27]
 8004a14:	e089      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a16:	2302      	movs	r3, #2
 8004a18:	76fb      	strb	r3, [r7, #27]
 8004a1a:	e086      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	76fb      	strb	r3, [r7, #27]
 8004a20:	e083      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a22:	2308      	movs	r3, #8
 8004a24:	76fb      	strb	r3, [r7, #27]
 8004a26:	e080      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e07d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5b      	ldr	r2, [pc, #364]	; (8004ba0 <UART_SetConfig+0x2f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d120      	bne.n	8004a7a <UART_SetConfig+0x1d2>
 8004a38:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d013      	beq.n	8004a6e <UART_SetConfig+0x1c6>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	d814      	bhi.n	8004a74 <UART_SetConfig+0x1cc>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d009      	beq.n	8004a62 <UART_SetConfig+0x1ba>
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d810      	bhi.n	8004a74 <UART_SetConfig+0x1cc>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1b4>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d006      	beq.n	8004a68 <UART_SetConfig+0x1c0>
 8004a5a:	e00b      	b.n	8004a74 <UART_SetConfig+0x1cc>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	e063      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a62:	2302      	movs	r3, #2
 8004a64:	76fb      	strb	r3, [r7, #27]
 8004a66:	e060      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e05d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e05a      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a74:	2310      	movs	r3, #16
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e057      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a49      	ldr	r2, [pc, #292]	; (8004ba4 <UART_SetConfig+0x2fc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d125      	bne.n	8004ad0 <UART_SetConfig+0x228>
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a92:	d017      	beq.n	8004ac4 <UART_SetConfig+0x21c>
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a98:	d817      	bhi.n	8004aca <UART_SetConfig+0x222>
 8004a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9e:	d00b      	beq.n	8004ab8 <UART_SetConfig+0x210>
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d811      	bhi.n	8004aca <UART_SetConfig+0x222>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <UART_SetConfig+0x20a>
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d006      	beq.n	8004abe <UART_SetConfig+0x216>
 8004ab0:	e00b      	b.n	8004aca <UART_SetConfig+0x222>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	76fb      	strb	r3, [r7, #27]
 8004ab6:	e038      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e035      	b.n	8004b2a <UART_SetConfig+0x282>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	76fb      	strb	r3, [r7, #27]
 8004ac2:	e032      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	76fb      	strb	r3, [r7, #27]
 8004ac8:	e02f      	b.n	8004b2a <UART_SetConfig+0x282>
 8004aca:	2310      	movs	r3, #16
 8004acc:	76fb      	strb	r3, [r7, #27]
 8004ace:	e02c      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d125      	bne.n	8004b26 <UART_SetConfig+0x27e>
 8004ada:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae8:	d017      	beq.n	8004b1a <UART_SetConfig+0x272>
 8004aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aee:	d817      	bhi.n	8004b20 <UART_SetConfig+0x278>
 8004af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af4:	d00b      	beq.n	8004b0e <UART_SetConfig+0x266>
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d811      	bhi.n	8004b20 <UART_SetConfig+0x278>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <UART_SetConfig+0x260>
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b04:	d006      	beq.n	8004b14 <UART_SetConfig+0x26c>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x278>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e00d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	76fb      	strb	r3, [r7, #27]
 8004b12:	e00a      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b14:	2304      	movs	r3, #4
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e007      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e004      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b20:	2310      	movs	r3, #16
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e001      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b26:	2310      	movs	r3, #16
 8004b28:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	f040 8087 	bne.w	8004c44 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b36:	7efb      	ldrb	r3, [r7, #27]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d837      	bhi.n	8004bac <UART_SetConfig+0x304>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x29c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004b77 	.word	0x08004b77
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fa14 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	6178      	str	r0, [r7, #20]
        break;
 8004b6e:	e022      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <UART_SetConfig+0x300>)
 8004b72:	617b      	str	r3, [r7, #20]
        break;
 8004b74:	e01f      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe f975 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8004b7a:	6178      	str	r0, [r7, #20]
        break;
 8004b7c:	e01b      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b82:	617b      	str	r3, [r7, #20]
        break;
 8004b84:	e017      	b.n	8004bb6 <UART_SetConfig+0x30e>
 8004b86:	bf00      	nop
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40008000 	.word	0x40008000
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	76bb      	strb	r3, [r7, #26]
        break;
 8004bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80f1 	beq.w	8004da0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d305      	bcc.n	8004bda <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d902      	bls.n	8004be0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	76bb      	strb	r3, [r7, #26]
 8004bde:	e0df      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	020b      	lsls	r3, r1, #8
 8004bf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bf6:	0202      	lsls	r2, r0, #8
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6849      	ldr	r1, [r1, #4]
 8004bfc:	0849      	lsrs	r1, r1, #1
 8004bfe:	4608      	mov	r0, r1
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	1814      	adds	r4, r2, r0
 8004c06:	eb43 0501 	adc.w	r5, r3, r1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fb32 	bl	8000280 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d308      	bcc.n	8004c3e <UART_SetConfig+0x396>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d204      	bcs.n	8004c3e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e0b0      	b.n	8004da0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	76bb      	strb	r3, [r7, #26]
 8004c42:	e0ad      	b.n	8004da0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d15c      	bne.n	8004d08 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004c4e:	7efb      	ldrb	r3, [r7, #27]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d828      	bhi.n	8004ca6 <UART_SetConfig+0x3fe>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x3b4>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004ca7 	.word	0x08004ca7
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fe f988 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004c84:	6178      	str	r0, [r7, #20]
        break;
 8004c86:	e013      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe f99a 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6178      	str	r0, [r7, #20]
        break;
 8004c8e:	e00f      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c90:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <UART_SetConfig+0x510>)
 8004c92:	617b      	str	r3, [r7, #20]
        break;
 8004c94:	e00c      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fe f8e5 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8004c9a:	6178      	str	r0, [r7, #20]
        break;
 8004c9c:	e008      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca2:	617b      	str	r3, [r7, #20]
        break;
 8004ca4:	e004      	b.n	8004cb0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	76bb      	strb	r3, [r7, #26]
        break;
 8004cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d074      	beq.n	8004da0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005a      	lsls	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d916      	bls.n	8004d02 <UART_SetConfig+0x45a>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d212      	bcs.n	8004d02 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f023 030f 	bic.w	r3, r3, #15
 8004ce4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	89fa      	ldrh	r2, [r7, #14]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	e04e      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	76bb      	strb	r3, [r7, #26]
 8004d06:	e04b      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d08:	7efb      	ldrb	r3, [r7, #27]
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d827      	bhi.n	8004d5e <UART_SetConfig+0x4b6>
 8004d0e:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0x46c>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d4f 	.word	0x08004d4f
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d5f 	.word	0x08004d5f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fe f92c 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	6178      	str	r0, [r7, #20]
        break;
 8004d3e:	e013      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7fe f93e 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8004d44:	6178      	str	r0, [r7, #20]
        break;
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <UART_SetConfig+0x510>)
 8004d4a:	617b      	str	r3, [r7, #20]
        break;
 8004d4c:	e00c      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe f889 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8004d52:	6178      	str	r0, [r7, #20]
        break;
 8004d54:	e008      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	617b      	str	r3, [r7, #20]
        break;
 8004d5c:	e004      	b.n	8004d68 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	76bb      	strb	r3, [r7, #26]
        break;
 8004d66:	bf00      	nop
    }

    if (pclk != 0U)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d018      	beq.n	8004da0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085a      	lsrs	r2, r3, #1
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	441a      	add	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d908      	bls.n	8004d9c <UART_SetConfig+0x4f4>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d204      	bcs.n	8004d9c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e001      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dac:	7ebb      	ldrb	r3, [r7, #26]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bdb0      	pop	{r4, r5, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00f42400 	.word	0x00f42400

08004dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d10a      	bne.n	8004ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f10:	f7fc fd30 	bl	8001974 <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10e      	bne.n	8004f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f82d 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e023      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d10e      	bne.n	8004f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f817 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e00d      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa2:	e05e      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004faa:	d05a      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fac:	f7fc fce2 	bl	8001974 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11b      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e043      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02c      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d124      	bne.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005020:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005030:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e00f      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d091      	beq.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2222      	movs	r2, #34	; 0x22
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02b      	beq.n	8005116 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a25      	ldr	r2, [pc, #148]	; (8005158 <UART_Start_Receive_DMA+0xcc>)
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a24      	ldr	r2, [pc, #144]	; (800515c <UART_Start_Receive_DMA+0xd0>)
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4a23      	ldr	r2, [pc, #140]	; (8005160 <UART_Start_Receive_DMA+0xd4>)
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	2200      	movs	r2, #0
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	4619      	mov	r1, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	461a      	mov	r2, r3
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	f7fc fde5 	bl	8001cc0 <HAL_DMA_Start_IT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2210      	movs	r2, #16
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e01c      	b.n	8005150 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800512c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	0800525d 	.word	0x0800525d
 800515c:	080052f5 	.word	0x080052f5
 8005160:	0800532d 	.word	0x0800532d

08005164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800517a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0210 	bic.w	r2, r2, #16
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d114      	bne.n	8005232 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800521e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005230:	e002      	b.n	8005238 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7fb fe9a 	bl	8000f6c <HAL_UART_TxCpltCallback>
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fb00 	bl	8004854 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12a      	bne.n	80052ce <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800528e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ae:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0210 	bic.w	r2, r2, #16
 80052cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d107      	bne.n	80052e6 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052dc:	4619      	mov	r1, r3
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fad6 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052e4:	e002      	b.n	80052ec <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7fb fe26 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	2b01      	cmp	r3, #1
 8005308:	d109      	bne.n	800531e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f7ff faba 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800531c:	e002      	b.n	8005324 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff faa2 	bl	8004868 <HAL_UART_RxHalfCpltCallback>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005344:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d109      	bne.n	8005368 <UART_DMAError+0x3c>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b21      	cmp	r3, #33	; 0x21
 8005358:	d106      	bne.n	8005368 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f7ff fefe 	bl	8005164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d109      	bne.n	800538a <UART_DMAError+0x5e>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	d106      	bne.n	800538a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2200      	movs	r2, #0
 8005380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005384:	6978      	ldr	r0, [r7, #20]
 8005386:	f7ff ff02 	bl	800518e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7ff fa6e 	bl	800487c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a0:	bf00      	nop
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fa58 	bl	800487c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fb fdb7 	bl	8000f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <__NVIC_SetPriority>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db0a      	blt.n	8005446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	490c      	ldr	r1, [pc, #48]	; (8005468 <__NVIC_SetPriority+0x4c>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	440b      	add	r3, r1
 8005440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005444:	e00a      	b.n	800545c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4908      	ldr	r1, [pc, #32]	; (800546c <__NVIC_SetPriority+0x50>)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3b04      	subs	r3, #4
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	440b      	add	r3, r1
 800545a:	761a      	strb	r2, [r3, #24]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000e100 	.word	0xe000e100
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <SysTick_Handler+0x1c>)
 8005476:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005478:	f001 fcfe 	bl	8006e78 <xTaskGetSchedulerState>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005482:	f002 fcd1 	bl	8007e28 <xPortSysTickHandler>
  }
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	e000e010 	.word	0xe000e010

08005490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005494:	2100      	movs	r1, #0
 8005496:	f06f 0004 	mvn.w	r0, #4
 800549a:	f7ff ffbf 	bl	800541c <__NVIC_SetPriority>
#endif
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	603b      	str	r3, [r7, #0]
  return(result);
 80054b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054b6:	f06f 0305 	mvn.w	r3, #5
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e00c      	b.n	80054d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <osKernelInitialize+0x44>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <osKernelInitialize+0x44>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	e002      	b.n	80054d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054d8:	687b      	ldr	r3, [r7, #4]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000094 	.word	0x20000094

080054ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f2:	f3ef 8305 	mrs	r3, IPSR
 80054f6:	603b      	str	r3, [r7, #0]
  return(result);
 80054f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <osKernelStart+0x1a>
    stat = osErrorISR;
 80054fe:	f06f 0305 	mvn.w	r3, #5
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	e010      	b.n	8005528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <osKernelStart+0x48>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d109      	bne.n	8005522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800550e:	f7ff ffbf 	bl	8005490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <osKernelStart+0x48>)
 8005514:	2202      	movs	r2, #2
 8005516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005518:	f001 f866 	bl	80065e8 <vTaskStartScheduler>
      stat = osOK;
 800551c:	2300      	movs	r3, #0
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e002      	b.n	8005528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000094 	.word	0x20000094

08005538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af04      	add	r7, sp, #16
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005548:	f3ef 8305 	mrs	r3, IPSR
 800554c:	617b      	str	r3, [r7, #20]
  return(result);
 800554e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005550:	2b00      	cmp	r3, #0
 8005552:	d17e      	bne.n	8005652 <osThreadNew+0x11a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d07b      	beq.n	8005652 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800555e:	2318      	movs	r3, #24
 8005560:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d045      	beq.n	80055fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <osThreadNew+0x48>
        name = attr->name;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <osThreadNew+0x6e>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b38      	cmp	r3, #56	; 0x38
 8005598:	d805      	bhi.n	80055a6 <osThreadNew+0x6e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <osThreadNew+0x72>
        return (NULL);
 80055a6:	2300      	movs	r3, #0
 80055a8:	e054      	b.n	8005654 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <osThreadNew+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b5b      	cmp	r3, #91	; 0x5b
 80055c8:	d90a      	bls.n	80055e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <osThreadNew+0xa8>
        mem = 1;
 80055da:	2301      	movs	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e010      	b.n	8005602 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10c      	bne.n	8005602 <osThreadNew+0xca>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d108      	bne.n	8005602 <osThreadNew+0xca>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <osThreadNew+0xca>
          mem = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e001      	b.n	8005602 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d110      	bne.n	800562a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005610:	9202      	str	r2, [sp, #8]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6a3a      	ldr	r2, [r7, #32]
 800561c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fe0c 	bl	800623c <xTaskCreateStatic>
 8005624:	4603      	mov	r3, r0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e013      	b.n	8005652 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d110      	bne.n	8005652 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	b29a      	uxth	r2, r3
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fe57 	bl	80062f6 <xTaskCreate>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d001      	beq.n	8005652 <osThreadNew+0x11a>
            hTask = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005652:	693b      	ldr	r3, [r7, #16]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005664:	f3ef 8305 	mrs	r3, IPSR
 8005668:	60bb      	str	r3, [r7, #8]
  return(result);
 800566a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <osDelay+0x1c>
    stat = osErrorISR;
 8005670:	f06f 0305 	mvn.w	r3, #5
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e007      	b.n	8005688 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 ff7c 	bl	8006580 <vTaskDelay>
    }
  }

  return (stat);
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a07      	ldr	r2, [pc, #28]	; (80056c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80056a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a06      	ldr	r2, [pc, #24]	; (80056c4 <vApplicationGetIdleTaskMemory+0x30>)
 80056aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000098 	.word	0x20000098
 80056c4:	200000f4 	.word	0x200000f4

080056c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80056d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <vApplicationGetTimerTaskMemory+0x30>)
 80056de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e6:	601a      	str	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	200002f4 	.word	0x200002f4
 80056f8:	20000350 	.word	0x20000350

080056fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0208 	add.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b4:	d103      	bne.n	80057be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e00c      	b.n	80057d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <vListInsert+0x2e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d2f6      	bcs.n	80057c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6852      	ldr	r2, [r2, #4]
 8005830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800588e:	f002 fa39 	bl	8007d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	3b01      	subs	r3, #1
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d114      	bne.n	800590e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01a      	beq.n	8005922 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3310      	adds	r3, #16
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f903 	bl	8006afc <xTaskRemoveFromEventList>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <xQueueGenericReset+0xcc>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	e009      	b.n	8005922 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3310      	adds	r3, #16
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fef2 	bl	80056fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3324      	adds	r3, #36	; 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff feed 	bl	80056fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005922:	f002 fa1f 	bl	8007d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005926:	2301      	movs	r3, #1
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <xQueueGenericCreateStatic+0x52>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <xQueueGenericCreateStatic+0x56>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGenericCreateStatic+0x58>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	623b      	str	r3, [r7, #32]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <xQueueGenericCreateStatic+0x7e>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <xQueueGenericCreateStatic+0x82>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericCreateStatic+0x84>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61fb      	str	r3, [r7, #28]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059d2:	2350      	movs	r3, #80	; 0x50
 80059d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b50      	cmp	r3, #80	; 0x50
 80059da:	d00a      	beq.n	80059f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	61bb      	str	r3, [r7, #24]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f805 	bl	8005a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3730      	adds	r7, #48	; 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a52:	2101      	movs	r1, #1
 8005a54:	69b8      	ldr	r0, [r7, #24]
 8005a56:	f7ff ff05 	bl	8005864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueGenericSend+0x32>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <xQueueGenericSend+0x40>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <xQueueGenericSend+0x44>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <xQueueGenericSend+0x46>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <xQueueGenericSend+0x60>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d103      	bne.n	8005ada <xQueueGenericSend+0x6e>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <xQueueGenericSend+0x72>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueGenericSend+0x74>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueGenericSend+0x8e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	623b      	str	r3, [r7, #32]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afa:	f001 f9bd 	bl	8006e78 <xTaskGetSchedulerState>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <xQueueGenericSend+0x9e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <xQueueGenericSend+0xa2>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <xQueueGenericSend+0xa4>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61fb      	str	r3, [r7, #28]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b2a:	f002 f8eb 	bl	8007d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <xQueueGenericSend+0xd4>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d129      	bne.n	8005b94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b46:	f000 fa0b 	bl	8005f60 <prvCopyDataToQueue>
 8005b4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	3324      	adds	r3, #36	; 0x24
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 ffcf 	bl	8006afc <xTaskRemoveFromEventList>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d013      	beq.n	8005b8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b64:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <xQueueGenericSend+0x1f8>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e00a      	b.n	8005b8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xQueueGenericSend+0x1f8>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b8c:	f002 f8ea 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e063      	b.n	8005c5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b9a:	f002 f8e3 	bl	8007d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e05c      	b.n	8005c5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f809 	bl	8006bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bb6:	f002 f8d5 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bba:	f000 fd7b 	bl	80066b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bbe:	f002 f8a1 	bl	8007d04 <vPortEnterCritical>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bce:	d103      	bne.n	8005bd8 <xQueueGenericSend+0x16c>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bde:	b25b      	sxtb	r3, r3
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSend+0x182>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bee:	f002 f8b9 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf2:	1d3a      	adds	r2, r7, #4
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fff8 	bl	8006bf0 <xTaskCheckForTimeOut>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d124      	bne.n	8005c50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c08:	f000 faa2 	bl	8006150 <prvIsQueueFull>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d018      	beq.n	8005c44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	3310      	adds	r3, #16
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 ff1e 	bl	8006a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c22:	f000 fa2d 	bl	8006080 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c26:	f000 fd53 	bl	80066d0 <xTaskResumeAll>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f47f af7c 	bne.w	8005b2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <xQueueGenericSend+0x1f8>)
 8005c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	e772      	b.n	8005b2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c46:	f000 fa1b 	bl	8006080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c4a:	f000 fd41 	bl	80066d0 <xTaskResumeAll>
 8005c4e:	e76c      	b.n	8005b2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c52:	f000 fa15 	bl	8006080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c56:	f000 fd3b 	bl	80066d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3738      	adds	r7, #56	; 0x38
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b090      	sub	sp, #64	; 0x40
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <xQueueGenericSendFromISR+0x3c>
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <xQueueGenericSendFromISR+0x40>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <xQueueGenericSendFromISR+0x42>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d103      	bne.n	8005cd2 <xQueueGenericSendFromISR+0x6a>
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <xQueueGenericSendFromISR+0x6e>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <xQueueGenericSendFromISR+0x70>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf2:	f002 f8e9 	bl	8007ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	61fa      	str	r2, [r7, #28]
 8005d0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <xQueueGenericSendFromISR+0xbc>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d12f      	bne.n	8005d84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d3a:	f000 f911 	bl	8005f60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d46:	d112      	bne.n	8005d6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d016      	beq.n	8005d7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fed1 	bl	8006afc <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e007      	b.n	8005d7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d72:	3301      	adds	r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	b25a      	sxtb	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d82:	e001      	b.n	8005d88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3740      	adds	r7, #64	; 0x40
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	; 0x30
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <xQueueReceive+0x30>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	623b      	str	r3, [r7, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <xQueueReceive+0x3e>
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <xQueueReceive+0x42>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <xQueueReceive+0x44>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueReceive+0x5e>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61fb      	str	r3, [r7, #28]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dfe:	f001 f83b 	bl	8006e78 <xTaskGetSchedulerState>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <xQueueReceive+0x6e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xQueueReceive+0x72>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueReceive+0x74>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xQueueReceive+0x8e>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61bb      	str	r3, [r7, #24]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e2e:	f001 ff69 	bl	8007d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01f      	beq.n	8005e7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e42:	f000 f8f7 	bl	8006034 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	3310      	adds	r3, #16
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fe4e 	bl	8006afc <xTaskRemoveFromEventList>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e66:	4b3d      	ldr	r3, [pc, #244]	; (8005f5c <xQueueReceive+0x1bc>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e76:	f001 ff75 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e069      	b.n	8005f52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e84:	f001 ff6e 	bl	8007d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e062      	b.n	8005f52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fe94 	bl	8006bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ea0:	f001 ff60 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ea4:	f000 fc06 	bl	80066b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ea8:	f001 ff2c 	bl	8007d04 <vPortEnterCritical>
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb8:	d103      	bne.n	8005ec2 <xQueueReceive+0x122>
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ece:	d103      	bne.n	8005ed8 <xQueueReceive+0x138>
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed8:	f001 ff44 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005edc:	1d3a      	adds	r2, r7, #4
 8005ede:	f107 0310 	add.w	r3, r7, #16
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fe83 	bl	8006bf0 <xTaskCheckForTimeOut>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d123      	bne.n	8005f38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef2:	f000 f917 	bl	8006124 <prvIsQueueEmpty>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	3324      	adds	r3, #36	; 0x24
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fda9 	bl	8006a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f0c:	f000 f8b8 	bl	8006080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f10:	f000 fbde 	bl	80066d0 <xTaskResumeAll>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d189      	bne.n	8005e2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <xQueueReceive+0x1bc>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e780      	b.n	8005e2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2e:	f000 f8a7 	bl	8006080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f32:	f000 fbcd 	bl	80066d0 <xTaskResumeAll>
 8005f36:	e77a      	b.n	8005e2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3a:	f000 f8a1 	bl	8006080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f3e:	f000 fbc7 	bl	80066d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f44:	f000 f8ee 	bl	8006124 <prvIsQueueEmpty>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f43f af6f 	beq.w	8005e2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3730      	adds	r7, #48	; 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10d      	bne.n	8005f9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d14d      	bne.n	8006022 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 ff92 	bl	8006eb4 <xTaskPriorityDisinherit>
 8005f90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	e043      	b.n	8006022 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d119      	bne.n	8005fd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6858      	ldr	r0, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	f002 f9e0 	bl	8008370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	441a      	add	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d32b      	bcc.n	8006022 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	e026      	b.n	8006022 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68d8      	ldr	r0, [r3, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	f002 f9c6 	bl	8008370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	425b      	negs	r3, r3
 8005fee:	441a      	add	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d207      	bcs.n	8006010 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	425b      	negs	r3, r3
 800600a:	441a      	add	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d105      	bne.n	8006022 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3b01      	subs	r3, #1
 8006020:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d303      	bcc.n	8006068 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68d9      	ldr	r1, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	461a      	mov	r2, r3
 8006072:	6838      	ldr	r0, [r7, #0]
 8006074:	f002 f97c 	bl	8008370 <memcpy>
	}
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006088:	f001 fe3c 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006092:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006094:	e011      	b.n	80060ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3324      	adds	r3, #36	; 0x24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fd2a 	bl	8006afc <xTaskRemoveFromEventList>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060ae:	f000 fe01 	bl	8006cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dce9      	bgt.n	8006096 <prvUnlockQueue+0x16>
 80060c2:	e000      	b.n	80060c6 <prvUnlockQueue+0x46>
					break;
 80060c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060ce:	f001 fe49 	bl	8007d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060d2:	f001 fe17 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060de:	e011      	b.n	8006104 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3310      	adds	r3, #16
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fd05 	bl	8006afc <xTaskRemoveFromEventList>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060f8:	f000 fddc 	bl	8006cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	3b01      	subs	r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006108:	2b00      	cmp	r3, #0
 800610a:	dce9      	bgt.n	80060e0 <prvUnlockQueue+0x60>
 800610c:	e000      	b.n	8006110 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800610e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	22ff      	movs	r2, #255	; 0xff
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006118:	f001 fe24 	bl	8007d64 <vPortExitCritical>
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800612c:	f001 fdea 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e001      	b.n	8006142 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006142:	f001 fe0f 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006158:	f001 fdd4 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	429a      	cmp	r2, r3
 8006166:	d102      	bne.n	800616e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006168:	2301      	movs	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e001      	b.n	8006172 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006172:	f001 fdf7 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e014      	b.n	80061ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006190:	4a0f      	ldr	r2, [pc, #60]	; (80061d0 <vQueueAddToRegistry+0x50>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800619c:	490c      	ldr	r1, [pc, #48]	; (80061d0 <vQueueAddToRegistry+0x50>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <vQueueAddToRegistry+0x50>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4413      	add	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061b2:	e006      	b.n	80061c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b07      	cmp	r3, #7
 80061be:	d9e7      	bls.n	8006190 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20002048 	.word	0x20002048

080061d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061e4:	f001 fd8e 	bl	8007d04 <vPortEnterCritical>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ee:	b25b      	sxtb	r3, r3
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d103      	bne.n	80061fe <vQueueWaitForMessageRestricted+0x2a>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006204:	b25b      	sxtb	r3, r3
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620a:	d103      	bne.n	8006214 <vQueueWaitForMessageRestricted+0x40>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006214:	f001 fda6 	bl	8007d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fc3b 	bl	8006aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7ff ff26 	bl	8006080 <prvUnlockQueue>
	}
 8006234:	bf00      	nop
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08e      	sub	sp, #56	; 0x38
 8006240:	af04      	add	r7, sp, #16
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	623b      	str	r3, [r7, #32]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xTaskCreateStatic+0x46>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006282:	235c      	movs	r3, #92	; 0x5c
 8006284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b5c      	cmp	r3, #92	; 0x5c
 800628a:	d00a      	beq.n	80062a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	61bb      	str	r3, [r7, #24]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <xTaskCreateStatic+0xac>
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062c2:	2300      	movs	r3, #0
 80062c4:	9303      	str	r3, [sp, #12]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	9302      	str	r3, [sp, #8]
 80062ca:	f107 0314 	add.w	r3, r7, #20
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f850 	bl	8006380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062e2:	f000 f8dd 	bl	80064a0 <prvAddNewTaskToReadyList>
 80062e6:	e001      	b.n	80062ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062ec:	697b      	ldr	r3, [r7, #20]
	}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3728      	adds	r7, #40	; 0x28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b08c      	sub	sp, #48	; 0x30
 80062fa:	af04      	add	r7, sp, #16
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fe1c 	bl	8007f48 <pvPortMalloc>
 8006310:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006318:	205c      	movs	r0, #92	; 0x5c
 800631a:	f001 fe15 	bl	8007f48 <pvPortMalloc>
 800631e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
 800632c:	e005      	b.n	800633a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f001 fed6 	bl	80080e0 <vPortFree>
 8006334:	e001      	b.n	800633a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d017      	beq.n	8006370 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	2300      	movs	r3, #0
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	9302      	str	r3, [sp, #8]
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f80e 	bl	8006380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006364:	69f8      	ldr	r0, [r7, #28]
 8006366:	f000 f89b 	bl	80064a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800636a:	2301      	movs	r3, #1
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	e002      	b.n	8006376 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006376:	69bb      	ldr	r3, [r7, #24]
	}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	461a      	mov	r2, r3
 8006398:	21a5      	movs	r1, #165	; 0xa5
 800639a:	f001 fff7 	bl	800838c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063a8:	3b01      	subs	r3, #1
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	617b      	str	r3, [r7, #20]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01f      	beq.n	800641e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e012      	b.n	800640a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	7819      	ldrb	r1, [r3, #0]
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	3334      	adds	r3, #52	; 0x34
 80063f4:	460a      	mov	r2, r1
 80063f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d006      	beq.n	8006412 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d9e9      	bls.n	80063e4 <prvInitialiseNewTask+0x64>
 8006410:	e000      	b.n	8006414 <prvInitialiseNewTask+0x94>
			{
				break;
 8006412:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800641c:	e003      	b.n	8006426 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	2b37      	cmp	r3, #55	; 0x37
 800642a:	d901      	bls.n	8006430 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800642c:	2337      	movs	r3, #55	; 0x37
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2200      	movs	r2, #0
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f978 	bl	800573c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	3318      	adds	r3, #24
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff f973 	bl	800573c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2200      	movs	r2, #0
 8006470:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	68f9      	ldr	r1, [r7, #12]
 800647e:	69b8      	ldr	r0, [r7, #24]
 8006480:	f001 fb16 	bl	8007ab0 <pxPortInitialiseStack>
 8006484:	4602      	mov	r2, r0
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006496:	bf00      	nop
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064a8:	f001 fc2c 	bl	8007d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064ac:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064b6:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064be:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c4:	4b27      	ldr	r3, [pc, #156]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d110      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064cc:	f000 fc16 	bl	8006cfc <prvInitialiseTaskLists>
 80064d0:	e00d      	b.n	80064ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <prvAddNewTaskToReadyList+0xcc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d802      	bhi.n	80064ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064e8:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <prvAddNewTaskToReadyList+0xd4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d903      	bls.n	8006514 <prvAddNewTaskToReadyList+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a18      	ldr	r2, [pc, #96]	; (8006574 <prvAddNewTaskToReadyList+0xd4>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a15      	ldr	r2, [pc, #84]	; (8006578 <prvAddNewTaskToReadyList+0xd8>)
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7ff f913 	bl	8005756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006530:	f001 fc18 	bl	8007d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <prvAddNewTaskToReadyList+0xcc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	429a      	cmp	r2, r3
 8006548:	d207      	bcs.n	800655a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <prvAddNewTaskToReadyList+0xdc>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000c24 	.word	0x20000c24
 8006568:	20000750 	.word	0x20000750
 800656c:	20000c30 	.word	0x20000c30
 8006570:	20000c40 	.word	0x20000c40
 8006574:	20000c2c 	.word	0x20000c2c
 8006578:	20000754 	.word	0x20000754
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <vTaskDelay+0x60>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <vTaskDelay+0x30>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60bb      	str	r3, [r7, #8]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065b0:	f000 f880 	bl	80066b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fed8 	bl	800736c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065bc:	f000 f888 	bl	80066d0 <xTaskResumeAll>
 80065c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <vTaskDelay+0x64>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000c4c 	.word	0x20000c4c
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065f6:	463a      	mov	r2, r7
 80065f8:	1d39      	adds	r1, r7, #4
 80065fa:	f107 0308 	add.w	r3, r7, #8
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff f848 	bl	8005694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	9202      	str	r2, [sp, #8]
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	460a      	mov	r2, r1
 8006616:	4921      	ldr	r1, [pc, #132]	; (800669c <vTaskStartScheduler+0xb4>)
 8006618:	4821      	ldr	r0, [pc, #132]	; (80066a0 <vTaskStartScheduler+0xb8>)
 800661a:	f7ff fe0f 	bl	800623c <xTaskCreateStatic>
 800661e:	4603      	mov	r3, r0
 8006620:	4a20      	ldr	r2, [pc, #128]	; (80066a4 <vTaskStartScheduler+0xbc>)
 8006622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <vTaskStartScheduler+0xbc>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800662c:	2301      	movs	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e001      	b.n	8006636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d102      	bne.n	8006642 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800663c:	f000 feea 	bl	8007414 <xTimerCreateTimerTask>
 8006640:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d116      	bne.n	8006676 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	613b      	str	r3, [r7, #16]
}
 800665a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800665c:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <vTaskStartScheduler+0xc0>)
 800665e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006662:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <vTaskStartScheduler+0xc4>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <vTaskStartScheduler+0xc8>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006670:	f001 faa6 	bl	8007bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006674:	e00e      	b.n	8006694 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667c:	d10a      	bne.n	8006694 <vTaskStartScheduler+0xac>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vTaskStartScheduler+0xaa>
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	08009868 	.word	0x08009868
 80066a0:	08006ccd 	.word	0x08006ccd
 80066a4:	20000c48 	.word	0x20000c48
 80066a8:	20000c44 	.word	0x20000c44
 80066ac:	20000c30 	.word	0x20000c30
 80066b0:	20000c28 	.word	0x20000c28

080066b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <vTaskSuspendAll+0x18>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a03      	ldr	r2, [pc, #12]	; (80066cc <vTaskSuspendAll+0x18>)
 80066c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066c2:	bf00      	nop
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	20000c4c 	.word	0x20000c4c

080066d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066de:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <xTaskResumeAll+0x118>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <xTaskResumeAll+0x2c>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	603b      	str	r3, [r7, #0]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066fc:	f001 fb02 	bl	8007d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006700:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <xTaskResumeAll+0x118>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3b01      	subs	r3, #1
 8006706:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <xTaskResumeAll+0x118>)
 8006708:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670a:	4b37      	ldr	r3, [pc, #220]	; (80067e8 <xTaskResumeAll+0x118>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d162      	bne.n	80067d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006712:	4b36      	ldr	r3, [pc, #216]	; (80067ec <xTaskResumeAll+0x11c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d05e      	beq.n	80067d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800671a:	e02f      	b.n	800677c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671c:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <xTaskResumeAll+0x120>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3318      	adds	r3, #24
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff f871 	bl	8005810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f86c 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4b2d      	ldr	r3, [pc, #180]	; (80067f4 <xTaskResumeAll+0x124>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <xTaskResumeAll+0x7c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <xTaskResumeAll+0x124>)
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <xTaskResumeAll+0x128>)
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f7fe fff7 	bl	8005756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4b23      	ldr	r3, [pc, #140]	; (80067fc <xTaskResumeAll+0x12c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	429a      	cmp	r2, r3
 8006774:	d302      	bcc.n	800677c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006776:	4b22      	ldr	r3, [pc, #136]	; (8006800 <xTaskResumeAll+0x130>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <xTaskResumeAll+0x120>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1cb      	bne.n	800671c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800678a:	f000 fb55 	bl	8006e38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <xTaskResumeAll+0x134>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800679a:	f000 f847 	bl	800682c <xTaskIncrementTick>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067a4:	4b16      	ldr	r3, [pc, #88]	; (8006800 <xTaskResumeAll+0x130>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f1      	bne.n	800679a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067b6:	4b13      	ldr	r3, [pc, #76]	; (8006804 <xTaskResumeAll+0x134>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <xTaskResumeAll+0x130>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <xTaskResumeAll+0x138>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d8:	f001 fac4 	bl	8007d64 <vPortExitCritical>

	return xAlreadyYielded;
 80067dc:	68bb      	ldr	r3, [r7, #8]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000c4c 	.word	0x20000c4c
 80067ec:	20000c24 	.word	0x20000c24
 80067f0:	20000be4 	.word	0x20000be4
 80067f4:	20000c2c 	.word	0x20000c2c
 80067f8:	20000754 	.word	0x20000754
 80067fc:	20000750 	.word	0x20000750
 8006800:	20000c38 	.word	0x20000c38
 8006804:	20000c34 	.word	0x20000c34
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <xTaskGetTickCount+0x1c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006818:	687b      	ldr	r3, [r7, #4]
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000c28 	.word	0x20000c28

0800682c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006836:	4b4f      	ldr	r3, [pc, #316]	; (8006974 <xTaskIncrementTick+0x148>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 808f 	bne.w	800695e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006840:	4b4d      	ldr	r3, [pc, #308]	; (8006978 <xTaskIncrementTick+0x14c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006848:	4a4b      	ldr	r2, [pc, #300]	; (8006978 <xTaskIncrementTick+0x14c>)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d120      	bne.n	8006896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006854:	4b49      	ldr	r3, [pc, #292]	; (800697c <xTaskIncrementTick+0x150>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <xTaskIncrementTick+0x48>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	603b      	str	r3, [r7, #0]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <xTaskIncrementTick+0x46>
 8006874:	4b41      	ldr	r3, [pc, #260]	; (800697c <xTaskIncrementTick+0x150>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <xTaskIncrementTick+0x154>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a3f      	ldr	r2, [pc, #252]	; (800697c <xTaskIncrementTick+0x150>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4a3f      	ldr	r2, [pc, #252]	; (8006980 <xTaskIncrementTick+0x154>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b3e      	ldr	r3, [pc, #248]	; (8006984 <xTaskIncrementTick+0x158>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <xTaskIncrementTick+0x158>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	f000 fad1 	bl	8006e38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006896:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <xTaskIncrementTick+0x15c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	429a      	cmp	r2, r3
 800689e:	d349      	bcc.n	8006934 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a0:	4b36      	ldr	r3, [pc, #216]	; (800697c <xTaskIncrementTick+0x150>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <xTaskIncrementTick+0x15c>)
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068b0:	601a      	str	r2, [r3, #0]
					break;
 80068b2:	e03f      	b.n	8006934 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b4:	4b31      	ldr	r3, [pc, #196]	; (800697c <xTaskIncrementTick+0x150>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d203      	bcs.n	80068d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068cc:	4a2e      	ldr	r2, [pc, #184]	; (8006988 <xTaskIncrementTick+0x15c>)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068d2:	e02f      	b.n	8006934 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe ff99 	bl	8005810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3318      	adds	r3, #24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe ff90 	bl	8005810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <xTaskIncrementTick+0x160>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <xTaskIncrementTick+0xd8>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a22      	ldr	r2, [pc, #136]	; (800698c <xTaskIncrementTick+0x160>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <xTaskIncrementTick+0x164>)
 8006912:	441a      	add	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fe ff1b 	bl	8005756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <xTaskIncrementTick+0x168>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	429a      	cmp	r2, r3
 800692c:	d3b8      	bcc.n	80068a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006932:	e7b5      	b.n	80068a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006934:	4b17      	ldr	r3, [pc, #92]	; (8006994 <xTaskIncrementTick+0x168>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	4915      	ldr	r1, [pc, #84]	; (8006990 <xTaskIncrementTick+0x164>)
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d901      	bls.n	8006950 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006950:	4b11      	ldr	r3, [pc, #68]	; (8006998 <xTaskIncrementTick+0x16c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e004      	b.n	8006968 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <xTaskIncrementTick+0x170>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <xTaskIncrementTick+0x170>)
 8006966:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006968:	697b      	ldr	r3, [r7, #20]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000c4c 	.word	0x20000c4c
 8006978:	20000c28 	.word	0x20000c28
 800697c:	20000bdc 	.word	0x20000bdc
 8006980:	20000be0 	.word	0x20000be0
 8006984:	20000c3c 	.word	0x20000c3c
 8006988:	20000c44 	.word	0x20000c44
 800698c:	20000c2c 	.word	0x20000c2c
 8006990:	20000754 	.word	0x20000754
 8006994:	20000750 	.word	0x20000750
 8006998:	20000c38 	.word	0x20000c38
 800699c:	20000c34 	.word	0x20000c34

080069a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069a6:	4b28      	ldr	r3, [pc, #160]	; (8006a48 <vTaskSwitchContext+0xa8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ae:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <vTaskSwitchContext+0xac>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069b4:	e041      	b.n	8006a3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069b6:	4b25      	ldr	r3, [pc, #148]	; (8006a4c <vTaskSwitchContext+0xac>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <vTaskSwitchContext+0xb0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	e010      	b.n	80069e6 <vTaskSwitchContext+0x46>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	607b      	str	r3, [r7, #4]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vTaskSwitchContext+0x3e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	491b      	ldr	r1, [pc, #108]	; (8006a54 <vTaskSwitchContext+0xb4>)
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0e4      	beq.n	80069c4 <vTaskSwitchContext+0x24>
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <vTaskSwitchContext+0xb4>)
 8006a06:	4413      	add	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	605a      	str	r2, [r3, #4]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d104      	bne.n	8006a2a <vTaskSwitchContext+0x8a>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <vTaskSwitchContext+0xb8>)
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vTaskSwitchContext+0xb0>)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6013      	str	r3, [r2, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000c4c 	.word	0x20000c4c
 8006a4c:	20000c38 	.word	0x20000c38
 8006a50:	20000c2c 	.word	0x20000c2c
 8006a54:	20000754 	.word	0x20000754
 8006a58:	20000750 	.word	0x20000750

08006a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60fb      	str	r3, [r7, #12]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <vTaskPlaceOnEventList+0x44>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3318      	adds	r3, #24
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fe fe87 	bl	800579e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a90:	2101      	movs	r1, #1
 8006a92:	6838      	ldr	r0, [r7, #0]
 8006a94:	f000 fc6a 	bl	800736c <prvAddCurrentTaskToDelayedList>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000750 	.word	0x20000750

08006aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	617b      	str	r3, [r7, #20]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7fe fe3e 	bl	8005756 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ae4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	68b8      	ldr	r0, [r7, #8]
 8006aea:	f000 fc3f 	bl	800736c <prvAddCurrentTaskToDelayedList>
	}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000750 	.word	0x20000750

08006afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	3318      	adds	r3, #24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe fe6f 	bl	8005810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b32:	4b1e      	ldr	r3, [pc, #120]	; (8006bac <xTaskRemoveFromEventList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11d      	bne.n	8006b76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fe66 	bl	8005810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <xTaskRemoveFromEventList+0xb4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <xTaskRemoveFromEventList+0x5c>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a16      	ldr	r2, [pc, #88]	; (8006bb0 <xTaskRemoveFromEventList+0xb4>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <xTaskRemoveFromEventList+0xb8>)
 8006b66:	441a      	add	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fdf1 	bl	8005756 <vListInsertEnd>
 8006b74:	e005      	b.n	8006b82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3318      	adds	r3, #24
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <xTaskRemoveFromEventList+0xbc>)
 8006b7e:	f7fe fdea 	bl	8005756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <xTaskRemoveFromEventList+0xc0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d905      	bls.n	8006b9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b94:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <xTaskRemoveFromEventList+0xc4>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e001      	b.n	8006ba0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ba0:	697b      	ldr	r3, [r7, #20]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000c4c 	.word	0x20000c4c
 8006bb0:	20000c2c 	.word	0x20000c2c
 8006bb4:	20000754 	.word	0x20000754
 8006bb8:	20000be4 	.word	0x20000be4
 8006bbc:	20000750 	.word	0x20000750
 8006bc0:	20000c38 	.word	0x20000c38

08006bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <vTaskInternalSetTimeOutState+0x24>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <vTaskInternalSetTimeOutState+0x28>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	605a      	str	r2, [r3, #4]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000c3c 	.word	0x20000c3c
 8006bec:	20000c28 	.word	0x20000c28

08006bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c32:	f001 f867 	bl	8007d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c36:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <xTaskCheckForTimeOut+0xbc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4e:	d102      	bne.n	8006c56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e023      	b.n	8006c9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <xTaskCheckForTimeOut+0xc0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d007      	beq.n	8006c72 <xTaskCheckForTimeOut+0x82>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	e015      	b.n	8006c9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d20b      	bcs.n	8006c94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ff9b 	bl	8006bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e004      	b.n	8006c9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c9e:	f001 f861 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000c28 	.word	0x20000c28
 8006cb0:	20000c3c 	.word	0x20000c3c

08006cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <vTaskMissedYield+0x14>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000c38 	.word	0x20000c38

08006ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cd4:	f000 f852 	bl	8006d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <prvIdleTask+0x28>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d9f9      	bls.n	8006cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <prvIdleTask+0x2c>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cf0:	e7f0      	b.n	8006cd4 <prvIdleTask+0x8>
 8006cf2:	bf00      	nop
 8006cf4:	20000754 	.word	0x20000754
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e00c      	b.n	8006d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <prvInitialiseTaskLists+0x60>)
 8006d14:	4413      	add	r3, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fcf0 	bl	80056fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b37      	cmp	r3, #55	; 0x37
 8006d26:	d9ef      	bls.n	8006d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d28:	480d      	ldr	r0, [pc, #52]	; (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d2a:	f7fe fce7 	bl	80056fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d2e:	480d      	ldr	r0, [pc, #52]	; (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d30:	f7fe fce4 	bl	80056fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d34:	480c      	ldr	r0, [pc, #48]	; (8006d68 <prvInitialiseTaskLists+0x6c>)
 8006d36:	f7fe fce1 	bl	80056fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d3a:	480c      	ldr	r0, [pc, #48]	; (8006d6c <prvInitialiseTaskLists+0x70>)
 8006d3c:	f7fe fcde 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d40:	480b      	ldr	r0, [pc, #44]	; (8006d70 <prvInitialiseTaskLists+0x74>)
 8006d42:	f7fe fcdb 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <prvInitialiseTaskLists+0x78>)
 8006d48:	4a05      	ldr	r2, [pc, #20]	; (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvInitialiseTaskLists+0x7c>)
 8006d4e:	4a05      	ldr	r2, [pc, #20]	; (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000754 	.word	0x20000754
 8006d60:	20000bb4 	.word	0x20000bb4
 8006d64:	20000bc8 	.word	0x20000bc8
 8006d68:	20000be4 	.word	0x20000be4
 8006d6c:	20000bf8 	.word	0x20000bf8
 8006d70:	20000c10 	.word	0x20000c10
 8006d74:	20000bdc 	.word	0x20000bdc
 8006d78:	20000be0 	.word	0x20000be0

08006d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d82:	e019      	b.n	8006db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d84:	f000 ffbe 	bl	8007d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <prvCheckTasksWaitingTermination+0x50>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fd3b 	bl	8005810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4a0b      	ldr	r2, [pc, #44]	; (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dae:	f000 ffd9 	bl	8007d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f810 	bl	8006dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e1      	bne.n	8006d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000bf8 	.word	0x20000bf8
 8006dd0:	20000c24 	.word	0x20000c24
 8006dd4:	20000c0c 	.word	0x20000c0c

08006dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d108      	bne.n	8006dfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 f976 	bl	80080e0 <vPortFree>
				vPortFree( pxTCB );
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f973 	bl	80080e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dfa:	e018      	b.n	8006e2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d103      	bne.n	8006e0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f96a 	bl	80080e0 <vPortFree>
	}
 8006e0c:	e00f      	b.n	8006e2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d00a      	beq.n	8006e2e <prvDeleteTCB+0x56>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <prvDeleteTCB+0x54>
	}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <prvResetNextTaskUnblockTime+0x38>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <prvResetNextTaskUnblockTime+0x3c>)
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e50:	e008      	b.n	8006e64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <prvResetNextTaskUnblockTime+0x38>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <prvResetNextTaskUnblockTime+0x3c>)
 8006e62:	6013      	str	r3, [r2, #0]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	20000bdc 	.word	0x20000bdc
 8006e74:	20000c44 	.word	0x20000c44

08006e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <xTaskGetSchedulerState+0x34>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e86:	2301      	movs	r3, #1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	e008      	b.n	8006e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <xTaskGetSchedulerState+0x38>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e94:	2302      	movs	r3, #2
 8006e96:	607b      	str	r3, [r7, #4]
 8006e98:	e001      	b.n	8006e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e9e:	687b      	ldr	r3, [r7, #4]
	}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000c30 	.word	0x20000c30
 8006eb0:	20000c4c 	.word	0x20000c4c

08006eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d056      	beq.n	8006f78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <xTaskPriorityDisinherit+0xd0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d00a      	beq.n	8006eea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60fb      	str	r3, [r7, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60bb      	str	r3, [r7, #8]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0c:	1e5a      	subs	r2, r3, #1
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d02c      	beq.n	8006f78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d128      	bne.n	8006f78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fc70 	bl	8005810 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <xTaskPriorityDisinherit+0xd4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d903      	bls.n	8006f58 <xTaskPriorityDisinherit+0xa4>
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <xTaskPriorityDisinherit+0xd4>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <xTaskPriorityDisinherit+0xd8>)
 8006f66:	441a      	add	r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fe fbf1 	bl	8005756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f78:	697b      	ldr	r3, [r7, #20]
	}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000750 	.word	0x20000750
 8006f88:	20000c2c 	.word	0x20000c2c
 8006f8c:	20000754 	.word	0x20000754

08006f90 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006f9e:	f000 feb1 	bl	8007d04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006fa2:	4b26      	ldr	r3, [pc, #152]	; (800703c <xTaskNotifyWait+0xac>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d01a      	beq.n	8006fe6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006fb0:	4b22      	ldr	r3, [pc, #136]	; (800703c <xTaskNotifyWait+0xac>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	43d2      	mvns	r2, r2
 8006fba:	400a      	ands	r2, r1
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <xTaskNotifyWait+0xac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fce:	2101      	movs	r1, #1
 8006fd0:	6838      	ldr	r0, [r7, #0]
 8006fd2:	f000 f9cb 	bl	800736c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <xTaskNotifyWait+0xb0>)
 8006fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006fe6:	f000 febd 	bl	8007d64 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006fea:	f000 fe8b 	bl	8007d04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <xTaskNotifyWait+0xac>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <xTaskNotifyWait+0xac>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d002      	beq.n	8007012 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e008      	b.n	8007024 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <xTaskNotifyWait+0xac>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	43d2      	mvns	r2, r2
 800701c:	400a      	ands	r2, r1
 800701e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <xTaskNotifyWait+0xac>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800702e:	f000 fe99 	bl	8007d64 <vPortExitCritical>

		return xReturn;
 8007032:	697b      	ldr	r3, [r7, #20]
	}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000750 	.word	0x20000750
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	; 0x28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007054:	2301      	movs	r3, #1
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <xTaskGenericNotify+0x30>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61bb      	str	r3, [r7, #24]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007078:	f000 fe44 	bl	8007d04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007090:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d828      	bhi.n	80070f2 <xTaskGenericNotify+0xae>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <xTaskGenericNotify+0x64>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	08007113 	.word	0x08007113
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cb 	.word	0x080070cb
 80070b4:	080070d7 	.word	0x080070d7
 80070b8:	080070df 	.word	0x080070df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80070c8:	e026      	b.n	8007118 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80070d4:	e020      	b.n	8007118 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80070dc:	e01c      	b.n	8007118 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80070de:	7ffb      	ldrb	r3, [r7, #31]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d003      	beq.n	80070ec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80070ea:	e015      	b.n	8007118 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80070f0:	e012      	b.n	8007118 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d00c      	beq.n	8007116 <xTaskGenericNotify+0xd2>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	617b      	str	r3, [r7, #20]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xTaskGenericNotify+0xcc>
					break;
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <xTaskGenericNotify+0xd4>

					break;
 8007116:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007118:	7ffb      	ldrb	r3, [r7, #31]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d13a      	bne.n	8007194 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fb74 	bl	8005810 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <xTaskGenericNotify+0x160>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <xTaskGenericNotify+0xf8>
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a1a      	ldr	r2, [pc, #104]	; (80071a4 <xTaskGenericNotify+0x160>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <xTaskGenericNotify+0x164>)
 800714a:	441a      	add	r2, r3
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe faff 	bl	8005756 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <xTaskGenericNotify+0x132>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	613b      	str	r3, [r7, #16]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <xTaskGenericNotify+0x168>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	429a      	cmp	r2, r3
 8007182:	d907      	bls.n	8007194 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <xTaskGenericNotify+0x16c>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007194:	f000 fde6 	bl	8007d64 <vPortExitCritical>

		return xReturn;
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800719a:	4618      	mov	r0, r3
 800719c:	3728      	adds	r7, #40	; 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000c2c 	.word	0x20000c2c
 80071a8:	20000754 	.word	0x20000754
 80071ac:	20000750 	.word	0x20000750
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80071c4:	2301      	movs	r3, #1
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e4:	f000 fe70 	bl	8007ec8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80071ec:	f3ef 8211 	mrs	r2, BASEPRI
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	623a      	str	r2, [r7, #32]
 8007202:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007204:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800721c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b04      	cmp	r3, #4
 800722c:	d828      	bhi.n	8007280 <xTaskGenericNotifyFromISR+0xcc>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <xTaskGenericNotifyFromISR+0x80>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	080072a1 	.word	0x080072a1
 8007238:	08007249 	.word	0x08007249
 800723c:	08007257 	.word	0x08007257
 8007240:	08007263 	.word	0x08007263
 8007244:	0800726b 	.word	0x0800726b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	431a      	orrs	r2, r3
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007254:	e027      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007260:	e021      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007268:	e01d      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800726a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800726e:	2b02      	cmp	r3, #2
 8007270:	d003      	beq.n	800727a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007278:	e015      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800727e:	e012      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007288:	d00c      	beq.n	80072a4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	61bb      	str	r3, [r7, #24]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskGenericNotifyFromISR+0xea>
					break;
 80072a0:	bf00      	nop
 80072a2:	e000      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80072a4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80072a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d146      	bne.n	800733c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	617b      	str	r3, [r7, #20]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <xTaskGenericNotifyFromISR+0x1a0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11d      	bne.n	8007310 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fa99 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <xTaskGenericNotifyFromISR+0x1a4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <xTaskGenericNotifyFromISR+0x13e>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a1a      	ldr	r2, [pc, #104]	; (8007358 <xTaskGenericNotifyFromISR+0x1a4>)
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a17      	ldr	r2, [pc, #92]	; (800735c <xTaskGenericNotifyFromISR+0x1a8>)
 8007300:	441a      	add	r2, r3
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe fa24 	bl	8005756 <vListInsertEnd>
 800730e:	e005      	b.n	800731c <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	3318      	adds	r3, #24
 8007314:	4619      	mov	r1, r3
 8007316:	4812      	ldr	r0, [pc, #72]	; (8007360 <xTaskGenericNotifyFromISR+0x1ac>)
 8007318:	f7fe fa1d 	bl	8005756 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <xTaskGenericNotifyFromISR+0x1b0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	429a      	cmp	r2, r3
 8007328:	d908      	bls.n	800733c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800732a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007332:	2201      	movs	r2, #1
 8007334:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <xTaskGenericNotifyFromISR+0x1b4>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f383 8811 	msr	BASEPRI, r3
}
 8007346:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800734a:	4618      	mov	r0, r3
 800734c:	3738      	adds	r7, #56	; 0x38
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000c4c 	.word	0x20000c4c
 8007358:	20000c2c 	.word	0x20000c2c
 800735c:	20000754 	.word	0x20000754
 8007360:	20000be4 	.word	0x20000be4
 8007364:	20000750 	.word	0x20000750
 8007368:	20000c38 	.word	0x20000c38

0800736c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <prvAddCurrentTaskToDelayedList+0x90>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800737c:	4b20      	ldr	r3, [pc, #128]	; (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fa44 	bl	8005810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738e:	d10a      	bne.n	80073a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4819      	ldr	r0, [pc, #100]	; (8007404 <prvAddCurrentTaskToDelayedList+0x98>)
 80073a0:	f7fe f9d9 	bl	8005756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073a4:	e026      	b.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d209      	bcs.n	80073d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f7fe f9e7 	bl	800579e <vListInsert>
}
 80073d0:	e010      	b.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d2:	4b0e      	ldr	r3, [pc, #56]	; (800740c <prvAddCurrentTaskToDelayedList+0xa0>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fe f9dd 	bl	800579e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d202      	bcs.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073ee:	4a08      	ldr	r2, [pc, #32]	; (8007410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000c28 	.word	0x20000c28
 8007400:	20000750 	.word	0x20000750
 8007404:	20000c10 	.word	0x20000c10
 8007408:	20000be0 	.word	0x20000be0
 800740c:	20000bdc 	.word	0x20000bdc
 8007410:	20000c44 	.word	0x20000c44

08007414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800741e:	f000 fb07 	bl	8007a30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <xTimerCreateTimerTask+0x80>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d021      	beq.n	800746e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007432:	1d3a      	adds	r2, r7, #4
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	f107 030c 	add.w	r3, r7, #12
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe f943 	bl	80056c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	9202      	str	r2, [sp, #8]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	2302      	movs	r3, #2
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	2300      	movs	r3, #0
 8007452:	460a      	mov	r2, r1
 8007454:	4910      	ldr	r1, [pc, #64]	; (8007498 <xTimerCreateTimerTask+0x84>)
 8007456:	4811      	ldr	r0, [pc, #68]	; (800749c <xTimerCreateTimerTask+0x88>)
 8007458:	f7fe fef0 	bl	800623c <xTaskCreateStatic>
 800745c:	4603      	mov	r3, r0
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <xTimerCreateTimerTask+0x8c>)
 8007460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <xTimerCreateTimerTask+0x8c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800746a:	2301      	movs	r3, #1
 800746c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	613b      	str	r3, [r7, #16]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000c80 	.word	0x20000c80
 8007498:	08009870 	.word	0x08009870
 800749c:	080075d9 	.word	0x080075d9
 80074a0:	20000c84 	.word	0x20000c84

080074a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <xTimerGenericCommand+0x98>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02a      	beq.n	8007530 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b05      	cmp	r3, #5
 80074ea:	dc18      	bgt.n	800751e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074ec:	f7ff fcc4 	bl	8006e78 <xTaskGetSchedulerState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d109      	bne.n	800750a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074f6:	4b11      	ldr	r3, [pc, #68]	; (800753c <xTimerGenericCommand+0x98>)
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	f107 0110 	add.w	r1, r7, #16
 80074fe:	2300      	movs	r3, #0
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	f7fe fab3 	bl	8005a6c <xQueueGenericSend>
 8007506:	6278      	str	r0, [r7, #36]	; 0x24
 8007508:	e012      	b.n	8007530 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <xTimerGenericCommand+0x98>)
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	f107 0110 	add.w	r1, r7, #16
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	f7fe faa9 	bl	8005a6c <xQueueGenericSend>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24
 800751c:	e008      	b.n	8007530 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <xTimerGenericCommand+0x98>)
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f107 0110 	add.w	r1, r7, #16
 8007526:	2300      	movs	r3, #0
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	f7fe fb9d 	bl	8005c68 <xQueueGenericSendFromISR>
 800752e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	; 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000c80 	.word	0x20000c80

08007540 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754a:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <prvProcessExpiredTimer+0x94>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3304      	adds	r3, #4
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe f959 	bl	8005810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d022      	beq.n	80075b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	18d1      	adds	r1, r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	6978      	ldr	r0, [r7, #20]
 800757a:	f000 f8d1 	bl	8007720 <prvInsertTimerInActiveList>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01f      	beq.n	80075c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007584:	2300      	movs	r3, #0
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	2100      	movs	r1, #0
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	f7ff ff88 	bl	80074a4 <xTimerGenericCommand>
 8007594:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d113      	bne.n	80075c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60fb      	str	r3, [r7, #12]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	4798      	blx	r3
}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000c78 	.word	0x20000c78

080075d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075e0:	f107 0308 	add.w	r3, r7, #8
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f857 	bl	8007698 <prvGetNextExpireTime>
 80075ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4619      	mov	r1, r3
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f803 	bl	80075fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075f6:	f000 f8d5 	bl	80077a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075fa:	e7f1      	b.n	80075e0 <prvTimerTask+0x8>

080075fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007606:	f7ff f855 	bl	80066b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f866 	bl	80076e0 <prvSampleTimeNow>
 8007614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d130      	bne.n	800767e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <prvProcessTimerOrBlockTask+0x3c>
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	429a      	cmp	r2, r3
 8007628:	d806      	bhi.n	8007638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800762a:	f7ff f851 	bl	80066d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800762e:	68f9      	ldr	r1, [r7, #12]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff ff85 	bl	8007540 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007636:	e024      	b.n	8007682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <prvProcessTimerOrBlockTask+0x90>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <prvProcessTimerOrBlockTask+0x50>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <prvProcessTimerOrBlockTask+0x52>
 800764c:	2300      	movs	r3, #0
 800764e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <prvProcessTimerOrBlockTask+0x94>)
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4619      	mov	r1, r3
 800765e:	f7fe fdb9 	bl	80061d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007662:	f7ff f835 	bl	80066d0 <xTaskResumeAll>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10a      	bne.n	8007682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <prvProcessTimerOrBlockTask+0x98>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
}
 800767c:	e001      	b.n	8007682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800767e:	f7ff f827 	bl	80066d0 <xTaskResumeAll>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000c7c 	.word	0x20000c7c
 8007690:	20000c80 	.word	0x20000c80
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076a0:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <prvGetNextExpireTime+0x44>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <prvGetNextExpireTime+0x16>
 80076aa:	2201      	movs	r2, #1
 80076ac:	e000      	b.n	80076b0 <prvGetNextExpireTime+0x18>
 80076ae:	2200      	movs	r2, #0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076bc:	4b07      	ldr	r3, [pc, #28]	; (80076dc <prvGetNextExpireTime+0x44>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e001      	b.n	80076cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000c78 	.word	0x20000c78

080076e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076e8:	f7ff f890 	bl	800680c <xTaskGetTickCount>
 80076ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076ee:	4b0b      	ldr	r3, [pc, #44]	; (800771c <prvSampleTimeNow+0x3c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d205      	bcs.n	8007704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076f8:	f000 f936 	bl	8007968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e002      	b.n	800770a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800770a:	4a04      	ldr	r2, [pc, #16]	; (800771c <prvSampleTimeNow+0x3c>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007710:	68fb      	ldr	r3, [r7, #12]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000c88 	.word	0x20000c88

08007720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d812      	bhi.n	800776c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	1ad2      	subs	r2, r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007754:	2301      	movs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e01b      	b.n	8007792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800775a:	4b10      	ldr	r3, [pc, #64]	; (800779c <prvInsertTimerInActiveList+0x7c>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fe f81a 	bl	800579e <vListInsert>
 800776a:	e012      	b.n	8007792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d206      	bcs.n	8007782 <prvInsertTimerInActiveList+0x62>
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e007      	b.n	8007792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007782:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <prvInsertTimerInActiveList+0x80>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7fe f806 	bl	800579e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007792:	697b      	ldr	r3, [r7, #20]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000c7c 	.word	0x20000c7c
 80077a0:	20000c78 	.word	0x20000c78

080077a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08e      	sub	sp, #56	; 0x38
 80077a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077aa:	e0ca      	b.n	8007942 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da18      	bge.n	80077e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077b2:	1d3b      	adds	r3, r7, #4
 80077b4:	3304      	adds	r3, #4
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	61fb      	str	r3, [r7, #28]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077da:	6850      	ldr	r0, [r2, #4]
 80077dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077de:	6892      	ldr	r2, [r2, #8]
 80077e0:	4611      	mov	r1, r2
 80077e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f2c0 80aa 	blt.w	8007940 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	3304      	adds	r3, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe f807 	bl	8005810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007802:	463b      	mov	r3, r7
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff ff6b 	bl	80076e0 <prvSampleTimeNow>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b09      	cmp	r3, #9
 8007810:	f200 8097 	bhi.w	8007942 <prvProcessReceivedCommands+0x19e>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <prvProcessReceivedCommands+0x78>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007845 	.word	0x08007845
 8007820:	08007845 	.word	0x08007845
 8007824:	08007845 	.word	0x08007845
 8007828:	080078b9 	.word	0x080078b9
 800782c:	080078cd 	.word	0x080078cd
 8007830:	08007917 	.word	0x08007917
 8007834:	08007845 	.word	0x08007845
 8007838:	08007845 	.word	0x08007845
 800783c:	080078b9 	.word	0x080078b9
 8007840:	080078cd 	.word	0x080078cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	b2da      	uxtb	r2, r3
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	18d1      	adds	r1, r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007864:	f7ff ff5c 	bl	8007720 <prvInsertTimerInActiveList>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d069      	beq.n	8007942 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d05e      	beq.n	8007942 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	441a      	add	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	2100      	movs	r1, #0
 8007894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007896:	f7ff fe05 	bl	80074a4 <xTimerGenericCommand>
 800789a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d14f      	bne.n	8007942 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61bb      	str	r3, [r7, #24]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078ca:	e03a      	b.n	8007942 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	617b      	str	r3, [r7, #20]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	18d1      	adds	r1, r2, r3
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f7ff ff06 	bl	8007720 <prvInsertTimerInActiveList>
					break;
 8007914:	e015      	b.n	8007942 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	f000 fbdb 	bl	80080e0 <vPortFree>
 800792a:	e00a      	b.n	8007942 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800793e:	e000      	b.n	8007942 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <prvProcessReceivedCommands+0x1c0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	1d39      	adds	r1, r7, #4
 8007948:	2200      	movs	r2, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fa28 	bl	8005da0 <xQueueReceive>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	f47f af2a 	bne.w	80077ac <prvProcessReceivedCommands+0x8>
	}
}
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	3730      	adds	r7, #48	; 0x30
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000c80 	.word	0x20000c80

08007968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800796e:	e048      	b.n	8007a02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007970:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797a:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3304      	adds	r3, #4
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd ff41 	bl	8005810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d02e      	beq.n	8007a02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4413      	add	r3, r2
 80079ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d90e      	bls.n	80079d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079c2:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7fd fee6 	bl	800579e <vListInsert>
 80079d2:	e016      	b.n	8007a02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079d4:	2300      	movs	r3, #0
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2300      	movs	r3, #0
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	2100      	movs	r1, #0
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fd60 	bl	80074a4 <xTimerGenericCommand>
 80079e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	603b      	str	r3, [r7, #0]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1b1      	bne.n	8007970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a12:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <prvSwitchTimerLists+0xc4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <prvSwitchTimerLists+0xc0>)
 8007a18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a1a:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <prvSwitchTimerLists+0xc4>)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	6013      	str	r3, [r2, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000c78 	.word	0x20000c78
 8007a2c:	20000c7c 	.word	0x20000c7c

08007a30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a36:	f000 f965 	bl	8007d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d120      	bne.n	8007a84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a42:	4814      	ldr	r0, [pc, #80]	; (8007a94 <prvCheckForValidListAndQueue+0x64>)
 8007a44:	f7fd fe5a 	bl	80056fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a48:	4813      	ldr	r0, [pc, #76]	; (8007a98 <prvCheckForValidListAndQueue+0x68>)
 8007a4a:	f7fd fe57 	bl	80056fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <prvCheckForValidListAndQueue+0x6c>)
 8007a50:	4a10      	ldr	r2, [pc, #64]	; (8007a94 <prvCheckForValidListAndQueue+0x64>)
 8007a52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <prvCheckForValidListAndQueue+0x70>)
 8007a56:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <prvCheckForValidListAndQueue+0x68>)
 8007a58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <prvCheckForValidListAndQueue+0x74>)
 8007a60:	4a11      	ldr	r2, [pc, #68]	; (8007aa8 <prvCheckForValidListAndQueue+0x78>)
 8007a62:	2110      	movs	r1, #16
 8007a64:	200a      	movs	r0, #10
 8007a66:	f7fd ff65 	bl	8005934 <xQueueGenericCreateStatic>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <prvCheckForValidListAndQueue+0x60>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	490b      	ldr	r1, [pc, #44]	; (8007aac <prvCheckForValidListAndQueue+0x7c>)
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fb7e 	bl	8006180 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a84:	f000 f96e 	bl	8007d64 <vPortExitCritical>
}
 8007a88:	bf00      	nop
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000c80 	.word	0x20000c80
 8007a94:	20000c50 	.word	0x20000c50
 8007a98:	20000c64 	.word	0x20000c64
 8007a9c:	20000c78 	.word	0x20000c78
 8007aa0:	20000c7c 	.word	0x20000c7c
 8007aa4:	20000d2c 	.word	0x20000d2c
 8007aa8:	20000c8c 	.word	0x20000c8c
 8007aac:	08009878 	.word	0x08009878

08007ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ae0:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <pxPortInitialiseStack+0x64>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b14      	subs	r3, #20
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f06f 0202 	mvn.w	r2, #2
 8007afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3b20      	subs	r3, #32
 8007b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	08007b19 	.word	0x08007b19

08007b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <prvTaskExitError+0x54>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b2a:	d00a      	beq.n	8007b42 <prvTaskExitError+0x2a>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60fb      	str	r3, [r7, #12]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <prvTaskExitError+0x28>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60bb      	str	r3, [r7, #8]
}
 8007b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b56:	bf00      	nop
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0fc      	beq.n	8007b58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000000c 	.word	0x2000000c

08007b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <pxCurrentTCBConst2>)
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f380 8809 	msr	PSP, r0
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8811 	msr	BASEPRI, r0
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst2>:
 8007b90:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b98:	4808      	ldr	r0, [pc, #32]	; (8007bbc <prvPortStartFirstTask+0x24>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f380 8808 	msr	MSP, r0
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8814 	msr	CONTROL, r0
 8007baa:	b662      	cpsie	i
 8007bac:	b661      	cpsie	f
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	df00      	svc	0
 8007bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bba:	bf00      	nop
 8007bbc:	e000ed08 	.word	0xe000ed08

08007bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bc6:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a46      	ldr	r2, [pc, #280]	; (8007ce4 <xPortStartScheduler+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10a      	bne.n	8007be6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007be6:	4b3e      	ldr	r3, [pc, #248]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3f      	ldr	r2, [pc, #252]	; (8007ce8 <xPortStartScheduler+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10a      	bne.n	8007c06 <xPortStartScheduler+0x46>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c06:	4b39      	ldr	r3, [pc, #228]	; (8007cec <xPortStartScheduler+0x12c>)
 8007c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <xPortStartScheduler+0x130>)
 8007c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c2e:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c34:	e009      	b.n	8007c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d0ef      	beq.n	8007c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c56:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1c3 0307 	rsb	r3, r3, #7
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d00a      	beq.n	8007c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c8a:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cae:	f000 f8dd 	bl	8007e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <xPortStartScheduler+0x13c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cb8:	f000 f8fc 	bl	8007eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cbc:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0f      	ldr	r2, [pc, #60]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cc8:	f7ff ff66 	bl	8007b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ccc:	f7fe fe68 	bl	80069a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd0:	f7ff ff22 	bl	8007b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	e000ed00 	.word	0xe000ed00
 8007ce4:	410fc271 	.word	0x410fc271
 8007ce8:	410fc270 	.word	0x410fc270
 8007cec:	e000e400 	.word	0xe000e400
 8007cf0:	20000d7c 	.word	0x20000d7c
 8007cf4:	20000d80 	.word	0x20000d80
 8007cf8:	e000ed20 	.word	0xe000ed20
 8007cfc:	2000000c 	.word	0x2000000c
 8007d00:	e000ef34 	.word	0xe000ef34

08007d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	607b      	str	r3, [r7, #4]
}
 8007d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortEnterCritical+0x5c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	603b      	str	r3, [r7, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <vPortEnterCritical+0x4a>
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	2000000c 	.word	0x2000000c
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <vPortExitCritical+0x50>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <vPortExitCritical+0x24>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	607b      	str	r3, [r7, #4]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vPortExitCritical+0x50>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <vPortExitCritical+0x50>)
 8007d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <vPortExitCritical+0x42>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	f383 8811 	msr	BASEPRI, r3
}
 8007da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	2000000c 	.word	0x2000000c
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7fe fdd6 	bl	80069a0 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f7fe fcf3 	bl	800682c <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <xPortSysTickHandler+0x40>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <vPortSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <vPortSetupTimerInterrupt+0x3c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <vPortSetupTimerInterrupt+0x40>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <vPortSetupTimerInterrupt+0x44>)
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000000 	.word	0x20000000
 8007eac:	10624dd3 	.word	0x10624dd3
 8007eb0:	e000e014 	.word	0xe000e014

08007eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ec4 <vPortEnableVFP+0x10>
 8007eb8:	6801      	ldr	r1, [r0, #0]
 8007eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed88 	.word	0xe000ed88

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d914      	bls.n	8007f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <vPortValidateInterruptPriority+0x70>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20a      	bcs.n	8007f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <vPortValidateInterruptPriority+0x7c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d90a      	bls.n	8007f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	603b      	str	r3, [r7, #0]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <vPortValidateInterruptPriority+0x60>
	}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	e000e3f0 	.word	0xe000e3f0
 8007f3c:	20000d7c 	.word	0x20000d7c
 8007f40:	e000ed0c 	.word	0xe000ed0c
 8007f44:	20000d80 	.word	0x20000d80

08007f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f54:	f7fe fbae 	bl	80066b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f58:	4b5b      	ldr	r3, [pc, #364]	; (80080c8 <pvPortMalloc+0x180>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f60:	f000 f920 	bl	80081a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f64:	4b59      	ldr	r3, [pc, #356]	; (80080cc <pvPortMalloc+0x184>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 8093 	bne.w	8008098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01d      	beq.n	8007fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f78:	2208      	movs	r2, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d014      	beq.n	8007fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f023 0307 	bic.w	r3, r3, #7
 8007f90:	3308      	adds	r3, #8
 8007f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	617b      	str	r3, [r7, #20]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d06e      	beq.n	8008098 <pvPortMalloc+0x150>
 8007fba:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <pvPortMalloc+0x188>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d869      	bhi.n	8008098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fc4:	4b43      	ldr	r3, [pc, #268]	; (80080d4 <pvPortMalloc+0x18c>)
 8007fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <pvPortMalloc+0x18c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fce:	e004      	b.n	8007fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <pvPortMalloc+0xa4>
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f1      	bne.n	8007fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fec:	4b36      	ldr	r3, [pc, #216]	; (80080c8 <pvPortMalloc+0x180>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d050      	beq.n	8008098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	4413      	add	r3, r2
 8007ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	2308      	movs	r3, #8
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	d91f      	bls.n	8008058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <pvPortMalloc+0xf8>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	613b      	str	r3, [r7, #16]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f000 f908 	bl	8008268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008058:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <pvPortMalloc+0x188>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <pvPortMalloc+0x188>)
 8008064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008066:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <pvPortMalloc+0x188>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <pvPortMalloc+0x190>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d203      	bcs.n	800807a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008072:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <pvPortMalloc+0x188>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <pvPortMalloc+0x190>)
 8008078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <pvPortMalloc+0x184>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	431a      	orrs	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800808e:	4b13      	ldr	r3, [pc, #76]	; (80080dc <pvPortMalloc+0x194>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <pvPortMalloc+0x194>)
 8008096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008098:	f7fe fb1a 	bl	80066d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <pvPortMalloc+0x174>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <pvPortMalloc+0x172>
	return pvReturn;
 80080bc:	69fb      	ldr	r3, [r7, #28]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3728      	adds	r7, #40	; 0x28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20001944 	.word	0x20001944
 80080cc:	20001958 	.word	0x20001958
 80080d0:	20001948 	.word	0x20001948
 80080d4:	2000193c 	.word	0x2000193c
 80080d8:	2000194c 	.word	0x2000194c
 80080dc:	20001950 	.word	0x20001950

080080e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04d      	beq.n	800818e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080f2:	2308      	movs	r3, #8
 80080f4:	425b      	negs	r3, r3
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <vPortFree+0xb8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <vPortFree+0x44>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <vPortFree+0x62>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <vPortFree+0xb8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01e      	beq.n	800818e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d11a      	bne.n	800818e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <vPortFree+0xb8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	43db      	mvns	r3, r3
 8008162:	401a      	ands	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008168:	f7fe faa4 	bl	80066b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <vPortFree+0xbc>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4413      	add	r3, r2
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <vPortFree+0xbc>)
 8008178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800817a:	6938      	ldr	r0, [r7, #16]
 800817c:	f000 f874 	bl	8008268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <vPortFree+0xc0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	4a06      	ldr	r2, [pc, #24]	; (80081a0 <vPortFree+0xc0>)
 8008188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800818a:	f7fe faa1 	bl	80066d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20001958 	.word	0x20001958
 800819c:	20001948 	.word	0x20001948
 80081a0:	20001954 	.word	0x20001954

080081a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80081ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <prvHeapInit+0xac>)
 80081b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3307      	adds	r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <prvHeapInit+0xac>)
 80081d4:	4413      	add	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <prvHeapInit+0xb0>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <prvHeapInit+0xb0>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081f0:	2208      	movs	r2, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0307 	bic.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <prvHeapInit+0xb4>)
 8008204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <prvHeapInit+0xb4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800820e:	4b12      	ldr	r3, [pc, #72]	; (8008258 <prvHeapInit+0xb4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <prvHeapInit+0xb4>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a0a      	ldr	r2, [pc, #40]	; (800825c <prvHeapInit+0xb8>)
 8008232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a09      	ldr	r2, [pc, #36]	; (8008260 <prvHeapInit+0xbc>)
 800823a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <prvHeapInit+0xc0>)
 800823e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008242:	601a      	str	r2, [r3, #0]
}
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	20000d84 	.word	0x20000d84
 8008254:	2000193c 	.word	0x2000193c
 8008258:	20001944 	.word	0x20001944
 800825c:	2000194c 	.word	0x2000194c
 8008260:	20001948 	.word	0x20001948
 8008264:	20001958 	.word	0x20001958

08008268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <prvInsertBlockIntoFreeList+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e002      	b.n	800827c <prvInsertBlockIntoFreeList+0x14>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d8f7      	bhi.n	8008276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4413      	add	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d108      	bne.n	80082aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	441a      	add	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d118      	bne.n	80082f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d00d      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e008      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e003      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d002      	beq.n	8008306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000193c 	.word	0x2000193c
 8008318:	20001944 	.word	0x20001944

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	; (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000010 	.word	0x20000010

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f001 f9e4 	bl	8009708 <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	0800998c 	.word	0x0800998c
 8008364:	0800998c 	.word	0x0800998c
 8008368:	0800998c 	.word	0x0800998c
 800836c:	08009990 	.word	0x08009990

08008370 <memcpy>:
 8008370:	440a      	add	r2, r1
 8008372:	4291      	cmp	r1, r2
 8008374:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008378:	d100      	bne.n	800837c <memcpy+0xc>
 800837a:	4770      	bx	lr
 800837c:	b510      	push	{r4, lr}
 800837e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008386:	4291      	cmp	r1, r2
 8008388:	d1f9      	bne.n	800837e <memcpy+0xe>
 800838a:	bd10      	pop	{r4, pc}

0800838c <memset>:
 800838c:	4402      	add	r2, r0
 800838e:	4603      	mov	r3, r0
 8008390:	4293      	cmp	r3, r2
 8008392:	d100      	bne.n	8008396 <memset+0xa>
 8008394:	4770      	bx	lr
 8008396:	f803 1b01 	strb.w	r1, [r3], #1
 800839a:	e7f9      	b.n	8008390 <memset+0x4>

0800839c <iprintf>:
 800839c:	b40f      	push	{r0, r1, r2, r3}
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <iprintf+0x2c>)
 80083a0:	b513      	push	{r0, r1, r4, lr}
 80083a2:	681c      	ldr	r4, [r3, #0]
 80083a4:	b124      	cbz	r4, 80083b0 <iprintf+0x14>
 80083a6:	69a3      	ldr	r3, [r4, #24]
 80083a8:	b913      	cbnz	r3, 80083b0 <iprintf+0x14>
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 faa4 	bl	80088f8 <__sinit>
 80083b0:	ab05      	add	r3, sp, #20
 80083b2:	9a04      	ldr	r2, [sp, #16]
 80083b4:	68a1      	ldr	r1, [r4, #8]
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fdd1 	bl	8008f60 <_vfiprintf_r>
 80083be:	b002      	add	sp, #8
 80083c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c4:	b004      	add	sp, #16
 80083c6:	4770      	bx	lr
 80083c8:	20000010 	.word	0x20000010

080083cc <_puts_r>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4605      	mov	r5, r0
 80083d2:	b118      	cbz	r0, 80083dc <_puts_r+0x10>
 80083d4:	6983      	ldr	r3, [r0, #24]
 80083d6:	b90b      	cbnz	r3, 80083dc <_puts_r+0x10>
 80083d8:	f000 fa8e 	bl	80088f8 <__sinit>
 80083dc:	69ab      	ldr	r3, [r5, #24]
 80083de:	68ac      	ldr	r4, [r5, #8]
 80083e0:	b913      	cbnz	r3, 80083e8 <_puts_r+0x1c>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fa88 	bl	80088f8 <__sinit>
 80083e8:	4b2c      	ldr	r3, [pc, #176]	; (800849c <_puts_r+0xd0>)
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d120      	bne.n	8008430 <_puts_r+0x64>
 80083ee:	686c      	ldr	r4, [r5, #4]
 80083f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d405      	bmi.n	8008402 <_puts_r+0x36>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	0598      	lsls	r0, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_puts_r+0x36>
 80083fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083fe:	f000 fb19 	bl	8008a34 <__retarget_lock_acquire_recursive>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	0719      	lsls	r1, r3, #28
 8008406:	d51d      	bpl.n	8008444 <_puts_r+0x78>
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	b1db      	cbz	r3, 8008444 <_puts_r+0x78>
 800840c:	3e01      	subs	r6, #1
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008414:	3b01      	subs	r3, #1
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	bb39      	cbnz	r1, 800846a <_puts_r+0x9e>
 800841a:	2b00      	cmp	r3, #0
 800841c:	da38      	bge.n	8008490 <_puts_r+0xc4>
 800841e:	4622      	mov	r2, r4
 8008420:	210a      	movs	r1, #10
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f88e 	bl	8008544 <__swbuf_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d011      	beq.n	8008450 <_puts_r+0x84>
 800842c:	250a      	movs	r5, #10
 800842e:	e011      	b.n	8008454 <_puts_r+0x88>
 8008430:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <_puts_r+0xd4>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <_puts_r+0x6e>
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	e7da      	b.n	80083f0 <_puts_r+0x24>
 800843a:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <_puts_r+0xd8>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68ec      	ldreq	r4, [r5, #12]
 8008442:	e7d5      	b.n	80083f0 <_puts_r+0x24>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f8ce 	bl	80085e8 <__swsetup_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0dd      	beq.n	800840c <_puts_r+0x40>
 8008450:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008456:	07da      	lsls	r2, r3, #31
 8008458:	d405      	bmi.n	8008466 <_puts_r+0x9a>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	059b      	lsls	r3, r3, #22
 800845e:	d402      	bmi.n	8008466 <_puts_r+0x9a>
 8008460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008462:	f000 fae8 	bl	8008a36 <__retarget_lock_release_recursive>
 8008466:	4628      	mov	r0, r5
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	2b00      	cmp	r3, #0
 800846c:	da04      	bge.n	8008478 <_puts_r+0xac>
 800846e:	69a2      	ldr	r2, [r4, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	dc06      	bgt.n	8008482 <_puts_r+0xb6>
 8008474:	290a      	cmp	r1, #10
 8008476:	d004      	beq.n	8008482 <_puts_r+0xb6>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	7019      	strb	r1, [r3, #0]
 8008480:	e7c5      	b.n	800840e <_puts_r+0x42>
 8008482:	4622      	mov	r2, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f000 f85d 	bl	8008544 <__swbuf_r>
 800848a:	3001      	adds	r0, #1
 800848c:	d1bf      	bne.n	800840e <_puts_r+0x42>
 800848e:	e7df      	b.n	8008450 <_puts_r+0x84>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	250a      	movs	r5, #10
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	701d      	strb	r5, [r3, #0]
 800849a:	e7db      	b.n	8008454 <_puts_r+0x88>
 800849c:	08009910 	.word	0x08009910
 80084a0:	08009930 	.word	0x08009930
 80084a4:	080098f0 	.word	0x080098f0

080084a8 <puts>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <puts+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff bf8d 	b.w	80083cc <_puts_r>
 80084b2:	bf00      	nop
 80084b4:	20000010 	.word	0x20000010

080084b8 <siprintf>:
 80084b8:	b40e      	push	{r1, r2, r3}
 80084ba:	b500      	push	{lr}
 80084bc:	b09c      	sub	sp, #112	; 0x70
 80084be:	ab1d      	add	r3, sp, #116	; 0x74
 80084c0:	9002      	str	r0, [sp, #8]
 80084c2:	9006      	str	r0, [sp, #24]
 80084c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <siprintf+0x38>)
 80084ca:	9107      	str	r1, [sp, #28]
 80084cc:	9104      	str	r1, [sp, #16]
 80084ce:	4909      	ldr	r1, [pc, #36]	; (80084f4 <siprintf+0x3c>)
 80084d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d4:	9105      	str	r1, [sp, #20]
 80084d6:	6800      	ldr	r0, [r0, #0]
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	a902      	add	r1, sp, #8
 80084dc:	f000 fc16 	bl	8008d0c <_svfiprintf_r>
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	b01c      	add	sp, #112	; 0x70
 80084e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ec:	b003      	add	sp, #12
 80084ee:	4770      	bx	lr
 80084f0:	20000010 	.word	0x20000010
 80084f4:	ffff0208 	.word	0xffff0208

080084f8 <strncmp>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	b16a      	cbz	r2, 8008518 <strncmp+0x20>
 80084fc:	3901      	subs	r1, #1
 80084fe:	1884      	adds	r4, r0, r2
 8008500:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008504:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008508:	4293      	cmp	r3, r2
 800850a:	d103      	bne.n	8008514 <strncmp+0x1c>
 800850c:	42a0      	cmp	r0, r4
 800850e:	d001      	beq.n	8008514 <strncmp+0x1c>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f5      	bne.n	8008500 <strncmp+0x8>
 8008514:	1a98      	subs	r0, r3, r2
 8008516:	bd10      	pop	{r4, pc}
 8008518:	4610      	mov	r0, r2
 800851a:	e7fc      	b.n	8008516 <strncmp+0x1e>

0800851c <strncpy>:
 800851c:	b510      	push	{r4, lr}
 800851e:	3901      	subs	r1, #1
 8008520:	4603      	mov	r3, r0
 8008522:	b132      	cbz	r2, 8008532 <strncpy+0x16>
 8008524:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008528:	f803 4b01 	strb.w	r4, [r3], #1
 800852c:	3a01      	subs	r2, #1
 800852e:	2c00      	cmp	r4, #0
 8008530:	d1f7      	bne.n	8008522 <strncpy+0x6>
 8008532:	441a      	add	r2, r3
 8008534:	2100      	movs	r1, #0
 8008536:	4293      	cmp	r3, r2
 8008538:	d100      	bne.n	800853c <strncpy+0x20>
 800853a:	bd10      	pop	{r4, pc}
 800853c:	f803 1b01 	strb.w	r1, [r3], #1
 8008540:	e7f9      	b.n	8008536 <strncpy+0x1a>
	...

08008544 <__swbuf_r>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	460e      	mov	r6, r1
 8008548:	4614      	mov	r4, r2
 800854a:	4605      	mov	r5, r0
 800854c:	b118      	cbz	r0, 8008556 <__swbuf_r+0x12>
 800854e:	6983      	ldr	r3, [r0, #24]
 8008550:	b90b      	cbnz	r3, 8008556 <__swbuf_r+0x12>
 8008552:	f000 f9d1 	bl	80088f8 <__sinit>
 8008556:	4b21      	ldr	r3, [pc, #132]	; (80085dc <__swbuf_r+0x98>)
 8008558:	429c      	cmp	r4, r3
 800855a:	d12b      	bne.n	80085b4 <__swbuf_r+0x70>
 800855c:	686c      	ldr	r4, [r5, #4]
 800855e:	69a3      	ldr	r3, [r4, #24]
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	071a      	lsls	r2, r3, #28
 8008566:	d52f      	bpl.n	80085c8 <__swbuf_r+0x84>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	b36b      	cbz	r3, 80085c8 <__swbuf_r+0x84>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	6820      	ldr	r0, [r4, #0]
 8008570:	1ac0      	subs	r0, r0, r3
 8008572:	6963      	ldr	r3, [r4, #20]
 8008574:	b2f6      	uxtb	r6, r6
 8008576:	4283      	cmp	r3, r0
 8008578:	4637      	mov	r7, r6
 800857a:	dc04      	bgt.n	8008586 <__swbuf_r+0x42>
 800857c:	4621      	mov	r1, r4
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f926 	bl	80087d0 <_fflush_r>
 8008584:	bb30      	cbnz	r0, 80085d4 <__swbuf_r+0x90>
 8008586:	68a3      	ldr	r3, [r4, #8]
 8008588:	3b01      	subs	r3, #1
 800858a:	60a3      	str	r3, [r4, #8]
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	701e      	strb	r6, [r3, #0]
 8008594:	6963      	ldr	r3, [r4, #20]
 8008596:	3001      	adds	r0, #1
 8008598:	4283      	cmp	r3, r0
 800859a:	d004      	beq.n	80085a6 <__swbuf_r+0x62>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	07db      	lsls	r3, r3, #31
 80085a0:	d506      	bpl.n	80085b0 <__swbuf_r+0x6c>
 80085a2:	2e0a      	cmp	r6, #10
 80085a4:	d104      	bne.n	80085b0 <__swbuf_r+0x6c>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f911 	bl	80087d0 <_fflush_r>
 80085ae:	b988      	cbnz	r0, 80085d4 <__swbuf_r+0x90>
 80085b0:	4638      	mov	r0, r7
 80085b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <__swbuf_r+0x9c>)
 80085b6:	429c      	cmp	r4, r3
 80085b8:	d101      	bne.n	80085be <__swbuf_r+0x7a>
 80085ba:	68ac      	ldr	r4, [r5, #8]
 80085bc:	e7cf      	b.n	800855e <__swbuf_r+0x1a>
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <__swbuf_r+0xa0>)
 80085c0:	429c      	cmp	r4, r3
 80085c2:	bf08      	it	eq
 80085c4:	68ec      	ldreq	r4, [r5, #12]
 80085c6:	e7ca      	b.n	800855e <__swbuf_r+0x1a>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 f80c 	bl	80085e8 <__swsetup_r>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d0cb      	beq.n	800856c <__swbuf_r+0x28>
 80085d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085d8:	e7ea      	b.n	80085b0 <__swbuf_r+0x6c>
 80085da:	bf00      	nop
 80085dc:	08009910 	.word	0x08009910
 80085e0:	08009930 	.word	0x08009930
 80085e4:	080098f0 	.word	0x080098f0

080085e8 <__swsetup_r>:
 80085e8:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <__swsetup_r+0xcc>)
 80085ea:	b570      	push	{r4, r5, r6, lr}
 80085ec:	681d      	ldr	r5, [r3, #0]
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	b125      	cbz	r5, 80085fe <__swsetup_r+0x16>
 80085f4:	69ab      	ldr	r3, [r5, #24]
 80085f6:	b913      	cbnz	r3, 80085fe <__swsetup_r+0x16>
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 f97d 	bl	80088f8 <__sinit>
 80085fe:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <__swsetup_r+0xd0>)
 8008600:	429c      	cmp	r4, r3
 8008602:	d10f      	bne.n	8008624 <__swsetup_r+0x3c>
 8008604:	686c      	ldr	r4, [r5, #4]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d42c      	bmi.n	800866a <__swsetup_r+0x82>
 8008610:	06dd      	lsls	r5, r3, #27
 8008612:	d411      	bmi.n	8008638 <__swsetup_r+0x50>
 8008614:	2309      	movs	r3, #9
 8008616:	6033      	str	r3, [r6, #0]
 8008618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008622:	e03e      	b.n	80086a2 <__swsetup_r+0xba>
 8008624:	4b25      	ldr	r3, [pc, #148]	; (80086bc <__swsetup_r+0xd4>)
 8008626:	429c      	cmp	r4, r3
 8008628:	d101      	bne.n	800862e <__swsetup_r+0x46>
 800862a:	68ac      	ldr	r4, [r5, #8]
 800862c:	e7eb      	b.n	8008606 <__swsetup_r+0x1e>
 800862e:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <__swsetup_r+0xd8>)
 8008630:	429c      	cmp	r4, r3
 8008632:	bf08      	it	eq
 8008634:	68ec      	ldreq	r4, [r5, #12]
 8008636:	e7e6      	b.n	8008606 <__swsetup_r+0x1e>
 8008638:	0758      	lsls	r0, r3, #29
 800863a:	d512      	bpl.n	8008662 <__swsetup_r+0x7a>
 800863c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800863e:	b141      	cbz	r1, 8008652 <__swsetup_r+0x6a>
 8008640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008644:	4299      	cmp	r1, r3
 8008646:	d002      	beq.n	800864e <__swsetup_r+0x66>
 8008648:	4630      	mov	r0, r6
 800864a:	f000 fa59 	bl	8008b00 <_free_r>
 800864e:	2300      	movs	r3, #0
 8008650:	6363      	str	r3, [r4, #52]	; 0x34
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	2300      	movs	r3, #0
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f043 0308 	orr.w	r3, r3, #8
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	b94b      	cbnz	r3, 8008682 <__swsetup_r+0x9a>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008678:	d003      	beq.n	8008682 <__swsetup_r+0x9a>
 800867a:	4621      	mov	r1, r4
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f9ff 	bl	8008a80 <__smakebuf_r>
 8008682:	89a0      	ldrh	r0, [r4, #12]
 8008684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008688:	f010 0301 	ands.w	r3, r0, #1
 800868c:	d00a      	beq.n	80086a4 <__swsetup_r+0xbc>
 800868e:	2300      	movs	r3, #0
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	6963      	ldr	r3, [r4, #20]
 8008694:	425b      	negs	r3, r3
 8008696:	61a3      	str	r3, [r4, #24]
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	b943      	cbnz	r3, 80086ae <__swsetup_r+0xc6>
 800869c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086a0:	d1ba      	bne.n	8008618 <__swsetup_r+0x30>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	0781      	lsls	r1, r0, #30
 80086a6:	bf58      	it	pl
 80086a8:	6963      	ldrpl	r3, [r4, #20]
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	e7f4      	b.n	8008698 <__swsetup_r+0xb0>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e7f7      	b.n	80086a2 <__swsetup_r+0xba>
 80086b2:	bf00      	nop
 80086b4:	20000010 	.word	0x20000010
 80086b8:	08009910 	.word	0x08009910
 80086bc:	08009930 	.word	0x08009930
 80086c0:	080098f0 	.word	0x080098f0

080086c4 <__sflush_r>:
 80086c4:	898a      	ldrh	r2, [r1, #12]
 80086c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	4605      	mov	r5, r0
 80086cc:	0710      	lsls	r0, r2, #28
 80086ce:	460c      	mov	r4, r1
 80086d0:	d458      	bmi.n	8008784 <__sflush_r+0xc0>
 80086d2:	684b      	ldr	r3, [r1, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dc05      	bgt.n	80086e4 <__sflush_r+0x20>
 80086d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dc02      	bgt.n	80086e4 <__sflush_r+0x20>
 80086de:	2000      	movs	r0, #0
 80086e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	d0f9      	beq.n	80086de <__sflush_r+0x1a>
 80086ea:	2300      	movs	r3, #0
 80086ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086f0:	682f      	ldr	r7, [r5, #0]
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	d032      	beq.n	800875c <__sflush_r+0x98>
 80086f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	075a      	lsls	r2, r3, #29
 80086fc:	d505      	bpl.n	800870a <__sflush_r+0x46>
 80086fe:	6863      	ldr	r3, [r4, #4]
 8008700:	1ac0      	subs	r0, r0, r3
 8008702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008704:	b10b      	cbz	r3, 800870a <__sflush_r+0x46>
 8008706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008708:	1ac0      	subs	r0, r0, r3
 800870a:	2300      	movs	r3, #0
 800870c:	4602      	mov	r2, r0
 800870e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	4628      	mov	r0, r5
 8008714:	47b0      	blx	r6
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	d106      	bne.n	800872a <__sflush_r+0x66>
 800871c:	6829      	ldr	r1, [r5, #0]
 800871e:	291d      	cmp	r1, #29
 8008720:	d82c      	bhi.n	800877c <__sflush_r+0xb8>
 8008722:	4a2a      	ldr	r2, [pc, #168]	; (80087cc <__sflush_r+0x108>)
 8008724:	40ca      	lsrs	r2, r1
 8008726:	07d6      	lsls	r6, r2, #31
 8008728:	d528      	bpl.n	800877c <__sflush_r+0xb8>
 800872a:	2200      	movs	r2, #0
 800872c:	6062      	str	r2, [r4, #4]
 800872e:	04d9      	lsls	r1, r3, #19
 8008730:	6922      	ldr	r2, [r4, #16]
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	d504      	bpl.n	8008740 <__sflush_r+0x7c>
 8008736:	1c42      	adds	r2, r0, #1
 8008738:	d101      	bne.n	800873e <__sflush_r+0x7a>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	b903      	cbnz	r3, 8008740 <__sflush_r+0x7c>
 800873e:	6560      	str	r0, [r4, #84]	; 0x54
 8008740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008742:	602f      	str	r7, [r5, #0]
 8008744:	2900      	cmp	r1, #0
 8008746:	d0ca      	beq.n	80086de <__sflush_r+0x1a>
 8008748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800874c:	4299      	cmp	r1, r3
 800874e:	d002      	beq.n	8008756 <__sflush_r+0x92>
 8008750:	4628      	mov	r0, r5
 8008752:	f000 f9d5 	bl	8008b00 <_free_r>
 8008756:	2000      	movs	r0, #0
 8008758:	6360      	str	r0, [r4, #52]	; 0x34
 800875a:	e7c1      	b.n	80086e0 <__sflush_r+0x1c>
 800875c:	6a21      	ldr	r1, [r4, #32]
 800875e:	2301      	movs	r3, #1
 8008760:	4628      	mov	r0, r5
 8008762:	47b0      	blx	r6
 8008764:	1c41      	adds	r1, r0, #1
 8008766:	d1c7      	bne.n	80086f8 <__sflush_r+0x34>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0c4      	beq.n	80086f8 <__sflush_r+0x34>
 800876e:	2b1d      	cmp	r3, #29
 8008770:	d001      	beq.n	8008776 <__sflush_r+0xb2>
 8008772:	2b16      	cmp	r3, #22
 8008774:	d101      	bne.n	800877a <__sflush_r+0xb6>
 8008776:	602f      	str	r7, [r5, #0]
 8008778:	e7b1      	b.n	80086de <__sflush_r+0x1a>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	e7ad      	b.n	80086e0 <__sflush_r+0x1c>
 8008784:	690f      	ldr	r7, [r1, #16]
 8008786:	2f00      	cmp	r7, #0
 8008788:	d0a9      	beq.n	80086de <__sflush_r+0x1a>
 800878a:	0793      	lsls	r3, r2, #30
 800878c:	680e      	ldr	r6, [r1, #0]
 800878e:	bf08      	it	eq
 8008790:	694b      	ldreq	r3, [r1, #20]
 8008792:	600f      	str	r7, [r1, #0]
 8008794:	bf18      	it	ne
 8008796:	2300      	movne	r3, #0
 8008798:	eba6 0807 	sub.w	r8, r6, r7
 800879c:	608b      	str	r3, [r1, #8]
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	dd9c      	ble.n	80086de <__sflush_r+0x1a>
 80087a4:	6a21      	ldr	r1, [r4, #32]
 80087a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087a8:	4643      	mov	r3, r8
 80087aa:	463a      	mov	r2, r7
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b0      	blx	r6
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dc06      	bgt.n	80087c2 <__sflush_r+0xfe>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c0:	e78e      	b.n	80086e0 <__sflush_r+0x1c>
 80087c2:	4407      	add	r7, r0
 80087c4:	eba8 0800 	sub.w	r8, r8, r0
 80087c8:	e7e9      	b.n	800879e <__sflush_r+0xda>
 80087ca:	bf00      	nop
 80087cc:	20400001 	.word	0x20400001

080087d0 <_fflush_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	690b      	ldr	r3, [r1, #16]
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	b913      	cbnz	r3, 80087e0 <_fflush_r+0x10>
 80087da:	2500      	movs	r5, #0
 80087dc:	4628      	mov	r0, r5
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	b118      	cbz	r0, 80087ea <_fflush_r+0x1a>
 80087e2:	6983      	ldr	r3, [r0, #24]
 80087e4:	b90b      	cbnz	r3, 80087ea <_fflush_r+0x1a>
 80087e6:	f000 f887 	bl	80088f8 <__sinit>
 80087ea:	4b14      	ldr	r3, [pc, #80]	; (800883c <_fflush_r+0x6c>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	d11b      	bne.n	8008828 <_fflush_r+0x58>
 80087f0:	686c      	ldr	r4, [r5, #4]
 80087f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ef      	beq.n	80087da <_fflush_r+0xa>
 80087fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087fc:	07d0      	lsls	r0, r2, #31
 80087fe:	d404      	bmi.n	800880a <_fflush_r+0x3a>
 8008800:	0599      	lsls	r1, r3, #22
 8008802:	d402      	bmi.n	800880a <_fflush_r+0x3a>
 8008804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008806:	f000 f915 	bl	8008a34 <__retarget_lock_acquire_recursive>
 800880a:	4628      	mov	r0, r5
 800880c:	4621      	mov	r1, r4
 800880e:	f7ff ff59 	bl	80086c4 <__sflush_r>
 8008812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008814:	07da      	lsls	r2, r3, #31
 8008816:	4605      	mov	r5, r0
 8008818:	d4e0      	bmi.n	80087dc <_fflush_r+0xc>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	059b      	lsls	r3, r3, #22
 800881e:	d4dd      	bmi.n	80087dc <_fflush_r+0xc>
 8008820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008822:	f000 f908 	bl	8008a36 <__retarget_lock_release_recursive>
 8008826:	e7d9      	b.n	80087dc <_fflush_r+0xc>
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <_fflush_r+0x70>)
 800882a:	429c      	cmp	r4, r3
 800882c:	d101      	bne.n	8008832 <_fflush_r+0x62>
 800882e:	68ac      	ldr	r4, [r5, #8]
 8008830:	e7df      	b.n	80087f2 <_fflush_r+0x22>
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <_fflush_r+0x74>)
 8008834:	429c      	cmp	r4, r3
 8008836:	bf08      	it	eq
 8008838:	68ec      	ldreq	r4, [r5, #12]
 800883a:	e7da      	b.n	80087f2 <_fflush_r+0x22>
 800883c:	08009910 	.word	0x08009910
 8008840:	08009930 	.word	0x08009930
 8008844:	080098f0 	.word	0x080098f0

08008848 <std>:
 8008848:	2300      	movs	r3, #0
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	e9c0 3300 	strd	r3, r3, [r0]
 8008852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	; 0x64
 800885c:	81c2      	strh	r2, [r0, #14]
 800885e:	6183      	str	r3, [r0, #24]
 8008860:	4619      	mov	r1, r3
 8008862:	2208      	movs	r2, #8
 8008864:	305c      	adds	r0, #92	; 0x5c
 8008866:	f7ff fd91 	bl	800838c <memset>
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x38>)
 800886c:	6263      	str	r3, [r4, #36]	; 0x24
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x3c>)
 8008870:	62a3      	str	r3, [r4, #40]	; 0x28
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x40>)
 8008874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x44>)
 8008878:	6224      	str	r4, [r4, #32]
 800887a:	6323      	str	r3, [r4, #48]	; 0x30
 800887c:	bd10      	pop	{r4, pc}
 800887e:	bf00      	nop
 8008880:	08009509 	.word	0x08009509
 8008884:	0800952b 	.word	0x0800952b
 8008888:	08009563 	.word	0x08009563
 800888c:	08009587 	.word	0x08009587

08008890 <_cleanup_r>:
 8008890:	4901      	ldr	r1, [pc, #4]	; (8008898 <_cleanup_r+0x8>)
 8008892:	f000 b8af 	b.w	80089f4 <_fwalk_reent>
 8008896:	bf00      	nop
 8008898:	080087d1 	.word	0x080087d1

0800889c <__sfmoreglue>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	1e4a      	subs	r2, r1, #1
 80088a0:	2568      	movs	r5, #104	; 0x68
 80088a2:	4355      	muls	r5, r2
 80088a4:	460e      	mov	r6, r1
 80088a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088aa:	f000 f979 	bl	8008ba0 <_malloc_r>
 80088ae:	4604      	mov	r4, r0
 80088b0:	b140      	cbz	r0, 80088c4 <__sfmoreglue+0x28>
 80088b2:	2100      	movs	r1, #0
 80088b4:	e9c0 1600 	strd	r1, r6, [r0]
 80088b8:	300c      	adds	r0, #12
 80088ba:	60a0      	str	r0, [r4, #8]
 80088bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088c0:	f7ff fd64 	bl	800838c <memset>
 80088c4:	4620      	mov	r0, r4
 80088c6:	bd70      	pop	{r4, r5, r6, pc}

080088c8 <__sfp_lock_acquire>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__sfp_lock_acquire+0x8>)
 80088ca:	f000 b8b3 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	20002090 	.word	0x20002090

080088d4 <__sfp_lock_release>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__sfp_lock_release+0x8>)
 80088d6:	f000 b8ae 	b.w	8008a36 <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	20002090 	.word	0x20002090

080088e0 <__sinit_lock_acquire>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sinit_lock_acquire+0x8>)
 80088e2:	f000 b8a7 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	2000208b 	.word	0x2000208b

080088ec <__sinit_lock_release>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sinit_lock_release+0x8>)
 80088ee:	f000 b8a2 	b.w	8008a36 <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	2000208b 	.word	0x2000208b

080088f8 <__sinit>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7ff fff0 	bl	80088e0 <__sinit_lock_acquire>
 8008900:	69a3      	ldr	r3, [r4, #24]
 8008902:	b11b      	cbz	r3, 800890c <__sinit+0x14>
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f7ff bff0 	b.w	80088ec <__sinit_lock_release>
 800890c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008910:	6523      	str	r3, [r4, #80]	; 0x50
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <__sinit+0x68>)
 8008914:	4a13      	ldr	r2, [pc, #76]	; (8008964 <__sinit+0x6c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	62a2      	str	r2, [r4, #40]	; 0x28
 800891a:	42a3      	cmp	r3, r4
 800891c:	bf04      	itt	eq
 800891e:	2301      	moveq	r3, #1
 8008920:	61a3      	streq	r3, [r4, #24]
 8008922:	4620      	mov	r0, r4
 8008924:	f000 f820 	bl	8008968 <__sfp>
 8008928:	6060      	str	r0, [r4, #4]
 800892a:	4620      	mov	r0, r4
 800892c:	f000 f81c 	bl	8008968 <__sfp>
 8008930:	60a0      	str	r0, [r4, #8]
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f818 	bl	8008968 <__sfp>
 8008938:	2200      	movs	r2, #0
 800893a:	60e0      	str	r0, [r4, #12]
 800893c:	2104      	movs	r1, #4
 800893e:	6860      	ldr	r0, [r4, #4]
 8008940:	f7ff ff82 	bl	8008848 <std>
 8008944:	68a0      	ldr	r0, [r4, #8]
 8008946:	2201      	movs	r2, #1
 8008948:	2109      	movs	r1, #9
 800894a:	f7ff ff7d 	bl	8008848 <std>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	2112      	movs	r1, #18
 8008954:	f7ff ff78 	bl	8008848 <std>
 8008958:	2301      	movs	r3, #1
 800895a:	61a3      	str	r3, [r4, #24]
 800895c:	e7d2      	b.n	8008904 <__sinit+0xc>
 800895e:	bf00      	nop
 8008960:	080098ec 	.word	0x080098ec
 8008964:	08008891 	.word	0x08008891

08008968 <__sfp>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	4607      	mov	r7, r0
 800896c:	f7ff ffac 	bl	80088c8 <__sfp_lock_acquire>
 8008970:	4b1e      	ldr	r3, [pc, #120]	; (80089ec <__sfp+0x84>)
 8008972:	681e      	ldr	r6, [r3, #0]
 8008974:	69b3      	ldr	r3, [r6, #24]
 8008976:	b913      	cbnz	r3, 800897e <__sfp+0x16>
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff ffbd 	bl	80088f8 <__sinit>
 800897e:	3648      	adds	r6, #72	; 0x48
 8008980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008984:	3b01      	subs	r3, #1
 8008986:	d503      	bpl.n	8008990 <__sfp+0x28>
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	b30b      	cbz	r3, 80089d0 <__sfp+0x68>
 800898c:	6836      	ldr	r6, [r6, #0]
 800898e:	e7f7      	b.n	8008980 <__sfp+0x18>
 8008990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008994:	b9d5      	cbnz	r5, 80089cc <__sfp+0x64>
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <__sfp+0x88>)
 8008998:	60e3      	str	r3, [r4, #12]
 800899a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800899e:	6665      	str	r5, [r4, #100]	; 0x64
 80089a0:	f000 f847 	bl	8008a32 <__retarget_lock_init_recursive>
 80089a4:	f7ff ff96 	bl	80088d4 <__sfp_lock_release>
 80089a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089b0:	6025      	str	r5, [r4, #0]
 80089b2:	61a5      	str	r5, [r4, #24]
 80089b4:	2208      	movs	r2, #8
 80089b6:	4629      	mov	r1, r5
 80089b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089bc:	f7ff fce6 	bl	800838c <memset>
 80089c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089c8:	4620      	mov	r0, r4
 80089ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089cc:	3468      	adds	r4, #104	; 0x68
 80089ce:	e7d9      	b.n	8008984 <__sfp+0x1c>
 80089d0:	2104      	movs	r1, #4
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7ff ff62 	bl	800889c <__sfmoreglue>
 80089d8:	4604      	mov	r4, r0
 80089da:	6030      	str	r0, [r6, #0]
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1d5      	bne.n	800898c <__sfp+0x24>
 80089e0:	f7ff ff78 	bl	80088d4 <__sfp_lock_release>
 80089e4:	230c      	movs	r3, #12
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	e7ee      	b.n	80089c8 <__sfp+0x60>
 80089ea:	bf00      	nop
 80089ec:	080098ec 	.word	0x080098ec
 80089f0:	ffff0001 	.word	0xffff0001

080089f4 <_fwalk_reent>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	4606      	mov	r6, r0
 80089fa:	4688      	mov	r8, r1
 80089fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a00:	2700      	movs	r7, #0
 8008a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a06:	f1b9 0901 	subs.w	r9, r9, #1
 8008a0a:	d505      	bpl.n	8008a18 <_fwalk_reent+0x24>
 8008a0c:	6824      	ldr	r4, [r4, #0]
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	d1f7      	bne.n	8008a02 <_fwalk_reent+0xe>
 8008a12:	4638      	mov	r0, r7
 8008a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a18:	89ab      	ldrh	r3, [r5, #12]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d907      	bls.n	8008a2e <_fwalk_reent+0x3a>
 8008a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a22:	3301      	adds	r3, #1
 8008a24:	d003      	beq.n	8008a2e <_fwalk_reent+0x3a>
 8008a26:	4629      	mov	r1, r5
 8008a28:	4630      	mov	r0, r6
 8008a2a:	47c0      	blx	r8
 8008a2c:	4307      	orrs	r7, r0
 8008a2e:	3568      	adds	r5, #104	; 0x68
 8008a30:	e7e9      	b.n	8008a06 <_fwalk_reent+0x12>

08008a32 <__retarget_lock_init_recursive>:
 8008a32:	4770      	bx	lr

08008a34 <__retarget_lock_acquire_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <__retarget_lock_release_recursive>:
 8008a36:	4770      	bx	lr

08008a38 <__swhatbuf_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	460e      	mov	r6, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	2900      	cmp	r1, #0
 8008a42:	b096      	sub	sp, #88	; 0x58
 8008a44:	4614      	mov	r4, r2
 8008a46:	461d      	mov	r5, r3
 8008a48:	da07      	bge.n	8008a5a <__swhatbuf_r+0x22>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	89b3      	ldrh	r3, [r6, #12]
 8008a50:	061a      	lsls	r2, r3, #24
 8008a52:	d410      	bmi.n	8008a76 <__swhatbuf_r+0x3e>
 8008a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a58:	e00e      	b.n	8008a78 <__swhatbuf_r+0x40>
 8008a5a:	466a      	mov	r2, sp
 8008a5c:	f000 fdba 	bl	80095d4 <_fstat_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	dbf2      	blt.n	8008a4a <__swhatbuf_r+0x12>
 8008a64:	9a01      	ldr	r2, [sp, #4]
 8008a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a6e:	425a      	negs	r2, r3
 8008a70:	415a      	adcs	r2, r3
 8008a72:	602a      	str	r2, [r5, #0]
 8008a74:	e7ee      	b.n	8008a54 <__swhatbuf_r+0x1c>
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	2000      	movs	r0, #0
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	b016      	add	sp, #88	; 0x58
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}

08008a80 <__smakebuf_r>:
 8008a80:	898b      	ldrh	r3, [r1, #12]
 8008a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a84:	079d      	lsls	r5, r3, #30
 8008a86:	4606      	mov	r6, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	d507      	bpl.n	8008a9c <__smakebuf_r+0x1c>
 8008a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	2301      	movs	r3, #1
 8008a96:	6163      	str	r3, [r4, #20]
 8008a98:	b002      	add	sp, #8
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	ab01      	add	r3, sp, #4
 8008a9e:	466a      	mov	r2, sp
 8008aa0:	f7ff ffca 	bl	8008a38 <__swhatbuf_r>
 8008aa4:	9900      	ldr	r1, [sp, #0]
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f879 	bl	8008ba0 <_malloc_r>
 8008aae:	b948      	cbnz	r0, 8008ac4 <__smakebuf_r+0x44>
 8008ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab4:	059a      	lsls	r2, r3, #22
 8008ab6:	d4ef      	bmi.n	8008a98 <__smakebuf_r+0x18>
 8008ab8:	f023 0303 	bic.w	r3, r3, #3
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	e7e3      	b.n	8008a8c <__smakebuf_r+0xc>
 8008ac4:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <__smakebuf_r+0x7c>)
 8008ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	9b00      	ldr	r3, [sp, #0]
 8008ad4:	6163      	str	r3, [r4, #20]
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	6120      	str	r0, [r4, #16]
 8008ada:	b15b      	cbz	r3, 8008af4 <__smakebuf_r+0x74>
 8008adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 fd89 	bl	80095f8 <_isatty_r>
 8008ae6:	b128      	cbz	r0, 8008af4 <__smakebuf_r+0x74>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	89a0      	ldrh	r0, [r4, #12]
 8008af6:	4305      	orrs	r5, r0
 8008af8:	81a5      	strh	r5, [r4, #12]
 8008afa:	e7cd      	b.n	8008a98 <__smakebuf_r+0x18>
 8008afc:	08008891 	.word	0x08008891

08008b00 <_free_r>:
 8008b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b02:	2900      	cmp	r1, #0
 8008b04:	d048      	beq.n	8008b98 <_free_r+0x98>
 8008b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b0a:	9001      	str	r0, [sp, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b12:	bfb8      	it	lt
 8008b14:	18e4      	addlt	r4, r4, r3
 8008b16:	f000 fdab 	bl	8009670 <__malloc_lock>
 8008b1a:	4a20      	ldr	r2, [pc, #128]	; (8008b9c <_free_r+0x9c>)
 8008b1c:	9801      	ldr	r0, [sp, #4]
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	4615      	mov	r5, r2
 8008b22:	b933      	cbnz	r3, 8008b32 <_free_r+0x32>
 8008b24:	6063      	str	r3, [r4, #4]
 8008b26:	6014      	str	r4, [r2, #0]
 8008b28:	b003      	add	sp, #12
 8008b2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b2e:	f000 bda5 	b.w	800967c <__malloc_unlock>
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	d90b      	bls.n	8008b4e <_free_r+0x4e>
 8008b36:	6821      	ldr	r1, [r4, #0]
 8008b38:	1862      	adds	r2, r4, r1
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bf04      	itt	eq
 8008b3e:	681a      	ldreq	r2, [r3, #0]
 8008b40:	685b      	ldreq	r3, [r3, #4]
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	bf04      	itt	eq
 8008b46:	1852      	addeq	r2, r2, r1
 8008b48:	6022      	streq	r2, [r4, #0]
 8008b4a:	602c      	str	r4, [r5, #0]
 8008b4c:	e7ec      	b.n	8008b28 <_free_r+0x28>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	b10b      	cbz	r3, 8008b58 <_free_r+0x58>
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d9fa      	bls.n	8008b4e <_free_r+0x4e>
 8008b58:	6811      	ldr	r1, [r2, #0]
 8008b5a:	1855      	adds	r5, r2, r1
 8008b5c:	42a5      	cmp	r5, r4
 8008b5e:	d10b      	bne.n	8008b78 <_free_r+0x78>
 8008b60:	6824      	ldr	r4, [r4, #0]
 8008b62:	4421      	add	r1, r4
 8008b64:	1854      	adds	r4, r2, r1
 8008b66:	42a3      	cmp	r3, r4
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	d1dd      	bne.n	8008b28 <_free_r+0x28>
 8008b6c:	681c      	ldr	r4, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	6053      	str	r3, [r2, #4]
 8008b72:	4421      	add	r1, r4
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	e7d7      	b.n	8008b28 <_free_r+0x28>
 8008b78:	d902      	bls.n	8008b80 <_free_r+0x80>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6003      	str	r3, [r0, #0]
 8008b7e:	e7d3      	b.n	8008b28 <_free_r+0x28>
 8008b80:	6825      	ldr	r5, [r4, #0]
 8008b82:	1961      	adds	r1, r4, r5
 8008b84:	428b      	cmp	r3, r1
 8008b86:	bf04      	itt	eq
 8008b88:	6819      	ldreq	r1, [r3, #0]
 8008b8a:	685b      	ldreq	r3, [r3, #4]
 8008b8c:	6063      	str	r3, [r4, #4]
 8008b8e:	bf04      	itt	eq
 8008b90:	1949      	addeq	r1, r1, r5
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	6054      	str	r4, [r2, #4]
 8008b96:	e7c7      	b.n	8008b28 <_free_r+0x28>
 8008b98:	b003      	add	sp, #12
 8008b9a:	bd30      	pop	{r4, r5, pc}
 8008b9c:	2000195c 	.word	0x2000195c

08008ba0 <_malloc_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	1ccd      	adds	r5, r1, #3
 8008ba4:	f025 0503 	bic.w	r5, r5, #3
 8008ba8:	3508      	adds	r5, #8
 8008baa:	2d0c      	cmp	r5, #12
 8008bac:	bf38      	it	cc
 8008bae:	250c      	movcc	r5, #12
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	db01      	blt.n	8008bba <_malloc_r+0x1a>
 8008bb6:	42a9      	cmp	r1, r5
 8008bb8:	d903      	bls.n	8008bc2 <_malloc_r+0x22>
 8008bba:	230c      	movs	r3, #12
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc2:	f000 fd55 	bl	8009670 <__malloc_lock>
 8008bc6:	4921      	ldr	r1, [pc, #132]	; (8008c4c <_malloc_r+0xac>)
 8008bc8:	680a      	ldr	r2, [r1, #0]
 8008bca:	4614      	mov	r4, r2
 8008bcc:	b99c      	cbnz	r4, 8008bf6 <_malloc_r+0x56>
 8008bce:	4f20      	ldr	r7, [pc, #128]	; (8008c50 <_malloc_r+0xb0>)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	b923      	cbnz	r3, 8008bde <_malloc_r+0x3e>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 fc86 	bl	80094e8 <_sbrk_r>
 8008bdc:	6038      	str	r0, [r7, #0]
 8008bde:	4629      	mov	r1, r5
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 fc81 	bl	80094e8 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d123      	bne.n	8008c32 <_malloc_r+0x92>
 8008bea:	230c      	movs	r3, #12
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f000 fd44 	bl	800967c <__malloc_unlock>
 8008bf4:	e7e3      	b.n	8008bbe <_malloc_r+0x1e>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	1b5b      	subs	r3, r3, r5
 8008bfa:	d417      	bmi.n	8008c2c <_malloc_r+0x8c>
 8008bfc:	2b0b      	cmp	r3, #11
 8008bfe:	d903      	bls.n	8008c08 <_malloc_r+0x68>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	441c      	add	r4, r3
 8008c04:	6025      	str	r5, [r4, #0]
 8008c06:	e004      	b.n	8008c12 <_malloc_r+0x72>
 8008c08:	6863      	ldr	r3, [r4, #4]
 8008c0a:	42a2      	cmp	r2, r4
 8008c0c:	bf0c      	ite	eq
 8008c0e:	600b      	streq	r3, [r1, #0]
 8008c10:	6053      	strne	r3, [r2, #4]
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 fd32 	bl	800967c <__malloc_unlock>
 8008c18:	f104 000b 	add.w	r0, r4, #11
 8008c1c:	1d23      	adds	r3, r4, #4
 8008c1e:	f020 0007 	bic.w	r0, r0, #7
 8008c22:	1ac2      	subs	r2, r0, r3
 8008c24:	d0cc      	beq.n	8008bc0 <_malloc_r+0x20>
 8008c26:	1a1b      	subs	r3, r3, r0
 8008c28:	50a3      	str	r3, [r4, r2]
 8008c2a:	e7c9      	b.n	8008bc0 <_malloc_r+0x20>
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	6864      	ldr	r4, [r4, #4]
 8008c30:	e7cc      	b.n	8008bcc <_malloc_r+0x2c>
 8008c32:	1cc4      	adds	r4, r0, #3
 8008c34:	f024 0403 	bic.w	r4, r4, #3
 8008c38:	42a0      	cmp	r0, r4
 8008c3a:	d0e3      	beq.n	8008c04 <_malloc_r+0x64>
 8008c3c:	1a21      	subs	r1, r4, r0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f000 fc52 	bl	80094e8 <_sbrk_r>
 8008c44:	3001      	adds	r0, #1
 8008c46:	d1dd      	bne.n	8008c04 <_malloc_r+0x64>
 8008c48:	e7cf      	b.n	8008bea <_malloc_r+0x4a>
 8008c4a:	bf00      	nop
 8008c4c:	2000195c 	.word	0x2000195c
 8008c50:	20001960 	.word	0x20001960

08008c54 <__ssputs_r>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	688e      	ldr	r6, [r1, #8]
 8008c5a:	429e      	cmp	r6, r3
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	4690      	mov	r8, r2
 8008c62:	461f      	mov	r7, r3
 8008c64:	d838      	bhi.n	8008cd8 <__ssputs_r+0x84>
 8008c66:	898a      	ldrh	r2, [r1, #12]
 8008c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c6c:	d032      	beq.n	8008cd4 <__ssputs_r+0x80>
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	6909      	ldr	r1, [r1, #16]
 8008c72:	eba5 0901 	sub.w	r9, r5, r1
 8008c76:	6965      	ldr	r5, [r4, #20]
 8008c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c80:	3301      	adds	r3, #1
 8008c82:	444b      	add	r3, r9
 8008c84:	106d      	asrs	r5, r5, #1
 8008c86:	429d      	cmp	r5, r3
 8008c88:	bf38      	it	cc
 8008c8a:	461d      	movcc	r5, r3
 8008c8c:	0553      	lsls	r3, r2, #21
 8008c8e:	d531      	bpl.n	8008cf4 <__ssputs_r+0xa0>
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7ff ff85 	bl	8008ba0 <_malloc_r>
 8008c96:	4606      	mov	r6, r0
 8008c98:	b950      	cbnz	r0, 8008cb0 <__ssputs_r+0x5c>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	f8ca 3000 	str.w	r3, [sl]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb0:	6921      	ldr	r1, [r4, #16]
 8008cb2:	464a      	mov	r2, r9
 8008cb4:	f7ff fb5c 	bl	8008370 <memcpy>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	6126      	str	r6, [r4, #16]
 8008cc6:	6165      	str	r5, [r4, #20]
 8008cc8:	444e      	add	r6, r9
 8008cca:	eba5 0509 	sub.w	r5, r5, r9
 8008cce:	6026      	str	r6, [r4, #0]
 8008cd0:	60a5      	str	r5, [r4, #8]
 8008cd2:	463e      	mov	r6, r7
 8008cd4:	42be      	cmp	r6, r7
 8008cd6:	d900      	bls.n	8008cda <__ssputs_r+0x86>
 8008cd8:	463e      	mov	r6, r7
 8008cda:	4632      	mov	r2, r6
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	4641      	mov	r1, r8
 8008ce0:	f000 fcac 	bl	800963c <memmove>
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	1b9b      	subs	r3, r3, r6
 8008cea:	4432      	add	r2, r6
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e7db      	b.n	8008cac <__ssputs_r+0x58>
 8008cf4:	462a      	mov	r2, r5
 8008cf6:	f000 fcc7 	bl	8009688 <_realloc_r>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1e1      	bne.n	8008cc4 <__ssputs_r+0x70>
 8008d00:	6921      	ldr	r1, [r4, #16]
 8008d02:	4650      	mov	r0, sl
 8008d04:	f7ff fefc 	bl	8008b00 <_free_r>
 8008d08:	e7c7      	b.n	8008c9a <__ssputs_r+0x46>
	...

08008d0c <_svfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4698      	mov	r8, r3
 8008d12:	898b      	ldrh	r3, [r1, #12]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	b09d      	sub	sp, #116	; 0x74
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	d50e      	bpl.n	8008d3e <_svfiprintf_r+0x32>
 8008d20:	690b      	ldr	r3, [r1, #16]
 8008d22:	b963      	cbnz	r3, 8008d3e <_svfiprintf_r+0x32>
 8008d24:	2140      	movs	r1, #64	; 0x40
 8008d26:	f7ff ff3b 	bl	8008ba0 <_malloc_r>
 8008d2a:	6028      	str	r0, [r5, #0]
 8008d2c:	6128      	str	r0, [r5, #16]
 8008d2e:	b920      	cbnz	r0, 8008d3a <_svfiprintf_r+0x2e>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d38:	e0d1      	b.n	8008ede <_svfiprintf_r+0x1d2>
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	616b      	str	r3, [r5, #20]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9309      	str	r3, [sp, #36]	; 0x24
 8008d42:	2320      	movs	r3, #32
 8008d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4c:	2330      	movs	r3, #48	; 0x30
 8008d4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ef8 <_svfiprintf_r+0x1ec>
 8008d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d56:	f04f 0901 	mov.w	r9, #1
 8008d5a:	4623      	mov	r3, r4
 8008d5c:	469a      	mov	sl, r3
 8008d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d62:	b10a      	cbz	r2, 8008d68 <_svfiprintf_r+0x5c>
 8008d64:	2a25      	cmp	r2, #37	; 0x25
 8008d66:	d1f9      	bne.n	8008d5c <_svfiprintf_r+0x50>
 8008d68:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6c:	d00b      	beq.n	8008d86 <_svfiprintf_r+0x7a>
 8008d6e:	465b      	mov	r3, fp
 8008d70:	4622      	mov	r2, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	4638      	mov	r0, r7
 8008d76:	f7ff ff6d 	bl	8008c54 <__ssputs_r>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f000 80aa 	beq.w	8008ed4 <_svfiprintf_r+0x1c8>
 8008d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d82:	445a      	add	r2, fp
 8008d84:	9209      	str	r2, [sp, #36]	; 0x24
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80a2 	beq.w	8008ed4 <_svfiprintf_r+0x1c8>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9a:	f10a 0a01 	add.w	sl, sl, #1
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	9307      	str	r3, [sp, #28]
 8008da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008da6:	931a      	str	r3, [sp, #104]	; 0x68
 8008da8:	4654      	mov	r4, sl
 8008daa:	2205      	movs	r2, #5
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	4851      	ldr	r0, [pc, #324]	; (8008ef8 <_svfiprintf_r+0x1ec>)
 8008db2:	f7f7 fa15 	bl	80001e0 <memchr>
 8008db6:	9a04      	ldr	r2, [sp, #16]
 8008db8:	b9d8      	cbnz	r0, 8008df2 <_svfiprintf_r+0xe6>
 8008dba:	06d0      	lsls	r0, r2, #27
 8008dbc:	bf44      	itt	mi
 8008dbe:	2320      	movmi	r3, #32
 8008dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc4:	0711      	lsls	r1, r2, #28
 8008dc6:	bf44      	itt	mi
 8008dc8:	232b      	movmi	r3, #43	; 0x2b
 8008dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dce:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd4:	d015      	beq.n	8008e02 <_svfiprintf_r+0xf6>
 8008dd6:	9a07      	ldr	r2, [sp, #28]
 8008dd8:	4654      	mov	r4, sl
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f04f 0c0a 	mov.w	ip, #10
 8008de0:	4621      	mov	r1, r4
 8008de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de6:	3b30      	subs	r3, #48	; 0x30
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d94e      	bls.n	8008e8a <_svfiprintf_r+0x17e>
 8008dec:	b1b0      	cbz	r0, 8008e1c <_svfiprintf_r+0x110>
 8008dee:	9207      	str	r2, [sp, #28]
 8008df0:	e014      	b.n	8008e1c <_svfiprintf_r+0x110>
 8008df2:	eba0 0308 	sub.w	r3, r0, r8
 8008df6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	46a2      	mov	sl, r4
 8008e00:	e7d2      	b.n	8008da8 <_svfiprintf_r+0x9c>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	1d19      	adds	r1, r3, #4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	9103      	str	r1, [sp, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfbb      	ittet	lt
 8008e0e:	425b      	neglt	r3, r3
 8008e10:	f042 0202 	orrlt.w	r2, r2, #2
 8008e14:	9307      	strge	r3, [sp, #28]
 8008e16:	9307      	strlt	r3, [sp, #28]
 8008e18:	bfb8      	it	lt
 8008e1a:	9204      	strlt	r2, [sp, #16]
 8008e1c:	7823      	ldrb	r3, [r4, #0]
 8008e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e20:	d10c      	bne.n	8008e3c <_svfiprintf_r+0x130>
 8008e22:	7863      	ldrb	r3, [r4, #1]
 8008e24:	2b2a      	cmp	r3, #42	; 0x2a
 8008e26:	d135      	bne.n	8008e94 <_svfiprintf_r+0x188>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfb8      	it	lt
 8008e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e38:	3402      	adds	r4, #2
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f08 <_svfiprintf_r+0x1fc>
 8008e40:	7821      	ldrb	r1, [r4, #0]
 8008e42:	2203      	movs	r2, #3
 8008e44:	4650      	mov	r0, sl
 8008e46:	f7f7 f9cb 	bl	80001e0 <memchr>
 8008e4a:	b140      	cbz	r0, 8008e5e <_svfiprintf_r+0x152>
 8008e4c:	2340      	movs	r3, #64	; 0x40
 8008e4e:	eba0 000a 	sub.w	r0, r0, sl
 8008e52:	fa03 f000 	lsl.w	r0, r3, r0
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	4303      	orrs	r3, r0
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	4826      	ldr	r0, [pc, #152]	; (8008efc <_svfiprintf_r+0x1f0>)
 8008e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e68:	2206      	movs	r2, #6
 8008e6a:	f7f7 f9b9 	bl	80001e0 <memchr>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d038      	beq.n	8008ee4 <_svfiprintf_r+0x1d8>
 8008e72:	4b23      	ldr	r3, [pc, #140]	; (8008f00 <_svfiprintf_r+0x1f4>)
 8008e74:	bb1b      	cbnz	r3, 8008ebe <_svfiprintf_r+0x1b2>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	3307      	adds	r3, #7
 8008e7a:	f023 0307 	bic.w	r3, r3, #7
 8008e7e:	3308      	adds	r3, #8
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e84:	4433      	add	r3, r6
 8008e86:	9309      	str	r3, [sp, #36]	; 0x24
 8008e88:	e767      	b.n	8008d5a <_svfiprintf_r+0x4e>
 8008e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8e:	460c      	mov	r4, r1
 8008e90:	2001      	movs	r0, #1
 8008e92:	e7a5      	b.n	8008de0 <_svfiprintf_r+0xd4>
 8008e94:	2300      	movs	r3, #0
 8008e96:	3401      	adds	r4, #1
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f04f 0c0a 	mov.w	ip, #10
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea6:	3a30      	subs	r2, #48	; 0x30
 8008ea8:	2a09      	cmp	r2, #9
 8008eaa:	d903      	bls.n	8008eb4 <_svfiprintf_r+0x1a8>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0c5      	beq.n	8008e3c <_svfiprintf_r+0x130>
 8008eb0:	9105      	str	r1, [sp, #20]
 8008eb2:	e7c3      	b.n	8008e3c <_svfiprintf_r+0x130>
 8008eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb8:	4604      	mov	r4, r0
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7f0      	b.n	8008ea0 <_svfiprintf_r+0x194>
 8008ebe:	ab03      	add	r3, sp, #12
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	462a      	mov	r2, r5
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <_svfiprintf_r+0x1f8>)
 8008ec6:	a904      	add	r1, sp, #16
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f3af 8000 	nop.w
 8008ece:	1c42      	adds	r2, r0, #1
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	d1d6      	bne.n	8008e82 <_svfiprintf_r+0x176>
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	065b      	lsls	r3, r3, #25
 8008ed8:	f53f af2c 	bmi.w	8008d34 <_svfiprintf_r+0x28>
 8008edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ede:	b01d      	add	sp, #116	; 0x74
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <_svfiprintf_r+0x1f8>)
 8008eec:	a904      	add	r1, sp, #16
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f000 f9d4 	bl	800929c <_printf_i>
 8008ef4:	e7eb      	b.n	8008ece <_svfiprintf_r+0x1c2>
 8008ef6:	bf00      	nop
 8008ef8:	08009950 	.word	0x08009950
 8008efc:	0800995a 	.word	0x0800995a
 8008f00:	00000000 	.word	0x00000000
 8008f04:	08008c55 	.word	0x08008c55
 8008f08:	08009956 	.word	0x08009956

08008f0c <__sfputc_r>:
 8008f0c:	6893      	ldr	r3, [r2, #8]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	b410      	push	{r4}
 8008f14:	6093      	str	r3, [r2, #8]
 8008f16:	da08      	bge.n	8008f2a <__sfputc_r+0x1e>
 8008f18:	6994      	ldr	r4, [r2, #24]
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	db01      	blt.n	8008f22 <__sfputc_r+0x16>
 8008f1e:	290a      	cmp	r1, #10
 8008f20:	d103      	bne.n	8008f2a <__sfputc_r+0x1e>
 8008f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f26:	f7ff bb0d 	b.w	8008544 <__swbuf_r>
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	1c58      	adds	r0, r3, #1
 8008f2e:	6010      	str	r0, [r2, #0]
 8008f30:	7019      	strb	r1, [r3, #0]
 8008f32:	4608      	mov	r0, r1
 8008f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <__sfputs_r>:
 8008f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	460f      	mov	r7, r1
 8008f40:	4614      	mov	r4, r2
 8008f42:	18d5      	adds	r5, r2, r3
 8008f44:	42ac      	cmp	r4, r5
 8008f46:	d101      	bne.n	8008f4c <__sfputs_r+0x12>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e007      	b.n	8008f5c <__sfputs_r+0x22>
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	463a      	mov	r2, r7
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ffda 	bl	8008f0c <__sfputc_r>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d1f3      	bne.n	8008f44 <__sfputs_r+0xa>
 8008f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f60 <_vfiprintf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	460d      	mov	r5, r1
 8008f66:	b09d      	sub	sp, #116	; 0x74
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4698      	mov	r8, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	b118      	cbz	r0, 8008f78 <_vfiprintf_r+0x18>
 8008f70:	6983      	ldr	r3, [r0, #24]
 8008f72:	b90b      	cbnz	r3, 8008f78 <_vfiprintf_r+0x18>
 8008f74:	f7ff fcc0 	bl	80088f8 <__sinit>
 8008f78:	4b89      	ldr	r3, [pc, #548]	; (80091a0 <_vfiprintf_r+0x240>)
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	d11b      	bne.n	8008fb6 <_vfiprintf_r+0x56>
 8008f7e:	6875      	ldr	r5, [r6, #4]
 8008f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d405      	bmi.n	8008f92 <_vfiprintf_r+0x32>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_vfiprintf_r+0x32>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8e:	f7ff fd51 	bl	8008a34 <__retarget_lock_acquire_recursive>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	071b      	lsls	r3, r3, #28
 8008f96:	d501      	bpl.n	8008f9c <_vfiprintf_r+0x3c>
 8008f98:	692b      	ldr	r3, [r5, #16]
 8008f9a:	b9eb      	cbnz	r3, 8008fd8 <_vfiprintf_r+0x78>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff fb22 	bl	80085e8 <__swsetup_r>
 8008fa4:	b1c0      	cbz	r0, 8008fd8 <_vfiprintf_r+0x78>
 8008fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa8:	07dc      	lsls	r4, r3, #31
 8008faa:	d50e      	bpl.n	8008fca <_vfiprintf_r+0x6a>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb0:	b01d      	add	sp, #116	; 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	4b7b      	ldr	r3, [pc, #492]	; (80091a4 <_vfiprintf_r+0x244>)
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	d101      	bne.n	8008fc0 <_vfiprintf_r+0x60>
 8008fbc:	68b5      	ldr	r5, [r6, #8]
 8008fbe:	e7df      	b.n	8008f80 <_vfiprintf_r+0x20>
 8008fc0:	4b79      	ldr	r3, [pc, #484]	; (80091a8 <_vfiprintf_r+0x248>)
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	bf08      	it	eq
 8008fc6:	68f5      	ldreq	r5, [r6, #12]
 8008fc8:	e7da      	b.n	8008f80 <_vfiprintf_r+0x20>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d4ed      	bmi.n	8008fac <_vfiprintf_r+0x4c>
 8008fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd2:	f7ff fd30 	bl	8008a36 <__retarget_lock_release_recursive>
 8008fd6:	e7e9      	b.n	8008fac <_vfiprintf_r+0x4c>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9309      	str	r3, [sp, #36]	; 0x24
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe6:	2330      	movs	r3, #48	; 0x30
 8008fe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091ac <_vfiprintf_r+0x24c>
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff0:	f04f 0901 	mov.w	r9, #1
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	469a      	mov	sl, r3
 8008ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffc:	b10a      	cbz	r2, 8009002 <_vfiprintf_r+0xa2>
 8008ffe:	2a25      	cmp	r2, #37	; 0x25
 8009000:	d1f9      	bne.n	8008ff6 <_vfiprintf_r+0x96>
 8009002:	ebba 0b04 	subs.w	fp, sl, r4
 8009006:	d00b      	beq.n	8009020 <_vfiprintf_r+0xc0>
 8009008:	465b      	mov	r3, fp
 800900a:	4622      	mov	r2, r4
 800900c:	4629      	mov	r1, r5
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ff93 	bl	8008f3a <__sfputs_r>
 8009014:	3001      	adds	r0, #1
 8009016:	f000 80aa 	beq.w	800916e <_vfiprintf_r+0x20e>
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	445a      	add	r2, fp
 800901e:	9209      	str	r2, [sp, #36]	; 0x24
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80a2 	beq.w	800916e <_vfiprintf_r+0x20e>
 800902a:	2300      	movs	r3, #0
 800902c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009034:	f10a 0a01 	add.w	sl, sl, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009040:	931a      	str	r3, [sp, #104]	; 0x68
 8009042:	4654      	mov	r4, sl
 8009044:	2205      	movs	r2, #5
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	4858      	ldr	r0, [pc, #352]	; (80091ac <_vfiprintf_r+0x24c>)
 800904c:	f7f7 f8c8 	bl	80001e0 <memchr>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	b9d8      	cbnz	r0, 800908c <_vfiprintf_r+0x12c>
 8009054:	06d1      	lsls	r1, r2, #27
 8009056:	bf44      	itt	mi
 8009058:	2320      	movmi	r3, #32
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800905e:	0713      	lsls	r3, r2, #28
 8009060:	bf44      	itt	mi
 8009062:	232b      	movmi	r3, #43	; 0x2b
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009068:	f89a 3000 	ldrb.w	r3, [sl]
 800906c:	2b2a      	cmp	r3, #42	; 0x2a
 800906e:	d015      	beq.n	800909c <_vfiprintf_r+0x13c>
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	4654      	mov	r4, sl
 8009074:	2000      	movs	r0, #0
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4621      	mov	r1, r4
 800907c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009080:	3b30      	subs	r3, #48	; 0x30
 8009082:	2b09      	cmp	r3, #9
 8009084:	d94e      	bls.n	8009124 <_vfiprintf_r+0x1c4>
 8009086:	b1b0      	cbz	r0, 80090b6 <_vfiprintf_r+0x156>
 8009088:	9207      	str	r2, [sp, #28]
 800908a:	e014      	b.n	80090b6 <_vfiprintf_r+0x156>
 800908c:	eba0 0308 	sub.w	r3, r0, r8
 8009090:	fa09 f303 	lsl.w	r3, r9, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	46a2      	mov	sl, r4
 800909a:	e7d2      	b.n	8009042 <_vfiprintf_r+0xe2>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	1d19      	adds	r1, r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	9103      	str	r1, [sp, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbb      	ittet	lt
 80090a8:	425b      	neglt	r3, r3
 80090aa:	f042 0202 	orrlt.w	r2, r2, #2
 80090ae:	9307      	strge	r3, [sp, #28]
 80090b0:	9307      	strlt	r3, [sp, #28]
 80090b2:	bfb8      	it	lt
 80090b4:	9204      	strlt	r2, [sp, #16]
 80090b6:	7823      	ldrb	r3, [r4, #0]
 80090b8:	2b2e      	cmp	r3, #46	; 0x2e
 80090ba:	d10c      	bne.n	80090d6 <_vfiprintf_r+0x176>
 80090bc:	7863      	ldrb	r3, [r4, #1]
 80090be:	2b2a      	cmp	r3, #42	; 0x2a
 80090c0:	d135      	bne.n	800912e <_vfiprintf_r+0x1ce>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9203      	str	r2, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfb8      	it	lt
 80090ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090d2:	3402      	adds	r4, #2
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091bc <_vfiprintf_r+0x25c>
 80090da:	7821      	ldrb	r1, [r4, #0]
 80090dc:	2203      	movs	r2, #3
 80090de:	4650      	mov	r0, sl
 80090e0:	f7f7 f87e 	bl	80001e0 <memchr>
 80090e4:	b140      	cbz	r0, 80090f8 <_vfiprintf_r+0x198>
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	eba0 000a 	sub.w	r0, r0, sl
 80090ec:	fa03 f000 	lsl.w	r0, r3, r0
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	4303      	orrs	r3, r0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	482c      	ldr	r0, [pc, #176]	; (80091b0 <_vfiprintf_r+0x250>)
 80090fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009102:	2206      	movs	r2, #6
 8009104:	f7f7 f86c 	bl	80001e0 <memchr>
 8009108:	2800      	cmp	r0, #0
 800910a:	d03f      	beq.n	800918c <_vfiprintf_r+0x22c>
 800910c:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <_vfiprintf_r+0x254>)
 800910e:	bb1b      	cbnz	r3, 8009158 <_vfiprintf_r+0x1f8>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	3307      	adds	r3, #7
 8009114:	f023 0307 	bic.w	r3, r3, #7
 8009118:	3308      	adds	r3, #8
 800911a:	9303      	str	r3, [sp, #12]
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	443b      	add	r3, r7
 8009120:	9309      	str	r3, [sp, #36]	; 0x24
 8009122:	e767      	b.n	8008ff4 <_vfiprintf_r+0x94>
 8009124:	fb0c 3202 	mla	r2, ip, r2, r3
 8009128:	460c      	mov	r4, r1
 800912a:	2001      	movs	r0, #1
 800912c:	e7a5      	b.n	800907a <_vfiprintf_r+0x11a>
 800912e:	2300      	movs	r3, #0
 8009130:	3401      	adds	r4, #1
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	4619      	mov	r1, r3
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009140:	3a30      	subs	r2, #48	; 0x30
 8009142:	2a09      	cmp	r2, #9
 8009144:	d903      	bls.n	800914e <_vfiprintf_r+0x1ee>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0c5      	beq.n	80090d6 <_vfiprintf_r+0x176>
 800914a:	9105      	str	r1, [sp, #20]
 800914c:	e7c3      	b.n	80090d6 <_vfiprintf_r+0x176>
 800914e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009152:	4604      	mov	r4, r0
 8009154:	2301      	movs	r3, #1
 8009156:	e7f0      	b.n	800913a <_vfiprintf_r+0x1da>
 8009158:	ab03      	add	r3, sp, #12
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	462a      	mov	r2, r5
 800915e:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <_vfiprintf_r+0x258>)
 8009160:	a904      	add	r1, sp, #16
 8009162:	4630      	mov	r0, r6
 8009164:	f3af 8000 	nop.w
 8009168:	4607      	mov	r7, r0
 800916a:	1c78      	adds	r0, r7, #1
 800916c:	d1d6      	bne.n	800911c <_vfiprintf_r+0x1bc>
 800916e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009170:	07d9      	lsls	r1, r3, #31
 8009172:	d405      	bmi.n	8009180 <_vfiprintf_r+0x220>
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	059a      	lsls	r2, r3, #22
 8009178:	d402      	bmi.n	8009180 <_vfiprintf_r+0x220>
 800917a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917c:	f7ff fc5b 	bl	8008a36 <__retarget_lock_release_recursive>
 8009180:	89ab      	ldrh	r3, [r5, #12]
 8009182:	065b      	lsls	r3, r3, #25
 8009184:	f53f af12 	bmi.w	8008fac <_vfiprintf_r+0x4c>
 8009188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800918a:	e711      	b.n	8008fb0 <_vfiprintf_r+0x50>
 800918c:	ab03      	add	r3, sp, #12
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	462a      	mov	r2, r5
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <_vfiprintf_r+0x258>)
 8009194:	a904      	add	r1, sp, #16
 8009196:	4630      	mov	r0, r6
 8009198:	f000 f880 	bl	800929c <_printf_i>
 800919c:	e7e4      	b.n	8009168 <_vfiprintf_r+0x208>
 800919e:	bf00      	nop
 80091a0:	08009910 	.word	0x08009910
 80091a4:	08009930 	.word	0x08009930
 80091a8:	080098f0 	.word	0x080098f0
 80091ac:	08009950 	.word	0x08009950
 80091b0:	0800995a 	.word	0x0800995a
 80091b4:	00000000 	.word	0x00000000
 80091b8:	08008f3b 	.word	0x08008f3b
 80091bc:	08009956 	.word	0x08009956

080091c0 <_printf_common>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	4616      	mov	r6, r2
 80091c6:	4699      	mov	r9, r3
 80091c8:	688a      	ldr	r2, [r1, #8]
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bfb8      	it	lt
 80091d4:	4613      	movlt	r3, r2
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091dc:	4607      	mov	r7, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b10a      	cbz	r2, 80091e6 <_printf_common+0x26>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0699      	lsls	r1, r3, #26
 80091ea:	bf42      	ittt	mi
 80091ec:	6833      	ldrmi	r3, [r6, #0]
 80091ee:	3302      	addmi	r3, #2
 80091f0:	6033      	strmi	r3, [r6, #0]
 80091f2:	6825      	ldr	r5, [r4, #0]
 80091f4:	f015 0506 	ands.w	r5, r5, #6
 80091f8:	d106      	bne.n	8009208 <_printf_common+0x48>
 80091fa:	f104 0a19 	add.w	sl, r4, #25
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	6832      	ldr	r2, [r6, #0]
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	42ab      	cmp	r3, r5
 8009206:	dc26      	bgt.n	8009256 <_printf_common+0x96>
 8009208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800920c:	1e13      	subs	r3, r2, #0
 800920e:	6822      	ldr	r2, [r4, #0]
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	0692      	lsls	r2, r2, #26
 8009216:	d42b      	bmi.n	8009270 <_printf_common+0xb0>
 8009218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800921c:	4649      	mov	r1, r9
 800921e:	4638      	mov	r0, r7
 8009220:	47c0      	blx	r8
 8009222:	3001      	adds	r0, #1
 8009224:	d01e      	beq.n	8009264 <_printf_common+0xa4>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	68e5      	ldr	r5, [r4, #12]
 800922a:	6832      	ldr	r2, [r6, #0]
 800922c:	f003 0306 	and.w	r3, r3, #6
 8009230:	2b04      	cmp	r3, #4
 8009232:	bf08      	it	eq
 8009234:	1aad      	subeq	r5, r5, r2
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	bf0c      	ite	eq
 800923c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009240:	2500      	movne	r5, #0
 8009242:	4293      	cmp	r3, r2
 8009244:	bfc4      	itt	gt
 8009246:	1a9b      	subgt	r3, r3, r2
 8009248:	18ed      	addgt	r5, r5, r3
 800924a:	2600      	movs	r6, #0
 800924c:	341a      	adds	r4, #26
 800924e:	42b5      	cmp	r5, r6
 8009250:	d11a      	bne.n	8009288 <_printf_common+0xc8>
 8009252:	2000      	movs	r0, #0
 8009254:	e008      	b.n	8009268 <_printf_common+0xa8>
 8009256:	2301      	movs	r3, #1
 8009258:	4652      	mov	r2, sl
 800925a:	4649      	mov	r1, r9
 800925c:	4638      	mov	r0, r7
 800925e:	47c0      	blx	r8
 8009260:	3001      	adds	r0, #1
 8009262:	d103      	bne.n	800926c <_printf_common+0xac>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926c:	3501      	adds	r5, #1
 800926e:	e7c6      	b.n	80091fe <_printf_common+0x3e>
 8009270:	18e1      	adds	r1, r4, r3
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	2030      	movs	r0, #48	; 0x30
 8009276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927a:	4422      	add	r2, r4
 800927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009284:	3302      	adds	r3, #2
 8009286:	e7c7      	b.n	8009218 <_printf_common+0x58>
 8009288:	2301      	movs	r3, #1
 800928a:	4622      	mov	r2, r4
 800928c:	4649      	mov	r1, r9
 800928e:	4638      	mov	r0, r7
 8009290:	47c0      	blx	r8
 8009292:	3001      	adds	r0, #1
 8009294:	d0e6      	beq.n	8009264 <_printf_common+0xa4>
 8009296:	3601      	adds	r6, #1
 8009298:	e7d9      	b.n	800924e <_printf_common+0x8e>
	...

0800929c <_printf_i>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	4691      	mov	r9, r2
 80092a4:	7e27      	ldrb	r7, [r4, #24]
 80092a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092a8:	2f78      	cmp	r7, #120	; 0x78
 80092aa:	4680      	mov	r8, r0
 80092ac:	469a      	mov	sl, r3
 80092ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092b2:	d807      	bhi.n	80092c4 <_printf_i+0x28>
 80092b4:	2f62      	cmp	r7, #98	; 0x62
 80092b6:	d80a      	bhi.n	80092ce <_printf_i+0x32>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	f000 80d8 	beq.w	800946e <_printf_i+0x1d2>
 80092be:	2f58      	cmp	r7, #88	; 0x58
 80092c0:	f000 80a3 	beq.w	800940a <_printf_i+0x16e>
 80092c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092cc:	e03a      	b.n	8009344 <_printf_i+0xa8>
 80092ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d2:	2b15      	cmp	r3, #21
 80092d4:	d8f6      	bhi.n	80092c4 <_printf_i+0x28>
 80092d6:	a001      	add	r0, pc, #4	; (adr r0, 80092dc <_printf_i+0x40>)
 80092d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009349 	.word	0x08009349
 80092e4:	080092c5 	.word	0x080092c5
 80092e8:	080092c5 	.word	0x080092c5
 80092ec:	080092c5 	.word	0x080092c5
 80092f0:	080092c5 	.word	0x080092c5
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080092c5 	.word	0x080092c5
 80092fc:	080092c5 	.word	0x080092c5
 8009300:	080092c5 	.word	0x080092c5
 8009304:	080092c5 	.word	0x080092c5
 8009308:	08009455 	.word	0x08009455
 800930c:	08009379 	.word	0x08009379
 8009310:	08009437 	.word	0x08009437
 8009314:	080092c5 	.word	0x080092c5
 8009318:	080092c5 	.word	0x080092c5
 800931c:	08009477 	.word	0x08009477
 8009320:	080092c5 	.word	0x080092c5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092c5 	.word	0x080092c5
 800932c:	080092c5 	.word	0x080092c5
 8009330:	0800943f 	.word	0x0800943f
 8009334:	680b      	ldr	r3, [r1, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	600a      	str	r2, [r1, #0]
 800933c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009344:	2301      	movs	r3, #1
 8009346:	e0a3      	b.n	8009490 <_printf_i+0x1f4>
 8009348:	6825      	ldr	r5, [r4, #0]
 800934a:	6808      	ldr	r0, [r1, #0]
 800934c:	062e      	lsls	r6, r5, #24
 800934e:	f100 0304 	add.w	r3, r0, #4
 8009352:	d50a      	bpl.n	800936a <_printf_i+0xce>
 8009354:	6805      	ldr	r5, [r0, #0]
 8009356:	600b      	str	r3, [r1, #0]
 8009358:	2d00      	cmp	r5, #0
 800935a:	da03      	bge.n	8009364 <_printf_i+0xc8>
 800935c:	232d      	movs	r3, #45	; 0x2d
 800935e:	426d      	negs	r5, r5
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009364:	485e      	ldr	r0, [pc, #376]	; (80094e0 <_printf_i+0x244>)
 8009366:	230a      	movs	r3, #10
 8009368:	e019      	b.n	800939e <_printf_i+0x102>
 800936a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800936e:	6805      	ldr	r5, [r0, #0]
 8009370:	600b      	str	r3, [r1, #0]
 8009372:	bf18      	it	ne
 8009374:	b22d      	sxthne	r5, r5
 8009376:	e7ef      	b.n	8009358 <_printf_i+0xbc>
 8009378:	680b      	ldr	r3, [r1, #0]
 800937a:	6825      	ldr	r5, [r4, #0]
 800937c:	1d18      	adds	r0, r3, #4
 800937e:	6008      	str	r0, [r1, #0]
 8009380:	0628      	lsls	r0, r5, #24
 8009382:	d501      	bpl.n	8009388 <_printf_i+0xec>
 8009384:	681d      	ldr	r5, [r3, #0]
 8009386:	e002      	b.n	800938e <_printf_i+0xf2>
 8009388:	0669      	lsls	r1, r5, #25
 800938a:	d5fb      	bpl.n	8009384 <_printf_i+0xe8>
 800938c:	881d      	ldrh	r5, [r3, #0]
 800938e:	4854      	ldr	r0, [pc, #336]	; (80094e0 <_printf_i+0x244>)
 8009390:	2f6f      	cmp	r7, #111	; 0x6f
 8009392:	bf0c      	ite	eq
 8009394:	2308      	moveq	r3, #8
 8009396:	230a      	movne	r3, #10
 8009398:	2100      	movs	r1, #0
 800939a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800939e:	6866      	ldr	r6, [r4, #4]
 80093a0:	60a6      	str	r6, [r4, #8]
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	bfa2      	ittt	ge
 80093a6:	6821      	ldrge	r1, [r4, #0]
 80093a8:	f021 0104 	bicge.w	r1, r1, #4
 80093ac:	6021      	strge	r1, [r4, #0]
 80093ae:	b90d      	cbnz	r5, 80093b4 <_printf_i+0x118>
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	d04d      	beq.n	8009450 <_printf_i+0x1b4>
 80093b4:	4616      	mov	r6, r2
 80093b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ba:	fb03 5711 	mls	r7, r3, r1, r5
 80093be:	5dc7      	ldrb	r7, [r0, r7]
 80093c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093c4:	462f      	mov	r7, r5
 80093c6:	42bb      	cmp	r3, r7
 80093c8:	460d      	mov	r5, r1
 80093ca:	d9f4      	bls.n	80093b6 <_printf_i+0x11a>
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d10b      	bne.n	80093e8 <_printf_i+0x14c>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	07df      	lsls	r7, r3, #31
 80093d4:	d508      	bpl.n	80093e8 <_printf_i+0x14c>
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	4299      	cmp	r1, r3
 80093dc:	bfde      	ittt	le
 80093de:	2330      	movle	r3, #48	; 0x30
 80093e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80093e8:	1b92      	subs	r2, r2, r6
 80093ea:	6122      	str	r2, [r4, #16]
 80093ec:	f8cd a000 	str.w	sl, [sp]
 80093f0:	464b      	mov	r3, r9
 80093f2:	aa03      	add	r2, sp, #12
 80093f4:	4621      	mov	r1, r4
 80093f6:	4640      	mov	r0, r8
 80093f8:	f7ff fee2 	bl	80091c0 <_printf_common>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d14c      	bne.n	800949a <_printf_i+0x1fe>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009404:	b004      	add	sp, #16
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	4835      	ldr	r0, [pc, #212]	; (80094e0 <_printf_i+0x244>)
 800940c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	680e      	ldr	r6, [r1, #0]
 8009414:	061f      	lsls	r7, r3, #24
 8009416:	f856 5b04 	ldr.w	r5, [r6], #4
 800941a:	600e      	str	r6, [r1, #0]
 800941c:	d514      	bpl.n	8009448 <_printf_i+0x1ac>
 800941e:	07d9      	lsls	r1, r3, #31
 8009420:	bf44      	itt	mi
 8009422:	f043 0320 	orrmi.w	r3, r3, #32
 8009426:	6023      	strmi	r3, [r4, #0]
 8009428:	b91d      	cbnz	r5, 8009432 <_printf_i+0x196>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	f023 0320 	bic.w	r3, r3, #32
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	2310      	movs	r3, #16
 8009434:	e7b0      	b.n	8009398 <_printf_i+0xfc>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	2378      	movs	r3, #120	; 0x78
 8009440:	4828      	ldr	r0, [pc, #160]	; (80094e4 <_printf_i+0x248>)
 8009442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009446:	e7e3      	b.n	8009410 <_printf_i+0x174>
 8009448:	065e      	lsls	r6, r3, #25
 800944a:	bf48      	it	mi
 800944c:	b2ad      	uxthmi	r5, r5
 800944e:	e7e6      	b.n	800941e <_printf_i+0x182>
 8009450:	4616      	mov	r6, r2
 8009452:	e7bb      	b.n	80093cc <_printf_i+0x130>
 8009454:	680b      	ldr	r3, [r1, #0]
 8009456:	6826      	ldr	r6, [r4, #0]
 8009458:	6960      	ldr	r0, [r4, #20]
 800945a:	1d1d      	adds	r5, r3, #4
 800945c:	600d      	str	r5, [r1, #0]
 800945e:	0635      	lsls	r5, r6, #24
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	d501      	bpl.n	8009468 <_printf_i+0x1cc>
 8009464:	6018      	str	r0, [r3, #0]
 8009466:	e002      	b.n	800946e <_printf_i+0x1d2>
 8009468:	0671      	lsls	r1, r6, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0x1c8>
 800946c:	8018      	strh	r0, [r3, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	4616      	mov	r6, r2
 8009474:	e7ba      	b.n	80093ec <_printf_i+0x150>
 8009476:	680b      	ldr	r3, [r1, #0]
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	600a      	str	r2, [r1, #0]
 800947c:	681e      	ldr	r6, [r3, #0]
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	2100      	movs	r1, #0
 8009482:	4630      	mov	r0, r6
 8009484:	f7f6 feac 	bl	80001e0 <memchr>
 8009488:	b108      	cbz	r0, 800948e <_printf_i+0x1f2>
 800948a:	1b80      	subs	r0, r0, r6
 800948c:	6060      	str	r0, [r4, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	6123      	str	r3, [r4, #16]
 8009492:	2300      	movs	r3, #0
 8009494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009498:	e7a8      	b.n	80093ec <_printf_i+0x150>
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	4632      	mov	r2, r6
 800949e:	4649      	mov	r1, r9
 80094a0:	4640      	mov	r0, r8
 80094a2:	47d0      	blx	sl
 80094a4:	3001      	adds	r0, #1
 80094a6:	d0ab      	beq.n	8009400 <_printf_i+0x164>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	079b      	lsls	r3, r3, #30
 80094ac:	d413      	bmi.n	80094d6 <_printf_i+0x23a>
 80094ae:	68e0      	ldr	r0, [r4, #12]
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	4298      	cmp	r0, r3
 80094b4:	bfb8      	it	lt
 80094b6:	4618      	movlt	r0, r3
 80094b8:	e7a4      	b.n	8009404 <_printf_i+0x168>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4632      	mov	r2, r6
 80094be:	4649      	mov	r1, r9
 80094c0:	4640      	mov	r0, r8
 80094c2:	47d0      	blx	sl
 80094c4:	3001      	adds	r0, #1
 80094c6:	d09b      	beq.n	8009400 <_printf_i+0x164>
 80094c8:	3501      	adds	r5, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	1a5b      	subs	r3, r3, r1
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dcf2      	bgt.n	80094ba <_printf_i+0x21e>
 80094d4:	e7eb      	b.n	80094ae <_printf_i+0x212>
 80094d6:	2500      	movs	r5, #0
 80094d8:	f104 0619 	add.w	r6, r4, #25
 80094dc:	e7f5      	b.n	80094ca <_printf_i+0x22e>
 80094de:	bf00      	nop
 80094e0:	08009961 	.word	0x08009961
 80094e4:	08009972 	.word	0x08009972

080094e8 <_sbrk_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f7 fca0 	bl	8000e38 <_sbrk>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_sbrk_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_sbrk_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20002094 	.word	0x20002094

08009508 <__sread>:
 8009508:	b510      	push	{r4, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009510:	f000 f8e0 	bl	80096d4 <_read_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	bfab      	itete	ge
 8009518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800951a:	89a3      	ldrhlt	r3, [r4, #12]
 800951c:	181b      	addge	r3, r3, r0
 800951e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009522:	bfac      	ite	ge
 8009524:	6563      	strge	r3, [r4, #84]	; 0x54
 8009526:	81a3      	strhlt	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__swrite>:
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	461f      	mov	r7, r3
 8009530:	898b      	ldrh	r3, [r1, #12]
 8009532:	05db      	lsls	r3, r3, #23
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d505      	bpl.n	8009548 <__swrite+0x1e>
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	2302      	movs	r3, #2
 8009542:	2200      	movs	r2, #0
 8009544:	f000 f868 	bl	8009618 <_lseek_r>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	f000 b817 	b.w	8009590 <_write_r>

08009562 <__sseek>:
 8009562:	b510      	push	{r4, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956a:	f000 f855 	bl	8009618 <_lseek_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	bf15      	itete	ne
 8009574:	6560      	strne	r0, [r4, #84]	; 0x54
 8009576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800957a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800957e:	81a3      	strheq	r3, [r4, #12]
 8009580:	bf18      	it	ne
 8009582:	81a3      	strhne	r3, [r4, #12]
 8009584:	bd10      	pop	{r4, pc}

08009586 <__sclose>:
 8009586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958a:	f000 b813 	b.w	80095b4 <_close_r>
	...

08009590 <_write_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_write_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f7 fbf9 	bl	8000d96 <_write>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_write_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_write_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20002094 	.word	0x20002094

080095b4 <_close_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_close_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f7 fc05 	bl	8000dce <_close>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_close_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_close_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20002094 	.word	0x20002094

080095d4 <_fstat_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d07      	ldr	r5, [pc, #28]	; (80095f4 <_fstat_r+0x20>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f7 fc00 	bl	8000de6 <_fstat>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_fstat_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_fstat_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	20002094 	.word	0x20002094

080095f8 <_isatty_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d06      	ldr	r5, [pc, #24]	; (8009614 <_isatty_r+0x1c>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	602b      	str	r3, [r5, #0]
 8009604:	f7f7 fbff 	bl	8000e06 <_isatty>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_isatty_r+0x1a>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_isatty_r+0x1a>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20002094 	.word	0x20002094

08009618 <_lseek_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	; (8009638 <_lseek_r+0x20>)
 800961c:	4604      	mov	r4, r0
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	2200      	movs	r2, #0
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7f7 fbf8 	bl	8000e1c <_lseek>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_lseek_r+0x1e>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_lseek_r+0x1e>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20002094 	.word	0x20002094

0800963c <memmove>:
 800963c:	4288      	cmp	r0, r1
 800963e:	b510      	push	{r4, lr}
 8009640:	eb01 0402 	add.w	r4, r1, r2
 8009644:	d902      	bls.n	800964c <memmove+0x10>
 8009646:	4284      	cmp	r4, r0
 8009648:	4623      	mov	r3, r4
 800964a:	d807      	bhi.n	800965c <memmove+0x20>
 800964c:	1e43      	subs	r3, r0, #1
 800964e:	42a1      	cmp	r1, r4
 8009650:	d008      	beq.n	8009664 <memmove+0x28>
 8009652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965a:	e7f8      	b.n	800964e <memmove+0x12>
 800965c:	4402      	add	r2, r0
 800965e:	4601      	mov	r1, r0
 8009660:	428a      	cmp	r2, r1
 8009662:	d100      	bne.n	8009666 <memmove+0x2a>
 8009664:	bd10      	pop	{r4, pc}
 8009666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800966e:	e7f7      	b.n	8009660 <memmove+0x24>

08009670 <__malloc_lock>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__malloc_lock+0x8>)
 8009672:	f7ff b9df 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 8009676:	bf00      	nop
 8009678:	2000208c 	.word	0x2000208c

0800967c <__malloc_unlock>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__malloc_unlock+0x8>)
 800967e:	f7ff b9da 	b.w	8008a36 <__retarget_lock_release_recursive>
 8009682:	bf00      	nop
 8009684:	2000208c 	.word	0x2000208c

08009688 <_realloc_r>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	4607      	mov	r7, r0
 800968c:	4614      	mov	r4, r2
 800968e:	460e      	mov	r6, r1
 8009690:	b921      	cbnz	r1, 800969c <_realloc_r+0x14>
 8009692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009696:	4611      	mov	r1, r2
 8009698:	f7ff ba82 	b.w	8008ba0 <_malloc_r>
 800969c:	b922      	cbnz	r2, 80096a8 <_realloc_r+0x20>
 800969e:	f7ff fa2f 	bl	8008b00 <_free_r>
 80096a2:	4625      	mov	r5, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a8:	f000 f826 	bl	80096f8 <_malloc_usable_size_r>
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d20f      	bcs.n	80096d0 <_realloc_r+0x48>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7ff fa74 	bl	8008ba0 <_malloc_r>
 80096b8:	4605      	mov	r5, r0
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0f2      	beq.n	80096a4 <_realloc_r+0x1c>
 80096be:	4631      	mov	r1, r6
 80096c0:	4622      	mov	r2, r4
 80096c2:	f7fe fe55 	bl	8008370 <memcpy>
 80096c6:	4631      	mov	r1, r6
 80096c8:	4638      	mov	r0, r7
 80096ca:	f7ff fa19 	bl	8008b00 <_free_r>
 80096ce:	e7e9      	b.n	80096a4 <_realloc_r+0x1c>
 80096d0:	4635      	mov	r5, r6
 80096d2:	e7e7      	b.n	80096a4 <_realloc_r+0x1c>

080096d4 <_read_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_read_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f7 fb3a 	bl	8000d5c <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_read_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_read_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20002094 	.word	0x20002094

080096f8 <_malloc_usable_size_r>:
 80096f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fc:	1f18      	subs	r0, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbc      	itt	lt
 8009702:	580b      	ldrlt	r3, [r1, r0]
 8009704:	18c0      	addlt	r0, r0, r3
 8009706:	4770      	bx	lr

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
